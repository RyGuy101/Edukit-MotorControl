
STM32F401RE-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018020  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e68  080181c0  080181c0  000281c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a028  0801a028  0002a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801a030  0801a030  0002a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a038  0801a038  0002a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b48  20000000  0801a03c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000528  20000b48  0801ab84  00030b48  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001070  0801ab84  00031070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019ce1  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d50  00000000  00000000  0004a859  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001398  00000000  00000000  0004d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000012c8  00000000  00000000  0004e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00004e15  00000000  00000000  0004fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000f341  00000000  00000000  00054a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009528f  00000000  00000000  00063d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000f8ff5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006478  00000000  00000000  000f9070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000b48 	.word	0x20000b48
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080181a8 	.word	0x080181a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000b4c 	.word	0x20000b4c
 80001dc:	080181a8 	.word	0x080181a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <L6474_AttachErrorHandler+0x1c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000c94 	.word	0x20000c94

08000fd8 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <L6474_AttachFlagInterrupt+0x1c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000c98 	.word	0x20000c98

08000ff8 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	21a8      	movs	r1, #168	; 0xa8
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fb12 	bl	8002630 <L6474_SendCommand>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	21b8      	movs	r1, #184	; 0xb8
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fb04 	bl	8002630 <L6474_SendCommand>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001040:	4b71      	ldr	r3, [pc, #452]	; (8001208 <L6474_CmdGetParam+0x1d8>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3b01      	subs	r3, #1
 800104e:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001050:	2300      	movs	r3, #0
 8001052:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001054:	4b6d      	ldr	r3, [pc, #436]	; (800120c <L6474_CmdGetParam+0x1dc>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800105a:	7cbb      	ldrb	r3, [r7, #18]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001060:	f002 fa01 	bl	8003466 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001064:	2300      	movs	r3, #0
 8001066:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e02b      	b.n	80010c6 <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 800106e:	4a68      	ldr	r2, [pc, #416]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4413      	add	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8001078:	4a65      	ldr	r2, [pc, #404]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	4413      	add	r3, r2
 800107e:	3303      	adds	r3, #3
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001084:	4a62      	ldr	r2, [pc, #392]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4413      	add	r3, r2
 800108a:	3306      	adds	r3, #6
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 8001090:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	4413      	add	r3, r2
 8001096:	3309      	adds	r3, #9
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 800109c:	4a5d      	ldr	r2, [pc, #372]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	4413      	add	r3, r2
 80010a2:	3303      	adds	r3, #3
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 80010a8:	4a5a      	ldr	r2, [pc, #360]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	4413      	add	r3, r2
 80010ae:	3306      	adds	r3, #6
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4413      	add	r3, r2
 80010ba:	3309      	adds	r3, #9
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	4b50      	ldr	r3, [pc, #320]	; (8001208 <L6474_CmdGetParam+0x1d8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d3cc      	bcc.n	800106e <L6474_CmdGetParam+0x3e>
    }
    switch (param)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	2b18      	cmp	r3, #24
 80010da:	d84d      	bhi.n	8001178 <L6474_CmdGetParam+0x148>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <L6474_CmdGetParam+0xb4>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	08001149 	.word	0x08001149
 80010e8:	0800115f 	.word	0x0800115f
 80010ec:	08001149 	.word	0x08001149
 80010f0:	08001179 	.word	0x08001179
 80010f4:	08001179 	.word	0x08001179
 80010f8:	08001179 	.word	0x08001179
 80010fc:	08001179 	.word	0x08001179
 8001100:	08001179 	.word	0x08001179
 8001104:	08001179 	.word	0x08001179
 8001108:	08001179 	.word	0x08001179
 800110c:	08001179 	.word	0x08001179
 8001110:	08001179 	.word	0x08001179
 8001114:	08001179 	.word	0x08001179
 8001118:	08001179 	.word	0x08001179
 800111c:	08001179 	.word	0x08001179
 8001120:	08001179 	.word	0x08001179
 8001124:	08001179 	.word	0x08001179
 8001128:	08001179 	.word	0x08001179
 800112c:	08001179 	.word	0x08001179
 8001130:	08001179 	.word	0x08001179
 8001134:	08001179 	.word	0x08001179
 8001138:	08001179 	.word	0x08001179
 800113c:	08001179 	.word	0x08001179
 8001140:	0800115f 	.word	0x0800115f
 8001144:	0800115f 	.word	0x0800115f
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	7c7b      	ldrb	r3, [r7, #17]
 800114e:	f042 0220 	orr.w	r2, r2, #32
 8001152:	b2d1      	uxtb	r1, r2
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 8001156:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8001158:	2303      	movs	r3, #3
 800115a:	74fb      	strb	r3, [r7, #19]
        break;
 800115c:	e018      	b.n	8001190 <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	7c7b      	ldrb	r3, [r7, #17]
 8001164:	f042 0220 	orr.w	r2, r2, #32
 8001168:	b2d1      	uxtb	r1, r2
 800116a:	4a29      	ldr	r2, [pc, #164]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 800116c:	4413      	add	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	74fb      	strb	r3, [r7, #19]
        break;
 8001176:	e00b      	b.n	8001190 <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	7c7b      	ldrb	r3, [r7, #17]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d1      	uxtb	r1, r2
 8001184:	4a22      	ldr	r2, [pc, #136]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 8001186:	4413      	add	r3, r2
 8001188:	460a      	mov	r2, r1
 800118a:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001190:	f002 f961 	bl	8003456 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001194:	2301      	movs	r3, #1
 8001196:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <L6474_CmdGetParam+0x1dc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f af58 	bne.w	8001054 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80011a4:	7cfb      	ldrb	r3, [r7, #19]
 80011a6:	f1c3 0303 	rsb	r3, r3, #3
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e011      	b.n	80011d2 <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <L6474_CmdGetParam+0x1e0>)
 80011b8:	1898      	adds	r0, r3, r2
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80011c4:	4413      	add	r3, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f002 f914 	bl	80033f4 <L6474_WriteBytes>
       i++)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d9ea      	bls.n	80011ae <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80011dc:	4413      	add	r3, r2
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 80011e2:	7c7a      	ldrb	r2, [r7, #17]
 80011e4:	490b      	ldr	r1, [pc, #44]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80011e6:	440a      	add	r2, r1
 80011e8:	7992      	ldrb	r2, [r2, #6]
 80011ea:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80011ec:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 80011ee:	7c7a      	ldrb	r2, [r7, #17]
 80011f0:	4908      	ldr	r1, [pc, #32]	; (8001214 <L6474_CmdGetParam+0x1e4>)
 80011f2:	440a      	add	r2, r1
 80011f4:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80011fa:	f002 f934 	bl	8003466 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000b64 	.word	0x20000b64
 800120c:	20000b80 	.word	0x20000b80
 8001210:	20000b68 	.word	0x20000b68
 8001214:	20000b74 	.word	0x20000b74

08001218 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <L6474_CmdGetStatus+0xfc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001232:	2300      	movs	r3, #0
 8001234:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <L6474_CmdGetStatus+0x100>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001242:	f002 f910 	bl	8003466 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001246:	2300      	movs	r3, #0
 8001248:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e01f      	b.n	8001290 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8001250:	4a32      	ldr	r2, [pc, #200]	; (800131c <L6474_CmdGetStatus+0x104>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <L6474_CmdGetStatus+0x104>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	3303      	adds	r3, #3
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8001266:	4a2d      	ldr	r2, [pc, #180]	; (800131c <L6474_CmdGetStatus+0x104>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	3306      	adds	r3, #6
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 8001272:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <L6474_CmdGetStatus+0x108>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	3303      	adds	r3, #3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 800127e:	4a28      	ldr	r2, [pc, #160]	; (8001320 <L6474_CmdGetStatus+0x108>)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	3306      	adds	r3, #6
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <L6474_CmdGetStatus+0xfc>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4293      	cmp	r3, r2
 800129c:	d3d8      	bcc.n	8001250 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 800129e:	7abb      	ldrb	r3, [r7, #10]
 80012a0:	4a1e      	ldr	r2, [pc, #120]	; (800131c <L6474_CmdGetStatus+0x104>)
 80012a2:	21d0      	movs	r1, #208	; 0xd0
 80012a4:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80012a6:	f002 f8d6 	bl	8003456 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80012aa:	2301      	movs	r3, #1
 80012ac:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <L6474_CmdGetStatus+0x100>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1be      	bne.n	8001236 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e011      	b.n	80012e2 <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <L6474_CmdGetStatus+0x104>)
 80012c8:	1898      	adds	r0, r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <L6474_CmdGetStatus+0x108>)
 80012d4:	4413      	add	r3, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 f88c 	bl	80033f4 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d9ea      	bls.n	80012be <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 80012e8:	7abb      	ldrb	r3, [r7, #10]
 80012ea:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <L6474_CmdGetStatus+0x108>)
 80012ec:	4413      	add	r3, r2
 80012ee:	78db      	ldrb	r3, [r3, #3]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7abb      	ldrb	r3, [r7, #10]
 80012f6:	490a      	ldr	r1, [pc, #40]	; (8001320 <L6474_CmdGetStatus+0x108>)
 80012f8:	440b      	add	r3, r1
 80012fa:	799b      	ldrb	r3, [r3, #6]
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001304:	f002 f8af 	bl	8003466 <L6474_Board_EnableIrq>
  
  return (status);
 8001308:	893b      	ldrh	r3, [r7, #8]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000b64 	.word	0x20000b64
 8001318:	20000b80 	.word	0x20000b80
 800131c:	20000b68 	.word	0x20000b68
 8001320:	20000b74 	.word	0x20000b74

08001324 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f97c 	bl	8002630 <L6474_SendCommand>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
 800134c:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001352:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <L6474_CmdSetParam+0x1b8>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8001362:	2300      	movs	r3, #0
 8001364:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 8001366:	4b65      	ldr	r3, [pc, #404]	; (80014fc <L6474_CmdSetParam+0x1bc>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800136c:	7cbb      	ldrb	r3, [r7, #18]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001372:	f002 f878 	bl	8003466 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001376:	2300      	movs	r3, #0
 8001378:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e019      	b.n	80013b4 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8001380:	4a5f      	ldr	r2, [pc, #380]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 800138a:	4a5d      	ldr	r2, [pc, #372]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4413      	add	r3, r2
 8001390:	3303      	adds	r3, #3
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001396:	4a5a      	ldr	r2, [pc, #360]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	3306      	adds	r3, #6
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80013a2:	4a57      	ldr	r2, [pc, #348]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4413      	add	r3, r2
 80013a8:	3309      	adds	r3, #9
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	4b50      	ldr	r3, [pc, #320]	; (80014f8 <L6474_CmdSetParam+0x1b8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4293      	cmp	r3, r2
 80013c0:	d3de      	bcc.n	8001380 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	2b17      	cmp	r3, #23
 80013c8:	d85c      	bhi.n	8001484 <L6474_CmdSetParam+0x144>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <L6474_CmdSetParam+0x90>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	08001431 	.word	0x08001431
 80013d4:	08001461 	.word	0x08001461
 80013d8:	08001431 	.word	0x08001431
 80013dc:	08001485 	.word	0x08001485
 80013e0:	08001485 	.word	0x08001485
 80013e4:	08001485 	.word	0x08001485
 80013e8:	08001485 	.word	0x08001485
 80013ec:	08001485 	.word	0x08001485
 80013f0:	08001485 	.word	0x08001485
 80013f4:	08001485 	.word	0x08001485
 80013f8:	08001485 	.word	0x08001485
 80013fc:	08001485 	.word	0x08001485
 8001400:	08001485 	.word	0x08001485
 8001404:	08001485 	.word	0x08001485
 8001408:	08001485 	.word	0x08001485
 800140c:	08001485 	.word	0x08001485
 8001410:	08001485 	.word	0x08001485
 8001414:	08001485 	.word	0x08001485
 8001418:	08001485 	.word	0x08001485
 800141c:	08001485 	.word	0x08001485
 8001420:	08001485 	.word	0x08001485
 8001424:	08001485 	.word	0x08001485
 8001428:	08001485 	.word	0x08001485
 800142c:	08001461 	.word	0x08001461
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001430:	7c7b      	ldrb	r3, [r7, #17]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	b2d1      	uxtb	r1, r2
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001438:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1a      	lsrs	r2, r3, #16
 800143e:	7c7b      	ldrb	r3, [r7, #17]
 8001440:	b2d1      	uxtb	r1, r2
 8001442:	4a2f      	ldr	r2, [pc, #188]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001444:	4413      	add	r3, r2
 8001446:	460a      	mov	r2, r1
 8001448:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0a1a      	lsrs	r2, r3, #8
 800144e:	7c7b      	ldrb	r3, [r7, #17]
 8001450:	b2d1      	uxtb	r1, r2
 8001452:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001454:	4413      	add	r3, r2
 8001456:	460a      	mov	r2, r1
 8001458:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 800145a:	2303      	movs	r3, #3
 800145c:	74fb      	strb	r3, [r7, #19]
        break;
 800145e:	e01a      	b.n	8001496 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8001460:	7c7b      	ldrb	r3, [r7, #17]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	b2d1      	uxtb	r1, r2
 8001466:	4a26      	ldr	r2, [pc, #152]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001468:	4413      	add	r3, r2
 800146a:	460a      	mov	r2, r1
 800146c:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0a1a      	lsrs	r2, r3, #8
 8001472:	7c7b      	ldrb	r3, [r7, #17]
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 8001478:	4413      	add	r3, r2
 800147a:	460a      	mov	r2, r1
 800147c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	74fb      	strb	r3, [r7, #19]
        break;
 8001482:	e008      	b.n	8001496 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001484:	7c7b      	ldrb	r3, [r7, #17]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	b2d1      	uxtb	r1, r2
 800148a:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 800148c:	4413      	add	r3, r2
 800148e:	460a      	mov	r2, r1
 8001490:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001496:	7c7b      	ldrb	r3, [r7, #17]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	b2d1      	uxtb	r1, r2
 800149c:	4a18      	ldr	r2, [pc, #96]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80014a4:	f001 ffd7 	bl	8003456 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <L6474_CmdSetParam+0x1bc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f af57 	bne.w	8001366 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80014b8:	7cfb      	ldrb	r3, [r7, #19]
 80014ba:	f1c3 0303 	rsb	r3, r3, #3
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e011      	b.n	80014e6 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <L6474_CmdSetParam+0x1c0>)
 80014cc:	1898      	adds	r0, r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <L6474_CmdSetParam+0x1c4>)
 80014d8:	4413      	add	r3, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f001 ff8a 	bl	80033f4 <L6474_WriteBytes>
       i++)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d9ea      	bls.n	80014c2 <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80014ec:	f001 ffbb 	bl	8003466 <L6474_Board_EnableIrq>
}
 80014f0:	bf00      	nop
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000b64 	.word	0x20000b64
 80014fc:	20000b80 	.word	0x20000b80
 8001500:	20000b68 	.word	0x20000b68
 8001504:	20000b74 	.word	0x20000b74

08001508 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <L6474_Init+0x94>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f001 ffae 	bl	8003478 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 800151c:	f002 f9a4 	bl	8003868 <L6474_Board_SpiInit>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8001526:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800152a:	f001 f855 	bl	80025d8 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <L6474_Init+0x94>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f002 f8c7 	bl	80036c8 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <L6474_Init+0x94>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f002 f93f 	bl	80037c4 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8001546:	2001      	movs	r0, #1
 8001548:	f001 ff7a 	bl	8003440 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <L6474_Init+0x94>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	f001 f95f 	bl	800281c <L6474_SetDeviceParamsToPredefinedValues>
 800155e:	e006      	b.n	800156e <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <L6474_Init+0x94>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f8b3 	bl	80026d4 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <L6474_Init+0x94>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fd3f 	bl	8000ff8 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <L6474_Init+0x94>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe49 	bl	8001218 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <L6474_Init+0x94>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <L6474_Init+0x94>)
 8001590:	801a      	strh	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000b82 	.word	0x20000b82

080015a0 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <L6474_GetAcceleration+0x2c>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	3318      	adds	r3, #24
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
}            
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000c1c 	.word	0x20000c1c

080015d0 <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd25 	bl	8001030 <L6474_CmdGetParam>
 80015e6:	60b8      	str	r0, [r7, #8]
  float value;
  switch (param)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d84b      	bhi.n	8001688 <L6474_GetAnalogValue+0xb8>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <L6474_GetAnalogValue+0x28>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001645 	.word	0x08001645
 80015fc:	08001689 	.word	0x08001689
 8001600:	08001645 	.word	0x08001645
 8001604:	08001689 	.word	0x08001689
 8001608:	08001689 	.word	0x08001689
 800160c:	08001689 	.word	0x08001689
 8001610:	08001689 	.word	0x08001689
 8001614:	08001689 	.word	0x08001689
 8001618:	08001659 	.word	0x08001659
 800161c:	08001689 	.word	0x08001689
 8001620:	08001689 	.word	0x08001689
 8001624:	08001689 	.word	0x08001689
 8001628:	08001689 	.word	0x08001689
 800162c:	08001689 	.word	0x08001689
 8001630:	08001679 	.word	0x08001679
 8001634:	08001679 	.word	0x08001679
 8001638:	08001689 	.word	0x08001689
 800163c:	08001689 	.word	0x08001689
 8001640:	08001669 	.word	0x08001669
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 8001644:	68b8      	ldr	r0, [r7, #8]
 8001646:	f000 ffa7 	bl	8002598 <L6474_ConvertPosition>
 800164a:	ee07 0a90 	vmov	s15, r0
 800164e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001652:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 8001656:	e01e      	b.n	8001696 <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fe7d 	bl	800335c <L6474_Tval_Par_to_Current>
 8001662:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 8001666:	e016      	b.n	8001696 <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fe39 	bl	80032e4 <L6474_Ocd_Par_to_Th>
 8001672:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 8001676:	e00e      	b.n	8001696 <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f001 fe85 	bl	800338c <L6474_Tmin_Par_to_Time>
 8001682:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 8001686:	e006      	b.n	8001696 <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	ee07 3a90 	vmov	s15, r3
}
 800169c:	eeb0 0a67 	vmov.f32	s0, s15
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <L6474_GetCurrentSpeed+0x2c>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3320      	adds	r3, #32
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000c1c 	.word	0x20000c1c

080016d8 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 80016e2:	79fa      	ldrb	r2, [r7, #7]
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <L6474_GetDeceleration+0x2c>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	331a      	adds	r3, #26
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
}          
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000c1c 	.word	0x20000c1c

08001708 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <L6474_GetDeviceState+0x2c>)
 8001716:	4613      	mov	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3324      	adds	r3, #36	; 0x24
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000c1c 	.word	0x20000c1c

08001738 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <L6474_GetDirection+0x2c>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	3323      	adds	r3, #35	; 0x23
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000c1c 	.word	0x20000c1c

08001768 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 800176c:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <L6474_GetMotorHandle+0x10>)
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	20000000 	.word	0x20000000

08001790 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2103      	movs	r1, #3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fc46 	bl	8001030 <L6474_CmdGetParam>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fef6 	bl	8002598 <L6474_ConvertPosition>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <L6474_GetMaxSpeed+0x2c>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	331c      	adds	r3, #28
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29b      	uxth	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000c1c 	.word	0x20000c1c

080017e8 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <L6474_GetMinSpeed+0x2c>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	331e      	adds	r3, #30
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	b29b      	uxth	r3, r3
}                                                     
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000c1c 	.word	0x20000c1c

08001818 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <L6474_GetNbDevices+0x14>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000b64 	.word	0x20000b64

08001830 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2101      	movs	r1, #1
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fbf6 	bl	8001030 <L6474_CmdGetParam>
 8001844:	4603      	mov	r3, r0
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fea6 	bl	8002598 <L6474_ConvertPosition>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2116      	movs	r1, #22
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbe2 	bl	8001030 <L6474_CmdGetParam>
 800186c:	4603      	mov	r3, r0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 800187c:	7bbb      	ldrb	r3, [r7, #14]
 800187e:	3b08      	subs	r3, #8
 8001880:	2b04      	cmp	r3, #4
 8001882:	d81c      	bhi.n	80018be <L6474_GetStepMode+0x66>
 8001884:	a201      	add	r2, pc, #4	; (adr r2, 800188c <L6474_GetStepMode+0x34>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	080018a1 	.word	0x080018a1
 8001890:	080018a7 	.word	0x080018a7
 8001894:	080018ad 	.word	0x080018ad
 8001898:	080018b3 	.word	0x080018b3
 800189c:	080018b9 	.word	0x080018b9
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]
      break;
 80018a4:	e00e      	b.n	80018c4 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      break;    
 80018aa:	e00b      	b.n	80018c4 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 80018ac:	2302      	movs	r3, #2
 80018ae:	73fb      	strb	r3, [r7, #15]
      break;        
 80018b0:	e008      	b.n	80018c4 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 80018b2:	2303      	movs	r3, #3
 80018b4:	73fb      	strb	r3, [r7, #15]
      break;       
 80018b6:	e005      	b.n	80018c4 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 80018b8:	2304      	movs	r3, #4
 80018ba:	73fb      	strb	r3, [r7, #15]
      break;
 80018bc:	e002      	b.n	80018c4 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 80018be:	23fe      	movs	r3, #254	; 0xfe
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;       
 80018c2:	bf00      	nop
  }
  
  return stepMode;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <L6474_GetStopMode+0x2c>)
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3325      	adds	r3, #37	; 0x25
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000c1c 	.word	0x20000c1c

08001900 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f81e 	bl	8001950 <L6474_GoTo>
} 
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2103      	movs	r1, #3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fb80 	bl	8001030 <L6474_CmdGetParam>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fe30 	bl	8002598 <L6474_ConvertPosition>
 8001938:	4603      	mov	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f804 	bl	8001950 <L6474_GoTo>
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	493a      	ldr	r1, [pc, #232]	; (8001a48 <L6474_GoTo+0xf8>)
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b08      	cmp	r3, #8
 8001972:	d003      	beq.n	800197c <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f868 	bl	8001a4c <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2101      	movs	r1, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fb55 	bl	8001030 <L6474_CmdGetParam>
 8001986:	4603      	mov	r3, r0
 8001988:	79fc      	ldrb	r4, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fe04 	bl	8002598 <L6474_ConvertPosition>
 8001990:	4601      	mov	r1, r0
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <L6474_GoTo+0xf8>)
 8001994:	4623      	mov	r3, r4
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4423      	add	r3, r4
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	3304      	adds	r3, #4
 80019a0:	6019      	str	r1, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4928      	ldr	r1, [pc, #160]	; (8001a48 <L6474_GoTo+0xf8>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3304      	adds	r3, #4
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	60bb      	str	r3, [r7, #8]
  
  if (steps >= 0) 
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0c      	blt.n	80019da <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	4820      	ldr	r0, [pc, #128]	; (8001a48 <L6474_GoTo+0xf8>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4403      	add	r3, r0
 80019d0:	3314      	adds	r3, #20
 80019d2:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e00d      	b.n	80019f6 <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	425b      	negs	r3, r3
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	4919      	ldr	r1, [pc, #100]	; (8001a48 <L6474_GoTo+0xf8>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3314      	adds	r3, #20
 80019f0:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d021      	beq.n	8001a40 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	4912      	ldr	r1, [pc, #72]	; (8001a48 <L6474_GoTo+0xf8>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3322      	adds	r3, #34	; 0x22
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fb48 	bl	80020ac <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001a1c:	79fa      	ldrb	r2, [r7, #7]
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <L6474_GoTo+0xf8>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3314      	adds	r3, #20
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fcf2 	bl	800241c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 f900 	bl	8002c40 <L6474_StartMovement>
  }  
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}
 8001a48:	20000c1c 	.word	0x20000c1c

08001a4c <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	4920      	ldr	r1, [pc, #128]	; (8001adc <L6474_HardStop+0x90>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3325      	adds	r3, #37	; 0x25
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d12d      	bne.n	8001aca <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f001 fe81 	bl	8003778 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4918      	ldr	r1, [pc, #96]	; (8001adc <L6474_HardStop+0x90>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3324      	adds	r3, #36	; 0x24
 8001a86:	2208      	movs	r2, #8
 8001a88:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	4913      	ldr	r1, [pc, #76]	; (8001adc <L6474_HardStop+0x90>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	3322      	adds	r3, #34	; 0x22
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001a9e:	79fa      	ldrb	r2, [r7, #7]
 8001aa0:	490e      	ldr	r1, [pc, #56]	; (8001adc <L6474_HardStop+0x90>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	3314      	adds	r3, #20
 8001aae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ab2:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	4909      	ldr	r1, [pc, #36]	; (8001adc <L6474_HardStop+0x90>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001ac8:	e003      	b.n	8001ad2 <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f807 	bl	8001ae0 <L6474_HizStop>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000c1c 	.word	0x20000c1c

08001ae0 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fe43 	bl	8003778 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fa7f 	bl	8000ff8 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	4915      	ldr	r1, [pc, #84]	; (8001b54 <L6474_HizStop+0x74>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3324      	adds	r3, #36	; 0x24
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	4910      	ldr	r1, [pc, #64]	; (8001b54 <L6474_HizStop+0x74>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3322      	adds	r3, #34	; 0x22
 8001b1e:	2203      	movs	r2, #3
 8001b20:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	490b      	ldr	r1, [pc, #44]	; (8001b54 <L6474_HizStop+0x74>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	440b      	add	r3, r1
 8001b30:	3314      	adds	r3, #20
 8001b32:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b36:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	4906      	ldr	r1, [pc, #24]	; (8001b54 <L6474_HizStop+0x74>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	440b      	add	r3, r1
 8001b46:	3320      	adds	r3, #32
 8001b48:	2200      	movs	r2, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000c1c 	.word	0x20000c1c

08001b58 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	603a      	str	r2, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
 8001b64:	460b      	mov	r3, r1
 8001b66:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001b68:	79fa      	ldrb	r2, [r7, #7]
 8001b6a:	4926      	ldr	r1, [pc, #152]	; (8001c04 <L6474_Move+0xac>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	3324      	adds	r3, #36	; 0x24
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d003      	beq.n	8001b88 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff62 	bl	8001a4c <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d035      	beq.n	8001bfa <L6474_Move+0xa2>
  {
    devicePrm[deviceId].stepsToTake = stepCount;
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	491c      	ldr	r1, [pc, #112]	; (8001c04 <L6474_Move+0xac>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3314      	adds	r3, #20
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	4917      	ldr	r1, [pc, #92]	; (8001c04 <L6474_Move+0xac>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3322      	adds	r3, #34	; 0x22
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fa38 	bl	8001030 <L6474_CmdGetParam>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	79fc      	ldrb	r4, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fce7 	bl	8002598 <L6474_ConvertPosition>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <L6474_Move+0xac>)
 8001bce:	4623      	mov	r3, r4
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4423      	add	r3, r4
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	6019      	str	r1, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001bdc:	79ba      	ldrb	r2, [r7, #6]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fa62 	bl	80020ac <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fc15 	bl	800241c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 f823 	bl	8002c40 <L6474_StartMovement>
  }  
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000c1c 	.word	0x20000c1c

08001c08 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <L6474_ReadId+0x14>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000b82 	.word	0x20000b82

08001c20 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2119      	movs	r1, #25
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f9fe 	bl	8001030 <L6474_CmdGetParam>
 8001c34:	4603      	mov	r3, r0
 8001c36:	b29b      	uxth	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 fdb9 	bl	80037c4 <L6474_Board_ReleaseReset>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fdbe 	bl	80037e8 <L6474_Board_Reset>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e014      	b.n	8001caa <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff2c 	bl	8001ae0 <L6474_HizStop>
    L6474_Reset(loop);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ffe5 	bl	8001c5a <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001c90:	2001      	movs	r0, #1
 8001c92:	f001 fbd5 	bl	8003440 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fd93 	bl	80037c4 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f001 fbce 	bl	8003440 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <L6474_ResetAllDevices+0x4c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3e4      	bcc.n	8001c80 <L6474_ResetAllDevices+0xc>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000b64 	.word	0x20000b64

08001cc4 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	4913      	ldr	r1, [pc, #76]	; (8001d24 <L6474_Run+0x60>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3324      	adds	r3, #36	; 0x24
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d003      	beq.n	8001cf4 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff feac 	bl	8001a4c <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001cf4:	79ba      	ldrb	r2, [r7, #6]
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f9d6 	bl	80020ac <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <L6474_Run+0x60>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3322      	adds	r3, #34	; 0x22
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 ff92 	bl	8002c40 <L6474_StartMovement>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000c1c 	.word	0x20000c1c

08001d28 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d816      	bhi.n	8001d6c <L6474_SelectStepMode+0x44>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <L6474_SelectStepMode+0x1c>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d5b 	.word	0x08001d5b
 8001d4c:	08001d61 	.word	0x08001d61
 8001d50:	08001d67 	.word	0x08001d67
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001d54:	2308      	movs	r3, #8
 8001d56:	73fb      	strb	r3, [r7, #15]
      break;
 8001d58:	e00b      	b.n	8001d72 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001d5a:	2309      	movs	r3, #9
 8001d5c:	73fb      	strb	r3, [r7, #15]
      break;    
 8001d5e:	e008      	b.n	8001d72 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001d60:	230a      	movs	r3, #10
 8001d62:	73fb      	strb	r3, [r7, #15]
      break;        
 8001d64:	e005      	b.n	8001d72 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001d66:	230b      	movs	r3, #11
 8001d68:	73fb      	strb	r3, [r7, #15]
      break;       
 8001d6a:	e002      	b.n	8001d72 <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	73fb      	strb	r3, [r7, #15]
      break;       
 8001d70:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff feb3 	bl	8001ae0 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2116      	movs	r1, #22
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f956 	bl	8001030 <L6474_CmdGetParam>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f023 0307 	bic.w	r3, r3, #7
 8001d8c:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001d8e:	7bba      	ldrb	r2, [r7, #14]
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2116      	movs	r1, #22
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff facf 	bl	8001340 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fac9 	bl	8001340 <L6474_CmdSetParam>
  
  return (1);
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	4914      	ldr	r1, [pc, #80]	; (8001e28 <L6474_SetAcceleration+0x70>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3324      	adds	r3, #36	; 0x24
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d00b      	beq.n	8001e02 <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	490e      	ldr	r1, [pc, #56]	; (8001e28 <L6474_SetAcceleration+0x70>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3322      	adds	r3, #34	; 0x22
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10b      	bne.n	8001e1a <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001e02:	79fa      	ldrb	r2, [r7, #7]
 8001e04:	4908      	ldr	r1, [pc, #32]	; (8001e28 <L6474_SetAcceleration+0x70>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	3318      	adds	r3, #24
 8001e12:	88ba      	ldrh	r2, [r7, #4]
 8001e14:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	20000c1c 	.word	0x20000c1c

08001e2c <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	d508      	bpl.n	8001e60 <L6474_SetAnalogValue+0x34>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <L6474_SetAnalogValue+0x34>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d002      	beq.n	8001e60 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	74fb      	strb	r3, [r7, #19]
 8001e5e:	e0d9      	b.n	8002014 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	2b12      	cmp	r3, #18
 8001e66:	f200 80ca 	bhi.w	8001ffe <L6474_SetAnalogValue+0x1d2>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <L6474_SetAnalogValue+0x44>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001f23 	.word	0x08001f23
 8001e74:	08001ebd 	.word	0x08001ebd
 8001e78:	08001f23 	.word	0x08001f23
 8001e7c:	08001fff 	.word	0x08001fff
 8001e80:	08001fff 	.word	0x08001fff
 8001e84:	08001fff 	.word	0x08001fff
 8001e88:	08001fff 	.word	0x08001fff
 8001e8c:	08001fff 	.word	0x08001fff
 8001e90:	08001f8d 	.word	0x08001f8d
 8001e94:	08001fff 	.word	0x08001fff
 8001e98:	08001fff 	.word	0x08001fff
 8001e9c:	08001fff 	.word	0x08001fff
 8001ea0:	08001fff 	.word	0x08001fff
 8001ea4:	08001fff 	.word	0x08001fff
 8001ea8:	08001fd9 	.word	0x08001fd9
 8001eac:	08001fd9 	.word	0x08001fd9
 8001eb0:	08001fff 	.word	0x08001fff
 8001eb4:	08001fff 	.word	0x08001fff
 8001eb8:	08001fb3 	.word	0x08001fb3
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	d021      	beq.n	8001f0e <L6474_SetAnalogValue+0xe2>
 8001eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ece:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002020 <L6474_SetAnalogValue+0x1f4>
 8001ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dc15      	bgt.n	8001f08 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001edc:	2116      	movs	r1, #22
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff f8a6 	bl	8001030 <L6474_CmdGetParam>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2201      	movs	r2, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001efa:	ed97 7a01 	vldr	s14, [r7, #4]
 8001efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d502      	bpl.n	8001f0e <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001f0c:	e079      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f16:	ee17 3a90 	vmov	r3, s15
 8001f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1e:	617b      	str	r3, [r7, #20]
        break;
 8001f20:	e06f      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f26:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002024 <L6474_SetAnalogValue+0x1f8>
 8001f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	db27      	blt.n	8001f84 <L6474_SetAnalogValue+0x158>
 8001f34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f38:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002028 <L6474_SetAnalogValue+0x1fc>
 8001f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d81e      	bhi.n	8001f84 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	db09      	blt.n	8001f68 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001f54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f64:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f66:	e010      	b.n	8001f8a <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001f68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6c:	eef1 7a67 	vneg.f32	s15, s15
 8001f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f74:	ee17 3a90 	vmov	r3, s15
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f82:	e002      	b.n	8001f8a <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001f88:	e03b      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
 8001f8a:	e03a      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001f8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f90:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800202c <L6474_SetAnalogValue+0x200>
 8001f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	dd02      	ble.n	8001fa4 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001fa2:	e02e      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001fa4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fa8:	f001 f9b4 	bl	8003314 <L6474_Tval_Current_to_Par>
 8001fac:	4603      	mov	r3, r0
 8001fae:	617b      	str	r3, [r7, #20]
        break;
 8001fb0:	e027      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002030 <L6474_SetAnalogValue+0x204>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	dd02      	ble.n	8001fca <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001fc8:	e01b      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001fca:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fce:	f001 f965 	bl	800329c <L6474_Ocd_Th_to_Par>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	617b      	str	r3, [r7, #20]
        break;
 8001fd6:	e014      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fdc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002034 <L6474_SetAnalogValue+0x208>
 8001fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe8:	dd02      	ble.n	8001ff0 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001fee:	e008      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001ff0:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ff4:	f001 f9e0 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	617b      	str	r3, [r7, #20]
        break;    
 8001ffc:	e001      	b.n	8002002 <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f996 	bl	8001340 <L6474_CmdSetParam>
    }
  }
  return result;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	43ff8000 	.word	0x43ff8000
 8002024:	ca000000 	.word	0xca000000
 8002028:	49fffff8 	.word	0x49fffff8
 800202c:	457a0000 	.word	0x457a0000
 8002030:	45bb8000 	.word	0x45bb8000
 8002034:	42800000 	.word	0x42800000

08002038 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	460a      	mov	r2, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 800204c:	88bb      	ldrh	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d023      	beq.n	800209a <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	4914      	ldr	r1, [pc, #80]	; (80020a8 <L6474_SetDeceleration+0x70>)
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3324      	adds	r3, #36	; 0x24
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8002066:	2b08      	cmp	r3, #8
 8002068:	d00b      	beq.n	8002082 <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <L6474_SetDeceleration+0x70>)
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3322      	adds	r3, #34	; 0x22
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	4908      	ldr	r1, [pc, #32]	; (80020a8 <L6474_SetDeceleration+0x70>)
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	331a      	adds	r3, #26
 8002092:	88ba      	ldrh	r2, [r7, #4]
 8002094:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}        
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20000c1c 	.word	0x20000c1c

080020ac <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	460a      	mov	r2, r1
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	490f      	ldr	r1, [pc, #60]	; (80020fc <L6474_SetDirection+0x50>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	3324      	adds	r3, #36	; 0x24
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d10f      	bne.n	80020f4 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	4909      	ldr	r1, [pc, #36]	; (80020fc <L6474_SetDirection+0x50>)
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3323      	adds	r3, #35	; 0x23
 80020e4:	79ba      	ldrb	r2, [r7, #6]
 80020e6:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 80020e8:	79ba      	ldrb	r2, [r7, #6]
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fb8c 	bl	800380c <L6474_Board_SetDirectionGpio>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000c1c 	.word	0x20000c1c

08002100 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ff8d 	bl	8001030 <L6474_CmdGetParam>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fa3d 	bl	8002598 <L6474_ConvertPosition>
 800211e:	4602      	mov	r2, r0
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db04      	blt.n	8002136 <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e005      	b.n	8002142 <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f8f9 	bl	8001340 <L6474_CmdSetParam>
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d807      	bhi.n	8002178 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <L6474_SetNbDevices+0x30>)
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <L6474_SetNbDevices+0x34>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8002178:	2300      	movs	r3, #0
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000b82 	.word	0x20000b82
 800218c:	20000b64 	.word	0x20000b64

08002190 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db04      	blt.n	80021ac <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e005      	b.n	80021b8 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	2103      	movs	r1, #3
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f8be 	bl	8001340 <L6474_CmdSetParam>
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	460a      	mov	r2, r1
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4613      	mov	r3, r2
 80021da:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d935      	bls.n	8002252 <L6474_SetMaxSpeed+0x86>
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d830      	bhi.n	8002252 <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 80021f0:	79fa      	ldrb	r2, [r7, #7]
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <L6474_SetMaxSpeed+0x94>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	331e      	adds	r3, #30
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d323      	bcc.n	8002252 <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800220a:	79fa      	ldrb	r2, [r7, #7]
 800220c:	4914      	ldr	r1, [pc, #80]	; (8002260 <L6474_SetMaxSpeed+0x94>)
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3324      	adds	r3, #36	; 0x24
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 800221e:	2b08      	cmp	r3, #8
 8002220:	d00b      	beq.n	800223a <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8002222:	79fa      	ldrb	r2, [r7, #7]
 8002224:	490e      	ldr	r1, [pc, #56]	; (8002260 <L6474_SetMaxSpeed+0x94>)
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	3322      	adds	r3, #34	; 0x22
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	4908      	ldr	r1, [pc, #32]	; (8002260 <L6474_SetMaxSpeed+0x94>)
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	331c      	adds	r3, #28
 800224a:	88ba      	ldrh	r2, [r7, #4]
 800224c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	20000c1c 	.word	0x20000c1c

08002264 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	460a      	mov	r2, r1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	4613      	mov	r3, r2
 8002272:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8002278:	88bb      	ldrh	r3, [r7, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d935      	bls.n	80022ea <L6474_SetMinSpeed+0x86>
 800227e:	88bb      	ldrh	r3, [r7, #4]
 8002280:	f242 7210 	movw	r2, #10000	; 0x2710
 8002284:	4293      	cmp	r3, r2
 8002286:	d830      	bhi.n	80022ea <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002288:	79fa      	ldrb	r2, [r7, #7]
 800228a:	491b      	ldr	r1, [pc, #108]	; (80022f8 <L6474_SetMinSpeed+0x94>)
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	331c      	adds	r3, #28
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d823      	bhi.n	80022ea <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4914      	ldr	r1, [pc, #80]	; (80022f8 <L6474_SetMinSpeed+0x94>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3324      	adds	r3, #36	; 0x24
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d00b      	beq.n	80022d2 <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <L6474_SetMinSpeed+0x94>)
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3322      	adds	r3, #34	; 0x22
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	4908      	ldr	r1, [pc, #32]	; (80022f8 <L6474_SetMinSpeed+0x94>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	331e      	adds	r3, #30
 80022e2:	88ba      	ldrh	r2, [r7, #4]
 80022e4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
}                 
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	20000c1c 	.word	0x20000c1c

080022fc <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	4907      	ldr	r1, [pc, #28]	; (800232c <L6474_SetStopMode+0x30>)
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3325      	adds	r3, #37	; 0x25
 800231c:	79ba      	ldrb	r2, [r7, #6]
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20000c1c 	.word	0x20000c1c

08002330 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	490e      	ldr	r1, [pc, #56]	; (800237c <L6474_SoftStop+0x4c>)
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	440b      	add	r3, r1
 800234c:	3324      	adds	r3, #36	; 0x24
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b08      	cmp	r3, #8
 8002354:	d00b      	beq.n	800236e <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	4908      	ldr	r1, [pc, #32]	; (800237c <L6474_SoftStop+0x4c>)
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	3322      	adds	r3, #34	; 0x22
 8002366:	2202      	movs	r2, #2
 8002368:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000c1c 	.word	0x20000c1c

08002380 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 800238a:	bf00      	nop
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9ba 	bl	8001708 <L6474_GetDeviceState>
 8002394:	4603      	mov	r3, r0
 8002396:	2b08      	cmp	r3, #8
 8002398:	d1f8      	bne.n	800238c <L6474_WaitWhileActive+0xc>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	460a      	mov	r2, r1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d801      	bhi.n	80023be <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80023ba:	2302      	movs	r3, #2
 80023bc:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d902      	bls.n	80023ce <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80023c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80023cc:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	4911      	ldr	r1, [pc, #68]	; (8002418 <L6474_ApplySpeed+0x74>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3320      	adds	r3, #32
 80023de:	88ba      	ldrh	r2, [r7, #4]
 80023e0:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d009      	beq.n	80023fc <L6474_ApplySpeed+0x58>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d00c      	beq.n	8002406 <L6474_ApplySpeed+0x62>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d000      	beq.n	80023f2 <L6474_ApplySpeed+0x4e>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 80023f0:	e00e      	b.n	8002410 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm1SetFreq(newSpeed);
 80023f2:	88bb      	ldrh	r3, [r7, #4]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 f8ef 	bl	80035d8 <L6474_Board_Pwm1SetFreq>
      break;
 80023fa:	e009      	b.n	8002410 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm2SetFreq(newSpeed);
 80023fc:	88bb      	ldrh	r3, [r7, #4]
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f912 	bl	8003628 <L6474_Board_Pwm2SetFreq>
      break;
 8002404:	e004      	b.n	8002410 <L6474_ApplySpeed+0x6c>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002406:	88bb      	ldrh	r3, [r7, #4]
 8002408:	4618      	mov	r0, r3
 800240a:	f001 f935 	bl	8003678 <L6474_Board_Pwm3SetFreq>
      break;
 800240e:	bf00      	nop
  }
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000c1c 	.word	0x20000c1c

0800241c <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	495a      	ldr	r1, [pc, #360]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	331e      	adds	r3, #30
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	4955      	ldr	r1, [pc, #340]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	440b      	add	r3, r1
 800244a:	331c      	adds	r3, #28
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	8b7b      	ldrh	r3, [r7, #26]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	494e      	ldr	r1, [pc, #312]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	331c      	adds	r3, #28
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	8b7b      	ldrh	r3, [r7, #26]
 8002470:	4413      	add	r3, r2
 8002472:	461a      	mov	r2, r3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	4944      	ldr	r1, [pc, #272]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	440b      	add	r3, r1
 800248e:	3318      	adds	r3, #24
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fbb3 f3f2 	udiv	r3, r3, r2
 800249c:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	493b      	ldr	r1, [pc, #236]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	331a      	adds	r3, #26
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d242      	bcs.n	800255a <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	492f      	ldr	r1, [pc, #188]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	331a      	adds	r3, #26
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 80024ea:	79fa      	ldrb	r2, [r7, #7]
 80024ec:	4929      	ldr	r1, [pc, #164]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	3318      	adds	r3, #24
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	fb02 f203 	mul.w	r2, r2, r3
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	440b      	add	r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d908      	bls.n	800252c <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3b01      	subs	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e001      	b.n	8002530 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8002530:	79fa      	ldrb	r2, [r7, #7]
 8002532:	4918      	ldr	r1, [pc, #96]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	3308      	adds	r3, #8
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 8002544:	79fa      	ldrb	r2, [r7, #7]
 8002546:	4913      	ldr	r1, [pc, #76]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	3310      	adds	r3, #16
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8002558:	e016      	b.n	8002588 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	490d      	ldr	r1, [pc, #52]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3308      	adds	r3, #8
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	79fa      	ldrb	r2, [r7, #7]
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <L6474_ComputeSpeedProfile+0x178>)
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4403      	add	r3, r0
 8002584:	3310      	adds	r3, #16
 8002586:	6019      	str	r1, [r3, #0]
}
 8002588:	bf00      	nop
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	20000c1c 	.word	0x20000c1c

08002598 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3301      	adds	r3, #1
 80025b4:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80025bc:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	425b      	negs	r3, r3
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e001      	b.n	80025ca <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <L6474_ErrorHandler+0x28>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <L6474_ErrorHandler+0x28>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	4610      	mov	r0, r2
 80025f2:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 80025f4:	e000      	b.n	80025f8 <L6474_ErrorHandler+0x20>
    while(1)
 80025f6:	e7fe      	b.n	80025f6 <L6474_ErrorHandler+0x1e>
}
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000c94 	.word	0x20000c94

08002604 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <L6474_FlagInterruptHandler+0x24>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002610:	4b06      	ldr	r3, [pc, #24]	; (800262c <L6474_FlagInterruptHandler+0x28>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <L6474_FlagInterruptHandler+0x24>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <L6474_FlagInterruptHandler+0x28>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
  }
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000c98 	.word	0x20000c98
 800262c:	20000b81 	.word	0x20000b81

08002630 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	460a      	mov	r2, r1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4613      	mov	r3, r2
 800263e:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <L6474_SendCommand+0x90>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8002650:	2300      	movs	r3, #0
 8002652:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <L6474_SendCommand+0x94>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002660:	f000 ff01 	bl	8003466 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8002664:	2300      	movs	r3, #0
 8002666:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e008      	b.n	8002680 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 800266e:	4a16      	ldr	r2, [pc, #88]	; (80026c8 <L6474_SendCommand+0x98>)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	3309      	adds	r3, #9
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3301      	adds	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <L6474_SendCommand+0x90>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4293      	cmp	r3, r2
 800268c:	d3ef      	bcc.n	800266e <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <L6474_SendCommand+0x98>)
 8002692:	4413      	add	r3, r2
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002698:	f000 fedd 	bl	8003456 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800269c:	2301      	movs	r3, #1
 800269e:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <L6474_SendCommand+0x94>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1d4      	bne.n	8002654 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <L6474_SendCommand+0x9c>)
 80026ac:	4808      	ldr	r0, [pc, #32]	; (80026d0 <L6474_SendCommand+0xa0>)
 80026ae:	f000 fea1 	bl	80033f4 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80026b2:	f000 fed8 	bl	8003466 <L6474_Board_EnableIrq>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000b64 	.word	0x20000b64
 80026c4:	20000b80 	.word	0x20000b80
 80026c8:	20000b68 	.word	0x20000b68
 80026cc:	20000b7d 	.word	0x20000b7d
 80026d0:	20000b71 	.word	0x20000b71

080026d4 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	8818      	ldrh	r0, [r3, #0]
 80026e6:	494c      	ldr	r1, [pc, #304]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	3318      	adds	r3, #24
 80026f4:	4602      	mov	r2, r0
 80026f6:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 80026f8:	79fa      	ldrb	r2, [r7, #7]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	8858      	ldrh	r0, [r3, #2]
 80026fe:	4946      	ldr	r1, [pc, #280]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	331a      	adds	r3, #26
 800270c:	4602      	mov	r2, r0
 800270e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	8898      	ldrh	r0, [r3, #4]
 8002716:	4940      	ldr	r1, [pc, #256]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	331c      	adds	r3, #28
 8002724:	4602      	mov	r2, r0
 8002726:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002728:	79fa      	ldrb	r2, [r7, #7]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	88d8      	ldrh	r0, [r3, #6]
 800272e:	493a      	ldr	r1, [pc, #232]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	331e      	adds	r3, #30
 800273c:	4602      	mov	r2, r0
 800273e:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	4935      	ldr	r1, [pc, #212]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002752:	79fa      	ldrb	r2, [r7, #7]
 8002754:	4930      	ldr	r1, [pc, #192]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3304      	adds	r3, #4
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002766:	79fa      	ldrb	r2, [r7, #7]
 8002768:	492b      	ldr	r1, [pc, #172]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3308      	adds	r3, #8
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	4926      	ldr	r1, [pc, #152]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	330c      	adds	r3, #12
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 800278e:	79fa      	ldrb	r2, [r7, #7]
 8002790:	4921      	ldr	r1, [pc, #132]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3310      	adds	r3, #16
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80027a2:	79fa      	ldrb	r2, [r7, #7]
 80027a4:	491c      	ldr	r1, [pc, #112]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	3314      	adds	r3, #20
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80027b6:	79fa      	ldrb	r2, [r7, #7]
 80027b8:	4917      	ldr	r1, [pc, #92]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	3320      	adds	r3, #32
 80027c6:	2200      	movs	r2, #0
 80027c8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 80027ca:	79fa      	ldrb	r2, [r7, #7]
 80027cc:	4912      	ldr	r1, [pc, #72]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	3322      	adds	r3, #34	; 0x22
 80027da:	2203      	movs	r2, #3
 80027dc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 80027de:	79fa      	ldrb	r2, [r7, #7]
 80027e0:	490d      	ldr	r1, [pc, #52]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	3323      	adds	r3, #35	; 0x23
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 80027f2:	79fa      	ldrb	r2, [r7, #7]
 80027f4:	4908      	ldr	r1, [pc, #32]	; (8002818 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	3324      	adds	r3, #36	; 0x24
 8002802:	2208      	movs	r2, #8
 8002804:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	6839      	ldr	r1, [r7, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f8a4 	bl	8002958 <L6474_SetRegisterToGivenValues>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000c1c 	.word	0x20000c1c

0800281c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	494a      	ldr	r1, [pc, #296]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3318      	adds	r3, #24
 8002836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	4945      	ldr	r1, [pc, #276]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	331a      	adds	r3, #26
 800284c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002850:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	493f      	ldr	r1, [pc, #252]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	331c      	adds	r3, #28
 8002862:	f242 7210 	movw	r2, #10000	; 0x2710
 8002866:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 8002868:	79fa      	ldrb	r2, [r7, #7]
 800286a:	493a      	ldr	r1, [pc, #232]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	440b      	add	r3, r1
 8002876:	331e      	adds	r3, #30
 8002878:	2264      	movs	r2, #100	; 0x64
 800287a:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	4935      	ldr	r1, [pc, #212]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	440b      	add	r3, r1
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 800288e:	79fa      	ldrb	r2, [r7, #7]
 8002890:	4930      	ldr	r1, [pc, #192]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	3304      	adds	r3, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80028a2:	79fa      	ldrb	r2, [r7, #7]
 80028a4:	492b      	ldr	r1, [pc, #172]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3308      	adds	r3, #8
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80028b6:	79fa      	ldrb	r2, [r7, #7]
 80028b8:	4926      	ldr	r1, [pc, #152]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	330c      	adds	r3, #12
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80028ca:	79fa      	ldrb	r2, [r7, #7]
 80028cc:	4921      	ldr	r1, [pc, #132]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	3310      	adds	r3, #16
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 80028de:	79fa      	ldrb	r2, [r7, #7]
 80028e0:	491c      	ldr	r1, [pc, #112]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	3314      	adds	r3, #20
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	4917      	ldr	r1, [pc, #92]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3320      	adds	r3, #32
 8002902:	2200      	movs	r2, #0
 8002904:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	4912      	ldr	r1, [pc, #72]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3322      	adds	r3, #34	; 0x22
 8002916:	2203      	movs	r2, #3
 8002918:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	490d      	ldr	r1, [pc, #52]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3323      	adds	r3, #35	; 0x23
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	4908      	ldr	r1, [pc, #32]	; (8002954 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	3324      	adds	r3, #36	; 0x24
 800293e:	2208      	movs	r2, #8
 8002940:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f883 	bl	8002a50 <L6474_SetRegisterToPredefinedValues>

}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000c1c 	.word	0x20000c1c

08002958 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fce8 	bl	8001340 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	2200      	movs	r2, #0
 8002974:	2102      	movs	r1, #2
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fce2 	bl	8001340 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2200      	movs	r2, #0
 8002980:	2103      	movs	r1, #3
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fcdc 	bl	8001340 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	edd3 7a02 	vldr	s15, [r3, #8]
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	eeb0 0a67 	vmov.f32	s0, s15
 8002994:	2109      	movs	r1, #9
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fa48 	bl	8001e2c <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 80029a4:	4313      	orrs	r3, r2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	210e      	movs	r1, #14
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fcc6 	bl	8001340 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	210f      	movs	r1, #15
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fa32 	bl	8001e2c <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	2110      	movs	r1, #16
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fa28 	bl	8001e2c <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	edd3 7a03 	vldr	s15, [r3, #12]
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	eeb0 0a67 	vmov.f32	s0, s15
 80029e8:	2113      	movs	r1, #19
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fa1e 	bl	8001e2c <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	2116      	movs	r1, #22
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fc9c 	bl	8001340 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	2117      	movs	r1, #23
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fc95 	bl	8001340 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	7c5b      	ldrb	r3, [r3, #17]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002a32:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002a38:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	2118      	movs	r1, #24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe fc7d 	bl	8001340 <L6474_CmdSetParam>
  
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fc6d 	bl	8001340 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fc67 	bl	8001340 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2103      	movs	r1, #3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fc61 	bl	8001340 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d04b      	beq.n	8002b1c <L6474_SetRegisterToPredefinedValues+0xcc>
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	f000 808f 	beq.w	8002ba8 <L6474_SetRegisterToPredefinedValues+0x158>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d000      	beq.n	8002a90 <L6474_SetRegisterToPredefinedValues+0x40>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002a8e:	e0d1      	b.n	8002c34 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002a90:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8002c3c <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002a94:	f000 fc3e 	bl	8003314 <L6474_Tval_Current_to_Par>
 8002a98:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	2109      	movs	r1, #9
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fc4d 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2235      	movs	r2, #53	; 0x35
 8002aaa:	210e      	movs	r1, #14
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fc47 	bl	8001340 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002ab2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002ab6:	f000 fc7f 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002aba:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002abc:	461a      	mov	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fc3c 	bl	8001340 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002ac8:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002acc:	f000 fc74 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002ad0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fc31 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	2113      	movs	r1, #19
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fc2b 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	228c      	movs	r2, #140	; 0x8c
 8002aee:	2116      	movs	r1, #22
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fc25 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	22cf      	movs	r2, #207	; 0xcf
 8002afa:	2117      	movs	r1, #23
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fc1f 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002b08:	2118      	movs	r1, #24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fc18 	bl	8001340 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fbf1 	bl	80022fc <L6474_SetStopMode>
      break;
 8002b1a:	e08b      	b.n	8002c34 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002b1c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002c3c <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002b20:	f000 fbf8 	bl	8003314 <L6474_Tval_Current_to_Par>
 8002b24:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b26:	461a      	mov	r2, r3
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2109      	movs	r1, #9
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc07 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	2235      	movs	r2, #53	; 0x35
 8002b36:	210e      	movs	r1, #14
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fc01 	bl	8001340 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002b3e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002b42:	f000 fc39 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002b46:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	210f      	movs	r1, #15
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fbf6 	bl	8001340 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002b54:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002b58:	f000 fc2e 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002b5c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b5e:	461a      	mov	r2, r3
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	2110      	movs	r1, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fbeb 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	2113      	movs	r1, #19
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fbe5 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	228c      	movs	r2, #140	; 0x8c
 8002b7a:	2116      	movs	r1, #22
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe fbdf 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	22cf      	movs	r2, #207	; 0xcf
 8002b86:	2117      	movs	r1, #23
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fbd9 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002b94:	2118      	movs	r1, #24
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fbd2 	bl	8001340 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbab 	bl	80022fc <L6474_SetStopMode>
      break;
 8002ba6:	e045      	b.n	8002c34 <L6474_SetRegisterToPredefinedValues+0x1e4>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002ba8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002c3c <L6474_SetRegisterToPredefinedValues+0x1ec>
 8002bac:	f000 fbb2 	bl	8003314 <L6474_Tval_Current_to_Par>
 8002bb0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2109      	movs	r1, #9
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe fbc1 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	2235      	movs	r2, #53	; 0x35
 8002bc2:	210e      	movs	r1, #14
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fbbb 	bl	8001340 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002bca:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002bce:	f000 fbf3 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002bd2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	210f      	movs	r1, #15
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fbb0 	bl	8001340 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002be0:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002be4:	f000 fbe8 	bl	80033b8 <L6474_Tmin_Time_to_Par>
 8002be8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002bea:	461a      	mov	r2, r3
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2110      	movs	r1, #16
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fba5 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	2113      	movs	r1, #19
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fb9f 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	228c      	movs	r2, #140	; 0x8c
 8002c06:	2116      	movs	r1, #22
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fb99 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	22cf      	movs	r2, #207	; 0xcf
 8002c12:	2117      	movs	r1, #23
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe fb93 	bl	8001340 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002c20:	2118      	movs	r1, #24
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fb8c 	bl	8001340 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb65 	bl	80022fc <L6474_SetStopMode>
      break;
 8002c32:	bf00      	nop
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	44480000 	.word	0x44480000

08002c40 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f9e1 	bl	8001014 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	4922      	ldr	r1, [pc, #136]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	3308      	adds	r3, #8
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002c68:	79fa      	ldrb	r2, [r7, #7]
 8002c6a:	491d      	ldr	r1, [pc, #116]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	3324      	adds	r3, #36	; 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e009      	b.n	8002c92 <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4917      	ldr	r1, [pc, #92]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3324      	adds	r3, #36	; 0x24
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	4912      	ldr	r1, [pc, #72]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	440b      	add	r3, r1
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002ca4:	79fa      	ldrb	r2, [r7, #7]
 8002ca6:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002cb8:	79fa      	ldrb	r2, [r7, #7]
 8002cba:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <L6474_StartMovement+0xa0>)
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	331e      	adds	r3, #30
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fb67 	bl	80023a4 <L6474_ApplySpeed>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000c1c 	.word	0x20000c1c

08002ce4 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002cee:	4b95      	ldr	r3, [pc, #596]	; (8002f44 <L6474_StepClockHandler+0x260>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002cf4:	79fa      	ldrb	r2, [r7, #7]
 8002cf6:	4994      	ldr	r1, [pc, #592]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	330c      	adds	r3, #12
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	488f      	ldr	r0, [pc, #572]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4403      	add	r3, r0
 8002d14:	330c      	adds	r3, #12
 8002d16:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002d18:	79fa      	ldrb	r2, [r7, #7]
 8002d1a:	498b      	ldr	r1, [pc, #556]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3324      	adds	r3, #36	; 0x24
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	f000 81a1 	beq.w	8003074 <L6474_StepClockHandler+0x390>
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	f000 810a 	beq.w	8002f4c <L6474_StepClockHandler+0x268>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d000      	beq.n	8002d3e <L6474_StepClockHandler+0x5a>
      }
      break;
    }
    default: 
    {
      break;
 8002d3c:	e2a3      	b.n	8003286 <L6474_StepClockHandler+0x5a2>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002d3e:	79fa      	ldrb	r2, [r7, #7]
 8002d40:	4981      	ldr	r1, [pc, #516]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	497c      	ldr	r1, [pc, #496]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	3308      	adds	r3, #8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	4977      	ldr	r1, [pc, #476]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	3320      	adds	r3, #32
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002d7a:	79fa      	ldrb	r2, [r7, #7]
 8002d7c:	4972      	ldr	r1, [pc, #456]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	3318      	adds	r3, #24
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	496c      	ldr	r1, [pc, #432]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	3322      	adds	r3, #34	; 0x22
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d017      	beq.n	8002dda <L6474_StepClockHandler+0xf6>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	4966      	ldr	r1, [pc, #408]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	3322      	adds	r3, #34	; 0x22
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01f      	beq.n	8002e02 <L6474_StepClockHandler+0x11e>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	4960      	ldr	r1, [pc, #384]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3310      	adds	r3, #16
 8002dd2:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d113      	bne.n	8002e02 <L6474_StepClockHandler+0x11e>
          devicePrm[deviceId].motionState = DECELERATING;
 8002dda:	79fa      	ldrb	r2, [r7, #7]
 8002ddc:	495a      	ldr	r1, [pc, #360]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	440b      	add	r3, r1
 8002de8:	3324      	adds	r3, #36	; 0x24
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4955      	ldr	r1, [pc, #340]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e09e      	b.n	8002f40 <L6474_StepClockHandler+0x25c>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	4950      	ldr	r1, [pc, #320]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	331c      	adds	r3, #28
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d20f      	bcs.n	8002e3c <L6474_StepClockHandler+0x158>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e1c:	79fa      	ldrb	r2, [r7, #7]
 8002e1e:	494a      	ldr	r1, [pc, #296]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	440b      	add	r3, r1
 8002e2a:	3322      	adds	r3, #34	; 0x22
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <L6474_StepClockHandler+0x16e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d10a      	bne.n	8002e52 <L6474_StepClockHandler+0x16e>
          devicePrm[deviceId].motionState = STEADY;
 8002e3c:	79fa      	ldrb	r2, [r7, #7]
 8002e3e:	4942      	ldr	r1, [pc, #264]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e076      	b.n	8002f40 <L6474_StepClockHandler+0x25c>
          bool speedUpdated = FALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <L6474_StepClockHandler+0x17e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	4938      	ldr	r1, [pc, #224]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	79fa      	ldrb	r2, [r7, #7]
 8002e7c:	4419      	add	r1, r3
 8002e7e:	4832      	ldr	r0, [pc, #200]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4403      	add	r3, r0
 8002e8a:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e8c:	e017      	b.n	8002ebe <L6474_StepClockHandler+0x1da>
            devicePrm[deviceId].accu -= (0X10000L);
 8002e8e:	79fa      	ldrb	r2, [r7, #7]
 8002e90:	492d      	ldr	r1, [pc, #180]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	79fa      	ldrb	r2, [r7, #7]
 8002ea0:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002ea4:	4828      	ldr	r0, [pc, #160]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4403      	add	r3, r0
 8002eb0:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	4921      	ldr	r1, [pc, #132]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d2dc      	bcs.n	8002e8e <L6474_StepClockHandler+0x1aa>
          if (speedUpdated)
 8002ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 81cf 	beq.w	800327c <L6474_StepClockHandler+0x598>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4919      	ldr	r1, [pc, #100]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	331c      	adds	r3, #28
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d909      	bls.n	8002f0c <L6474_StepClockHandler+0x228>
              speed = devicePrm[deviceId].maxSpeed;
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	4913      	ldr	r1, [pc, #76]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	331c      	adds	r3, #28
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002f0c:	79fa      	ldrb	r2, [r7, #7]
 8002f0e:	490e      	ldr	r1, [pc, #56]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f1e:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002f20:	79fa      	ldrb	r2, [r7, #7]
 8002f22:	4909      	ldr	r1, [pc, #36]	; (8002f48 <L6474_StepClockHandler+0x264>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3320      	adds	r3, #32
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fa33 	bl	80023a4 <L6474_ApplySpeed>
        break;
 8002f3e:	e19d      	b.n	800327c <L6474_StepClockHandler+0x598>
 8002f40:	e19c      	b.n	800327c <L6474_StepClockHandler+0x598>
 8002f42:	bf00      	nop
 8002f44:	20000b81 	.word	0x20000b81
 8002f48:	20000c1c 	.word	0x20000c1c
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	499c      	ldr	r1, [pc, #624]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	440b      	add	r3, r1
 8002f5a:	331c      	adds	r3, #28
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002f60:	79fa      	ldrb	r2, [r7, #7]
 8002f62:	4997      	ldr	r1, [pc, #604]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	440b      	add	r3, r1
 8002f6e:	330c      	adds	r3, #12
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	4992      	ldr	r1, [pc, #584]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	3322      	adds	r3, #34	; 0x22
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d030      	beq.n	8002fee <L6474_StepClockHandler+0x30a>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	498c      	ldr	r1, [pc, #560]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	3322      	adds	r3, #34	; 0x22
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <L6474_StepClockHandler+0x2d8>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002fa4:	79fa      	ldrb	r2, [r7, #7]
 8002fa6:	4986      	ldr	r1, [pc, #536]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3310      	adds	r3, #16
 8002fb4:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d218      	bcs.n	8002fee <L6474_StepClockHandler+0x30a>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002fbc:	79fa      	ldrb	r2, [r7, #7]
 8002fbe:	4980      	ldr	r1, [pc, #512]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3322      	adds	r3, #34	; 0x22
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d120      	bne.n	8003016 <L6474_StepClockHandler+0x332>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002fd4:	79fa      	ldrb	r2, [r7, #7]
 8002fd6:	497a      	ldr	r1, [pc, #488]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002fe8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d213      	bcs.n	8003016 <L6474_StepClockHandler+0x332>
        devicePrm[deviceId].motionState = DECELERATING;
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	4973      	ldr	r1, [pc, #460]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3324      	adds	r3, #36	; 0x24
 8002ffe:	2202      	movs	r2, #2
 8003000:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8003002:	79fa      	ldrb	r2, [r7, #7]
 8003004:	496e      	ldr	r1, [pc, #440]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
      break;
 8003014:	e134      	b.n	8003280 <L6474_StepClockHandler+0x59c>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	4969      	ldr	r1, [pc, #420]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	440b      	add	r3, r1
 8003024:	3322      	adds	r3, #34	; 0x22
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 8128 	bne.w	8003280 <L6474_StepClockHandler+0x59c>
               (devicePrm[deviceId].speed < maxSpeed))
 8003030:	79fa      	ldrb	r2, [r7, #7]
 8003032:	4963      	ldr	r1, [pc, #396]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3320      	adds	r3, #32
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003044:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003046:	429a      	cmp	r2, r3
 8003048:	f240 811a 	bls.w	8003280 <L6474_StepClockHandler+0x59c>
        devicePrm[deviceId].motionState = ACCELERATING;
 800304c:	79fa      	ldrb	r2, [r7, #7]
 800304e:	495c      	ldr	r1, [pc, #368]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8003060:	79fa      	ldrb	r2, [r7, #7]
 8003062:	4957      	ldr	r1, [pc, #348]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	440b      	add	r3, r1
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
      break;
 8003072:	e105      	b.n	8003280 <L6474_StepClockHandler+0x59c>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	4952      	ldr	r1, [pc, #328]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	330c      	adds	r3, #12
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	494d      	ldr	r1, [pc, #308]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	3320      	adds	r3, #32
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 800309c:	79fa      	ldrb	r2, [r7, #7]
 800309e:	4948      	ldr	r1, [pc, #288]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	440b      	add	r3, r1
 80030aa:	331a      	adds	r3, #26
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	041b      	lsls	r3, r3, #16
 80030b2:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 80030b4:	79fa      	ldrb	r2, [r7, #7]
 80030b6:	4942      	ldr	r1, [pc, #264]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	3322      	adds	r3, #34	; 0x22
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d10c      	bne.n	80030e6 <L6474_StepClockHandler+0x402>
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	493c      	ldr	r1, [pc, #240]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	331e      	adds	r3, #30
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d917      	bls.n	8003116 <L6474_StepClockHandler+0x432>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80030e6:	79fa      	ldrb	r2, [r7, #7]
 80030e8:	4935      	ldr	r1, [pc, #212]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	3322      	adds	r3, #34	; 0x22
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <L6474_StepClockHandler+0x43c>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 80030fe:	79fa      	ldrb	r2, [r7, #7]
 8003100:	492f      	ldr	r1, [pc, #188]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	3314      	adds	r3, #20
 800310e:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	429a      	cmp	r2, r3
 8003114:	d304      	bcc.n	8003120 <L6474_StepClockHandler+0x43c>
        L6474_HardStop(deviceId);
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fc97 	bl	8001a4c <L6474_HardStop>
 800311e:	e0ac      	b.n	800327a <L6474_StepClockHandler+0x596>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003120:	79fa      	ldrb	r2, [r7, #7]
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3322      	adds	r3, #34	; 0x22
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d117      	bne.n	8003168 <L6474_StepClockHandler+0x484>
               (speed <= devicePrm[deviceId].maxSpeed))
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	4921      	ldr	r1, [pc, #132]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	331c      	adds	r3, #28
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 800314c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800314e:	429a      	cmp	r2, r3
 8003150:	d80a      	bhi.n	8003168 <L6474_StepClockHandler+0x484>
        devicePrm[deviceId].motionState = STEADY;
 8003152:	79fa      	ldrb	r2, [r7, #7]
 8003154:	491a      	ldr	r1, [pc, #104]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3324      	adds	r3, #36	; 0x24
 8003162:	2203      	movs	r2, #3
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e088      	b.n	800327a <L6474_StepClockHandler+0x596>
        if (speed > devicePrm[deviceId].minSpeed)
 8003168:	79fa      	ldrb	r2, [r7, #7]
 800316a:	4915      	ldr	r1, [pc, #84]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	331e      	adds	r3, #30
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800317e:	429a      	cmp	r2, r3
 8003180:	f240 8080 	bls.w	8003284 <L6474_StepClockHandler+0x5a0>
          bool speedUpdated = FALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 800318a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <L6474_StepClockHandler+0x4b0>
 8003190:	2301      	movs	r3, #1
 8003192:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8003194:	79fa      	ldrb	r2, [r7, #7]
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	79fa      	ldrb	r2, [r7, #7]
 80031ae:	4419      	add	r1, r3
 80031b0:	4803      	ldr	r0, [pc, #12]	; (80031c0 <L6474_StepClockHandler+0x4dc>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4403      	add	r3, r0
 80031bc:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80031be:	e01c      	b.n	80031fa <L6474_StepClockHandler+0x516>
 80031c0:	20000c1c 	.word	0x20000c1c
            devicePrm[deviceId].accu -= (0X10000L);
 80031c4:	79fa      	ldrb	r2, [r7, #7]
 80031c6:	4933      	ldr	r1, [pc, #204]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	79fa      	ldrb	r2, [r7, #7]
 80031d6:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 80031da:	482e      	ldr	r0, [pc, #184]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4403      	add	r3, r0
 80031e6:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 80031e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d902      	bls.n	80031f4 <L6474_StepClockHandler+0x510>
              speed -=1;
 80031ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031f0:	3b01      	subs	r3, #1
 80031f2:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 80031fa:	79fa      	ldrb	r2, [r7, #7]
 80031fc:	4925      	ldr	r1, [pc, #148]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d2d9      	bcs.n	80031c4 <L6474_StepClockHandler+0x4e0>
          if (speedUpdated)
 8003210:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003214:	2b00      	cmp	r3, #0
 8003216:	d035      	beq.n	8003284 <L6474_StepClockHandler+0x5a0>
            if (speed < devicePrm[deviceId].minSpeed)
 8003218:	79fa      	ldrb	r2, [r7, #7]
 800321a:	491e      	ldr	r1, [pc, #120]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	440b      	add	r3, r1
 8003226:	331e      	adds	r3, #30
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800322e:	429a      	cmp	r2, r3
 8003230:	d209      	bcs.n	8003246 <L6474_StepClockHandler+0x562>
              speed = devicePrm[deviceId].minSpeed;
 8003232:	79fa      	ldrb	r2, [r7, #7]
 8003234:	4917      	ldr	r1, [pc, #92]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	331e      	adds	r3, #30
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8003246:	79fa      	ldrb	r2, [r7, #7]
 8003248:	4912      	ldr	r1, [pc, #72]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3320      	adds	r3, #32
 8003256:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003258:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 800325a:	79fa      	ldrb	r2, [r7, #7]
 800325c:	490d      	ldr	r1, [pc, #52]	; (8003294 <L6474_StepClockHandler+0x5b0>)
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	3320      	adds	r3, #32
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f896 	bl	80023a4 <L6474_ApplySpeed>
      break;
 8003278:	e004      	b.n	8003284 <L6474_StepClockHandler+0x5a0>
 800327a:	e003      	b.n	8003284 <L6474_StepClockHandler+0x5a0>
        break;
 800327c:	bf00      	nop
 800327e:	e002      	b.n	8003286 <L6474_StepClockHandler+0x5a2>
      break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <L6474_StepClockHandler+0x5a2>
      break;
 8003284:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8003286:	4b04      	ldr	r3, [pc, #16]	; (8003298 <L6474_StepClockHandler+0x5b4>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	3730      	adds	r7, #48	; 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000c1c 	.word	0x20000c1c
 8003298:	20000b81 	.word	0x20000b81

0800329c <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 80032a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80032dc <L6474_Ocd_Th_to_Par+0x40>
 80032ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80032e0 <L6474_Ocd_Th_to_Par+0x44>
 80032b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c6:	edc7 7a00 	vstr	s15, [r7]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2db      	uxtb	r3, r3
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	43bb8000 	.word	0x43bb8000
 80032e0:	3b2eb80f 	.word	0x3b2eb80f

080032e4 <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	3301      	adds	r3, #1
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003310 <L6474_Ocd_Par_to_Th+0x2c>
 80032fe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003302:	eeb0 0a67 	vmov.f32	s0, s15
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	43bb8000 	.word	0x43bb8000

08003314 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 800331e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003322:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003354 <L6474_Tval_Current_to_Par+0x40>
 8003326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800332a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003358 <L6474_Tval_Current_to_Par+0x44>
 800332e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800333a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800333e:	edc7 7a00 	vstr	s15, [r7]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2db      	uxtb	r3, r3
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	41fa0000 	.word	0x41fa0000
 8003358:	3d03126f 	.word	0x3d03126f

0800335c <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	3301      	adds	r3, #1
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003372:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003388 <L6474_Tval_Par_to_Current+0x2c>
 8003376:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	41fa0000 	.word	0x41fa0000

0800338c <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	3301      	adds	r3, #1
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033aa:	eeb0 0a67 	vmov.f32	s0, s15
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80033c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033de:	edc7 7a00 	vstr	s15, [r7]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2db      	uxtb	r3, r3
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <L6474_WriteBytes+0x40>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa65 	bl	80038d8 <L6474_Board_SpiWriteBytes>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8003414:	f248 0001 	movw	r0, #32769	; 0x8001
 8003418:	f7ff f8de 	bl	80025d8 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <L6474_WriteBytes+0x44>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <L6474_WriteBytes+0x48>)
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
  }
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000b64 	.word	0x20000b64
 8003438:	20000b81 	.word	0x20000b81
 800343c:	20000b80 	.word	0x20000b80

08003440 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fea9 	bl	80041a0 <HAL_Delay>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800345a:	b672      	cpsid	i
  __disable_irq();
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800346a:	b662      	cpsie	i
  __enable_irq();
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d165      	bne.n	8003554 <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6313      	str	r3, [r2, #48]	; 0x30
 8003498:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a46      	ldr	r2, [pc, #280]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6313      	str	r3, [r2, #48]	; 0x30
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	4b40      	ldr	r3, [pc, #256]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4a3f      	ldr	r2, [pc, #252]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	6313      	str	r3, [r2, #48]	; 0x30
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <L6474_Board_GpioInit+0x150>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 80034dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <L6474_Board_GpioInit+0x154>)
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80034ea:	2301      	movs	r3, #1
 80034ec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4619      	mov	r1, r3
 80034f4:	4836      	ldr	r0, [pc, #216]	; (80035d0 <L6474_Board_GpioInit+0x158>)
 80034f6:	f001 faf9 	bl	8004aec <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2105      	movs	r1, #5
 80034fe:	2028      	movs	r0, #40	; 0x28
 8003500:	f000 ff47 	bl	8004392 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003504:	2028      	movs	r0, #40	; 0x28
 8003506:	f000 ff60 	bl	80043ca <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003516:	2301      	movs	r3, #1
 8003518:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	482c      	ldr	r0, [pc, #176]	; (80035d4 <L6474_Board_GpioInit+0x15c>)
 8003522:	f001 fae3 	bl	8004aec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003526:	2201      	movs	r2, #1
 8003528:	2140      	movs	r1, #64	; 0x40
 800352a:	482a      	ldr	r0, [pc, #168]	; (80035d4 <L6474_Board_GpioInit+0x15c>)
 800352c:	f001 fc60 	bl	8004df0 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8003530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800353e:	2301      	movs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8003542:	f107 0314 	add.w	r3, r7, #20
 8003546:	4619      	mov	r1, r3
 8003548:	4821      	ldr	r0, [pc, #132]	; (80035d0 <L6474_Board_GpioInit+0x158>)
 800354a:	f001 facf 	bl	8004aec <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 800354e:	2000      	movs	r0, #0
 8003550:	f000 f94a 	bl	80037e8 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d014      	beq.n	8003584 <L6474_Board_GpioInit+0x10c>
 800355a:	2b02      	cmp	r3, #2
 800355c:	d021      	beq.n	80035a2 <L6474_Board_GpioInit+0x12a>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d000      	beq.n	8003564 <L6474_Board_GpioInit+0xec>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8003562:	e02d      	b.n	80035c0 <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8003564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003568:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356a:	2301      	movs	r3, #1
 800356c:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003572:	2301      	movs	r3, #1
 8003574:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	4814      	ldr	r0, [pc, #80]	; (80035d0 <L6474_Board_GpioInit+0x158>)
 800357e:	f001 fab5 	bl	8004aec <HAL_GPIO_Init>
      break;
 8003582:	e01d      	b.n	80035c0 <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003584:	2320      	movs	r3, #32
 8003586:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003588:	2301      	movs	r3, #1
 800358a:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003590:	2301      	movs	r3, #1
 8003592:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4619      	mov	r1, r3
 800359a:	480e      	ldr	r0, [pc, #56]	; (80035d4 <L6474_Board_GpioInit+0x15c>)
 800359c:	f001 faa6 	bl	8004aec <HAL_GPIO_Init>
      break;
 80035a0:	e00e      	b.n	80035c0 <L6474_Board_GpioInit+0x148>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 80035a2:	2310      	movs	r3, #16
 80035a4:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80035ae:	2301      	movs	r3, #1
 80035b0:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4806      	ldr	r0, [pc, #24]	; (80035d4 <L6474_Board_GpioInit+0x15c>)
 80035ba:	f001 fa97 	bl	8004aec <HAL_GPIO_Init>
        break;
 80035be:	bf00      	nop
}
 80035c0:	bf00      	nop
 80035c2:	3728      	adds	r7, #40	; 0x28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	10210000 	.word	0x10210000
 80035d0:	40020000 	.word	0x40020000
 80035d4:	40020400 	.word	0x40020400

080035d8 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80035e2:	f001 ff6d 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 80035e6:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	02db      	lsls	r3, r3, #11
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <L6474_Board_Pwm1SetFreq+0x4c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <L6474_Board_Pwm1SetFreq+0x4c>)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
 8003604:	4b07      	ldr	r3, [pc, #28]	; (8003624 <L6474_Board_Pwm1SetFreq+0x4c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3334      	adds	r3, #52	; 0x34
 800360a:	3304      	adds	r3, #4
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	0852      	lsrs	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);  
 8003612:	2104      	movs	r1, #4
 8003614:	4803      	ldr	r0, [pc, #12]	; (8003624 <L6474_Board_Pwm1SetFreq+0x4c>)
 8003616:	f002 fbb5 	bl	8005d84 <HAL_TIM_PWM_Start_IT>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000c9c 	.word	0x20000c9c

08003628 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003632:	f001 ff45 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8003636:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	029b      	lsls	r3, r3, #10
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <L6474_Board_Pwm2SetFreq+0x4c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <L6474_Board_Pwm2SetFreq+0x4c>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <L6474_Board_Pwm2SetFreq+0x4c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3334      	adds	r3, #52	; 0x34
 800365a:	3304      	adds	r3, #4
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	0852      	lsrs	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003662:	2104      	movs	r1, #4
 8003664:	4803      	ldr	r0, [pc, #12]	; (8003674 <L6474_Board_Pwm2SetFreq+0x4c>)
 8003666:	f002 fb8d 	bl	8005d84 <HAL_TIM_PWM_Start_IT>
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000d14 	.word	0x20000d14

08003678 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003682:	f001 ff1d 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8003686:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	02db      	lsls	r3, r3, #11
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <L6474_Board_Pwm3SetFreq+0x4c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
 800369e:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <L6474_Board_Pwm3SetFreq+0x4c>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <L6474_Board_Pwm3SetFreq+0x4c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3334      	adds	r3, #52	; 0x34
 80036aa:	3308      	adds	r3, #8
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	0852      	lsrs	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80036b2:	2108      	movs	r1, #8
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <L6474_Board_Pwm3SetFreq+0x4c>)
 80036b6:	f002 fb65 	bl	8005d84 <HAL_TIM_PWM_Start_IT>
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000cd8 	.word	0x20000cd8

080036c8 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08e      	sub	sp, #56	; 0x38
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00a      	beq.n	80036ee <L6474_Board_PwmInit+0x26>
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d010      	beq.n	80036fe <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 80036dc:	4b21      	ldr	r3, [pc, #132]	; (8003764 <L6474_Board_PwmInit+0x9c>)
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036e6:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 80036e8:	2304      	movs	r3, #4
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 80036ec:	e00f      	b.n	800370e <L6474_Board_PwmInit+0x46>
    case  1:
      pHTim = &hTimPwm2;
 80036ee:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <L6474_Board_PwmInit+0xa0>)
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <L6474_Board_PwmInit+0xa4>)
 80036f6:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 80036f8:	2304      	movs	r3, #4
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036fc:	e007      	b.n	800370e <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <L6474_Board_PwmInit+0xa8>)
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <L6474_Board_PwmInit+0xac>)
 8003706:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8003708:	2308      	movs	r3, #8
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800370c:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8003714:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8003722:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003724:	f002 fab6 	bl	8005c94 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003728:	2360      	movs	r3, #96	; 0x60
 800372a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373e:	4619      	mov	r1, r3
 8003740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003742:	f002 fd63 	bl	800620c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	4619      	mov	r1, r3
 8003754:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003756:	f003 f887 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
}
 800375a:	bf00      	nop
 800375c:	3738      	adds	r7, #56	; 0x38
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000c9c 	.word	0x20000c9c
 8003768:	20000d14 	.word	0x20000d14
 800376c:	40000400 	.word	0x40000400
 8003770:	20000cd8 	.word	0x20000cd8
 8003774:	40000800 	.word	0x40000800

08003778 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d009      	beq.n	800379c <L6474_Board_PwmStop+0x24>
 8003788:	2b02      	cmp	r3, #2
 800378a:	d00c      	beq.n	80037a6 <L6474_Board_PwmStop+0x2e>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d000      	beq.n	8003792 <L6474_Board_PwmStop+0x1a>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8003790:	e00e      	b.n	80037b0 <L6474_Board_PwmStop+0x38>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8003792:	2104      	movs	r1, #4
 8003794:	4808      	ldr	r0, [pc, #32]	; (80037b8 <L6474_Board_PwmStop+0x40>)
 8003796:	f002 faa9 	bl	8005cec <HAL_TIM_PWM_Stop>
      break;
 800379a:	e009      	b.n	80037b0 <L6474_Board_PwmStop+0x38>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800379c:	2104      	movs	r1, #4
 800379e:	4807      	ldr	r0, [pc, #28]	; (80037bc <L6474_Board_PwmStop+0x44>)
 80037a0:	f002 faa4 	bl	8005cec <HAL_TIM_PWM_Stop>
      break;
 80037a4:	e004      	b.n	80037b0 <L6474_Board_PwmStop+0x38>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80037a6:	2108      	movs	r1, #8
 80037a8:	4805      	ldr	r0, [pc, #20]	; (80037c0 <L6474_Board_PwmStop+0x48>)
 80037aa:	f002 fa9f 	bl	8005cec <HAL_TIM_PWM_Stop>
      break;
 80037ae:	bf00      	nop
  }
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000c9c 	.word	0x20000c9c
 80037bc:	20000d14 	.word	0x20000d14
 80037c0:	20000cd8 	.word	0x20000cd8

080037c4 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80037ce:	2201      	movs	r2, #1
 80037d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <L6474_Board_ReleaseReset+0x20>)
 80037d6:	f001 fb0b 	bl	8004df0 <HAL_GPIO_WritePin>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40020000 	.word	0x40020000

080037e8 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 80037f2:	2200      	movs	r2, #0
 80037f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037f8:	4803      	ldr	r0, [pc, #12]	; (8003808 <L6474_Board_Reset+0x20>)
 80037fa:	f001 faf9 	bl	8004df0 <HAL_GPIO_WritePin>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020000 	.word	0x40020000

0800380c <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	460a      	mov	r2, r1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	4613      	mov	r3, r2
 800381a:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00b      	beq.n	800383a <L6474_Board_SetDirectionGpio+0x2e>
 8003822:	2b02      	cmp	r3, #2
 8003824:	d002      	beq.n	800382c <L6474_Board_SetDirectionGpio+0x20>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <L6474_Board_SetDirectionGpio+0x3c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800382a:	e015      	b.n	8003858 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 800382c:	79bb      	ldrb	r3, [r7, #6]
 800382e:	461a      	mov	r2, r3
 8003830:	2110      	movs	r1, #16
 8003832:	480b      	ldr	r0, [pc, #44]	; (8003860 <L6474_Board_SetDirectionGpio+0x54>)
 8003834:	f001 fadc 	bl	8004df0 <HAL_GPIO_WritePin>
      break;
 8003838:	e00e      	b.n	8003858 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800383a:	79bb      	ldrb	r3, [r7, #6]
 800383c:	461a      	mov	r2, r3
 800383e:	2120      	movs	r1, #32
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <L6474_Board_SetDirectionGpio+0x54>)
 8003842:	f001 fad5 	bl	8004df0 <HAL_GPIO_WritePin>
      break;
 8003846:	e007      	b.n	8003858 <L6474_Board_SetDirectionGpio+0x4c>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8003848:	79bb      	ldrb	r3, [r7, #6]
 800384a:	461a      	mov	r2, r3
 800384c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <L6474_Board_SetDirectionGpio+0x58>)
 8003852:	f001 facd 	bl	8004df0 <HAL_GPIO_WritePin>
      break;
 8003856:	bf00      	nop
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020400 	.word	0x40020400
 8003864:	40020000 	.word	0x40020000

08003868 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <L6474_Board_SpiInit+0x6c>)
 8003872:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003874:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 8003882:	2201      	movs	r2, #1
 8003884:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 8003888:	2202      	movs	r2, #2
 800388a:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 800388e:	2200      	movs	r2, #0
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 8003894:	2207      	movs	r2, #7
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80038b2:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 80038b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b8:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <L6474_Board_SpiInit+0x68>)
 80038bc:	f001 fee6 	bl	800568c <HAL_SPI_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80038c4:	79fb      	ldrb	r3, [r7, #7]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000b84 	.word	0x20000b84
 80038d4:	40013000 	.word	0x40013000

080038d8 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80038e6:	2200      	movs	r2, #0
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	4816      	ldr	r0, [pc, #88]	; (8003944 <L6474_Board_SpiWriteBytes+0x6c>)
 80038ec:	f001 fa80 	bl	8004df0 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e016      	b.n	8003924 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80038f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2301      	movs	r3, #1
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	4811      	ldr	r0, [pc, #68]	; (8003948 <L6474_Board_SpiWriteBytes+0x70>)
 8003904:	f001 ff2d 	bl	8005762 <HAL_SPI_TransmitReceive>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	3301      	adds	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3301      	adds	r3, #1
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3e4      	bcc.n	80038f6 <L6474_Board_SpiWriteBytes+0x1e>
 800392c:	e000      	b.n	8003930 <L6474_Board_SpiWriteBytes+0x58>
      break;
 800392e:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003930:	2201      	movs	r2, #1
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <L6474_Board_SpiWriteBytes+0x6c>)
 8003936:	f001 fa5b 	bl	8004df0 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 800393a:	7dfb      	ldrb	r3, [r7, #23]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40020400 	.word	0x40020400
 8003948:	20000b84 	.word	0x20000b84

0800394c <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
 8003950:	2300      	movs	r3, #0
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
 8003960:	2300      	movs	r3, #0
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
 8003970:	2300      	movs	r3, #0
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
 8003980:	2300      	movs	r3, #0
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
 8003990:	2300      	movs	r3, #0
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
 80039a0:	2300      	movs	r3, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	2300      	movs	r3, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <BSP_MotorControl_AttachErrorHandler+0x26>
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
 80039e0:	e003      	b.n	80039ea <BSP_MotorControl_AttachErrorHandler+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80039e2:	f640 0002 	movw	r0, #2050	; 0x802
 80039e6:	f000 f825 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000bdc 	.word	0x20000bdc

080039f8 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e003      	b.n	8003a26 <BSP_MotorControl_AttachFlagInterrupt+0x2e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003a1e:	f640 0003 	movw	r0, #2051	; 0x803
 8003a22:	f000 f807 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000bdc 	.word	0x20000bdc

08003a34 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <BSP_MotorControl_ErrorHandler+0x38>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <BSP_MotorControl_ErrorHandler+0x2e>
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <BSP_MotorControl_ErrorHandler+0x38>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <BSP_MotorControl_ErrorHandler+0x38>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003a60:	e000      	b.n	8003a64 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003a62:	e7fe      	b.n	8003a62 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000bdc 	.word	0x20000bdc

08003a70 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <BSP_MotorControl_Init+0x3c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <BSP_MotorControl_Init+0x2a>
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <BSP_MotorControl_Init+0x3c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <BSP_MotorControl_Init+0x3c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	4798      	blx	r3
 8003a98:	e003      	b.n	8003aa2 <BSP_MotorControl_Init+0x32>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003a9a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a9e:	f7ff ffc9 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000bdc 	.word	0x20000bdc

08003ab0 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <BSP_MotorControl_FlagInterruptHandler+0x20>
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <BSP_MotorControl_FlagInterruptHandler+0x2c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	4798      	blx	r3
 8003ace:	e003      	b.n	8003ad8 <BSP_MotorControl_FlagInterruptHandler+0x28>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8003ad0:	f640 0005 	movw	r0, #2053	; 0x805
 8003ad4:	f7ff ffae 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000bdc 	.word	0x20000bdc

08003ae0 <BSP_MotorControl_GetAcceleration>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t BSP_MotorControl_GetAcceleration(uint8_t deviceId)
{                                                  
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  uint16_t acceleration = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	81fb      	strh	r3, [r7, #14]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetAcceleration != 0))
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <BSP_MotorControl_GetAcceleration+0x44>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <BSP_MotorControl_GetAcceleration+0x32>
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <BSP_MotorControl_GetAcceleration+0x44>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <BSP_MotorControl_GetAcceleration+0x32>
  {
    acceleration = motorDrvHandle->GetAcceleration(deviceId);
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <BSP_MotorControl_GetAcceleration+0x44>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	79fa      	ldrb	r2, [r7, #7]
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	81fb      	strh	r3, [r7, #14]
 8003b10:	e003      	b.n	8003b1a <BSP_MotorControl_GetAcceleration+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(6);
 8003b12:	f640 0006 	movw	r0, #2054	; 0x806
 8003b16:	f7ff ff8d 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
  return(acceleration);    
 8003b1a:	89fb      	ldrh	r3, [r7, #14]
}            
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000bdc 	.word	0x20000bdc

08003b28 <BSP_MotorControl_GetCurrentSpeed>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval Speed in pps for stepper motor
 *               in % for Brush DC motor (0-100)   
 **********************************************************/
uint16_t BSP_MotorControl_GetCurrentSpeed(uint8_t deviceId)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
  uint16_t currentSpeed = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetCurrentSpeed != 0))
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <BSP_MotorControl_GetCurrentSpeed+0x32>
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d008      	beq.n	8003b5a <BSP_MotorControl_GetCurrentSpeed+0x32>
  {
    currentSpeed = motorDrvHandle->GetCurrentSpeed(deviceId);
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	79fa      	ldrb	r2, [r7, #7]
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
 8003b54:	4603      	mov	r3, r0
 8003b56:	81fb      	strh	r3, [r7, #14]
 8003b58:	e003      	b.n	8003b62 <BSP_MotorControl_GetCurrentSpeed+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(7);
 8003b5a:	f640 0007 	movw	r0, #2055	; 0x807
 8003b5e:	f7ff ff69 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
  return(currentSpeed); 
 8003b62:	89fb      	ldrh	r3, [r7, #14]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000bdc 	.word	0x20000bdc

08003b70 <BSP_MotorControl_GetDeceleration>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t BSP_MotorControl_GetDeceleration(uint8_t deviceId)
{                                                  
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  uint16_t deceleration = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	81fb      	strh	r3, [r7, #14]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeceleration != 0))
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <BSP_MotorControl_GetDeceleration+0x44>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <BSP_MotorControl_GetDeceleration+0x32>
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <BSP_MotorControl_GetDeceleration+0x44>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <BSP_MotorControl_GetDeceleration+0x32>
  {
    deceleration = motorDrvHandle->GetDeceleration(deviceId);
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <BSP_MotorControl_GetDeceleration+0x44>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	79fa      	ldrb	r2, [r7, #7]
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4798      	blx	r3
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	81fb      	strh	r3, [r7, #14]
 8003ba0:	e003      	b.n	8003baa <BSP_MotorControl_GetDeceleration+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(8);
 8003ba2:	f640 0008 	movw	r0, #2056	; 0x808
 8003ba6:	f7ff ff45 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
  return(deceleration);   
 8003baa:	89fb      	ldrh	r3, [r7, #14]
}          
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000bdc 	.word	0x20000bdc

08003bb8 <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <BSP_MotorControl_GetDeviceState+0x44>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <BSP_MotorControl_GetDeviceState+0x32>
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <BSP_MotorControl_GetDeviceState+0x44>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <BSP_MotorControl_GetDeviceState+0x44>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	79fa      	ldrb	r2, [r7, #7]
 8003be0:	4610      	mov	r0, r2
 8003be2:	4798      	blx	r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e003      	b.n	8003bf2 <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8003bea:	f640 0009 	movw	r0, #2057	; 0x809
 8003bee:	f7ff ff21 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000bdc 	.word	0x20000bdc

08003c00 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <BSP_MotorControl_GetPosition+0x44>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <BSP_MotorControl_GetPosition+0x30>
 8003c16:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <BSP_MotorControl_GetPosition+0x44>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <BSP_MotorControl_GetPosition+0x44>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	79fa      	ldrb	r2, [r7, #7]
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	e003      	b.n	8003c38 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003c30:	f640 000e 	movw	r0, #2062	; 0x80e
 8003c34:	f7ff fefe 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003c38:	68fb      	ldr	r3, [r7, #12]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000bdc 	.word	0x20000bdc

08003c48 <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	6039      	str	r1, [r7, #0]
 8003c52:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <BSP_MotorControl_GoTo+0x40>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <BSP_MotorControl_GoTo+0x2e>
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <BSP_MotorControl_GoTo+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <BSP_MotorControl_GoTo+0x40>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	4610      	mov	r0, r2
 8003c72:	4798      	blx	r3
 8003c74:	e003      	b.n	8003c7e <BSP_MotorControl_GoTo+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 8003c76:	f640 0011 	movw	r0, #2065	; 0x811
 8003c7a:	f7ff fedb 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000bdc 	.word	0x20000bdc

08003c8c <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	460a      	mov	r2, r1
 8003c96:	71fb      	strb	r3, [r7, #7]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <BSP_MotorControl_SetAcceleration+0x3a>
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb8:	88b9      	ldrh	r1, [r7, #4]
 8003cba:	79fa      	ldrb	r2, [r7, #7]
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4798      	blx	r3
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e003      	b.n	8003cce <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 8003cc6:	f640 0016 	movw	r0, #2070	; 0x816
 8003cca:	f7ff feb3 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}            
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000bdc 	.word	0x20000bdc

08003cdc <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	71fb      	strb	r3, [r7, #7]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00e      	beq.n	8003d16 <BSP_MotorControl_SetDeceleration+0x3a>
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	88b9      	ldrh	r1, [r7, #4]
 8003d0a:	79fa      	ldrb	r2, [r7, #7]
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e003      	b.n	8003d1e <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 8003d16:	f640 0017 	movw	r0, #2071	; 0x817
 8003d1a:	f7ff fe8b 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000bdc 	.word	0x20000bdc

08003d2c <BSP_MotorControl_SetHome>:
 * @param[in] homePosition new absolute home position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetHome(uint8_t deviceId, int32_t homePosition)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetHome != 0))
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <BSP_MotorControl_SetHome+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <BSP_MotorControl_SetHome+0x2e>
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <BSP_MotorControl_SetHome+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <BSP_MotorControl_SetHome+0x2e>
  {
    motorDrvHandle->SetHome(deviceId, homePosition);
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <BSP_MotorControl_SetHome+0x40>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	e003      	b.n	8003d62 <BSP_MotorControl_SetHome+0x36>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(24);
 8003d5a:	f640 0018 	movw	r0, #2072	; 0x818
 8003d5e:	f7ff fe69 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }        
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000bdc 	.word	0x20000bdc

08003d70 <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	460a      	mov	r2, r1
 8003d7a:	71fb      	strb	r3, [r7, #7]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00e      	beq.n	8003daa <BSP_MotorControl_SetMaxSpeed+0x3a>
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9c:	88b9      	ldrh	r1, [r7, #4]
 8003d9e:	79fa      	ldrb	r2, [r7, #7]
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
 8003da4:	4603      	mov	r3, r0
 8003da6:	73fb      	strb	r3, [r7, #15]
 8003da8:	e003      	b.n	8003db2 <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8003daa:	f640 001a 	movw	r0, #2074	; 0x81a
 8003dae:	f7ff fe41 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000bdc 	.word	0x20000bdc

08003dc0 <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	460a      	mov	r2, r1
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <BSP_MotorControl_SetMinSpeed+0x3a>
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 8003de6:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dec:	88b9      	ldrh	r1, [r7, #4]
 8003dee:	79fa      	ldrb	r2, [r7, #7]
 8003df0:	4610      	mov	r0, r2
 8003df2:	4798      	blx	r3
 8003df4:	4603      	mov	r3, r0
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e003      	b.n	8003e02 <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 8003dfa:	f640 001b 	movw	r0, #2075	; 0x81b
 8003dfe:	f7ff fe19 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000bdc 	.word	0x20000bdc

08003e10 <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <BSP_MotorControl_SoftStop+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <BSP_MotorControl_SoftStop+0x32>
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <BSP_MotorControl_SoftStop+0x44>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <BSP_MotorControl_SoftStop+0x44>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	79fa      	ldrb	r2, [r7, #7]
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4798      	blx	r3
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	e003      	b.n	8003e4a <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003e42:	f640 001c 	movw	r0, #2076	; 0x81c
 8003e46:	f7ff fdf5 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20000bdc 	.word	0x20000bdc

08003e58 <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 8003e62:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <BSP_MotorControl_StepClockHandler+0x2a>
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d006      	beq.n	8003e82 <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	79fa      	ldrb	r2, [r7, #7]
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	4798      	blx	r3
 8003e80:	e003      	b.n	8003e8a <BSP_MotorControl_StepClockHandler+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 8003e82:	f640 001d 	movw	r0, #2077	; 0x81d
 8003e86:	f7ff fdd5 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }   
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000bdc 	.word	0x20000bdc

08003e98 <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <BSP_MotorControl_WaitWhileActive+0x2a>
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eba:	79fa      	ldrb	r2, [r7, #7]
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
 8003ec0:	e003      	b.n	8003eca <BSP_MotorControl_WaitWhileActive+0x32>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 8003ec2:	f640 001e 	movw	r0, #2078	; 0x81e
 8003ec6:	f7ff fdb5 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }    
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000bdc 	.word	0x20000bdc

08003ed8 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00f      	beq.n	8003f0e <BSP_MotorControl_CmdGetStatus+0x36>
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d009      	beq.n	8003f0e <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	79fa      	ldrb	r2, [r7, #7]
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	81fb      	strh	r3, [r7, #14]
 8003f0c:	e003      	b.n	8003f16 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003f0e:	f640 0022 	movw	r0, #2082	; 0x822
 8003f12:	f7ff fd8f 	bl	8003a34 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003f16:	89fb      	ldrh	r3, [r7, #14]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20000bdc 	.word	0x20000bdc

08003f24 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460a      	mov	r2, r1
 8003f2e:	80fb      	strh	r3, [r7, #6]
 8003f30:	4613      	mov	r3, r2
 8003f32:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003f34:	4a40      	ldr	r2, [pc, #256]	; (8004038 <BSP_MotorControl_SetNbDevices+0x114>)
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f641 124a 	movw	r2, #6474	; 0x194a
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d105      	bne.n	8003f54 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003f48:	f7fd fc18 	bl	800177c <L6474_GetMotorHandle>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e055      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003f5a:	f7ff fd07 	bl	800396c <Powerstep01_GetMotorHandle>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e04c      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f641 023e 	movw	r2, #6206	; 0x183e
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d105      	bne.n	8003f7c <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003f70:	f7ff fd04 	bl	800397c <L6206_GetMotorHandle>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e041      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 8003f82:	d105      	bne.n	8003f90 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003f84:	f7ff fd02 	bl	800398c <L6208_GetMotorHandle>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b2c      	ldr	r3, [pc, #176]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e037      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2bdc      	cmp	r3, #220	; 0xdc
 8003f94:	d105      	bne.n	8003fa2 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8003f96:	f7ff fd01 	bl	800399c <Stspin220_GetMotorHandle>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b27      	ldr	r3, [pc, #156]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e02e      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	f641 1246 	movw	r2, #6470	; 0x1946
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <BSP_MotorControl_SetNbDevices+0x92>
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f641 1248 	movw	r2, #6472	; 0x1948
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d105      	bne.n	8003fc2 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8003fb6:	f7ff fcc9 	bl	800394c <l647x_GetMotorHandle>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e01e      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	f641 1250 	movw	r2, #6480	; 0x1950
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <BSP_MotorControl_SetNbDevices+0xb2>
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	f641 1252 	movw	r2, #6482	; 0x1952
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d105      	bne.n	8003fe2 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8003fd6:	f7ff fcc1 	bl	800395c <l648x_GetMotorHandle>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e00e      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	2bf0      	cmp	r3, #240	; 0xf0
 8003fe6:	d002      	beq.n	8003fee <BSP_MotorControl_SetNbDevices+0xca>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2bfa      	cmp	r3, #250	; 0xfa
 8003fec:	d105      	bne.n	8003ffa <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003fee:	f7ff fcdd 	bl	80039ac <Stspin240_250_GetMotorHandle>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e002      	b.n	8004000 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003ffa:	4b10      	ldr	r3, [pc, #64]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8004000:	4b0e      	ldr	r3, [pc, #56]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00b      	beq.n	800402c <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004014:	797b      	ldrb	r3, [r7, #5]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <BSP_MotorControl_SetNbDevices+0x118>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004022:	797a      	ldrb	r2, [r7, #5]
 8004024:	4610      	mov	r0, r2
 8004026:	4798      	blx	r3
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000be0 	.word	0x20000be0
 800403c:	20000bdc 	.word	0x20000bdc

08004040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <SystemInit+0x60>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <SystemInit+0x60>)
 800404c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <SystemInit+0x64>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <SystemInit+0x64>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <SystemInit+0x64>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <SystemInit+0x64>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <SystemInit+0x64>)
 800406c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <SystemInit+0x64>)
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <SystemInit+0x68>)
 800407a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <SystemInit+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <SystemInit+0x64>)
 8004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004086:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <SystemInit+0x64>)
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <SystemInit+0x60>)
 8004090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004094:	609a      	str	r2, [r3, #8]
#endif
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000ed00 	.word	0xe000ed00
 80040a4:	40023800 	.word	0x40023800
 80040a8:	24003010 	.word	0x24003010

080040ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b0:	4b0e      	ldr	r3, [pc, #56]	; (80040ec <HAL_Init+0x40>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <HAL_Init+0x40>)
 80040b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_Init+0x40>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_Init+0x40>)
 80040c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c8:	4b08      	ldr	r3, [pc, #32]	; (80040ec <HAL_Init+0x40>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a07      	ldr	r2, [pc, #28]	; (80040ec <HAL_Init+0x40>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d4:	2003      	movs	r0, #3
 80040d6:	f000 f951 	bl	800437c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040da:	200f      	movs	r0, #15
 80040dc:	f000 f810 	bl	8004100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040e0:	f000 f806 	bl	80040f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00

080040f0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_InitTick+0x54>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <HAL_InitTick+0x58>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004116:	fbb3 f3f1 	udiv	r3, r3, r1
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f961 	bl	80043e6 <HAL_SYSTICK_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e00e      	b.n	800414c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b0f      	cmp	r3, #15
 8004132:	d80a      	bhi.n	800414a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004134:	2200      	movs	r2, #0
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800413c:	f000 f929 	bl	8004392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004140:	4a06      	ldr	r2, [pc, #24]	; (800415c <HAL_InitTick+0x5c>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000164 	.word	0x20000164
 8004158:	2000016c 	.word	0x2000016c
 800415c:	20000168 	.word	0x20000168

08004160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_IncTick+0x20>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_IncTick+0x24>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4413      	add	r3, r2
 8004170:	4a04      	ldr	r2, [pc, #16]	; (8004184 <HAL_IncTick+0x24>)
 8004172:	6013      	str	r3, [r2, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	2000016c 	.word	0x2000016c
 8004184:	20000d50 	.word	0x20000d50

08004188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return uwTick;
 800418c:	4b03      	ldr	r3, [pc, #12]	; (800419c <HAL_GetTick+0x14>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	20000d50 	.word	0x20000d50

080041a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041a8:	f7ff ffee 	bl	8004188 <HAL_GetTick>
 80041ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b8:	d005      	beq.n	80041c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <HAL_Delay+0x40>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041c6:	bf00      	nop
 80041c8:	f7ff ffde 	bl	8004188 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d8f7      	bhi.n	80041c8 <HAL_Delay+0x28>
  {
  }
}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	2000016c 	.word	0x2000016c

080041e4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f4:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <NVIC_SetPriorityGrouping+0x44>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800420c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004216:	4a04      	ldr	r2, [pc, #16]	; (8004228 <NVIC_SetPriorityGrouping+0x44>)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	60d3      	str	r3, [r2, #12]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <NVIC_GetPriorityGrouping+0x18>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 0307 	and.w	r3, r3, #7
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	4907      	ldr	r1, [pc, #28]	; (8004278 <NVIC_EnableIRQ+0x30>)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2001      	movs	r0, #1
 8004262:	fa00 f202 	lsl.w	r2, r0, r2
 8004266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	e000e100 	.word	0xe000e100

0800427c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	2b00      	cmp	r3, #0
 800428e:	da0b      	bge.n	80042a8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	b2da      	uxtb	r2, r3
 8004294:	490c      	ldr	r1, [pc, #48]	; (80042c8 <NVIC_SetPriority+0x4c>)
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	3b04      	subs	r3, #4
 800429e:	0112      	lsls	r2, r2, #4
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	440b      	add	r3, r1
 80042a4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042a6:	e009      	b.n	80042bc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4907      	ldr	r1, [pc, #28]	; (80042cc <NVIC_SetPriority+0x50>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	440b      	add	r3, r1
 80042b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b089      	sub	sp, #36	; 0x24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f1c3 0307 	rsb	r3, r3, #7
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	bf28      	it	cs
 80042ee:	2304      	movcs	r3, #4
 80042f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d902      	bls.n	8004300 <NVIC_EncodePriority+0x30>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3b03      	subs	r3, #3
 80042fe:	e000      	b.n	8004302 <NVIC_EncodePriority+0x32>
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	401a      	ands	r2, r3
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43d9      	mvns	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4313      	orrs	r3, r2
         );
}
 800432a:	4618      	mov	r0, r3
 800432c:	3724      	adds	r7, #36	; 0x24
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3b01      	subs	r3, #1
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004348:	d301      	bcc.n	800434e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800434a:	2301      	movs	r3, #1
 800434c:	e00f      	b.n	800436e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <SysTick_Config+0x40>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004356:	210f      	movs	r1, #15
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	f7ff ff8e 	bl	800427c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <SysTick_Config+0x40>)
 8004362:	2200      	movs	r2, #0
 8004364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <SysTick_Config+0x40>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff2d 	bl	80041e4 <NVIC_SetPriorityGrouping>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043a4:	f7ff ff42 	bl	800422c <NVIC_GetPriorityGrouping>
 80043a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f7ff ff8e 	bl	80042d0 <NVIC_EncodePriority>
 80043b4:	4602      	mov	r2, r0
 80043b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff5d 	bl	800427c <NVIC_SetPriority>
}
 80043c2:	bf00      	nop
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff35 	bl	8004248 <NVIC_EnableIRQ>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ffa2 	bl	8004338 <SysTick_Config>
 80043f4:	4603      	mov	r3, r0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800440c:	f7ff febc 	bl	8004188 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e099      	b.n	8004550 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0201 	bic.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800443c:	e00f      	b.n	800445e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800443e:	f7ff fea3 	bl	8004188 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b05      	cmp	r3, #5
 800444a:	d908      	bls.n	800445e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e078      	b.n	8004550 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e8      	bne.n	800443e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_DMA_Init+0x158>)
 8004478:	4013      	ands	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800448a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d107      	bne.n	80044c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	4313      	orrs	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d117      	bne.n	8004522 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fa77 	bl	80049f8 <DMA_CheckFifoParam>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800451e:	2301      	movs	r3, #1
 8004520:	e016      	b.n	8004550 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa2e 	bl	800498c <DMA_CalcBaseAndBitshift>
 8004530:	4603      	mov	r3, r0
 8004532:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004538:	223f      	movs	r2, #63	; 0x3f
 800453a:	409a      	lsls	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	f010803f 	.word	0xf010803f

0800455c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_DMA_Start_IT+0x26>
 800457e:	2302      	movs	r3, #2
 8004580:	e048      	b.n	8004614 <HAL_DMA_Start_IT+0xb8>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	d137      	bne.n	8004606 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2202      	movs	r2, #2
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f9c0 	bl	8004930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	223f      	movs	r2, #63	; 0x3f
 80045b6:	409a      	lsls	r2, r3
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0216 	orr.w	r2, r2, #22
 80045ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0208 	orr.w	r2, r2, #8
 80045f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e005      	b.n	8004612 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800460e:	2302      	movs	r3, #2
 8004610:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004612:	7dfb      	ldrb	r3, [r7, #23]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004628:	4b92      	ldr	r3, [pc, #584]	; (8004874 <HAL_DMA_IRQHandler+0x258>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a92      	ldr	r2, [pc, #584]	; (8004878 <HAL_DMA_IRQHandler+0x25c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2201      	movs	r2, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	2210      	movs	r2, #16
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2210      	movs	r2, #16
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d024      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
 800474a:	e01f      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e016      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2220      	movs	r2, #32
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808e 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8086 	beq.w	80048ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2220      	movs	r2, #32
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d136      	bne.n	8004834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0216 	bic.w	r2, r2, #22
 80047d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x1da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	223f      	movs	r2, #63	; 0x3f
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d07d      	beq.n	8004926 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e078      	b.n	8004926 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01c      	beq.n	800487c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d030      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e02b      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	e022      	b.n	80048ba <HAL_DMA_IRQHandler+0x29e>
 8004874:	20000164 	.word	0x20000164
 8004878:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d032      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d022      	beq.n	8004914 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2205      	movs	r2, #5
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d307      	bcc.n	8004902 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f2      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x2ca>
 8004900:	e000      	b.n	8004904 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004902:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	e000      	b.n	8004928 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004926:	bf00      	nop
    }
  }
}
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop

08004930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800494c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d108      	bne.n	8004970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800496e:	e007      	b.n	8004980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	60da      	str	r2, [r3, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
 800499a:	3b10      	subs	r3, #16
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <DMA_CalcBaseAndBitshift+0x64>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049a6:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <DMA_CalcBaseAndBitshift+0x68>)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d909      	bls.n	80049ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	659a      	str	r2, [r3, #88]	; 0x58
 80049cc:	e007      	b.n	80049de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	aaaaaaab 	.word	0xaaaaaaab
 80049f4:	080181d8 	.word	0x080181d8

080049f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11f      	bne.n	8004a52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d855      	bhi.n	8004ac4 <DMA_CheckFifoParam+0xcc>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <DMA_CheckFifoParam+0x28>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a31 	.word	0x08004a31
 8004a24:	08004a43 	.word	0x08004a43
 8004a28:	08004a31 	.word	0x08004a31
 8004a2c:	08004ac5 	.word	0x08004ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d045      	beq.n	8004ac8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a40:	e042      	b.n	8004ac8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a4a:	d13f      	bne.n	8004acc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a50:	e03c      	b.n	8004acc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5a:	d121      	bne.n	8004aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d836      	bhi.n	8004ad0 <DMA_CheckFifoParam+0xd8>
 8004a62:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <DMA_CheckFifoParam+0x70>)
 8004a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a7f 	.word	0x08004a7f
 8004a70:	08004a79 	.word	0x08004a79
 8004a74:	08004a91 	.word	0x08004a91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7c:	e02f      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d024      	beq.n	8004ad4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8e:	e021      	b.n	8004ad4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a98:	d11e      	bne.n	8004ad8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a9e:	e01b      	b.n	8004ad8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d902      	bls.n	8004aac <DMA_CheckFifoParam+0xb4>
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d003      	beq.n	8004ab2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004aaa:	e018      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab0:	e015      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00e      	beq.n	8004adc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac2:	e00b      	b.n	8004adc <DMA_CheckFifoParam+0xe4>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e00a      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004ac8:	bf00      	nop
 8004aca:	e008      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004acc:	bf00      	nop
 8004ace:	e006      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;   
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <DMA_CheckFifoParam+0xe6>
      break;
 8004adc:	bf00      	nop
    }
  } 
  
  return status; 
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b089      	sub	sp, #36	; 0x24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	e159      	b.n	8004dbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b08:	2201      	movs	r2, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	f040 8148 	bne.w	8004db6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x4a>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b12      	cmp	r3, #18
 8004b34:	d123      	bne.n	8004b7e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	08da      	lsrs	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43db      	mvns	r3, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4013      	ands	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	08da      	lsrs	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3208      	adds	r2, #8
 8004b78:	69b9      	ldr	r1, [r7, #24]
 8004b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	2203      	movs	r2, #3
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4013      	ands	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_GPIO_Init+0xe6>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d007      	beq.n	8004bd2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bc6:	2b11      	cmp	r3, #17
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b12      	cmp	r3, #18
 8004bd0:	d130      	bne.n	8004c34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c08:	2201      	movs	r2, #1
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 0201 	and.w	r2, r3, #1
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	2203      	movs	r2, #3
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	43db      	mvns	r3, r3
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80a2 	beq.w	8004db6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	4a55      	ldr	r2, [pc, #340]	; (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c80:	6453      	str	r3, [r2, #68]	; 0x44
 8004c82:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_GPIO_Init+0x2e4>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c8e:	4a51      	ldr	r2, [pc, #324]	; (8004dd4 <HAL_GPIO_Init+0x2e8>)
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	220f      	movs	r2, #15
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a48      	ldr	r2, [pc, #288]	; (8004dd8 <HAL_GPIO_Init+0x2ec>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d019      	beq.n	8004cee <HAL_GPIO_Init+0x202>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_GPIO_Init+0x2f0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <HAL_GPIO_Init+0x1fe>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a46      	ldr	r2, [pc, #280]	; (8004de0 <HAL_GPIO_Init+0x2f4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00d      	beq.n	8004ce6 <HAL_GPIO_Init+0x1fa>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a45      	ldr	r2, [pc, #276]	; (8004de4 <HAL_GPIO_Init+0x2f8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <HAL_GPIO_Init+0x1f6>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a44      	ldr	r2, [pc, #272]	; (8004de8 <HAL_GPIO_Init+0x2fc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_GPIO_Init+0x1f2>
 8004cda:	2304      	movs	r3, #4
 8004cdc:	e008      	b.n	8004cf0 <HAL_GPIO_Init+0x204>
 8004cde:	2307      	movs	r3, #7
 8004ce0:	e006      	b.n	8004cf0 <HAL_GPIO_Init+0x204>
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e004      	b.n	8004cf0 <HAL_GPIO_Init+0x204>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e002      	b.n	8004cf0 <HAL_GPIO_Init+0x204>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_GPIO_Init+0x204>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	f002 0203 	and.w	r2, r2, #3
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	4093      	lsls	r3, r2
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d00:	4934      	ldr	r1, [pc, #208]	; (8004dd4 <HAL_GPIO_Init+0x2e8>)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	3302      	adds	r3, #2
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d0e:	4b37      	ldr	r3, [pc, #220]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d32:	4a2e      	ldr	r2, [pc, #184]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d38:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d5c:	4a23      	ldr	r2, [pc, #140]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db0:	4a0e      	ldr	r2, [pc, #56]	; (8004dec <HAL_GPIO_Init+0x300>)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	f67f aea2 	bls.w	8004b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3724      	adds	r7, #36	; 0x24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40020000 	.word	0x40020000
 8004ddc:	40020400 	.word	0x40020400
 8004de0:	40020800 	.word	0x40020800
 8004de4:	40020c00 	.word	0x40020c00
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40013c00 	.word	0x40013c00

08004df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e00:	787b      	ldrb	r3, [r7, #1]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e0c:	e003      	b.n	8004e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	041a      	lsls	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	619a      	str	r2, [r3, #24]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	405a      	eors	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	615a      	str	r2, [r3, #20]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e5e:	4a05      	ldr	r2, [pc, #20]	; (8004e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f00d fb42 	bl	80124f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40013c00 	.word	0x40013c00

08004e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e22d      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d075      	beq.n	8004f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e96:	4ba3      	ldr	r3, [pc, #652]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00c      	beq.n	8004ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea2:	4ba0      	ldr	r3, [pc, #640]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d112      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eae:	4b9d      	ldr	r3, [pc, #628]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eba:	d10b      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebc:	4b99      	ldr	r3, [pc, #612]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d05b      	beq.n	8004f80 <HAL_RCC_OscConfig+0x108>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d157      	bne.n	8004f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e208      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d106      	bne.n	8004eec <HAL_RCC_OscConfig+0x74>
 8004ede:	4b91      	ldr	r3, [pc, #580]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a90      	ldr	r2, [pc, #576]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e01d      	b.n	8004f28 <HAL_RCC_OscConfig+0xb0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef4:	d10c      	bne.n	8004f10 <HAL_RCC_OscConfig+0x98>
 8004ef6:	4b8b      	ldr	r3, [pc, #556]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a8a      	ldr	r2, [pc, #552]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b88      	ldr	r3, [pc, #544]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a87      	ldr	r2, [pc, #540]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e00b      	b.n	8004f28 <HAL_RCC_OscConfig+0xb0>
 8004f10:	4b84      	ldr	r3, [pc, #528]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a83      	ldr	r2, [pc, #524]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4b81      	ldr	r3, [pc, #516]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a80      	ldr	r2, [pc, #512]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d013      	beq.n	8004f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f30:	f7ff f92a 	bl	8004188 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f38:	f7ff f926 	bl	8004188 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	; 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e1cd      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4a:	4b76      	ldr	r3, [pc, #472]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0xc0>
 8004f56:	e014      	b.n	8004f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7ff f916 	bl	8004188 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f60:	f7ff f912 	bl	8004188 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b64      	cmp	r3, #100	; 0x64
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e1b9      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f72:	4b6c      	ldr	r3, [pc, #432]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0xe8>
 8004f7e:	e000      	b.n	8004f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d063      	beq.n	8005056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8e:	4b65      	ldr	r3, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00b      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f9a:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d11c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b5f      	ldr	r3, [pc, #380]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb2:	4b5c      	ldr	r3, [pc, #368]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <HAL_RCC_OscConfig+0x152>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e18d      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4952      	ldr	r1, [pc, #328]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fde:	e03a      	b.n	8005056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe8:	4b4f      	ldr	r3, [pc, #316]	; (8005128 <HAL_RCC_OscConfig+0x2b0>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7ff f8cb 	bl	8004188 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff6:	f7ff f8c7 	bl	8004188 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e16e      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	4b46      	ldr	r3, [pc, #280]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4940      	ldr	r1, [pc, #256]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]
 8005028:	e015      	b.n	8005056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502a:	4b3f      	ldr	r3, [pc, #252]	; (8005128 <HAL_RCC_OscConfig+0x2b0>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7ff f8aa 	bl	8004188 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005038:	f7ff f8a6 	bl	8004188 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e14d      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d030      	beq.n	80050c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d016      	beq.n	8005098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506a:	4b30      	ldr	r3, [pc, #192]	; (800512c <HAL_RCC_OscConfig+0x2b4>)
 800506c:	2201      	movs	r2, #1
 800506e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7ff f88a 	bl	8004188 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005078:	f7ff f886 	bl	8004188 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e12d      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x200>
 8005096:	e015      	b.n	80050c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <HAL_RCC_OscConfig+0x2b4>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7ff f873 	bl	8004188 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a6:	f7ff f86f 	bl	8004188 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e116      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b8:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 80050ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80a0 	beq.w	8005212 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6413      	str	r3, [r2, #64]	; 0x40
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80050fe:	2301      	movs	r3, #1
 8005100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_RCC_OscConfig+0x2b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	2b00      	cmp	r3, #0
 800510c:	d121      	bne.n	8005152 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RCC_OscConfig+0x2b8>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_RCC_OscConfig+0x2b8>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511a:	f7ff f835 	bl	8004188 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	e011      	b.n	8005146 <HAL_RCC_OscConfig+0x2ce>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	42470000 	.word	0x42470000
 800512c:	42470e80 	.word	0x42470e80
 8005130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005134:	f7ff f828 	bl	8004188 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0cf      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005146:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_OscConfig+0x478>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x2f0>
 800515a:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	4a65      	ldr	r2, [pc, #404]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6713      	str	r3, [r2, #112]	; 0x70
 8005166:	e01c      	b.n	80051a2 <HAL_RCC_OscConfig+0x32a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b05      	cmp	r3, #5
 800516e:	d10c      	bne.n	800518a <HAL_RCC_OscConfig+0x312>
 8005170:	4b60      	ldr	r3, [pc, #384]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	4a5f      	ldr	r2, [pc, #380]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005176:	f043 0304 	orr.w	r3, r3, #4
 800517a:	6713      	str	r3, [r2, #112]	; 0x70
 800517c:	4b5d      	ldr	r3, [pc, #372]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4a5c      	ldr	r2, [pc, #368]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	; 0x70
 8005188:	e00b      	b.n	80051a2 <HAL_RCC_OscConfig+0x32a>
 800518a:	4b5a      	ldr	r3, [pc, #360]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a59      	ldr	r2, [pc, #356]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a56      	ldr	r2, [pc, #344]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d015      	beq.n	80051d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051aa:	f7fe ffed 	bl	8004188 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fe ffe9 	bl	8004188 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e08e      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c8:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ee      	beq.n	80051b2 <HAL_RCC_OscConfig+0x33a>
 80051d4:	e014      	b.n	8005200 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d6:	f7fe ffd7 	bl	8004188 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fe ffd3 	bl	8004188 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e078      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f4:	4b3f      	ldr	r3, [pc, #252]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ee      	bne.n	80051de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d105      	bne.n	8005212 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	4b3b      	ldr	r3, [pc, #236]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a3a      	ldr	r2, [pc, #232]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800520c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d064      	beq.n	80052e4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b08      	cmp	r3, #8
 8005224:	d05c      	beq.n	80052e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d141      	bne.n	80052b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCC_OscConfig+0x480>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fe ffa8 	bl	8004188 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523c:	f7fe ffa4 	bl	8004188 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e04b      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	4b29      	ldr	r3, [pc, #164]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	019b      	lsls	r3, r3, #6
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	491d      	ldr	r1, [pc, #116]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_RCC_OscConfig+0x480>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528a:	f7fe ff7d 	bl	8004188 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005292:	f7fe ff79 	bl	8004188 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e020      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x41a>
 80052b0:	e018      	b.n	80052e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCC_OscConfig+0x480>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7fe ff66 	bl	8004188 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe ff62 	bl	8004188 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e009      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCC_OscConfig+0x47c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x448>
 80052de:	e001      	b.n	80052e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40007000 	.word	0x40007000
 80052f4:	40023800 	.word	0x40023800
 80052f8:	42470060 	.word	0x42470060

080052fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0ca      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b67      	ldr	r3, [pc, #412]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d90c      	bls.n	8005338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b64      	ldr	r3, [pc, #400]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b62      	ldr	r3, [pc, #392]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0b6      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005350:	4b58      	ldr	r3, [pc, #352]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800535a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005368:	4b52      	ldr	r3, [pc, #328]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a51      	ldr	r2, [pc, #324]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005374:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	494c      	ldr	r1, [pc, #304]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d044      	beq.n	800541c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d119      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e07d      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e06d      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e065      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053da:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 0203 	bic.w	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4933      	ldr	r1, [pc, #204]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ec:	f7fe fecc 	bl	8004188 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f2:	e00a      	b.n	800540a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fe fec8 	bl	8004188 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e04d      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	4b2a      	ldr	r3, [pc, #168]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 020c 	and.w	r2, r3, #12
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	429a      	cmp	r2, r3
 800541a:	d1eb      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d20c      	bcs.n	8005444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005432:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d001      	beq.n	8005444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e030      	b.n	80054a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005450:	4b18      	ldr	r3, [pc, #96]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4915      	ldr	r1, [pc, #84]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546e:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	490d      	ldr	r1, [pc, #52]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005482:	f000 f81d 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8005486:	4601      	mov	r1, r0
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	4a09      	ldr	r2, [pc, #36]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	5cd3      	ldrb	r3, [r2, r3]
 8005496:	fa21 f303 	lsr.w	r3, r1, r3
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <HAL_RCC_ClockConfig+0x1c0>)
 800549c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800549e:	200f      	movs	r0, #15
 80054a0:	f7fe fe2e 	bl	8004100 <HAL_InitTick>

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40023c00 	.word	0x40023c00
 80054b4:	40023800 	.word	0x40023800
 80054b8:	080181c0 	.word	0x080181c0
 80054bc:	20000164 	.word	0x20000164

080054c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d6:	4b50      	ldr	r3, [pc, #320]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d007      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0x32>
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d008      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x38>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 808d 	bne.w	8005606 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054ec:	4b4b      	ldr	r3, [pc, #300]	; (800561c <HAL_RCC_GetSysClockFreq+0x15c>)
 80054ee:	60bb      	str	r3, [r7, #8]
       break;
 80054f0:	e08c      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054f2:	4b4b      	ldr	r3, [pc, #300]	; (8005620 <HAL_RCC_GetSysClockFreq+0x160>)
 80054f4:	60bb      	str	r3, [r7, #8]
      break;
 80054f6:	e089      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f8:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005500:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005502:	4b45      	ldr	r3, [pc, #276]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d023      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	ea03 0501 	and.w	r5, r3, r1
 8005524:	ea04 0602 	and.w	r6, r4, r2
 8005528:	4a3d      	ldr	r2, [pc, #244]	; (8005620 <HAL_RCC_GetSysClockFreq+0x160>)
 800552a:	fb02 f106 	mul.w	r1, r2, r6
 800552e:	2200      	movs	r2, #0
 8005530:	fb02 f205 	mul.w	r2, r2, r5
 8005534:	440a      	add	r2, r1
 8005536:	493a      	ldr	r1, [pc, #232]	; (8005620 <HAL_RCC_GetSysClockFreq+0x160>)
 8005538:	fba5 0101 	umull	r0, r1, r5, r1
 800553c:	1853      	adds	r3, r2, r1
 800553e:	4619      	mov	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f04f 0400 	mov.w	r4, #0
 8005546:	461a      	mov	r2, r3
 8005548:	4623      	mov	r3, r4
 800554a:	f7fb fbb5 	bl	8000cb8 <__aeabi_uldivmod>
 800554e:	4603      	mov	r3, r0
 8005550:	460c      	mov	r4, r1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e049      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005556:	4b30      	ldr	r3, [pc, #192]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	f04f 0400 	mov.w	r4, #0
 8005560:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	ea03 0501 	and.w	r5, r3, r1
 800556c:	ea04 0602 	and.w	r6, r4, r2
 8005570:	4629      	mov	r1, r5
 8005572:	4632      	mov	r2, r6
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	0154      	lsls	r4, r2, #5
 800557e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005582:	014b      	lsls	r3, r1, #5
 8005584:	4619      	mov	r1, r3
 8005586:	4622      	mov	r2, r4
 8005588:	1b49      	subs	r1, r1, r5
 800558a:	eb62 0206 	sbc.w	r2, r2, r6
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	0194      	lsls	r4, r2, #6
 8005598:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800559c:	018b      	lsls	r3, r1, #6
 800559e:	1a5b      	subs	r3, r3, r1
 80055a0:	eb64 0402 	sbc.w	r4, r4, r2
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	00e2      	lsls	r2, r4, #3
 80055ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055b2:	00d9      	lsls	r1, r3, #3
 80055b4:	460b      	mov	r3, r1
 80055b6:	4614      	mov	r4, r2
 80055b8:	195b      	adds	r3, r3, r5
 80055ba:	eb44 0406 	adc.w	r4, r4, r6
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	02a2      	lsls	r2, r4, #10
 80055c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055cc:	0299      	lsls	r1, r3, #10
 80055ce:	460b      	mov	r3, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	4621      	mov	r1, r4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	461a      	mov	r2, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	f7fb fb6a 	bl	8000cb8 <__aeabi_uldivmod>
 80055e4:	4603      	mov	r3, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_GetSysClockFreq+0x158>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	0c1b      	lsrs	r3, r3, #16
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	3301      	adds	r3, #1
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	60bb      	str	r3, [r7, #8]
      break;
 8005604:	e002      	b.n	800560c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005608:	60bb      	str	r3, [r7, #8]
      break;
 800560a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560c:	68bb      	ldr	r3, [r7, #8]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	00f42400 	.word	0x00f42400
 8005620:	017d7840 	.word	0x017d7840

08005624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005628:	4b03      	ldr	r3, [pc, #12]	; (8005638 <HAL_RCC_GetHCLKFreq+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000164 	.word	0x20000164

0800563c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005640:	f7ff fff0 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 8005644:	4601      	mov	r1, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0a9b      	lsrs	r3, r3, #10
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4a03      	ldr	r2, [pc, #12]	; (8005660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005652:	5cd3      	ldrb	r3, [r2, r3]
 8005654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	080181d0 	.word	0x080181d0

08005664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005668:	f7ff ffdc 	bl	8005624 <HAL_RCC_GetHCLKFreq>
 800566c:	4601      	mov	r1, r0
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	0b5b      	lsrs	r3, r3, #13
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800567a:	5cd3      	ldrb	r3, [r2, r3]
 800567c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	080181d0 	.word	0x080181d0

0800568c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e05d      	b.n	800575a <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f00c fdea 	bl	801228c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	ea42 0103 	orr.w	r1, r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0104 	and.w	r1, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	d104      	bne.n	800573a <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005738:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005748:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08e      	sub	sp, #56	; 0x38
 8005766:	af02      	add	r7, sp, #8
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
 8005774:	2300      	movs	r3, #0
 8005776:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8005780:	2301      	movs	r3, #1
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x36>
 8005794:	2302      	movs	r3, #2
 8005796:	e1f2      	b.n	8005b7e <HAL_SPI_TransmitReceive+0x41c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057a0:	f7fe fcf2 	bl	8004188 <HAL_GetTick>
 80057a4:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d00e      	beq.n	80057da <HAL_SPI_TransmitReceive+0x78>
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057c2:	d106      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x70>
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d003      	beq.n	80057da <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 80057d2:	2302      	movs	r3, #2
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057d8:	e1c7      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x8a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x8a>
 80057e6:	887b      	ldrh	r3, [r7, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057f2:	e1ba      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d103      	bne.n	8005808 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2205      	movs	r2, #5
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	887a      	ldrh	r2, [r7, #2]
 800581e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	887a      	ldrh	r2, [r7, #2]
 800582a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005846:	d110      	bne.n	800586a <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6819      	ldr	r1, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005856:	400b      	ands	r3, r1
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005868:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d007      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005890:	f040 8084 	bne.w	800599c <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <HAL_SPI_TransmitReceive+0x144>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d16f      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	881a      	ldrh	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3302      	adds	r3, #2
 80058b4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	e05f      	b.n	8005986 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02e      	beq.n	800592a <HAL_SPI_TransmitReceive+0x1c8>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d029      	beq.n	800592a <HAL_SPI_TransmitReceive+0x1c8>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d122      	bne.n	800592a <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3302      	adds	r3, #2
 80058f2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10c      	bne.n	800592a <HAL_SPI_TransmitReceive+0x1c8>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005918:	d107      	bne.n	800592a <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005928:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d018      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x204>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d111      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	b29a      	uxth	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3302      	adds	r3, #2
 8005952:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800596c:	d00b      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x224>
 800596e:	f7fe fc0b 	bl	8004188 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800597a:	429a      	cmp	r2, r3
 800597c:	d803      	bhi.n	8005986 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005984:	e0f1      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d19a      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x164>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d195      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x164>
 800599a:	e082      	b.n	8005aa2 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <HAL_SPI_TransmitReceive+0x24c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d16f      	bne.n	8005a8e <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	3301      	adds	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ce:	e05e      	b.n	8005a8e <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02e      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x2d2>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d029      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x2d2>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	60ba      	str	r2, [r7, #8]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	320c      	adds	r2, #12
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10c      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a22:	d107      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a32:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d017      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x30c>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d110      	bne.n	8005a6e <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68d9      	ldr	r1, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	b2ca      	uxtb	r2, r1
 8005a5a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a74:	d00b      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x32c>
 8005a76:	f7fe fb87 	bl	8004188 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d803      	bhi.n	8005a8e <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a8c:	e06d      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d19b      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x26e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d196      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	d11a      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f865 	bl	8005b86 <SPI_WaitFlagStateUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0202 	orr.w	r2, r3, #2
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8005ad4:	e049      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005ae0:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d10d      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af4:	f043 0202 	orr.w	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005b04:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	2201      	movs	r2, #1
 8005b14:	2102      	movs	r1, #2
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f835 	bl	8005b86 <SPI_WaitFlagStateUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b28:	e01f      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f892 	bl	8005c58 <SPI_CheckFlag_BSY>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b46:	e010      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	e000      	b.n	8005b6a <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 8005b68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3730      	adds	r7, #48	; 0x30
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	60b9      	str	r1, [r7, #8]
 8005b90:	607a      	str	r2, [r7, #4]
 8005b92:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005b94:	e04d      	b.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d049      	beq.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005ba4:	f7fe faf0 	bl	8004188 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d83e      	bhi.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc2:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bcc:	d111      	bne.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd6:	d004      	beq.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be0:	d107      	bne.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	d110      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6819      	ldr	r1, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e00e      	b.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d101      	bne.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005c42:	2201      	movs	r2, #1
 8005c44:	e000      	b.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005c46:	2200      	movs	r2, #0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d1a3      	bne.n	8005b96 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2180      	movs	r1, #128	; 0x80
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff ff89 	bl	8005b86 <SPI_WaitFlagStateUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e000      	b.n	8005c8c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e01d      	b.n	8005ce2 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f00c fb56 	bl	801236c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 fb88 	bl	80063e8 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}  
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fc64 	bl	80065cc <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_TIM_PWM_Stop+0x94>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d117      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1a      	ldr	r2, [r3, #32]
 8005d14:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0x52>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	f240 4344 	movw	r3, #1092	; 0x444
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0x52>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10f      	bne.n	8005d6e <HAL_TIM_PWM_Stop+0x82>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	f240 4344 	movw	r3, #1092	; 0x444
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_TIM_PWM_Stop+0x82>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
} 
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40010000 	.word	0x40010000

08005d84 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d841      	bhi.n	8005e18 <HAL_TIM_PWM_Start_IT+0x94>
 8005d94:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <HAL_TIM_PWM_Start_IT+0x18>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dd1 	.word	0x08005dd1
 8005da0:	08005e19 	.word	0x08005e19
 8005da4:	08005e19 	.word	0x08005e19
 8005da8:	08005e19 	.word	0x08005e19
 8005dac:	08005de3 	.word	0x08005de3
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005e19 	.word	0x08005e19
 8005dbc:	08005df5 	.word	0x08005df5
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e07 	.word	0x08005e07
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0202 	orr.w	r2, r2, #2
 8005dde:	60da      	str	r2, [r3, #12]
    }
    break;
 8005de0:	e01b      	b.n	8005e1a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0204 	orr.w	r2, r2, #4
 8005df0:	60da      	str	r2, [r3, #12]
    }
    break;
 8005df2:	e012      	b.n	8005e1a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0208 	orr.w	r2, r2, #8
 8005e02:	60da      	str	r2, [r3, #12]
    }
    break;
 8005e04:	e009      	b.n	8005e1a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0210 	orr.w	r2, r2, #16
 8005e14:	60da      	str	r2, [r3, #12]
    }
    break;
 8005e16:	e000      	b.n	8005e1a <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8005e18:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fbd2 	bl	80065cc <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <HAL_TIM_PWM_Start_IT+0xd8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
} 
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40010000 	.word	0x40010000

08005e60 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e081      	b.n	8005f84 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f00c fabf 	bl	8012418 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0207 	bic.w	r2, r2, #7
 8005eb0:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f000 fa93 	bl	80063e8 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eea:	f023 0303 	bic.w	r3, r3, #3
 8005eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4313      	orrs	r3, r2
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f08:	f023 030c 	bic.w	r3, r3, #12
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4313      	orrs	r3, r2
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	031b      	lsls	r3, r3, #12
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_TIM_Encoder_Start+0x16>
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d008      	beq.n	8005fb2 <HAL_TIM_Encoder_Start+0x26>
 8005fa0:	e00f      	b.n	8005fc2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fb0e 	bl	80065cc <TIM_CCxChannelCmd>
      break; 
 8005fb0:	e016      	b.n	8005fe0 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	2104      	movs	r1, #4
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb06 	bl	80065cc <TIM_CCxChannelCmd>
      break;
 8005fc0:	e00e      	b.n	8005fe0 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fafe 	bl	80065cc <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 faf7 	bl	80065cc <TIM_CCxChannelCmd>
     break; 
 8005fde:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b02      	cmp	r3, #2
 800600e:	d122      	bne.n	8006056 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d11b      	bne.n	8006056 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0202 	mvn.w	r2, #2
 8006026:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9bf 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 8006042:	e005      	b.n	8006050 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f9b1 	bl	80063ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f00c f9c4 	bl	80123d8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b04      	cmp	r3, #4
 8006062:	d122      	bne.n	80060aa <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d11b      	bne.n	80060aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f06f 0204 	mvn.w	r2, #4
 800607a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f995 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 8006096:	e005      	b.n	80060a4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f987 	bl	80063ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f00c f99a 	bl	80123d8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d122      	bne.n	80060fe <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11b      	bne.n	80060fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f06f 0208 	mvn.w	r2, #8
 80060ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2204      	movs	r2, #4
 80060d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f96b 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 80060ea:	e005      	b.n	80060f8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f95d 	bl	80063ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f00c f970 	bl	80123d8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b10      	cmp	r3, #16
 800610a:	d122      	bne.n	8006152 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b10      	cmp	r3, #16
 8006118:	d11b      	bne.n	8006152 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f06f 0210 	mvn.w	r2, #16
 8006122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2208      	movs	r2, #8
 8006128:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f941 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 800613e:	e005      	b.n	800614c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f933 	bl	80063ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f00c f946 	bl	80123d8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10e      	bne.n	800617e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f06f 0201 	mvn.w	r2, #1
 8006176:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f90d 	bl	8006398 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d10e      	bne.n	80061aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d107      	bne.n	80061aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fbae 	bl	8006906 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d10e      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d107      	bne.n	80061d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8ff 	bl	80063d4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d10e      	bne.n	8006202 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d107      	bne.n	8006202 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f06f 0220 	mvn.w	r2, #32
 80061fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fb78 	bl	80068f2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006222:	2302      	movs	r3, #2
 8006224:	e0b4      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	f200 809f 	bhi.w	800637c <HAL_TIM_PWM_ConfigChannel+0x170>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	0800637d 	.word	0x0800637d
 800624c:	0800637d 	.word	0x0800637d
 8006250:	0800637d 	.word	0x0800637d
 8006254:	080062b9 	.word	0x080062b9
 8006258:	0800637d 	.word	0x0800637d
 800625c:	0800637d 	.word	0x0800637d
 8006260:	0800637d 	.word	0x0800637d
 8006264:	080062fb 	.word	0x080062fb
 8006268:	0800637d 	.word	0x0800637d
 800626c:	0800637d 	.word	0x0800637d
 8006270:	0800637d 	.word	0x0800637d
 8006274:	0800633b 	.word	0x0800633b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f9c8 	bl	8006614 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	619a      	str	r2, [r3, #24]
    }
    break;
 80062b6:	e062      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f916 	bl	80064f0 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]
    }
    break;
 80062f8:	e041      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f9ef 	bl	80066e4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
    }
    break;
 8006338:	e021      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fa3b 	bl	80067bc <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006354:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	61da      	str	r2, [r3, #28]
    }
    break;
 800637a:	e000      	b.n	800637e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800637c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a35      	ldr	r2, [pc, #212]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00f      	beq.n	8006424 <TIM_Base_SetConfig+0x3c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d00b      	beq.n	8006424 <TIM_Base_SetConfig+0x3c>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <TIM_Base_SetConfig+0xf0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <TIM_Base_SetConfig+0x3c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a31      	ldr	r2, [pc, #196]	; (80064dc <TIM_Base_SetConfig+0xf4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_Base_SetConfig+0x3c>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a30      	ldr	r2, [pc, #192]	; (80064e0 <TIM_Base_SetConfig+0xf8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <TIM_Base_SetConfig+0x40>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <TIM_Base_SetConfig+0x42>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d008      	beq.n	8006440 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d01b      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644e:	d017      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <TIM_Base_SetConfig+0xf0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a20      	ldr	r2, [pc, #128]	; (80064dc <TIM_Base_SetConfig+0xf4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <TIM_Base_SetConfig+0xf8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <TIM_Base_SetConfig+0xfc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <TIM_Base_SetConfig+0x100>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x98>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <TIM_Base_SetConfig+0x104>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <TIM_Base_SetConfig+0x9c>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <TIM_Base_SetConfig+0x9e>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a07      	ldr	r2, [pc, #28]	; (80064d4 <TIM_Base_SetConfig+0xec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d103      	bne.n	80064c2 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	615a      	str	r2, [r3, #20]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400
 80064ec:	40014800 	.word	0x40014800

080064f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f023 0210 	bic.w	r2, r3, #16
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006532:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	021b      	lsls	r3, r3, #8
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0320 	bic.w	r3, r3, #32
 8006546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <TIM_OC2_SetConfig+0xd8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d121      	bne.n	80065a0 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800657e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000

080065cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80065dc:	2201      	movs	r2, #1
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	fa02 f303 	lsl.w	r3, r2, r3
 80065e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	43db      	mvns	r3, r3
 80065ee:	401a      	ands	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1a      	ldr	r2, [r3, #32]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0201 	bic.w	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 0302 	bic.w	r3, r3, #2
 8006668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <TIM_OC1_SetConfig+0xcc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d11e      	bne.n	80066ba <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0308 	bic.w	r3, r3, #8
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f023 0304 	bic.w	r3, r3, #4
 8006694:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
} 
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	40010000 	.word	0x40010000

080066e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <TIM_OC3_SetConfig+0xd4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d121      	bne.n	8006792 <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006768:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40010000 	.word	0x40010000

080067bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fe:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006812:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	031b      	lsls	r3, r3, #12
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <TIM_OC4_SetConfig+0xa8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	019b      	lsls	r3, r3, #6
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40010000 	.word	0x40010000

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e032      	b.n	80068e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800689e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
} 
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e03f      	b.n	80069ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f00b fd9b 	bl	801247c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2224      	movs	r2, #36	; 0x24
 800694a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68da      	ldr	r2, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800695c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa6a 	bl	8006e38 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006972:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695a      	ldr	r2, [r3, #20]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006982:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006992:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	f040 8083 	bne.w	8006adc <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_UART_Transmit+0x2e>
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e07b      	b.n	8006ade <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_UART_Transmit+0x40>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e074      	b.n	8006ade <HAL_UART_Transmit+0x12a>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2221      	movs	r2, #33	; 0x21
 8006a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006a0a:	f7fd fbbd 	bl	8004188 <HAL_GetTick>
 8006a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8006a1c:	e042      	b.n	8006aa4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d122      	bne.n	8006a7c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f97b 	bl	8006d3c <UART_WaitOnFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e046      	b.n	8006ade <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a62:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	3302      	adds	r3, #2
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	e017      	b.n	8006aa4 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	e013      	b.n	8006aa4 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2200      	movs	r2, #0
 8006a84:	2180      	movs	r1, #128	; 0x80
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 f958 	bl	8006d3c <UART_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e023      	b.n	8006ade <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	60ba      	str	r2, [r7, #8]
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1b7      	bne.n	8006a1e <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f93f 	bl	8006d3c <UART_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e00a      	b.n	8006ade <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d166      	bne.n	8006bd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_Receive_DMA+0x26>
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e05f      	b.n	8006bd2 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Receive_DMA+0x38>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e058      	b.n	8006bd2 <HAL_UART_Receive_DMA+0xea>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2222      	movs	r2, #34	; 0x22
 8006b3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <HAL_UART_Receive_DMA+0xf4>)
 8006b48:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_UART_Receive_DMA+0xf8>)
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	4a23      	ldr	r2, [pc, #140]	; (8006be4 <HAL_UART_Receive_DMA+0xfc>)
 8006b58:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	2200      	movs	r2, #0
 8006b60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	f7fd fcef 	bl	800455c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006baa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695a      	ldr	r2, [r3, #20]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	08006c25 	.word	0x08006c25
 8006be0:	08006c8d 	.word	0x08006c8d
 8006be4:	08006ca9 	.word	0x08006ca9

08006be8 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11e      	bne.n	8006c7e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c54:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	695a      	ldr	r2, [r3, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c74:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff ffb2 	bl	8006be8 <HAL_UART_RxCpltCallback>
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff ffae 	bl	8006bfc <HAL_UART_RxHalfCpltCallback>
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf14      	ite	ne
 8006cc8:	2301      	movne	r3, #1
 8006cca:	2300      	moveq	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b21      	cmp	r3, #33	; 0x21
 8006cda:	d108      	bne.n	8006cee <UART_DMAError+0x46>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ce8:	68b8      	ldr	r0, [r7, #8]
 8006cea:	f000 f871 	bl	8006dd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	bf14      	ite	ne
 8006cfc:	2301      	movne	r3, #1
 8006cfe:	2300      	moveq	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b22      	cmp	r3, #34	; 0x22
 8006d0e:	d108      	bne.n	8006d22 <UART_DMAError+0x7a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d005      	beq.n	8006d22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d1c:	68b8      	ldr	r0, [r7, #8]
 8006d1e:	f000 f86d 	bl	8006dfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d26:	f043 0210 	orr.w	r2, r3, #16
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8006d2e:	68b8      	ldr	r0, [r7, #8]
 8006d30:	f7ff ff6e 	bl	8006c10 <HAL_UART_ErrorCallback>
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006d4c:	e02c      	b.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d54:	d028      	beq.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5c:	f7fd fa14 	bl	8004188 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d21d      	bcs.n	8006da8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e00f      	b.n	8006dc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	bf0c      	ite	eq
 8006db8:	2301      	moveq	r3, #1
 8006dba:	2300      	movne	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d0c3      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006de6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e38:	b5b0      	push	{r4, r5, r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e74:	f023 030c 	bic.w	r3, r3, #12
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eac:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec8:	f040 80e4 	bne.w	8007094 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4aab      	ldr	r2, [pc, #684]	; (8007180 <UART_SetConfig+0x348>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <UART_SetConfig+0xa8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4aaa      	ldr	r2, [pc, #680]	; (8007184 <UART_SetConfig+0x34c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d16c      	bne.n	8006fba <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006ee0:	f7fe fbc0 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009a      	lsls	r2, r3, #2
 8006eee:	441a      	add	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efa:	4aa3      	ldr	r2, [pc, #652]	; (8007188 <UART_SetConfig+0x350>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	095b      	lsrs	r3, r3, #5
 8006f02:	011c      	lsls	r4, r3, #4
 8006f04:	f7fe fbae 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f1e:	f7fe fba1 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009a      	lsls	r2, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	4a93      	ldr	r2, [pc, #588]	; (8007188 <UART_SetConfig+0x350>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2264      	movs	r2, #100	; 0x64
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	1aeb      	subs	r3, r5, r3
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	3332      	adds	r3, #50	; 0x32
 8006f4c:	4a8e      	ldr	r2, [pc, #568]	; (8007188 <UART_SetConfig+0x350>)
 8006f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f5a:	441c      	add	r4, r3
 8006f5c:	f7fe fb82 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009a      	lsls	r2, r3, #2
 8006f6a:	441a      	add	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f76:	f7fe fb75 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009a      	lsls	r2, r3, #2
 8006f84:	441a      	add	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f90:	4a7d      	ldr	r2, [pc, #500]	; (8007188 <UART_SetConfig+0x350>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2264      	movs	r2, #100	; 0x64
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	1aeb      	subs	r3, r5, r3
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a78      	ldr	r2, [pc, #480]	; (8007188 <UART_SetConfig+0x350>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	f003 0207 	and.w	r2, r3, #7
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4422      	add	r2, r4
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	e154      	b.n	8007264 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006fba:	f7fe fb3f 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009a      	lsls	r2, r3, #2
 8006fc8:	441a      	add	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd4:	4a6c      	ldr	r2, [pc, #432]	; (8007188 <UART_SetConfig+0x350>)
 8006fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	011c      	lsls	r4, r3, #4
 8006fde:	f7fe fb2d 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009a      	lsls	r2, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ff8:	f7fe fb20 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009a      	lsls	r2, r3, #2
 8007006:	441a      	add	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007012:	4a5d      	ldr	r2, [pc, #372]	; (8007188 <UART_SetConfig+0x350>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2264      	movs	r2, #100	; 0x64
 800701c:	fb02 f303 	mul.w	r3, r2, r3
 8007020:	1aeb      	subs	r3, r5, r3
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	3332      	adds	r3, #50	; 0x32
 8007026:	4a58      	ldr	r2, [pc, #352]	; (8007188 <UART_SetConfig+0x350>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007034:	441c      	add	r4, r3
 8007036:	f7fe fb01 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 800703a:	4602      	mov	r2, r0
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009a      	lsls	r2, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007050:	f7fe faf4 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8007054:	4602      	mov	r2, r0
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009a      	lsls	r2, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	4a47      	ldr	r2, [pc, #284]	; (8007188 <UART_SetConfig+0x350>)
 800706c:	fba2 2303 	umull	r2, r3, r2, r3
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	2264      	movs	r2, #100	; 0x64
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	1aeb      	subs	r3, r5, r3
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	3332      	adds	r3, #50	; 0x32
 800707e:	4a42      	ldr	r2, [pc, #264]	; (8007188 <UART_SetConfig+0x350>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	f003 0207 	and.w	r2, r3, #7
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4422      	add	r2, r4
 8007090:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007092:	e0e7      	b.n	8007264 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a39      	ldr	r2, [pc, #228]	; (8007180 <UART_SetConfig+0x348>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <UART_SetConfig+0x270>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a38      	ldr	r2, [pc, #224]	; (8007184 <UART_SetConfig+0x34c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d171      	bne.n	800718c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80070a8:	f7fe fadc 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009a      	lsls	r2, r3, #2
 80070b6:	441a      	add	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	4a31      	ldr	r2, [pc, #196]	; (8007188 <UART_SetConfig+0x350>)
 80070c4:	fba2 2303 	umull	r2, r3, r2, r3
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	011c      	lsls	r4, r3, #4
 80070cc:	f7fe faca 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009a      	lsls	r2, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80070e6:	f7fe fabd 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4613      	mov	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	009a      	lsls	r2, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007100:	4a21      	ldr	r2, [pc, #132]	; (8007188 <UART_SetConfig+0x350>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	2264      	movs	r2, #100	; 0x64
 800710a:	fb02 f303 	mul.w	r3, r2, r3
 800710e:	1aeb      	subs	r3, r5, r3
 8007110:	011b      	lsls	r3, r3, #4
 8007112:	3332      	adds	r3, #50	; 0x32
 8007114:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <UART_SetConfig+0x350>)
 8007116:	fba2 2303 	umull	r2, r3, r2, r3
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007120:	441c      	add	r4, r3
 8007122:	f7fe fa9f 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8007126:	4602      	mov	r2, r0
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009a      	lsls	r2, r3, #2
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	fbb2 f5f3 	udiv	r5, r2, r3
 800713c:	f7fe fa92 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8007140:	4602      	mov	r2, r0
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009a      	lsls	r2, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <UART_SetConfig+0x350>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	2264      	movs	r2, #100	; 0x64
 8007160:	fb02 f303 	mul.w	r3, r2, r3
 8007164:	1aeb      	subs	r3, r5, r3
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	3332      	adds	r3, #50	; 0x32
 800716a:	4a07      	ldr	r2, [pc, #28]	; (8007188 <UART_SetConfig+0x350>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	f003 020f 	and.w	r2, r3, #15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4422      	add	r2, r4
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	e071      	b.n	8007264 <UART_SetConfig+0x42c>
 8007180:	40011000 	.word	0x40011000
 8007184:	40011400 	.word	0x40011400
 8007188:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800718c:	f7fe fa56 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8007190:	4602      	mov	r2, r0
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009a      	lsls	r2, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	4a31      	ldr	r2, [pc, #196]	; (800726c <UART_SetConfig+0x434>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	011c      	lsls	r4, r3, #4
 80071b0:	f7fe fa44 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009a      	lsls	r2, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80071ca:	f7fe fa37 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009a      	lsls	r2, r3, #2
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <UART_SetConfig+0x434>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2264      	movs	r2, #100	; 0x64
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	1aeb      	subs	r3, r5, r3
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	3332      	adds	r3, #50	; 0x32
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <UART_SetConfig+0x434>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007204:	441c      	add	r4, r3
 8007206:	f7fe fa19 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 800720a:	4602      	mov	r2, r0
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009a      	lsls	r2, r3, #2
 8007214:	441a      	add	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007220:	f7fe fa0c 	bl	800563c <HAL_RCC_GetPCLK1Freq>
 8007224:	4602      	mov	r2, r0
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009a      	lsls	r2, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <UART_SetConfig+0x434>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2264      	movs	r2, #100	; 0x64
 8007244:	fb02 f303 	mul.w	r3, r2, r3
 8007248:	1aeb      	subs	r3, r5, r3
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	3332      	adds	r3, #50	; 0x32
 800724e:	4a07      	ldr	r2, [pc, #28]	; (800726c <UART_SetConfig+0x434>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 020f 	and.w	r2, r3, #15
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4422      	add	r2, r4
 8007260:	609a      	str	r2, [r3, #8]
}
 8007262:	e7ff      	b.n	8007264 <UART_SetConfig+0x42c>
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bdb0      	pop	{r4, r5, r7, pc}
 800726c:	51eb851f 	.word	0x51eb851f

08007270 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b094      	sub	sp, #80	; 0x50
 8007274:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	4b2a      	ldr	r3, [pc, #168]	; (8007324 <SystemClock_Config+0xb4>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a29      	ldr	r2, [pc, #164]	; (8007324 <SystemClock_Config+0xb4>)
 8007280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b27      	ldr	r3, [pc, #156]	; (8007324 <SystemClock_Config+0xb4>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728e:	60bb      	str	r3, [r7, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	4b24      	ldr	r3, [pc, #144]	; (8007328 <SystemClock_Config+0xb8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800729e:	4a22      	ldr	r2, [pc, #136]	; (8007328 <SystemClock_Config+0xb8>)
 80072a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <SystemClock_Config+0xb8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80072b2:	2302      	movs	r3, #2
 80072b4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072b6:	2301      	movs	r3, #1
 80072b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80072ba:	2310      	movs	r3, #16
 80072bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80072be:	2302      	movs	r3, #2
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80072c6:	2310      	movs	r3, #16
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80072ca:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80072d0:	2304      	movs	r3, #4
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80072d4:	2307      	movs	r3, #7
 80072d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fd fdcb 	bl	8004e78 <HAL_RCC_OscConfig>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 80072e8:	2000      	movs	r0, #0
 80072ea:	f00a ffc3 	bl	8012274 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80072ee:	230f      	movs	r3, #15
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072f2:	2302      	movs	r3, #2
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072f6:	2300      	movs	r3, #0
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80072fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8007300:	2300      	movs	r3, #0
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007308:	2102      	movs	r1, #2
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd fff6 	bl	80052fc <HAL_RCC_ClockConfig>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 8007316:	2001      	movs	r0, #1
 8007318:	f00a ffac 	bl	8012274 <Error_Handler>
  }
}
 800731c:	bf00      	nop
 800731e:	3750      	adds	r7, #80	; 0x50
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40023800 	.word	0x40023800
 8007328:	40007000 	.word	0x40007000

0800732c <rotor_position_set>:

/*
 * Rotor position set
 */

void rotor_position_set(void) {
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
	uint32_t rotor_position_u;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8007332:	2000      	movs	r0, #0
 8007334:	f7fc fc64 	bl	8003c00 <BSP_MotorControl_GetPosition>
 8007338:	4603      	mov	r3, r0
 800733a:	607b      	str	r3, [r7, #4]
	BSP_MotorControl_SetHome(0, rotor_position_u);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4619      	mov	r1, r3
 8007340:	2000      	movs	r0, #0
 8007342:	f7fc fcf3 	bl	8003d2c <BSP_MotorControl_SetHome>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <rotor_position_read>:
 *
 * Returns error if overflow detected
 *
 */

int rotor_position_read(int *rotor_position) {
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
	uint32_t rotor_position_u;
	int range_error;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8007356:	2000      	movs	r0, #0
 8007358:	f7fc fc52 	bl	8003c00 <BSP_MotorControl_GetPosition>
 800735c:	4603      	mov	r3, r0
 800735e:	60bb      	str	r3, [r7, #8]

	if (rotor_position_u > 2147483648) {
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007366:	d903      	bls.n	8007370 <rotor_position_read+0x22>
		*rotor_position = (int) (rotor_position_u) - 4294967296;
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	e002      	b.n	8007376 <rotor_position_read+0x28>
	} else {
		*rotor_position = (int) (rotor_position_u);
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
	}
	range_error = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
	if (*rotor_position <= -2147483648) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007382:	d106      	bne.n	8007392 <rotor_position_read+0x44>
		range_error = -1;
 8007384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007388:	60fb      	str	r3, [r7, #12]
		*rotor_position = -2147483648;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007390:	601a      	str	r2, [r3, #0]
	}
	if (*rotor_position >= 2147483647) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800739a:	4293      	cmp	r3, r2
 800739c:	d105      	bne.n	80073aa <rotor_position_read+0x5c>
		range_error = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
		*rotor_position = 2147483647;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80073a8:	601a      	str	r2, [r3, #0]
	}
	return range_error;
 80073aa:	68fb      	ldr	r3, [r7, #12]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <encoder_position_read>:
 * Encoder position read (returns signed integer)
 *
 * Returns error if overflow detected
 */

int encoder_position_read(int *encoder_position, TIM_HandleTypeDef *htim3) {
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	uint32_t cnt3;
	int range_error;
	cnt3 = __HAL_TIM_GET_COUNTER(htim3);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	60bb      	str	r3, [r7, #8]

	if (cnt3 >= 32768) {
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073cc:	d309      	bcc.n	80073e2 <encoder_position_read+0x2e>
		*encoder_position = (int) (cnt3);
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
		*encoder_position = *encoder_position - 65536;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	e002      	b.n	80073e8 <encoder_position_read+0x34>
	} else {
		*encoder_position = (int) (cnt3);
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	601a      	str	r2, [r3, #0]
	}

	range_error = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
	if (*encoder_position <= -32768) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80073f4:	dc05      	bgt.n	8007402 <encoder_position_read+0x4e>
		range_error = -1;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073fa:	60fb      	str	r3, [r7, #12]
		*encoder_position = -32768;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <encoder_position_read+0x74>)
 8007400:	601a      	str	r2, [r3, #0]
	}
	if (*encoder_position >= 32767) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800740a:	4293      	cmp	r3, r2
 800740c:	dd04      	ble.n	8007418 <encoder_position_read+0x64>
		range_error = 1;
 800740e:	2301      	movs	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
		*encoder_position = 327677;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a05      	ldr	r2, [pc, #20]	; (800742c <encoder_position_read+0x78>)
 8007416:	601a      	str	r2, [r3, #0]
	}
	return range_error;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	ffff8000 	.word	0xffff8000
 800742c:	0004fffd 	.word	0x0004fffd

08007430 <pid_filter_value_config>:

/*
 * PID Controller data structure initialization
 */

void pid_filter_value_config(pid_filter_control_parameters * pid_filter) {
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	pid_filter->i_error = 0;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	629a      	str	r2, [r3, #40]	; 0x28
	pid_filter->previous_error = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	615a      	str	r2, [r3, #20]
	pid_filter->previous_derivative = 0;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	619a      	str	r2, [r3, #24]
	pid_filter->differential = 0;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	61da      	str	r2, [r3, #28]
	pid_filter->previous_differential_filter = 0;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	625a      	str	r2, [r3, #36]	; 0x24
	pid_filter->differential_filter = 0;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	621a      	str	r2, [r3, #32]
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	0000      	movs	r0, r0
	...

08007478 <pid_filter_control_execute>:

/*
 * PID Controller with low pass filter operating on derivative component
 */
void pid_filter_control_execute(pid_filter_control_parameters * pid_filter,
		float * current_error, float * sample_period, float * f_deriv_lp) {
 8007478:	b590      	push	{r4, r7, lr}
 800747a:	b08b      	sub	sp, #44	; 0x2c
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
	float fo, Wo, IWon, iir_0, iir_1, iir_2;

	/*
	* f_deriv_lp pointer to variable containing low pass filter corner frequency
	*/
	fo = *f_deriv_lp;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
	Wo = 2 * 3.141592654 * fo;
 800748c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800748e:	f7f9 f873 	bl	8000578 <__aeabi_f2d>
 8007492:	a371      	add	r3, pc, #452	; (adr r3, 8007658 <pid_filter_control_execute+0x1e0>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f9 f8c6 	bl	8000628 <__aeabi_dmul>
 800749c:	4603      	mov	r3, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4618      	mov	r0, r3
 80074a2:	4621      	mov	r1, r4
 80074a4:	f7f9 fbb8 	bl	8000c18 <__aeabi_d2f>
 80074a8:	4603      	mov	r3, r0
 80074aa:	623b      	str	r3, [r7, #32]
	IWon = 2 / (Wo * (*sample_period));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	ed93 7a00 	vldr	s14, [r3]
 80074b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80074b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80074be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c2:	edc7 7a07 	vstr	s15, [r7, #28]
	iir_0 = 1 / (1 + IWon);
 80074c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80074ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074da:	edc7 7a06 	vstr	s15, [r7, #24]
	iir_1 = iir_0;
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	617b      	str	r3, [r7, #20]
	iir_2 = iir_0 * (1 - IWon);
 80074e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80074ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a04 	vstr	s15, [r7, #16]

	/*
	* Accumulate integrator error
	*/

	pid_filter->i_error += (*current_error * (*sample_period));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	edd3 6a00 	vldr	s13, [r3]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	edd3 7a00 	vldr	s15, [r3]
 800750c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	*
	* Warn state may be applied in system characterization and operation
	*
	*/

	pid_filter->warn = 0;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	60da      	str	r2, [r3, #12]
	if (pid_filter->i_error < -(pid_filter->integrator_windup_limit)) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	edd3 7a02 	vldr	s15, [r3, #8]
 800752c:	eef1 7a67 	vneg.f32	s15, s15
 8007530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007538:	d50c      	bpl.n	8007554 <pid_filter_control_execute+0xdc>
		pid_filter->i_error = -(pid_filter->integrator_windup_limit);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007540:	eef1 7a67 	vneg.f32	s15, s15
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		pid_filter->warn = -1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007550:	60da      	str	r2, [r3, #12]
 8007552:	e011      	b.n	8007578 <pid_filter_control_execute+0x100>
	} else if (pid_filter->i_error > pid_filter->integrator_windup_limit) {
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007568:	dd06      	ble.n	8007578 <pid_filter_control_execute+0x100>
		pid_filter->i_error = pid_filter->integrator_windup_limit;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	629a      	str	r2, [r3, #40]	; 0x28
		pid_filter->warn = 1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	60da      	str	r2, [r3, #12]

	/*
	* Introduce Low Pass Filter of derivative signal
	*/

	pid_filter->differential = ((*current_error - pid_filter->previous_error)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	ed93 7a00 	vldr	s14, [r3]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	edd3 7a05 	vldr	s15, [r3, #20]
 8007584:	ee77 6a67 	vsub.f32	s13, s14, s15
			/ (*sample_period));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	ed93 7a00 	vldr	s14, [r3]
 800758e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid_filter->differential = ((*current_error - pid_filter->previous_error)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	edc3 7a07 	vstr	s15, [r3, #28]
	pid_filter->differential_filter = iir_0 * pid_filter->differential
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	ed93 7a07 	vldr	s14, [r3, #28]
 800759e:	edd7 7a06 	vldr	s15, [r7, #24]
 80075a2:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ iir_1 * pid_filter->previous_derivative
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	edd3 6a06 	vldr	s13, [r3, #24]
 80075ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80075b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075b4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- iir_2 * pid_filter->previous_differential_filter;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80075be:	edd7 7a04 	vldr	s15, [r7, #16]
 80075c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80075c6:	ee77 7a67 	vsub.f32	s15, s14, s15
	pid_filter->differential_filter = iir_0 * pid_filter->differential
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	edc3 7a08 	vstr	s15, [r3, #32]

	pid_filter->previous_derivative = pid_filter->differential;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	619a      	str	r2, [r3, #24]
	pid_filter->previous_differential_filter = pid_filter->differential_filter;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
	pid_filter->previous_error = *current_error;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	615a      	str	r2, [r3, #20]

	pid_filter->d_term = (pid_filter->d_gain * pid_filter->differential_filter);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	ed93 7a04 	vldr	s14, [r3, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid_filter->p_term = (pid_filter->p_gain * (*current_error));
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	ed93 7a00 	vldr	s14, [r3]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	edd3 7a00 	vldr	s15, [r3]
 800760a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid_filter->i_term = (pid_filter->i_gain * pid_filter->i_error);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	ed93 7a01 	vldr	s14, [r3, #4]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	pid_filter->control_output = pid_filter->p_term + pid_filter->i_term
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007636:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid_filter->d_term;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007640:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_filter->control_output = pid_filter->p_term + pid_filter->i_term
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800764a:	bf00      	nop
 800764c:	372c      	adds	r7, #44	; 0x2c
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop
 8007654:	f3af 8000 	nop.w
 8007658:	54524550 	.word	0x54524550
 800765c:	401921fb 	.word	0x401921fb

08007660 <read_float>:

void read_float(uint32_t * RxBuffer_ReadIdx, uint32_t * RxBuffer_WriteIdx , uint32_t * readBytes, float *float_return) {
 8007660:	b590      	push	{r4, r7, lr}
 8007662:	b089      	sub	sp, #36	; 0x24
 8007664:	af02      	add	r7, sp, #8
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]

	int k;

	while (1) {
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800766e:	4b28      	ldr	r3, [pc, #160]	; (8007710 <read_float+0xb0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	601a      	str	r2, [r3, #0]
		*readBytes = Extract_Msg(RxBuffer, *RxBuffer_ReadIdx, *RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	b299      	uxth	r1, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	4b22      	ldr	r3, [pc, #136]	; (8007714 <read_float+0xb4>)
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	23c8      	movs	r3, #200	; 0xc8
 800768e:	4822      	ldr	r0, [pc, #136]	; (8007718 <read_float+0xb8>)
 8007690:	f00a fcda 	bl	8012048 <Extract_Msg>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	601a      	str	r2, [r3, #0]

		if (*readBytes)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02d      	beq.n	8007700 <read_float+0xa0>
		{
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	441a      	add	r2, r3
					% UART_RX_BUFFER_SIZE;
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <read_float+0xbc>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	099b      	lsrs	r3, r3, #6
 80076b6:	21c8      	movs	r1, #200	; 0xc8
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6013      	str	r3, [r2, #0]
			*float_return = atof((char*) Msg.Data);
 80076c2:	4817      	ldr	r0, [pc, #92]	; (8007720 <read_float+0xc0>)
 80076c4:	f00a ffab 	bl	801261e <atof>
 80076c8:	ec54 3b10 	vmov	r3, r4, d0
 80076cc:	4618      	mov	r0, r3
 80076ce:	4621      	mov	r1, r4
 80076d0:	f7f9 faa2 	bl	8000c18 <__aeabi_d2f>
 80076d4:	4602      	mov	r2, r0
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	601a      	str	r2, [r3, #0]
		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e008      	b.n	80076f2 <read_float+0x92>
			Msg.Data[k] = 0;
 80076e0:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <read_float+0xb4>)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	3304      	adds	r3, #4
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3301      	adds	r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b63      	cmp	r3, #99	; 0x63
 80076f6:	ddf3      	ble.n	80076e0 <read_float+0x80>
		}
		*readBytes = 0;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
		break;
 80076fe:	e003      	b.n	8007708 <read_float+0xa8>
	}
		HAL_Delay(100);
 8007700:	2064      	movs	r0, #100	; 0x64
 8007702:	f7fc fd4d 	bl	80041a0 <HAL_Delay>
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007706:	e7b2      	b.n	800766e <read_float+0xe>
	}
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}
 8007710:	20000d54 	.word	0x20000d54
 8007714:	20000db4 	.word	0x20000db4
 8007718:	20000e58 	.word	0x20000e58
 800771c:	51eb851f 	.word	0x51eb851f
 8007720:	20000db8 	.word	0x20000db8

08007724 <read_int>:

void read_int(uint32_t * RxBuffer_ReadIdx, uint32_t * RxBuffer_WriteIdx , uint32_t * readBytes, int * int_return) {
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]

	int k;

	while (1) {
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8007732:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <read_int+0xa4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	601a      	str	r2, [r3, #0]
		*readBytes = Extract_Msg(RxBuffer, *RxBuffer_ReadIdx, *RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	b299      	uxth	r1, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	b29a      	uxth	r2, r3
 800774c:	4b1f      	ldr	r3, [pc, #124]	; (80077cc <read_int+0xa8>)
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	23c8      	movs	r3, #200	; 0xc8
 8007752:	481f      	ldr	r0, [pc, #124]	; (80077d0 <read_int+0xac>)
 8007754:	f00a fc78 	bl	8012048 <Extract_Msg>
 8007758:	4603      	mov	r3, r0
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	601a      	str	r2, [r3, #0]

		if (*readBytes)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d027      	beq.n	80077b8 <read_int+0x94>
		{
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	441a      	add	r2, r3
					% UART_RX_BUFFER_SIZE;
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <read_int+0xb0>)
 8007774:	fba3 1302 	umull	r1, r3, r3, r2
 8007778:	099b      	lsrs	r3, r3, #6
 800777a:	21c8      	movs	r1, #200	; 0xc8
 800777c:	fb01 f303 	mul.w	r3, r1, r3
 8007780:	1ad3      	subs	r3, r2, r3
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	6013      	str	r3, [r2, #0]

			*int_return = atoi((char*)(Msg.Data));
 8007786:	4814      	ldr	r0, [pc, #80]	; (80077d8 <read_int+0xb4>)
 8007788:	f00a ff4c 	bl	8012624 <atoi>
 800778c:	4602      	mov	r2, r0
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	601a      	str	r2, [r3, #0]
		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8007792:	2300      	movs	r3, #0
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e008      	b.n	80077aa <read_int+0x86>
			Msg.Data[k] = 0;
 8007798:	4a0c      	ldr	r2, [pc, #48]	; (80077cc <read_int+0xa8>)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	3304      	adds	r3, #4
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	3301      	adds	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b63      	cmp	r3, #99	; 0x63
 80077ae:	ddf3      	ble.n	8007798 <read_int+0x74>
		}
		*readBytes = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
		break;
 80077b6:	e003      	b.n	80077c0 <read_int+0x9c>
	}
		HAL_Delay(100);
 80077b8:	2064      	movs	r0, #100	; 0x64
 80077ba:	f7fc fcf1 	bl	80041a0 <HAL_Delay>
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80077be:	e7b8      	b.n	8007732 <read_int+0xe>
	}
}
 80077c0:	bf00      	nop
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20000d54 	.word	0x20000d54
 80077cc:	20000db4 	.word	0x20000db4
 80077d0:	20000e58 	.word	0x20000e58
 80077d4:	51eb851f 	.word	0x51eb851f
 80077d8:	20000db8 	.word	0x20000db8
 80077dc:	00000000 	.word	0x00000000

080077e0 <main>:
	}
		HAL_Delay(100);
	}
}

int main(void) {
 80077e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e4:	ed2d 8b02 	vpush	{d8}
 80077e8:	f2ad 6d3c 	subw	sp, sp, #1596	; 0x63c
 80077ec:	af0c      	add	r7, sp, #48	; 0x30
	uint32_t tick, tick_cycle_current, tick_cycle_previous, tick_cycle_start,
			tick_read_cycle, tick_read_cycle_start,tick_wait_start,tick_wait;
	uint16_t min_speed, max_speed, max_accel, max_decel;

	float Tsample, Tsample_rotor, test_time;
	float angle_scale = ENCODER_READ_ANGLE_SCALE;
 80077ee:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80077f2:	4ad6      	ldr	r2, [pc, #856]	; (8007b4c <main+0x36c>)
 80077f4:	601a      	str	r2, [r3, #0]

	int enable_high_speed_sampling;

	uint32_t RxBuffer_ReadIdx = 0;
 80077f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
	uint32_t RxBuffer_WriteIdx = 0;
 80077fe:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
	uint32_t readBytes;

	int rotor_position_target = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	int rotor_position_target_curr = 0;
 800780c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
	int rotor_position_target_prev = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
	float proportional, rotor_p_gain;
	float integral, rotor_i_gain;
	float derivative, rotor_d_gain;
	int rotor_position, rotor_position_initial;
	float rotor_position_command;
	int encoder_position = 0, encoder_position_down = 0;
 800781a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
	int encoder_position_curr = 0, encoder_position_prev = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800782e:	2300      	movs	r3, #0
 8007830:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
	float impulse_start_index;

	uint32_t enable_pid;

	char *message_received;
	int mode_index = 1;
 8007834:	2301      	movs	r3, #1
 8007836:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
	int report_mode = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
	char *mode_string_dec_step_size;
	char *mode_string_select_mode_5;
	char *mode_string_enable_high_speed_sampling;
	char *mode_string_disable_high_speed_sampling;

	int char_mode_select = 0;	// Flag detecting whether character mode select entered
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	int mode_1 = 1;				// Enable LQR Motor Model M
 8007846:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
	int mode_2 = 2;				// Enable LRR Motor Model H
 800784e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8007852:	2202      	movs	r2, #2
 8007854:	601a      	str	r2, [r3, #0]
	int mode_3 = 3;				// Enable LQR Motor Model L
 8007856:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800785a:	2203      	movs	r2, #3
 800785c:	601a      	str	r2, [r3, #0]
	int mode_4 = 4;				// Enable Suspended Mode Motor Model M
 800785e:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8007862:	2204      	movs	r2, #4
 8007864:	601a      	str	r2, [r3, #0]
	int mode_5 = 5;				// Enable sin drive track signal
 8007866:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800786a:	2205      	movs	r2, #5
 800786c:	601a      	str	r2, [r3, #0]
	int mode_adaptive_off = 6;	// Disable adaptive control
 800786e:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8007872:	2206      	movs	r2, #6
 8007874:	601a      	str	r2, [r3, #0]
	int mode_adaptive = 7;		// Enable adaptive control
 8007876:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800787a:	2207      	movs	r2, #7
 800787c:	601a      	str	r2, [r3, #0]
	int mode_8 = 8;				// Enable custom configuration entry
 800787e:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8007882:	2208      	movs	r2, #8
 8007884:	601a      	str	r2, [r3, #0]
	int mode_9 = 9;				// Disable sin drive track signal
 8007886:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800788a:	2209      	movs	r2, #9
 800788c:	601a      	str	r2, [r3, #0]
	int mode_10 = 10;			// Enable Single PID Mode with Motor Model M
 800788e:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8007892:	220a      	movs	r2, #10
 8007894:	601a      	str	r2, [r3, #0]
	int mode_11 = 11;			// Enable rotor actuator and encoder test mode
 8007896:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800789a:	220b      	movs	r2, #11
 800789c:	601a      	str	r2, [r3, #0]
	int mode_12 = 12;			// Enable rotor actuator and encoder high speed test mode
 800789e:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80078a2:	220c      	movs	r2, #12
 80078a4:	601a      	str	r2, [r3, #0]
	int mode_13 = 13;			// Enable rotor control system evaluation
 80078a6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80078aa:	220d      	movs	r2, #13
 80078ac:	601a      	str	r2, [r3, #0]
	int mode_14 = 14;			// Enable pendlum system identification
 80078ae:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80078b2:	220e      	movs	r2, #14
 80078b4:	601a      	str	r2, [r3, #0]
	int mode_15 = 15;			// Enable interactive control of rotor actuator
 80078b6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80078ba:	220f      	movs	r2, #15
 80078bc:	601a      	str	r2, [r3, #0]
	int mode_16 = 16;			// Enable load disturbance sensitivity function mode
 80078be:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80078c2:	2210      	movs	r2, #16
 80078c4:	601a      	str	r2, [r3, #0]
	int mode_17 = 17;			// Enable load disturbance step function mode
 80078c6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80078ca:	2211      	movs	r2, #17
 80078cc:	601a      	str	r2, [r3, #0]
	int mode_18 = 18;			// Enable noise disturbance step function mode
 80078ce:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80078d2:	2212      	movs	r2, #18
 80078d4:	601a      	str	r2, [r3, #0]
	int mode_19 = 19;			// Enable plant disturbance step function mode
 80078d6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80078da:	2213      	movs	r2, #19
 80078dc:	601a      	str	r2, [r3, #0]
	int mode_quit = 0;			// Initiate exit from control loop
 80078de:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
	int mode_interactive;		// Enable continued terminal interactive user session
	int mode_index_prev, mode_index_command;
	int mode_transition_tick, mode_transition_state = 0, transition_to_adaptive_mode = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
	int enable_motor_actuator_characterization_mode;
	int motor_state;
	float torq_current_val;


	int enable_rotor_chirp = 0;
 80078f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078f6:	2200      	movs	r2, #0
 80078f8:	601a      	str	r2, [r3, #0]
	int chirp_cycle;
	int chirp_dwell_cycle;
	float chirp_time;
	float rotor_chirp_start_freq = ROTOR_CHIRP_START_FREQ;
 80078fa:	4b95      	ldr	r3, [pc, #596]	; (8007b50 <main+0x370>)
 80078fc:	f207 5244 	addw	r2, r7, #1348	; 0x544
 8007900:	6013      	str	r3, [r2, #0]
	float rotor_chirp_end_freq = ROTOR_CHIRP_END_FREQ;
 8007902:	4b94      	ldr	r3, [pc, #592]	; (8007b54 <main+0x374>)
 8007904:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8007908:	6013      	str	r3, [r2, #0]
	float rotor_chirp_period = ROTOR_CHIRP_PERIOD;
 800790a:	4b93      	ldr	r3, [pc, #588]	; (8007b58 <main+0x378>)
 800790c:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8007910:	6013      	str	r3, [r2, #0]
	float rotor_chirp_amplitude;
	int rotor_chirp_step_period;

	float pendulum_position_command;

	int enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 8007912:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
	int enable_rotor_position_step_response_cycle = ENABLE_ROTOR_POSITION_STEP_RESPONSE_CYCLE;
 800791a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
	int disable_mod_sin_rotor_tracking = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
	int sine_drive_transition = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
	float mod_sin_amplitude = MOD_SIN_AMPLITUDE;
 800792e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007932:	4a8a      	ldr	r2, [pc, #552]	; (8007b5c <main+0x37c>)
 8007934:	601a      	str	r2, [r3, #0]
	float rotor_control_sin_amplitude = MOD_SIN_AMPLITUDE;
 8007936:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 800793a:	4a88      	ldr	r2, [pc, #544]	; (8007b5c <main+0x37c>)
 800793c:	601a      	str	r2, [r3, #0]
	float rotor_sine_drive, rotor_sine_drive_mod;
	float rotor_mod_control;
	float mod_sin_carrier_frequency;

	int enable_pendulum_position_impulse_response_cycle = 0;
 800793e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
	int enable_rotor_tracking_comb_signal;
	float rotor_track_comb_signal_frequency;
	float rotor_track_comb_command;
	float rotor_track_comb_amplitude;

	int enable_disturbance_rejection_step = 0;
 8007946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
	int enable_noise_rejection_step = 0;
 800794e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
	int enable_plant_rejection_step = 0;
 8007956:	f107 0320 	add.w	r3, r7, #32
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
	int enable_sensitivity_fnc_step = 0;
 800795e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
	float noise_rej_signal_prev, noise_rej_signal_filter_prev;

	char config_message[16];
	int config_command;
	int display_parameter;
	int step_size = 0;
 8007966:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
	float adjust_increment = 0.5;
 800796e:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8007972:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8007976:	601a      	str	r2, [r3, #0]

	/*
	* Default select_suspended_mode
	*/

	select_suspended_mode = ENABLE_SUSPENDED_PENDULUM_CONTROL;
 8007978:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]

	/* STM32xx HAL library initialization */
	HAL_Init();
 8007980:	f7fc fb94 	bl	80040ac <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8007984:	f7ff fc74 	bl	8007270 <SystemClock_Config>

	//----- Initialize Motor Control Library
	/* Set the L6474 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 8007988:	2101      	movs	r1, #1
 800798a:	f641 104a 	movw	r0, #6474	; 0x194a
 800798e:	f7fc fac9 	bl	8003f24 <BSP_MotorControl_SetNbDevices>
	/* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
	/* device with the structure gL6474InitParams declared in the the main.c file */
	/* and comment the subsequent call having the NULL pointer                   */
	// BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);

	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
 8007992:	4973      	ldr	r1, [pc, #460]	; (8007b60 <main+0x380>)
 8007994:	f641 104a 	movw	r0, #6474	; 0x194a
 8007998:	f7fc f86a 	bl	8003a70 <BSP_MotorControl_Init>

	/*
	 * Initialize Timer and UART
	 */

	MX_TIM3_Init();
 800799c:	f00a fba4 	bl	80120e8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80079a0:	f00a fbea 	bl	8012178 <MX_USART2_UART_Init>

	/*
	 * Motor Range Initialization
	 */

	HAL_Delay(1);
 80079a4:	2001      	movs	r0, #1
 80079a6:	f7fc fbfb 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_UPPER_INIT);
 80079aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80079ae:	2000      	movs	r0, #0
 80079b0:	f7fc f9de 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 80079b4:	2001      	movs	r0, #1
 80079b6:	f7fc fbf3 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_UPPER_INIT);
 80079ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80079be:	2000      	movs	r0, #0
 80079c0:	f7fc f9fe 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 80079c4:	2001      	movs	r0, #1
 80079c6:	f7fc fbeb 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_LOWER_INIT);
 80079ca:	211e      	movs	r1, #30
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7fc f9cf 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 80079d2:	2001      	movs	r0, #1
 80079d4:	f7fc fbe4 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_LOWER_INIT);
 80079d8:	211e      	movs	r1, #30
 80079da:	2000      	movs	r0, #0
 80079dc:	f7fc f9f0 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 80079e0:	2001      	movs	r0, #1
 80079e2:	f7fc fbdd 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL_UPPER_INIT);
 80079e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80079ea:	2000      	movs	r0, #0
 80079ec:	f7fc f94e 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 80079f0:	2001      	movs	r0, #1
 80079f2:	f7fc fbd5 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL_UPPER_INIT);
 80079f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80079fa:	2000      	movs	r0, #0
 80079fc:	f7fc f96e 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 8007a00:	2001      	movs	r0, #1
 8007a02:	f7fc fbcd 	bl	80041a0 <HAL_Delay>

	/*
	* Default Starting Control Configuration
	*/

	max_accel = MAX_ACCEL;
 8007a06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a0a:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
	max_decel = MAX_DECEL;
 8007a0e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a12:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
	max_speed = MAX_SPEED_MODE_1;
 8007a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a1a:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
	min_speed = MIN_SPEED_MODE_1;
 8007a1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007a22:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606

	HAL_Delay(1);
 8007a26:	2001      	movs	r0, #1
 8007a28:	f7fc fbba 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8007a2c:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 8007a30:	4619      	mov	r1, r3
 8007a32:	2000      	movs	r0, #0
 8007a34:	f7fc f99c 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8007a38:	2001      	movs	r0, #1
 8007a3a:	f7fc fbb1 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 8007a3e:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 8007a42:	4619      	mov	r1, r3
 8007a44:	2000      	movs	r0, #0
 8007a46:	f7fc f9bb 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f7fc fba8 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, max_accel);
 8007a50:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 8007a54:	4619      	mov	r1, r3
 8007a56:	2000      	movs	r0, #0
 8007a58:	f7fc f918 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	f7fc fb9f 	bl	80041a0 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, max_decel);
 8007a62:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 8007a66:	4619      	mov	r1, r3
 8007a68:	2000      	movs	r0, #0
 8007a6a:	f7fc f937 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f7fc fb96 	bl	80041a0 <HAL_Delay>

	torq_current_val = 800;
 8007a74:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007a78:	4a3a      	ldr	r2, [pc, #232]	; (8007b64 <main+0x384>)
 8007a7a:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8007a7c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007a80:	edd3 7a00 	vldr	s15, [r3]
 8007a84:	eeb0 0a67 	vmov.f32	s0, s15
 8007a88:	2109      	movs	r1, #9
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f7fa f9ce 	bl	8001e2c <L6474_SetAnalogValue>


	proportional = PRIMARY_PROPORTIONAL_MODE_1;
 8007a90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8007a94:	4a34      	ldr	r2, [pc, #208]	; (8007b68 <main+0x388>)
 8007a96:	601a      	str	r2, [r3, #0]
	integral = PRIMARY_INTEGRAL_MODE_1;
 8007a98:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
	derivative = PRIMARY_DERIVATIVE_MODE_1;
 8007aa2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8007aa6:	4a31      	ldr	r2, [pc, #196]	; (8007b6c <main+0x38c>)
 8007aa8:	601a      	str	r2, [r3, #0]

	rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_1;
 8007aaa:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8007aae:	4a30      	ldr	r2, [pc, #192]	; (8007b70 <main+0x390>)
 8007ab0:	601a      	str	r2, [r3, #0]
	rotor_i_gain = SECONDARY_INTEGRAL_MODE_1;
 8007ab2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8007ab6:	f04f 0200 	mov.w	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
	rotor_d_gain = SECONDARY_DERIVATIVE_MODE_1;
 8007abc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007ac0:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <main+0x394>)
 8007ac2:	601a      	str	r2, [r3, #0]

	/*
	* Disable adaptive_mode by default
	*/

	enable_adaptive_mode = 0;
 8007ac4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]

	/*
	* Allocate user interactive command strings
	*/

	message_received = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007acc:	f507 6491 	add.w	r4, r7, #1160	; 0x488
 8007ad0:	20c8      	movs	r0, #200	; 0xc8
 8007ad2:	f00a fdcf 	bl	8012674 <malloc>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	6023      	str	r3, [r4, #0]
	if (message_received == NULL) {
 8007ada:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d118      	bne.n	8007b16 <main+0x336>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007ae4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007ae8:	4a23      	ldr	r2, [pc, #140]	; (8007b78 <main+0x398>)
 8007aea:	461c      	mov	r4, r3
 8007aec:	4615      	mov	r5, r2
 8007aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007af6:	c403      	stmia	r4!, {r0, r1}
 8007af8:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007afa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f8 fb78 	bl	80001f4 <strlen>
 8007b04:	4603      	mov	r3, r0
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b10:	481a      	ldr	r0, [pc, #104]	; (8007b7c <main+0x39c>)
 8007b12:	f7fe ff4f 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_1 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007b16:	f207 4484 	addw	r4, r7, #1156	; 0x484
 8007b1a:	20c8      	movs	r0, #200	; 0xc8
 8007b1c:	f00a fdaa 	bl	8012674 <malloc>
 8007b20:	4603      	mov	r3, r0
 8007b22:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_1 == NULL) {
 8007b24:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d134      	bne.n	8007b98 <main+0x3b8>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007b2e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007b32:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <main+0x398>)
 8007b34:	461c      	mov	r4, r3
 8007b36:	4615      	mov	r5, r2
 8007b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b40:	c403      	stmia	r4!, {r0, r1}
 8007b42:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007b44:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007b48:	e01a      	b.n	8007b80 <main+0x3a0>
 8007b4a:	bf00      	nop
 8007b4c:	40d5559b 	.word	0x40d5559b
 8007b50:	3a83126f 	.word	0x3a83126f
 8007b54:	3d4ccccd 	.word	0x3d4ccccd
 8007b58:	471c4000 	.word	0x471c4000
 8007b5c:	44160000 	.word	0x44160000
 8007b60:	20000170 	.word	0x20000170
 8007b64:	44480000 	.word	0x44480000
 8007b68:	44305333 	.word	0x44305333
 8007b6c:	42bccccd 	.word	0x42bccccd
 8007b70:	4087ae14 	.word	0x4087ae14
 8007b74:	41047ae1 	.word	0x41047ae1
 8007b78:	080181e0 	.word	0x080181e0
 8007b7c:	20000f20 	.word	0x20000f20
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7f8 fb37 	bl	80001f4 <strlen>
 8007b86:	4603      	mov	r3, r0
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b92:	48c6      	ldr	r0, [pc, #792]	; (8007eac <main+0x6cc>)
 8007b94:	f7fe ff0e 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}
	mode_string_mode_2 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007b98:	f507 6490 	add.w	r4, r7, #1152	; 0x480
 8007b9c:	20c8      	movs	r0, #200	; 0xc8
 8007b9e:	f00a fd69 	bl	8012674 <malloc>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_2 == NULL) {
 8007ba6:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d118      	bne.n	8007be2 <main+0x402>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007bb0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007bb4:	4abe      	ldr	r2, [pc, #760]	; (8007eb0 <main+0x6d0>)
 8007bb6:	461c      	mov	r4, r3
 8007bb8:	4615      	mov	r5, r2
 8007bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007bc2:	c403      	stmia	r4!, {r0, r1}
 8007bc4:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007bc6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7f8 fb12 	bl	80001f4 <strlen>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bdc:	48b3      	ldr	r0, [pc, #716]	; (8007eac <main+0x6cc>)
 8007bde:	f7fe fee9 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_3 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007be2:	f207 447c 	addw	r4, r7, #1148	; 0x47c
 8007be6:	20c8      	movs	r0, #200	; 0xc8
 8007be8:	f00a fd44 	bl	8012674 <malloc>
 8007bec:	4603      	mov	r3, r0
 8007bee:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_3 == NULL) {
 8007bf0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d118      	bne.n	8007c2c <main+0x44c>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007bfa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007bfe:	4aac      	ldr	r2, [pc, #688]	; (8007eb0 <main+0x6d0>)
 8007c00:	461c      	mov	r4, r3
 8007c02:	4615      	mov	r5, r2
 8007c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c0c:	c403      	stmia	r4!, {r0, r1}
 8007c0e:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007c10:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7f8 faed 	bl	80001f4 <strlen>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c26:	48a1      	ldr	r0, [pc, #644]	; (8007eac <main+0x6cc>)
 8007c28:	f7fe fec4 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_4 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007c2c:	f507 648f 	add.w	r4, r7, #1144	; 0x478
 8007c30:	20c8      	movs	r0, #200	; 0xc8
 8007c32:	f00a fd1f 	bl	8012674 <malloc>
 8007c36:	4603      	mov	r3, r0
 8007c38:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_4 == NULL) {
 8007c3a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d118      	bne.n	8007c76 <main+0x496>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007c44:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007c48:	4a99      	ldr	r2, [pc, #612]	; (8007eb0 <main+0x6d0>)
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	4615      	mov	r5, r2
 8007c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c56:	c403      	stmia	r4!, {r0, r1}
 8007c58:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007c5a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7f8 fac8 	bl	80001f4 <strlen>
 8007c64:	4603      	mov	r3, r0
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c70:	488e      	ldr	r0, [pc, #568]	; (8007eac <main+0x6cc>)
 8007c72:	f7fe fe9f 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_5 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007c76:	f207 4474 	addw	r4, r7, #1140	; 0x474
 8007c7a:	20c8      	movs	r0, #200	; 0xc8
 8007c7c:	f00a fcfa 	bl	8012674 <malloc>
 8007c80:	4603      	mov	r3, r0
 8007c82:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_5 == NULL) {
 8007c84:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d118      	bne.n	8007cc0 <main+0x4e0>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007c8e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007c92:	4a87      	ldr	r2, [pc, #540]	; (8007eb0 <main+0x6d0>)
 8007c94:	461c      	mov	r4, r3
 8007c96:	4615      	mov	r5, r2
 8007c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ca0:	c403      	stmia	r4!, {r0, r1}
 8007ca2:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007ca4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f8 faa3 	bl	80001f4 <strlen>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cba:	487c      	ldr	r0, [pc, #496]	; (8007eac <main+0x6cc>)
 8007cbc:	f7fe fe7a 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_8 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007cc0:	f507 648e 	add.w	r4, r7, #1136	; 0x470
 8007cc4:	20c8      	movs	r0, #200	; 0xc8
 8007cc6:	f00a fcd5 	bl	8012674 <malloc>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_8 == NULL) {
 8007cce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d118      	bne.n	8007d0a <main+0x52a>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007cd8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007cdc:	4a74      	ldr	r2, [pc, #464]	; (8007eb0 <main+0x6d0>)
 8007cde:	461c      	mov	r4, r3
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007cea:	c403      	stmia	r4!, {r0, r1}
 8007cec:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007cee:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7f8 fa7e 	bl	80001f4 <strlen>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d04:	4869      	ldr	r0, [pc, #420]	; (8007eac <main+0x6cc>)
 8007d06:	f7fe fe55 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_single_pid = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007d0a:	f207 446c 	addw	r4, r7, #1132	; 0x46c
 8007d0e:	20c8      	movs	r0, #200	; 0xc8
 8007d10:	f00a fcb0 	bl	8012674 <malloc>
 8007d14:	4603      	mov	r3, r0
 8007d16:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_single_pid == NULL) {
 8007d18:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d118      	bne.n	8007d54 <main+0x574>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007d22:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007d26:	4a62      	ldr	r2, [pc, #392]	; (8007eb0 <main+0x6d0>)
 8007d28:	461c      	mov	r4, r3
 8007d2a:	4615      	mov	r5, r2
 8007d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d34:	c403      	stmia	r4!, {r0, r1}
 8007d36:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007d38:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7f8 fa59 	bl	80001f4 <strlen>
 8007d42:	4603      	mov	r3, r0
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4e:	4857      	ldr	r0, [pc, #348]	; (8007eac <main+0x6cc>)
 8007d50:	f7fe fe30 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_test = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007d54:	f507 648d 	add.w	r4, r7, #1128	; 0x468
 8007d58:	20c8      	movs	r0, #200	; 0xc8
 8007d5a:	f00a fc8b 	bl	8012674 <malloc>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_test == NULL) {
 8007d62:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d118      	bne.n	8007d9e <main+0x5be>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007d6c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007d70:	4a4f      	ldr	r2, [pc, #316]	; (8007eb0 <main+0x6d0>)
 8007d72:	461c      	mov	r4, r3
 8007d74:	4615      	mov	r5, r2
 8007d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007d7e:	c403      	stmia	r4!, {r0, r1}
 8007d80:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007d82:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7f8 fa34 	bl	80001f4 <strlen>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d98:	4844      	ldr	r0, [pc, #272]	; (8007eac <main+0x6cc>)
 8007d9a:	f7fe fe0b 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_control = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007d9e:	f207 4464 	addw	r4, r7, #1124	; 0x464
 8007da2:	20c8      	movs	r0, #200	; 0xc8
 8007da4:	f00a fc66 	bl	8012674 <malloc>
 8007da8:	4603      	mov	r3, r0
 8007daa:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_control == NULL) {
 8007dac:	f207 4364 	addw	r3, r7, #1124	; 0x464
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d118      	bne.n	8007de8 <main+0x608>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007db6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007dba:	4a3d      	ldr	r2, [pc, #244]	; (8007eb0 <main+0x6d0>)
 8007dbc:	461c      	mov	r4, r3
 8007dbe:	4615      	mov	r5, r2
 8007dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007dc8:	c403      	stmia	r4!, {r0, r1}
 8007dca:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007dcc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f8 fa0f 	bl	80001f4 <strlen>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007de2:	4832      	ldr	r0, [pc, #200]	; (8007eac <main+0x6cc>)
 8007de4:	f7fe fde6 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_high_speed_test = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007de8:	f507 648c 	add.w	r4, r7, #1120	; 0x460
 8007dec:	20c8      	movs	r0, #200	; 0xc8
 8007dee:	f00a fc41 	bl	8012674 <malloc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_high_speed_test == NULL) {
 8007df6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d118      	bne.n	8007e32 <main+0x652>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007e00:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007e04:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <main+0x6d0>)
 8007e06:	461c      	mov	r4, r3
 8007e08:	4615      	mov	r5, r2
 8007e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e12:	c403      	stmia	r4!, {r0, r1}
 8007e14:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007e16:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 f9ea 	bl	80001f4 <strlen>
 8007e20:	4603      	mov	r3, r0
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e2c:	481f      	ldr	r0, [pc, #124]	; (8007eac <main+0x6cc>)
 8007e2e:	f7fe fdc1 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_motor_characterization_mode = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007e32:	f207 445c 	addw	r4, r7, #1116	; 0x45c
 8007e36:	20c8      	movs	r0, #200	; 0xc8
 8007e38:	f00a fc1c 	bl	8012674 <malloc>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_motor_characterization_mode == NULL) {
 8007e40:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d118      	bne.n	8007e7c <main+0x69c>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007e4a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007e4e:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <main+0x6d0>)
 8007e50:	461c      	mov	r4, r3
 8007e52:	4615      	mov	r5, r2
 8007e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e5c:	c403      	stmia	r4!, {r0, r1}
 8007e5e:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007e60:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7f8 f9c5 	bl	80001f4 <strlen>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e76:	480d      	ldr	r0, [pc, #52]	; (8007eac <main+0x6cc>)
 8007e78:	f7fe fd9c 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_pendulum_sysid_test = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007e7c:	f507 648b 	add.w	r4, r7, #1112	; 0x458
 8007e80:	20c8      	movs	r0, #200	; 0xc8
 8007e82:	f00a fbf7 	bl	8012674 <malloc>
 8007e86:	4603      	mov	r3, r0
 8007e88:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_pendulum_sysid_test == NULL) {
 8007e8a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11d      	bne.n	8007ed0 <main+0x6f0>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007e94:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007e98:	4a05      	ldr	r2, [pc, #20]	; (8007eb0 <main+0x6d0>)
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ea6:	c403      	stmia	r4!, {r0, r1}
 8007ea8:	8022      	strh	r2, [r4, #0]
 8007eaa:	e003      	b.n	8007eb4 <main+0x6d4>
 8007eac:	20000f20 	.word	0x20000f20
 8007eb0:	080181e0 	.word	0x080181e0
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007eb4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7f8 f99b 	bl	80001f4 <strlen>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eca:	48a8      	ldr	r0, [pc, #672]	; (800816c <main+0x98c>)
 8007ecc:	f7fe fd72 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_dec_accel = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007ed0:	f207 4454 	addw	r4, r7, #1108	; 0x454
 8007ed4:	20c8      	movs	r0, #200	; 0xc8
 8007ed6:	f00a fbcd 	bl	8012674 <malloc>
 8007eda:	4603      	mov	r3, r0
 8007edc:	6023      	str	r3, [r4, #0]
	if (mode_string_dec_accel == NULL) {
 8007ede:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d118      	bne.n	8007f1a <main+0x73a>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007ee8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007eec:	4aa0      	ldr	r2, [pc, #640]	; (8008170 <main+0x990>)
 8007eee:	461c      	mov	r4, r3
 8007ef0:	4615      	mov	r5, r2
 8007ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007efa:	c403      	stmia	r4!, {r0, r1}
 8007efc:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007efe:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 f976 	bl	80001f4 <strlen>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f14:	4895      	ldr	r0, [pc, #596]	; (800816c <main+0x98c>)
 8007f16:	f7fe fd4d 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_inc_accel = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007f1a:	f507 648a 	add.w	r4, r7, #1104	; 0x450
 8007f1e:	20c8      	movs	r0, #200	; 0xc8
 8007f20:	f00a fba8 	bl	8012674 <malloc>
 8007f24:	4603      	mov	r3, r0
 8007f26:	6023      	str	r3, [r4, #0]
	if (mode_string_inc_accel == NULL) {
 8007f28:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d118      	bne.n	8007f64 <main+0x784>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007f32:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007f36:	4a8e      	ldr	r2, [pc, #568]	; (8008170 <main+0x990>)
 8007f38:	461c      	mov	r4, r3
 8007f3a:	4615      	mov	r5, r2
 8007f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f44:	c403      	stmia	r4!, {r0, r1}
 8007f46:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007f48:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7f8 f951 	bl	80001f4 <strlen>
 8007f52:	4603      	mov	r3, r0
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f5e:	4883      	ldr	r0, [pc, #524]	; (800816c <main+0x98c>)
 8007f60:	f7fe fd28 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_inc_amp = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007f64:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8007f68:	20c8      	movs	r0, #200	; 0xc8
 8007f6a:	f00a fb83 	bl	8012674 <malloc>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6023      	str	r3, [r4, #0]
	if (mode_string_inc_amp == NULL) {
 8007f72:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d118      	bne.n	8007fae <main+0x7ce>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007f7c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007f80:	4a7b      	ldr	r2, [pc, #492]	; (8008170 <main+0x990>)
 8007f82:	461c      	mov	r4, r3
 8007f84:	4615      	mov	r5, r2
 8007f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f8e:	c403      	stmia	r4!, {r0, r1}
 8007f90:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007f92:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f8 f92c 	bl	80001f4 <strlen>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa8:	4870      	ldr	r0, [pc, #448]	; (800816c <main+0x98c>)
 8007faa:	f7fe fd03 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_dec_amp = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007fae:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8007fb2:	20c8      	movs	r0, #200	; 0xc8
 8007fb4:	f00a fb5e 	bl	8012674 <malloc>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	6023      	str	r3, [r4, #0]
	if (mode_string_dec_amp == NULL) {
 8007fbc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d118      	bne.n	8007ff8 <main+0x818>
		sprintf(test_msg, "Memory allocation error\r\n");
 8007fc6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007fca:	4a69      	ldr	r2, [pc, #420]	; (8008170 <main+0x990>)
 8007fcc:	461c      	mov	r4, r3
 8007fce:	4615      	mov	r5, r2
 8007fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007fd8:	c403      	stmia	r4!, {r0, r1}
 8007fda:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8007fdc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 f907 	bl	80001f4 <strlen>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff2:	485e      	ldr	r0, [pc, #376]	; (800816c <main+0x98c>)
 8007ff4:	f7fe fcde 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_load_dist = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8007ff8:	f207 4444 	addw	r4, r7, #1092	; 0x444
 8007ffc:	20c8      	movs	r0, #200	; 0xc8
 8007ffe:	f00a fb39 	bl	8012674 <malloc>
 8008002:	4603      	mov	r3, r0
 8008004:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_load_dist == NULL) {
 8008006:	f207 4344 	addw	r3, r7, #1092	; 0x444
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d118      	bne.n	8008042 <main+0x862>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008010:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008014:	4a56      	ldr	r2, [pc, #344]	; (8008170 <main+0x990>)
 8008016:	461c      	mov	r4, r3
 8008018:	4615      	mov	r5, r2
 800801a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800801c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800801e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008022:	c403      	stmia	r4!, {r0, r1}
 8008024:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008026:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800802a:	4618      	mov	r0, r3
 800802c:	f7f8 f8e2 	bl	80001f4 <strlen>
 8008030:	4603      	mov	r3, r0
 8008032:	b29a      	uxth	r2, r3
 8008034:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800803c:	484b      	ldr	r0, [pc, #300]	; (800816c <main+0x98c>)
 800803e:	f7fe fcb9 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_load_dist_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008042:	f507 6488 	add.w	r4, r7, #1088	; 0x440
 8008046:	20c8      	movs	r0, #200	; 0xc8
 8008048:	f00a fb14 	bl	8012674 <malloc>
 800804c:	4603      	mov	r3, r0
 800804e:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_load_dist_step == NULL) {
 8008050:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d118      	bne.n	800808c <main+0x8ac>
		sprintf(test_msg, "Memory allocation error\r\n");
 800805a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800805e:	4a44      	ldr	r2, [pc, #272]	; (8008170 <main+0x990>)
 8008060:	461c      	mov	r4, r3
 8008062:	4615      	mov	r5, r2
 8008064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008068:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800806c:	c403      	stmia	r4!, {r0, r1}
 800806e:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008070:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008074:	4618      	mov	r0, r3
 8008076:	f7f8 f8bd 	bl	80001f4 <strlen>
 800807a:	4603      	mov	r3, r0
 800807c:	b29a      	uxth	r2, r3
 800807e:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008086:	4839      	ldr	r0, [pc, #228]	; (800816c <main+0x98c>)
 8008088:	f7fe fc94 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_noise_dist_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800808c:	f207 443c 	addw	r4, r7, #1084	; 0x43c
 8008090:	20c8      	movs	r0, #200	; 0xc8
 8008092:	f00a faef 	bl	8012674 <malloc>
 8008096:	4603      	mov	r3, r0
 8008098:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_noise_dist_step == NULL) {
 800809a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d118      	bne.n	80080d6 <main+0x8f6>
		sprintf(test_msg, "Memory allocation error\r\n");
 80080a4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80080a8:	4a31      	ldr	r2, [pc, #196]	; (8008170 <main+0x990>)
 80080aa:	461c      	mov	r4, r3
 80080ac:	4615      	mov	r5, r2
 80080ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080b6:	c403      	stmia	r4!, {r0, r1}
 80080b8:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 80080ba:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f8 f898 	bl	80001f4 <strlen>
 80080c4:	4603      	mov	r3, r0
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d0:	4826      	ldr	r0, [pc, #152]	; (800816c <main+0x98c>)
 80080d2:	f7fe fc6f 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_mode_plant_dist_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80080d6:	f507 6487 	add.w	r4, r7, #1080	; 0x438
 80080da:	20c8      	movs	r0, #200	; 0xc8
 80080dc:	f00a faca 	bl	8012674 <malloc>
 80080e0:	4603      	mov	r3, r0
 80080e2:	6023      	str	r3, [r4, #0]
	if (mode_string_mode_plant_dist_step == NULL) {
 80080e4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d118      	bne.n	8008120 <main+0x940>
		sprintf(test_msg, "Memory allocation error\r\n");
 80080ee:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80080f2:	4a1f      	ldr	r2, [pc, #124]	; (8008170 <main+0x990>)
 80080f4:	461c      	mov	r4, r3
 80080f6:	4615      	mov	r5, r2
 80080f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008100:	c403      	stmia	r4!, {r0, r1}
 8008102:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008104:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008108:	4618      	mov	r0, r3
 800810a:	f7f8 f873 	bl	80001f4 <strlen>
 800810e:	4603      	mov	r3, r0
 8008110:	b29a      	uxth	r2, r3
 8008112:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800811a:	4814      	ldr	r0, [pc, #80]	; (800816c <main+0x98c>)
 800811c:	f7fe fc4a 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	mode_string_stop = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008120:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8008124:	20c8      	movs	r0, #200	; 0xc8
 8008126:	f00a faa5 	bl	8012674 <malloc>
 800812a:	4603      	mov	r3, r0
 800812c:	6023      	str	r3, [r4, #0]
	if (mode_string_stop == NULL) {
 800812e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11d      	bne.n	8008174 <main+0x994>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008138:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800813c:	4a0c      	ldr	r2, [pc, #48]	; (8008170 <main+0x990>)
 800813e:	461c      	mov	r4, r3
 8008140:	4615      	mov	r5, r2
 8008142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008146:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800814a:	c403      	stmia	r4!, {r0, r1}
 800814c:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 800814e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 f84e 	bl	80001f4 <strlen>
 8008158:	4603      	mov	r3, r0
 800815a:	b29a      	uxth	r2, r3
 800815c:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008164:	4801      	ldr	r0, [pc, #4]	; (800816c <main+0x98c>)
 8008166:	f7fe fc25 	bl	80069b4 <HAL_UART_Transmit>
 800816a:	e003      	b.n	8008174 <main+0x994>
 800816c:	20000f20 	.word	0x20000f20
 8008170:	080181e0 	.word	0x080181e0
				HAL_MAX_DELAY);
	}
	mode_string_dec_pend_p = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008174:	f507 6486 	add.w	r4, r7, #1072	; 0x430
 8008178:	20c8      	movs	r0, #200	; 0xc8
 800817a:	f00a fa7b 	bl	8012674 <malloc>
 800817e:	4603      	mov	r3, r0
 8008180:	6023      	str	r3, [r4, #0]
	mode_string_inc_pend_p = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008182:	f207 442c 	addw	r4, r7, #1068	; 0x42c
 8008186:	20c8      	movs	r0, #200	; 0xc8
 8008188:	f00a fa74 	bl	8012674 <malloc>
 800818c:	4603      	mov	r3, r0
 800818e:	6023      	str	r3, [r4, #0]
	mode_string_dec_pend_i = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008190:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8008194:	20c8      	movs	r0, #200	; 0xc8
 8008196:	f00a fa6d 	bl	8012674 <malloc>
 800819a:	4603      	mov	r3, r0
 800819c:	6023      	str	r3, [r4, #0]
	mode_string_inc_pend_i = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800819e:	f207 4424 	addw	r4, r7, #1060	; 0x424
 80081a2:	20c8      	movs	r0, #200	; 0xc8
 80081a4:	f00a fa66 	bl	8012674 <malloc>
 80081a8:	4603      	mov	r3, r0
 80081aa:	6023      	str	r3, [r4, #0]
	mode_string_dec_pend_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081ac:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 80081b0:	20c8      	movs	r0, #200	; 0xc8
 80081b2:	f00a fa5f 	bl	8012674 <malloc>
 80081b6:	4603      	mov	r3, r0
 80081b8:	6023      	str	r3, [r4, #0]
	mode_string_inc_pend_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081ba:	f207 441c 	addw	r4, r7, #1052	; 0x41c
 80081be:	20c8      	movs	r0, #200	; 0xc8
 80081c0:	f00a fa58 	bl	8012674 <malloc>
 80081c4:	4603      	mov	r3, r0
 80081c6:	6023      	str	r3, [r4, #0]
	mode_string_dec_rotor_p = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081c8:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 80081cc:	20c8      	movs	r0, #200	; 0xc8
 80081ce:	f00a fa51 	bl	8012674 <malloc>
 80081d2:	4603      	mov	r3, r0
 80081d4:	6023      	str	r3, [r4, #0]
	mode_string_inc_rotor_p = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081d6:	f207 4414 	addw	r4, r7, #1044	; 0x414
 80081da:	20c8      	movs	r0, #200	; 0xc8
 80081dc:	f00a fa4a 	bl	8012674 <malloc>
 80081e0:	4603      	mov	r3, r0
 80081e2:	6023      	str	r3, [r4, #0]
	mode_string_dec_rotor_i = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081e4:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 80081e8:	20c8      	movs	r0, #200	; 0xc8
 80081ea:	f00a fa43 	bl	8012674 <malloc>
 80081ee:	4603      	mov	r3, r0
 80081f0:	6023      	str	r3, [r4, #0]
	mode_string_inc_rotor_i = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80081f2:	f207 440c 	addw	r4, r7, #1036	; 0x40c
 80081f6:	20c8      	movs	r0, #200	; 0xc8
 80081f8:	f00a fa3c 	bl	8012674 <malloc>
 80081fc:	4603      	mov	r3, r0
 80081fe:	6023      	str	r3, [r4, #0]
	mode_string_dec_rotor_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008200:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8008204:	20c8      	movs	r0, #200	; 0xc8
 8008206:	f00a fa35 	bl	8012674 <malloc>
 800820a:	4603      	mov	r3, r0
 800820c:	6023      	str	r3, [r4, #0]
	mode_string_inc_rotor_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800820e:	f207 4404 	addw	r4, r7, #1028	; 0x404
 8008212:	20c8      	movs	r0, #200	; 0xc8
 8008214:	f00a fa2e 	bl	8012674 <malloc>
 8008218:	4603      	mov	r3, r0
 800821a:	6023      	str	r3, [r4, #0]
	mode_string_dec_torq_c = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800821c:	f507 6480 	add.w	r4, r7, #1024	; 0x400
 8008220:	20c8      	movs	r0, #200	; 0xc8
 8008222:	f00a fa27 	bl	8012674 <malloc>
 8008226:	4603      	mov	r3, r0
 8008228:	6023      	str	r3, [r4, #0]
	mode_string_inc_torq_c = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800822a:	f507 747f 	add.w	r4, r7, #1020	; 0x3fc
 800822e:	20c8      	movs	r0, #200	; 0xc8
 8008230:	f00a fa20 	bl	8012674 <malloc>
 8008234:	4603      	mov	r3, r0
 8008236:	6023      	str	r3, [r4, #0]
	mode_string_dec_max_s = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008238:	f507 747e 	add.w	r4, r7, #1016	; 0x3f8
 800823c:	20c8      	movs	r0, #200	; 0xc8
 800823e:	f00a fa19 	bl	8012674 <malloc>
 8008242:	4603      	mov	r3, r0
 8008244:	6023      	str	r3, [r4, #0]
	mode_string_inc_max_s = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008246:	f507 747d 	add.w	r4, r7, #1012	; 0x3f4
 800824a:	20c8      	movs	r0, #200	; 0xc8
 800824c:	f00a fa12 	bl	8012674 <malloc>
 8008250:	4603      	mov	r3, r0
 8008252:	6023      	str	r3, [r4, #0]
	mode_string_dec_min_s = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008254:	f507 747c 	add.w	r4, r7, #1008	; 0x3f0
 8008258:	20c8      	movs	r0, #200	; 0xc8
 800825a:	f00a fa0b 	bl	8012674 <malloc>
 800825e:	4603      	mov	r3, r0
 8008260:	6023      	str	r3, [r4, #0]
	mode_string_inc_min_s = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008262:	f507 747b 	add.w	r4, r7, #1004	; 0x3ec
 8008266:	20c8      	movs	r0, #200	; 0xc8
 8008268:	f00a fa04 	bl	8012674 <malloc>
 800826c:	4603      	mov	r3, r0
 800826e:	6023      	str	r3, [r4, #0]
	mode_string_dec_max_a = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008270:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 8008274:	20c8      	movs	r0, #200	; 0xc8
 8008276:	f00a f9fd 	bl	8012674 <malloc>
 800827a:	4603      	mov	r3, r0
 800827c:	6023      	str	r3, [r4, #0]
	mode_string_inc_max_a = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800827e:	f507 7479 	add.w	r4, r7, #996	; 0x3e4
 8008282:	20c8      	movs	r0, #200	; 0xc8
 8008284:	f00a f9f6 	bl	8012674 <malloc>
 8008288:	4603      	mov	r3, r0
 800828a:	6023      	str	r3, [r4, #0]
	mode_string_dec_max_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800828c:	f507 7478 	add.w	r4, r7, #992	; 0x3e0
 8008290:	20c8      	movs	r0, #200	; 0xc8
 8008292:	f00a f9ef 	bl	8012674 <malloc>
 8008296:	4603      	mov	r3, r0
 8008298:	6023      	str	r3, [r4, #0]
	mode_string_inc_max_d = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800829a:	f507 7477 	add.w	r4, r7, #988	; 0x3dc
 800829e:	20c8      	movs	r0, #200	; 0xc8
 80082a0:	f00a f9e8 	bl	8012674 <malloc>
 80082a4:	4603      	mov	r3, r0
 80082a6:	6023      	str	r3, [r4, #0]
	mode_string_enable_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082a8:	f507 7476 	add.w	r4, r7, #984	; 0x3d8
 80082ac:	20c8      	movs	r0, #200	; 0xc8
 80082ae:	f00a f9e1 	bl	8012674 <malloc>
 80082b2:	4603      	mov	r3, r0
 80082b4:	6023      	str	r3, [r4, #0]
	mode_string_disable_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082b6:	f507 7475 	add.w	r4, r7, #980	; 0x3d4
 80082ba:	20c8      	movs	r0, #200	; 0xc8
 80082bc:	f00a f9da 	bl	8012674 <malloc>
 80082c0:	4603      	mov	r3, r0
 80082c2:	6023      	str	r3, [r4, #0]
	mode_string_enable_load_dist = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082c4:	f507 7474 	add.w	r4, r7, #976	; 0x3d0
 80082c8:	20c8      	movs	r0, #200	; 0xc8
 80082ca:	f00a f9d3 	bl	8012674 <malloc>
 80082ce:	4603      	mov	r3, r0
 80082d0:	6023      	str	r3, [r4, #0]
	mode_string_disable_load_dist = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082d2:	f507 7473 	add.w	r4, r7, #972	; 0x3cc
 80082d6:	20c8      	movs	r0, #200	; 0xc8
 80082d8:	f00a f9cc 	bl	8012674 <malloc>
 80082dc:	4603      	mov	r3, r0
 80082de:	6023      	str	r3, [r4, #0]
	mode_string_enable_noise_rej_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082e0:	f507 7472 	add.w	r4, r7, #968	; 0x3c8
 80082e4:	20c8      	movs	r0, #200	; 0xc8
 80082e6:	f00a f9c5 	bl	8012674 <malloc>
 80082ea:	4603      	mov	r3, r0
 80082ec:	6023      	str	r3, [r4, #0]
	mode_string_disable_noise_rej_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082ee:	f507 7471 	add.w	r4, r7, #964	; 0x3c4
 80082f2:	20c8      	movs	r0, #200	; 0xc8
 80082f4:	f00a f9be 	bl	8012674 <malloc>
 80082f8:	4603      	mov	r3, r0
 80082fa:	6023      	str	r3, [r4, #0]
	mode_string_enable_sensitivity_fnc_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 80082fc:	f507 7470 	add.w	r4, r7, #960	; 0x3c0
 8008300:	20c8      	movs	r0, #200	; 0xc8
 8008302:	f00a f9b7 	bl	8012674 <malloc>
 8008306:	4603      	mov	r3, r0
 8008308:	6023      	str	r3, [r4, #0]
	mode_string_disable_sensitivity_fnc_step = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 800830a:	f507 746f 	add.w	r4, r7, #956	; 0x3bc
 800830e:	20c8      	movs	r0, #200	; 0xc8
 8008310:	f00a f9b0 	bl	8012674 <malloc>
 8008314:	4603      	mov	r3, r0
 8008316:	6023      	str	r3, [r4, #0]
	mode_string_inc_step_size = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008318:	f507 746e 	add.w	r4, r7, #952	; 0x3b8
 800831c:	20c8      	movs	r0, #200	; 0xc8
 800831e:	f00a f9a9 	bl	8012674 <malloc>
 8008322:	4603      	mov	r3, r0
 8008324:	6023      	str	r3, [r4, #0]
	mode_string_dec_step_size = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008326:	f507 746d 	add.w	r4, r7, #948	; 0x3b4
 800832a:	20c8      	movs	r0, #200	; 0xc8
 800832c:	f00a f9a2 	bl	8012674 <malloc>
 8008330:	4603      	mov	r3, r0
 8008332:	6023      	str	r3, [r4, #0]
	mode_string_select_mode_5 = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008334:	f507 746c 	add.w	r4, r7, #944	; 0x3b0
 8008338:	20c8      	movs	r0, #200	; 0xc8
 800833a:	f00a f99b 	bl	8012674 <malloc>
 800833e:	4603      	mov	r3, r0
 8008340:	6023      	str	r3, [r4, #0]
	mode_string_enable_high_speed_sampling = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008342:	f507 746b 	add.w	r4, r7, #940	; 0x3ac
 8008346:	20c8      	movs	r0, #200	; 0xc8
 8008348:	f00a f994 	bl	8012674 <malloc>
 800834c:	4603      	mov	r3, r0
 800834e:	6023      	str	r3, [r4, #0]
	mode_string_disable_high_speed_sampling = (char *)malloc(UART_RX_BUFFER_SIZE * sizeof(char));
 8008350:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8008354:	20c8      	movs	r0, #200	; 0xc8
 8008356:	f00a f98d 	bl	8012674 <malloc>
 800835a:	4603      	mov	r3, r0
 800835c:	6023      	str	r3, [r4, #0]

	/*
	 * Set user interactive command string values
	 */

	sprintf(mode_string_mode_1, "1");
 800835e:	f207 4384 	addw	r3, r7, #1156	; 0x484
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	49ca      	ldr	r1, [pc, #808]	; (8008690 <main+0xeb0>)
 8008366:	461a      	mov	r2, r3
 8008368:	460b      	mov	r3, r1
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_2, "2");
 800836e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	49c7      	ldr	r1, [pc, #796]	; (8008694 <main+0xeb4>)
 8008376:	461a      	mov	r2, r3
 8008378:	460b      	mov	r3, r1
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_3, "3");
 800837e:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	49c4      	ldr	r1, [pc, #784]	; (8008698 <main+0xeb8>)
 8008386:	461a      	mov	r2, r3
 8008388:	460b      	mov	r3, r1
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_4, "4");
 800838e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	49c1      	ldr	r1, [pc, #772]	; (800869c <main+0xebc>)
 8008396:	461a      	mov	r2, r3
 8008398:	460b      	mov	r3, r1
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_5, "m");
 800839e:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	49be      	ldr	r1, [pc, #760]	; (80086a0 <main+0xec0>)
 80083a6:	461a      	mov	r2, r3
 80083a8:	460b      	mov	r3, r1
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_8, "g");
 80083ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	49bb      	ldr	r1, [pc, #748]	; (80086a4 <main+0xec4>)
 80083b6:	461a      	mov	r2, r3
 80083b8:	460b      	mov	r3, r1
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_single_pid, "s");
 80083be:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	49b8      	ldr	r1, [pc, #736]	; (80086a8 <main+0xec8>)
 80083c6:	461a      	mov	r2, r3
 80083c8:	460b      	mov	r3, r1
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_test, "t");
 80083ce:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	49b5      	ldr	r1, [pc, #724]	; (80086ac <main+0xecc>)
 80083d6:	461a      	mov	r2, r3
 80083d8:	460b      	mov	r3, r1
 80083da:	881b      	ldrh	r3, [r3, #0]
 80083dc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_control, "r");
 80083de:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	49b2      	ldr	r1, [pc, #712]	; (80086b0 <main+0xed0>)
 80083e6:	461a      	mov	r2, r3
 80083e8:	460b      	mov	r3, r1
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_high_speed_test, "z");
 80083ee:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	49af      	ldr	r1, [pc, #700]	; (80086b4 <main+0xed4>)
 80083f6:	461a      	mov	r2, r3
 80083f8:	460b      	mov	r3, r1
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_motor_characterization_mode, "c");
 80083fe:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	49ac      	ldr	r1, [pc, #688]	; (80086b8 <main+0xed8>)
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_mode_pendulum_sysid_test, "p");
 800840e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	49a9      	ldr	r1, [pc, #676]	; (80086bc <main+0xedc>)
 8008416:	461a      	mov	r2, r3
 8008418:	460b      	mov	r3, r1
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_accel, "d");
 800841e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	49a6      	ldr	r1, [pc, #664]	; (80086c0 <main+0xee0>)
 8008426:	461a      	mov	r2, r3
 8008428:	460b      	mov	r3, r1
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_accel, "i");
 800842e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	49a3      	ldr	r1, [pc, #652]	; (80086c4 <main+0xee4>)
 8008436:	461a      	mov	r2, r3
 8008438:	460b      	mov	r3, r1
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_amp, "j");
 800843e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	49a0      	ldr	r1, [pc, #640]	; (80086c8 <main+0xee8>)
 8008446:	461a      	mov	r2, r3
 8008448:	460b      	mov	r3, r1
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_amp, "k");
 800844e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	499d      	ldr	r1, [pc, #628]	; (80086cc <main+0xeec>)
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_stop, "q");
 800845e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	499a      	ldr	r1, [pc, #616]	; (80086d0 <main+0xef0>)
 8008466:	461a      	mov	r2, r3
 8008468:	460b      	mov	r3, r1
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	8013      	strh	r3, [r2, #0]


	sprintf(mode_string_dec_pend_p, "a");
 800846e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4997      	ldr	r1, [pc, #604]	; (80086d4 <main+0xef4>)
 8008476:	461a      	mov	r2, r3
 8008478:	460b      	mov	r3, r1
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_pend_p, "A");
 800847e:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4994      	ldr	r1, [pc, #592]	; (80086d8 <main+0xef8>)
 8008486:	461a      	mov	r2, r3
 8008488:	460b      	mov	r3, r1
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_pend_i, "b");
 800848e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4991      	ldr	r1, [pc, #580]	; (80086dc <main+0xefc>)
 8008496:	461a      	mov	r2, r3
 8008498:	460b      	mov	r3, r1
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_pend_i, "B");
 800849e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	498e      	ldr	r1, [pc, #568]	; (80086e0 <main+0xf00>)
 80084a6:	461a      	mov	r2, r3
 80084a8:	460b      	mov	r3, r1
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_pend_d, "c");
 80084ae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4980      	ldr	r1, [pc, #512]	; (80086b8 <main+0xed8>)
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_pend_d, "C");
 80084be:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4987      	ldr	r1, [pc, #540]	; (80086e4 <main+0xf04>)
 80084c6:	461a      	mov	r2, r3
 80084c8:	460b      	mov	r3, r1
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_rotor_p, "d");
 80084ce:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	497a      	ldr	r1, [pc, #488]	; (80086c0 <main+0xee0>)
 80084d6:	461a      	mov	r2, r3
 80084d8:	460b      	mov	r3, r1
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_rotor_p, "D");
 80084de:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4980      	ldr	r1, [pc, #512]	; (80086e8 <main+0xf08>)
 80084e6:	461a      	mov	r2, r3
 80084e8:	460b      	mov	r3, r1
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_rotor_i, "e");
 80084ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	497d      	ldr	r1, [pc, #500]	; (80086ec <main+0xf0c>)
 80084f6:	461a      	mov	r2, r3
 80084f8:	460b      	mov	r3, r1
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_rotor_i, "E");
 80084fe:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	497a      	ldr	r1, [pc, #488]	; (80086f0 <main+0xf10>)
 8008506:	461a      	mov	r2, r3
 8008508:	460b      	mov	r3, r1
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_rotor_d, "f");
 800850e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4977      	ldr	r1, [pc, #476]	; (80086f4 <main+0xf14>)
 8008516:	461a      	mov	r2, r3
 8008518:	460b      	mov	r3, r1
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_rotor_d, "F");
 800851e:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4974      	ldr	r1, [pc, #464]	; (80086f8 <main+0xf18>)
 8008526:	461a      	mov	r2, r3
 8008528:	460b      	mov	r3, r1
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_torq_c, "t");
 800852e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	495d      	ldr	r1, [pc, #372]	; (80086ac <main+0xecc>)
 8008536:	461a      	mov	r2, r3
 8008538:	460b      	mov	r3, r1
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_torq_c, "T");
 800853e:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	496d      	ldr	r1, [pc, #436]	; (80086fc <main+0xf1c>)
 8008546:	461a      	mov	r2, r3
 8008548:	460b      	mov	r3, r1
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_max_s, "s");
 800854e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4954      	ldr	r1, [pc, #336]	; (80086a8 <main+0xec8>)
 8008556:	461a      	mov	r2, r3
 8008558:	460b      	mov	r3, r1
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_max_s, "S");
 800855e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4966      	ldr	r1, [pc, #408]	; (8008700 <main+0xf20>)
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_min_s, "m");
 800856e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	494a      	ldr	r1, [pc, #296]	; (80086a0 <main+0xec0>)
 8008576:	461a      	mov	r2, r3
 8008578:	460b      	mov	r3, r1
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_min_s, "M");
 800857e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	495f      	ldr	r1, [pc, #380]	; (8008704 <main+0xf24>)
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_max_a, "n");
 800858e:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	495c      	ldr	r1, [pc, #368]	; (8008708 <main+0xf28>)
 8008596:	461a      	mov	r2, r3
 8008598:	460b      	mov	r3, r1
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_max_a, "N");
 800859e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4959      	ldr	r1, [pc, #356]	; (800870c <main+0xf2c>)
 80085a6:	461a      	mov	r2, r3
 80085a8:	460b      	mov	r3, r1
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_max_d, "o");
 80085ae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4956      	ldr	r1, [pc, #344]	; (8008710 <main+0xf30>)
 80085b6:	461a      	mov	r2, r3
 80085b8:	460b      	mov	r3, r1
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_max_d, "O");
 80085be:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4953      	ldr	r1, [pc, #332]	; (8008714 <main+0xf34>)
 80085c6:	461a      	mov	r2, r3
 80085c8:	460b      	mov	r3, r1
 80085ca:	881b      	ldrh	r3, [r3, #0]
 80085cc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_enable_step, "P");
 80085ce:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4950      	ldr	r1, [pc, #320]	; (8008718 <main+0xf38>)
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_disable_step, "p");
 80085de:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4935      	ldr	r1, [pc, #212]	; (80086bc <main+0xedc>)
 80085e6:	461a      	mov	r2, r3
 80085e8:	460b      	mov	r3, r1
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_enable_load_dist, "L");
 80085ee:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4949      	ldr	r1, [pc, #292]	; (800871c <main+0xf3c>)
 80085f6:	461a      	mov	r2, r3
 80085f8:	460b      	mov	r3, r1
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_disable_load_dist, "l");
 80085fe:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4946      	ldr	r1, [pc, #280]	; (8008720 <main+0xf40>)
 8008606:	461a      	mov	r2, r3
 8008608:	460b      	mov	r3, r1
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_enable_noise_rej_step, "R");
 800860e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4943      	ldr	r1, [pc, #268]	; (8008724 <main+0xf44>)
 8008616:	461a      	mov	r2, r3
 8008618:	460b      	mov	r3, r1
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_disable_noise_rej_step, "r");
 800861e:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4922      	ldr	r1, [pc, #136]	; (80086b0 <main+0xed0>)
 8008626:	461a      	mov	r2, r3
 8008628:	460b      	mov	r3, r1
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_enable_sensitivity_fnc_step, "V");
 800862e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	493c      	ldr	r1, [pc, #240]	; (8008728 <main+0xf48>)
 8008636:	461a      	mov	r2, r3
 8008638:	460b      	mov	r3, r1
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_disable_sensitivity_fnc_step, "v");
 800863e:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4939      	ldr	r1, [pc, #228]	; (800872c <main+0xf4c>)
 8008646:	461a      	mov	r2, r3
 8008648:	460b      	mov	r3, r1
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_inc_step_size, "J");
 800864e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4936      	ldr	r1, [pc, #216]	; (8008730 <main+0xf50>)
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_dec_step_size, "j");
 800865e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4918      	ldr	r1, [pc, #96]	; (80086c8 <main+0xee8>)
 8008666:	461a      	mov	r2, r3
 8008668:	460b      	mov	r3, r1
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_select_mode_5, "u");
 800866e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	492f      	ldr	r1, [pc, #188]	; (8008734 <main+0xf54>)
 8008676:	461a      	mov	r2, r3
 8008678:	460b      	mov	r3, r1
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	8013      	strh	r3, [r2, #0]
	sprintf(mode_string_enable_high_speed_sampling, "Y");
 800867e:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	492c      	ldr	r1, [pc, #176]	; (8008738 <main+0xf58>)
 8008686:	461a      	mov	r2, r3
 8008688:	460b      	mov	r3, r1
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	8013      	strh	r3, [r2, #0]
 800868e:	e055      	b.n	800873c <main+0xf5c>
 8008690:	080181fc 	.word	0x080181fc
 8008694:	08018200 	.word	0x08018200
 8008698:	08018204 	.word	0x08018204
 800869c:	08018208 	.word	0x08018208
 80086a0:	0801820c 	.word	0x0801820c
 80086a4:	08018210 	.word	0x08018210
 80086a8:	08018214 	.word	0x08018214
 80086ac:	08018218 	.word	0x08018218
 80086b0:	0801821c 	.word	0x0801821c
 80086b4:	08018220 	.word	0x08018220
 80086b8:	08018224 	.word	0x08018224
 80086bc:	08018228 	.word	0x08018228
 80086c0:	0801822c 	.word	0x0801822c
 80086c4:	08018230 	.word	0x08018230
 80086c8:	08018234 	.word	0x08018234
 80086cc:	08018238 	.word	0x08018238
 80086d0:	0801823c 	.word	0x0801823c
 80086d4:	08018240 	.word	0x08018240
 80086d8:	08018244 	.word	0x08018244
 80086dc:	08018248 	.word	0x08018248
 80086e0:	0801824c 	.word	0x0801824c
 80086e4:	08018250 	.word	0x08018250
 80086e8:	08018254 	.word	0x08018254
 80086ec:	08018258 	.word	0x08018258
 80086f0:	0801825c 	.word	0x0801825c
 80086f4:	08018260 	.word	0x08018260
 80086f8:	08018264 	.word	0x08018264
 80086fc:	08018268 	.word	0x08018268
 8008700:	0801826c 	.word	0x0801826c
 8008704:	08018270 	.word	0x08018270
 8008708:	08018274 	.word	0x08018274
 800870c:	08018278 	.word	0x08018278
 8008710:	0801827c 	.word	0x0801827c
 8008714:	08018280 	.word	0x08018280
 8008718:	08018284 	.word	0x08018284
 800871c:	08018288 	.word	0x08018288
 8008720:	0801828c 	.word	0x0801828c
 8008724:	08018290 	.word	0x08018290
 8008728:	08018294 	.word	0x08018294
 800872c:	08018298 	.word	0x08018298
 8008730:	0801829c 	.word	0x0801829c
 8008734:	080182a0 	.word	0x080182a0
 8008738:	080182a4 	.word	0x080182a4
	sprintf(mode_string_disable_high_speed_sampling, "y");
 800873c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	49c5      	ldr	r1, [pc, #788]	; (8008a58 <main+0x1278>)
 8008744:	461a      	mov	r2, r3
 8008746:	460b      	mov	r3, r1
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	8013      	strh	r3, [r2, #0]
	* DMA Buffer declarations
	*/


	/* Start DMA just once because it's configured in "circular" mode */
	HAL_UART_Receive_DMA(&huart2, RxBuffer, UART_RX_BUFFER_SIZE);
 800874c:	22c8      	movs	r2, #200	; 0xc8
 800874e:	49c3      	ldr	r1, [pc, #780]	; (8008a5c <main+0x127c>)
 8008750:	48c3      	ldr	r0, [pc, #780]	; (8008a60 <main+0x1280>)
 8008752:	f7fe f9c9 	bl	8006ae8 <HAL_UART_Receive_DMA>
	/*
	* Motor Interface and Encoder initialization
	*/

	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8008756:	48c3      	ldr	r0, [pc, #780]	; (8008a64 <main+0x1284>)
 8008758:	f7fb f94e 	bl	80039f8 <BSP_MotorControl_AttachFlagInterrupt>

	/* Attach the function Error_Handler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800875c:	48c2      	ldr	r0, [pc, #776]	; (8008a68 <main+0x1288>)
 800875e:	f7fb f92d 	bl	80039bc <BSP_MotorControl_AttachErrorHandler>

	/* Encoder init */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8008762:	2118      	movs	r1, #24
 8008764:	48c1      	ldr	r0, [pc, #772]	; (8008a6c <main+0x128c>)
 8008766:	f7fd fc11 	bl	8005f8c <HAL_TIM_Encoder_Start>

	/*
	* Controller structure and variable allocation
	*/

	current_error = malloc(sizeof(float));
 800876a:	f507 7469 	add.w	r4, r7, #932	; 0x3a4
 800876e:	2004      	movs	r0, #4
 8008770:	f009 ff80 	bl	8012674 <malloc>
 8008774:	4603      	mov	r3, r0
 8008776:	6023      	str	r3, [r4, #0]
	if (current_error == NULL) {
 8008778:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d118      	bne.n	80087b4 <main+0xfd4>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008782:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008786:	4aba      	ldr	r2, [pc, #744]	; (8008a70 <main+0x1290>)
 8008788:	461c      	mov	r4, r3
 800878a:	4615      	mov	r5, r2
 800878c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800878e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008790:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008794:	c403      	stmia	r4!, {r0, r1}
 8008796:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008798:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800879c:	4618      	mov	r0, r3
 800879e:	f7f7 fd29 	bl	80001f4 <strlen>
 80087a2:	4603      	mov	r3, r0
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ae:	48ac      	ldr	r0, [pc, #688]	; (8008a60 <main+0x1280>)
 80087b0:	f7fe f900 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	current_error_rotor = malloc(sizeof(float));
 80087b4:	f507 7468 	add.w	r4, r7, #928	; 0x3a0
 80087b8:	2004      	movs	r0, #4
 80087ba:	f009 ff5b 	bl	8012674 <malloc>
 80087be:	4603      	mov	r3, r0
 80087c0:	6023      	str	r3, [r4, #0]
	if (current_error_rotor == NULL) {
 80087c2:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d118      	bne.n	80087fe <main+0x101e>
		sprintf(test_msg, "Memory allocation error\r\n");
 80087cc:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80087d0:	4aa7      	ldr	r2, [pc, #668]	; (8008a70 <main+0x1290>)
 80087d2:	461c      	mov	r4, r3
 80087d4:	4615      	mov	r5, r2
 80087d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087de:	c403      	stmia	r4!, {r0, r1}
 80087e0:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 80087e2:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f7 fd04 	bl	80001f4 <strlen>
 80087ec:	4603      	mov	r3, r0
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f8:	4899      	ldr	r0, [pc, #612]	; (8008a60 <main+0x1280>)
 80087fa:	f7fe f8db 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	sample_period = malloc(sizeof(float));
 80087fe:	f507 7467 	add.w	r4, r7, #924	; 0x39c
 8008802:	2004      	movs	r0, #4
 8008804:	f009 ff36 	bl	8012674 <malloc>
 8008808:	4603      	mov	r3, r0
 800880a:	6023      	str	r3, [r4, #0]
	if (sample_period == NULL) {
 800880c:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d118      	bne.n	8008848 <main+0x1068>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008816:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800881a:	4a95      	ldr	r2, [pc, #596]	; (8008a70 <main+0x1290>)
 800881c:	461c      	mov	r4, r3
 800881e:	4615      	mov	r5, r2
 8008820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008824:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008828:	c403      	stmia	r4!, {r0, r1}
 800882a:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 800882c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008830:	4618      	mov	r0, r3
 8008832:	f7f7 fcdf 	bl	80001f4 <strlen>
 8008836:	4603      	mov	r3, r0
 8008838:	b29a      	uxth	r2, r3
 800883a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800883e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008842:	4887      	ldr	r0, [pc, #540]	; (8008a60 <main+0x1280>)
 8008844:	f7fe f8b6 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	deriv_lp_corner_f = malloc(sizeof(float));
 8008848:	f507 7466 	add.w	r4, r7, #920	; 0x398
 800884c:	2004      	movs	r0, #4
 800884e:	f009 ff11 	bl	8012674 <malloc>
 8008852:	4603      	mov	r3, r0
 8008854:	6023      	str	r3, [r4, #0]
	if (sample_period == NULL) {
 8008856:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d118      	bne.n	8008892 <main+0x10b2>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008860:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008864:	4a82      	ldr	r2, [pc, #520]	; (8008a70 <main+0x1290>)
 8008866:	461c      	mov	r4, r3
 8008868:	4615      	mov	r5, r2
 800886a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800886c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800886e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008872:	c403      	stmia	r4!, {r0, r1}
 8008874:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008876:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800887a:	4618      	mov	r0, r3
 800887c:	f7f7 fcba 	bl	80001f4 <strlen>
 8008880:	4603      	mov	r3, r0
 8008882:	b29a      	uxth	r2, r3
 8008884:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800888c:	4874      	ldr	r0, [pc, #464]	; (8008a60 <main+0x1280>)
 800888e:	f7fe f891 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	deriv_lp_corner_f_rotor = malloc(sizeof(float));
 8008892:	f507 7465 	add.w	r4, r7, #916	; 0x394
 8008896:	2004      	movs	r0, #4
 8008898:	f009 feec 	bl	8012674 <malloc>
 800889c:	4603      	mov	r3, r0
 800889e:	6023      	str	r3, [r4, #0]
	if (sample_period == NULL) {
 80088a0:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d118      	bne.n	80088dc <main+0x10fc>
		sprintf(test_msg, "Memory allocation error\r\n");
 80088aa:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80088ae:	4a70      	ldr	r2, [pc, #448]	; (8008a70 <main+0x1290>)
 80088b0:	461c      	mov	r4, r3
 80088b2:	4615      	mov	r5, r2
 80088b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80088bc:	c403      	stmia	r4!, {r0, r1}
 80088be:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 80088c0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7f7 fc95 	bl	80001f4 <strlen>
 80088ca:	4603      	mov	r3, r0
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80088d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d6:	4862      	ldr	r0, [pc, #392]	; (8008a60 <main+0x1280>)
 80088d8:	f7fe f86c 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	sample_period_rotor = malloc(sizeof(float));
 80088dc:	f507 7464 	add.w	r4, r7, #912	; 0x390
 80088e0:	2004      	movs	r0, #4
 80088e2:	f009 fec7 	bl	8012674 <malloc>
 80088e6:	4603      	mov	r3, r0
 80088e8:	6023      	str	r3, [r4, #0]
	if (sample_period == NULL) {
 80088ea:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d118      	bne.n	8008926 <main+0x1146>
		sprintf(test_msg, "Memory allocation error\r\n");
 80088f4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80088f8:	4a5d      	ldr	r2, [pc, #372]	; (8008a70 <main+0x1290>)
 80088fa:	461c      	mov	r4, r3
 80088fc:	4615      	mov	r5, r2
 80088fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008906:	c403      	stmia	r4!, {r0, r1}
 8008908:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 800890a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800890e:	4618      	mov	r0, r3
 8008910:	f7f7 fc70 	bl	80001f4 <strlen>
 8008914:	4603      	mov	r3, r0
 8008916:	b29a      	uxth	r2, r3
 8008918:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800891c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008920:	484f      	ldr	r0, [pc, #316]	; (8008a60 <main+0x1280>)
 8008922:	f7fe f847 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	pid_filter = malloc(sizeof(pid_filter_control_parameters));
 8008926:	f507 7463 	add.w	r4, r7, #908	; 0x38c
 800892a:	203c      	movs	r0, #60	; 0x3c
 800892c:	f009 fea2 	bl	8012674 <malloc>
 8008930:	4603      	mov	r3, r0
 8008932:	6023      	str	r3, [r4, #0]
	if (pid_filter == NULL) {
 8008934:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d118      	bne.n	8008970 <main+0x1190>
		sprintf(test_msg, "Memory allocation error\r\n");
 800893e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008942:	4a4b      	ldr	r2, [pc, #300]	; (8008a70 <main+0x1290>)
 8008944:	461c      	mov	r4, r3
 8008946:	4615      	mov	r5, r2
 8008948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800894a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800894c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008950:	c403      	stmia	r4!, {r0, r1}
 8008952:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 8008954:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fc4b 	bl	80001f4 <strlen>
 800895e:	4603      	mov	r3, r0
 8008960:	b29a      	uxth	r2, r3
 8008962:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800896a:	483d      	ldr	r0, [pc, #244]	; (8008a60 <main+0x1280>)
 800896c:	f7fe f822 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
	}

	rotor_pid = malloc(sizeof(pid_filter_control_parameters));
 8008970:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8008974:	203c      	movs	r0, #60	; 0x3c
 8008976:	f009 fe7d 	bl	8012674 <malloc>
 800897a:	4603      	mov	r3, r0
 800897c:	6023      	str	r3, [r4, #0]
	if (rotor_pid == NULL) {
 800897e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d118      	bne.n	80089ba <main+0x11da>
		sprintf(test_msg, "Memory allocation error\r\n");
 8008988:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800898c:	4a38      	ldr	r2, [pc, #224]	; (8008a70 <main+0x1290>)
 800898e:	461c      	mov	r4, r3
 8008990:	4615      	mov	r5, r2
 8008992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800899a:	c403      	stmia	r4!, {r0, r1}
 800899c:	8022      	strh	r2, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) test_msg, strlen(test_msg),
 800899e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7f7 fc26 	bl	80001f4 <strlen>
 80089a8:	4603      	mov	r3, r0
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 80089b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089b4:	482a      	ldr	r0, [pc, #168]	; (8008a60 <main+0x1280>)
 80089b6:	f7fd fffd 	bl	80069b4 <HAL_UART_Transmit>

	/*
	* Initialize Pendulum and Rotor PID Controller structures
	*/

	pid_filter_value_config(pid_filter);
 80089ba:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	f7fe fd36 	bl	8007430 <pid_filter_value_config>
	pid_filter_value_config(rotor_pid);
 80089c4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	f7fe fd31 	bl	8007430 <pid_filter_value_config>
	*
	*      If these are to be set at compile time, then comments may be removed below along with other
	*      required code modification
	*/

	windup = PRIMARY_WINDUP_LIMIT;
 80089ce:	f507 7361 	add.w	r3, r7, #900	; 0x384
 80089d2:	4a28      	ldr	r2, [pc, #160]	; (8008a74 <main+0x1294>)
 80089d4:	601a      	str	r2, [r3, #0]

	/*
	*      Configure secondary Rotor controller parameters
	*/

	rotor_windup = SECONDARY_WINDUP_LIMIT;
 80089d6:	f507 7360 	add.w	r3, r7, #896	; 0x380
 80089da:	4a26      	ldr	r2, [pc, #152]	; (8008a74 <main+0x1294>)
 80089dc:	601a      	str	r2, [r3, #0]

	/*
	*      Configure controller filter and sample time parameters
	*/

	*deriv_lp_corner_f = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY;
 80089de:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a24      	ldr	r2, [pc, #144]	; (8008a78 <main+0x1298>)
 80089e6:	601a      	str	r2, [r3, #0]
	*deriv_lp_corner_f_rotor = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY_ROTOR;
 80089e8:	f507 7365 	add.w	r3, r7, #916	; 0x394
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <main+0x129c>)
 80089f0:	601a      	str	r2, [r3, #0]
	Tsample = T_SAMPLE;
 80089f2:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 80089f6:	4a22      	ldr	r2, [pc, #136]	; (8008a80 <main+0x12a0>)
 80089f8:	601a      	str	r2, [r3, #0]
	*sample_period = Tsample;
 80089fa:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	601a      	str	r2, [r3, #0]
	Tsample_rotor = T_SAMPLE_ROTOR;
 8008a08:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8008a0c:	4a1c      	ldr	r2, [pc, #112]	; (8008a80 <main+0x12a0>)
 8008a0e:	601a      	str	r2, [r3, #0]
	*sample_period_rotor = Tsample_rotor;
 8008a10:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8008a1a:	6812      	ldr	r2, [r2, #0]
 8008a1c:	601a      	str	r2, [r3, #0]

	/*
	* Compute Low Pass Filter Coefficients for Rotor Position filter and Encoder Angle Slope Correction
	*/

	fo = LP_CORNER_FREQ_ROTOR;
 8008a1e:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8008a22:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <main+0x1298>)
 8008a24:	601a      	str	r2, [r3, #0]
	Wo = 2 * 3.141592654 * fo;
 8008a26:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	f7f7 fda4 	bl	8000578 <__aeabi_f2d>
 8008a30:	a307      	add	r3, pc, #28	; (adr r3, 8008a50 <main+0x1270>)
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f7f7 fdf7 	bl	8000628 <__aeabi_dmul>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4623      	mov	r3, r4
 8008a42:	f507 745c 	add.w	r4, r7, #880	; 0x370
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f8e5 	bl	8000c18 <__aeabi_d2f>
 8008a4e:	e019      	b.n	8008a84 <main+0x12a4>
 8008a50:	54524550 	.word	0x54524550
 8008a54:	401921fb 	.word	0x401921fb
 8008a58:	080182a8 	.word	0x080182a8
 8008a5c:	20000e58 	.word	0x20000e58
 8008a60:	20000f20 	.word	0x20000f20
 8008a64:	0801225d 	.word	0x0801225d
 8008a68:	08012275 	.word	0x08012275
 8008a6c:	20000e1c 	.word	0x20000e1c
 8008a70:	080181e0 	.word	0x080181e0
 8008a74:	42c80000 	.word	0x42c80000
 8008a78:	40a00000 	.word	0x40a00000
 8008a7c:	42480000 	.word	0x42480000
 8008a80:	3b03126f 	.word	0x3b03126f
 8008a84:	4603      	mov	r3, r0
 8008a86:	6023      	str	r3, [r4, #0]
	IWon = 2 / (Wo * Tsample);
 8008a88:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8008a8c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8008a90:	ed92 7a00 	vldr	s14, [r2]
 8008a94:	edd3 7a00 	vldr	s15, [r3]
 8008a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a9c:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8008aa0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa8:	edc3 7a00 	vstr	s15, [r3]

	iir_0 = 1 / (1 + IWon);
 8008aac:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8008ab0:	edd3 7a00 	vldr	s15, [r3]
 8008ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abc:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8008ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac8:	edc3 7a00 	vstr	s15, [r3]
	iir_1 = iir_0;
 8008acc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8008ad0:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	601a      	str	r2, [r3, #0]
	iir_2 = iir_0 * (1 - IWon);
 8008ad8:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8008adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae0:	edd3 7a00 	vldr	s15, [r3]
 8008ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ae8:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8008aec:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8008af0:	ed92 7a00 	vldr	s14, [r2]
 8008af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af8:	edc3 7a00 	vstr	s15, [r3]

	fo_LT = LP_CORNER_FREQ_LONG_TERM;
 8008afc:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8008b00:	4ad3      	ldr	r2, [pc, #844]	; (8008e50 <main+0x1670>)
 8008b02:	601a      	str	r2, [r3, #0]
	Wo_LT = 2 * 3.141592654 * fo_LT;
 8008b04:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f7f7 fd35 	bl	8000578 <__aeabi_f2d>
 8008b0e:	a3ce      	add	r3, pc, #824	; (adr r3, 8008e48 <main+0x1668>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fd88 	bl	8000628 <__aeabi_dmul>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4623      	mov	r3, r4
 8008b20:	f507 7456 	add.w	r4, r7, #856	; 0x358
 8008b24:	4610      	mov	r0, r2
 8008b26:	4619      	mov	r1, r3
 8008b28:	f7f8 f876 	bl	8000c18 <__aeabi_d2f>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	6023      	str	r3, [r4, #0]
	IWon_LT = 2 / (Wo_LT * Tsample);
 8008b30:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8008b34:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8008b38:	ed92 7a00 	vldr	s14, [r2]
 8008b3c:	edd3 7a00 	vldr	s15, [r3]
 8008b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008b44:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008b48:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b50:	edc3 7a00 	vstr	s15, [r3]

	iir_LT_0 = 1 / (1 + IWon_LT);
 8008b54:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008b58:	edd3 7a00 	vldr	s15, [r3]
 8008b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b64:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8008b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b70:	edc3 7a00 	vstr	s15, [r3]
	iir_LT_1 = iir_LT_0;
 8008b74:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8008b78:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	601a      	str	r2, [r3, #0]
	iir_LT_2 = iir_LT_0 * (1 - IWon_LT);
 8008b80:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8008b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b88:	edd3 7a00 	vldr	s15, [r3]
 8008b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b90:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8008b94:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8008b98:	ed92 7a00 	vldr	s14, [r2]
 8008b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba0:	edc3 7a00 	vstr	s15, [r3]
	/*
	* Wait for initial start character from terminal routine
	* return value will be discarded.
	*/

	tick_read_cycle_start = HAL_GetTick();
 8008ba4:	f507 7451 	add.w	r4, r7, #836	; 0x344
 8008ba8:	f7fb faee 	bl	8004188 <HAL_GetTick>
 8008bac:	6020      	str	r0, [r4, #0]

	sprintf(msg, "\n\rSystem Starting Prepare to Enter Mode Selection... ");
 8008bae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008bb2:	4aa8      	ldr	r2, [pc, #672]	; (8008e54 <main+0x1674>)
 8008bb4:	461c      	mov	r4, r3
 8008bb6:	4615      	mov	r5, r2
 8008bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008bc8:	6020      	str	r0, [r4, #0]
 8008bca:	3404      	adds	r4, #4
 8008bcc:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008bce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7f7 fb0e 	bl	80001f4 <strlen>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008be4:	489c      	ldr	r0, [pc, #624]	; (8008e58 <main+0x1678>)
 8008be6:	f7fd fee5 	bl	80069b4 <HAL_UART_Transmit>

	/*
	* Request user input for mode configuration
	*/

	enable_adaptive_mode = ENABLE_ADAPTIVE_MODE;
 8008bea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]
	adaptive_threshold_low = ADAPTIVE_THRESHOLD_LOW;
 8008bf2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8008bf6:	4a99      	ldr	r2, [pc, #612]	; (8008e5c <main+0x167c>)
 8008bf8:	601a      	str	r2, [r3, #0]
	adaptive_threshold_high = ADAPTIVE_THRESHOLD_HIGH;
 8008bfa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8008bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c02:	601a      	str	r2, [r3, #0]
	adaptive_state = ADAPTIVE_STATE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
	adaptive_state_change = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
	adaptive_dwell_period = ADAPTIVE_DWELL_PERIOD;
 8008c10:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8008c14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008c18:	601a      	str	r2, [r3, #0]


	while (1) {

	mode_interactive = 0;
 8008c1a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

	sprintf(msg, "********  System Start Mode Selections  ********\n\r");
 8008c22:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c26:	4a8e      	ldr	r2, [pc, #568]	; (8008e60 <main+0x1680>)
 8008c28:	461c      	mov	r4, r3
 8008c2a:	4615      	mov	r5, r2
 8008c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	8022      	strh	r2, [r4, #0]
 8008c3e:	3402      	adds	r4, #2
 8008c40:	0c1b      	lsrs	r3, r3, #16
 8008c42:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008c44:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7f7 fad3 	bl	80001f4 <strlen>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c5a:	487f      	ldr	r0, [pc, #508]	; (8008e58 <main+0x1678>)
 8008c5c:	f7fd feaa 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 1 at prompt for Inverted Pendulum Control with Motor Speed Profile - Medium\n\r");
 8008c60:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c64:	4a7f      	ldr	r2, [pc, #508]	; (8008e64 <main+0x1684>)
 8008c66:	4618      	mov	r0, r3
 8008c68:	4611      	mov	r1, r2
 8008c6a:	2354      	movs	r3, #84	; 0x54
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f009 ff3f 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008c72:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f7 fabc 	bl	80001f4 <strlen>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c88:	4873      	ldr	r0, [pc, #460]	; (8008e58 <main+0x1678>)
 8008c8a:	f7fd fe93 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 2 at prompt for Inverted Pendulum Control with Motor Speed Profile - High\n\r");
 8008c8e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c92:	4a75      	ldr	r2, [pc, #468]	; (8008e68 <main+0x1688>)
 8008c94:	4618      	mov	r0, r3
 8008c96:	4611      	mov	r1, r2
 8008c98:	2352      	movs	r3, #82	; 0x52
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f009 ff28 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008ca0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7f7 faa5 	bl	80001f4 <strlen>
 8008caa:	4603      	mov	r3, r0
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cb6:	4868      	ldr	r0, [pc, #416]	; (8008e58 <main+0x1678>)
 8008cb8:	f7fd fe7c 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 3 at prompt for Inverted Pendulum Control with Motor Speed Profile - Low\n\r");
 8008cbc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008cc0:	4a6a      	ldr	r2, [pc, #424]	; (8008e6c <main+0x168c>)
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	2351      	movs	r3, #81	; 0x51
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f009 ff11 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008cce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f7 fa8e 	bl	80001f4 <strlen>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce4:	485c      	ldr	r0, [pc, #368]	; (8008e58 <main+0x1678>)
 8008ce6:	f7fd fe65 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 4 at prompt for Suspended Pendulum Control with Motor Speed Profile - Medium\n\r");
 8008cea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008cee:	4a60      	ldr	r2, [pc, #384]	; (8008e70 <main+0x1690>)
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	2355      	movs	r3, #85	; 0x55
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f009 fefa 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008cfc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fa77 	bl	80001f4 <strlen>
 8008d06:	4603      	mov	r3, r0
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d12:	4851      	ldr	r0, [pc, #324]	; (8008e58 <main+0x1678>)
 8008d14:	f7fd fe4e 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 's' at prompt for Single PID: With Prompts for Pendulum Controller Gains\n\r");
 8008d18:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d1c:	4a55      	ldr	r2, [pc, #340]	; (8008e74 <main+0x1694>)
 8008d1e:	4618      	mov	r0, r3
 8008d20:	4611      	mov	r1, r2
 8008d22:	2351      	movs	r3, #81	; 0x51
 8008d24:	461a      	mov	r2, r3
 8008d26:	f009 fee3 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008d2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f7 fa60 	bl	80001f4 <strlen>
 8008d34:	4603      	mov	r3, r0
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d40:	4845      	ldr	r0, [pc, #276]	; (8008e58 <main+0x1678>)
 8008d42:	f7fd fe37 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 'g' at prompt for General Mode: With Prompts for Both Pendulum and Rotor Controller Gains\n\r");
 8008d46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d4a:	4a4b      	ldr	r2, [pc, #300]	; (8008e78 <main+0x1698>)
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	4611      	mov	r1, r2
 8008d50:	2362      	movs	r3, #98	; 0x62
 8008d52:	461a      	mov	r2, r3
 8008d54:	f009 fecc 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008d58:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7f7 fa49 	bl	80001f4 <strlen>
 8008d62:	4603      	mov	r3, r0
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d6e:	483a      	ldr	r0, [pc, #232]	; (8008e58 <main+0x1678>)
 8008d70:	f7fd fe20 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 't' at prompt for Test Mode: Test of Rotor Actuator and Pendulum Angle Encoder\n\r");
 8008d74:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d78:	4a40      	ldr	r2, [pc, #256]	; (8008e7c <main+0x169c>)
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	2357      	movs	r3, #87	; 0x57
 8008d80:	461a      	mov	r2, r3
 8008d82:	f009 feb5 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008d86:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f7 fa32 	bl	80001f4 <strlen>
 8008d90:	4603      	mov	r3, r0
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d9c:	482e      	ldr	r0, [pc, #184]	; (8008e58 <main+0x1678>)
 8008d9e:	f7fd fe09 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 'r' at prompt for Rotor Control Mode: Direct Control of Rotor Actuator\n\r");
 8008da2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008da6:	4a36      	ldr	r2, [pc, #216]	; (8008e80 <main+0x16a0>)
 8008da8:	4618      	mov	r0, r3
 8008daa:	4611      	mov	r1, r2
 8008dac:	234f      	movs	r3, #79	; 0x4f
 8008dae:	461a      	mov	r2, r3
 8008db0:	f009 fe9e 	bl	8012af0 <memcpy>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008db4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7f7 fa1b 	bl	80001f4 <strlen>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dca:	4823      	ldr	r0, [pc, #140]	; (8008e58 <main+0x1678>)
 8008dcc:	f7fd fdf2 	bl	80069b4 <HAL_UART_Transmit>
	sprintf(msg, "Enter 'c' at prompt for Motor Control Characterization Mode\n\r");
 8008dd0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008dd4:	4a2b      	ldr	r2, [pc, #172]	; (8008e84 <main+0x16a4>)
 8008dd6:	461c      	mov	r4, r3
 8008dd8:	4615      	mov	r5, r2
 8008dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008de6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008dea:	c407      	stmia	r4!, {r0, r1, r2}
 8008dec:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008dee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7f7 f9fe 	bl	80001f4 <strlen>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e04:	4814      	ldr	r0, [pc, #80]	; (8008e58 <main+0x1678>)
 8008e06:	f7fd fdd5 	bl	80069b4 <HAL_UART_Transmit>
	/*
	 * If user has responded to query for configuration, then system remains in interactive mode
	 * and default state is not automatically enabled
	 */

	if (mode_interactive == 0) {
 8008e0a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13b      	bne.n	8008e8c <main+0x16ac>
		sprintf(msg, "\n\rEnter Mode Selection Now or System Will Start in Default Mode in 5 Seconds: ");
 8008e14:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e18:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <main+0x16a8>)
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	234f      	movs	r3, #79	; 0x4f
 8008e20:	461a      	mov	r2, r3
 8008e22:	f009 fe65 	bl	8012af0 <memcpy>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008e26:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7f7 f9e2 	bl	80001f4 <strlen>
 8008e30:	4603      	mov	r3, r0
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e3c:	4806      	ldr	r0, [pc, #24]	; (8008e58 <main+0x1678>)
 8008e3e:	f7fd fdb9 	bl	80069b4 <HAL_UART_Transmit>
 8008e42:	e023      	b.n	8008e8c <main+0x16ac>
 8008e44:	f3af 8000 	nop.w
 8008e48:	54524550 	.word	0x54524550
 8008e4c:	401921fb 	.word	0x401921fb
 8008e50:	3d4ccccd 	.word	0x3d4ccccd
 8008e54:	080182ac 	.word	0x080182ac
 8008e58:	20000f20 	.word	0x20000f20
 8008e5c:	41f00000 	.word	0x41f00000
 8008e60:	080182e4 	.word	0x080182e4
 8008e64:	08018318 	.word	0x08018318
 8008e68:	0801836c 	.word	0x0801836c
 8008e6c:	080183c0 	.word	0x080183c0
 8008e70:	08018414 	.word	0x08018414
 8008e74:	0801846c 	.word	0x0801846c
 8008e78:	080184c0 	.word	0x080184c0
 8008e7c:	08018524 	.word	0x08018524
 8008e80:	0801857c 	.word	0x0801857c
 8008e84:	080185cc 	.word	0x080185cc
 8008e88:	0801860c 	.word	0x0801860c
	/*
	 * If user has responded to query for configuration, then system remains in interactive mode
	 * and default state is not automatically enabled
	 */

	if (mode_interactive == 1) {
 8008e8c:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d11b      	bne.n	8008ece <main+0x16ee>
		sprintf(msg, "\n\rEnter Mode Selection Now: \n\r");
 8008e96:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008e9a:	4a67      	ldr	r2, [pc, #412]	; (8009038 <main+0x1858>)
 8008e9c:	461c      	mov	r4, r3
 8008e9e:	4615      	mov	r5, r2
 8008ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ea4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008ea8:	c407      	stmia	r4!, {r0, r1, r2}
 8008eaa:	8023      	strh	r3, [r4, #0]
 8008eac:	3402      	adds	r4, #2
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008eb2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f7 f99c 	bl	80001f4 <strlen>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec8:	485c      	ldr	r0, [pc, #368]	; (800903c <main+0x185c>)
 8008eca:	f7fd fd73 	bl	80069b4 <HAL_UART_Transmit>
	}

	tick_read_cycle_start = HAL_GetTick();
 8008ece:	f507 7451 	add.w	r4, r7, #836	; 0x344
 8008ed2:	f7fb f959 	bl	8004188 <HAL_GetTick>
 8008ed6:	6020      	str	r0, [r4, #0]
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8008ede:	e00b      	b.n	8008ef8 <main+0x1718>
		Msg.Data[k] = 0;
 8008ee0:	4a57      	ldr	r2, [pc, #348]	; (8009040 <main+0x1860>)
 8008ee2:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3304      	adds	r3, #4
 8008eea:	2200      	movs	r2, #0
 8008eec:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008eee:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8008ef8:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 8008efc:	2b63      	cmp	r3, #99	; 0x63
 8008efe:	ddef      	ble.n	8008ee0 <main+0x1700>
	}

	enable_rotor_actuator_test = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
	enable_rotor_actuator_control = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	enable_encoder_test = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	enable_rotor_actuator_high_speed_test = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	enable_motor_actuator_characterization_mode = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
	enable_rotor_tracking_comb_signal = 0;
 8008f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	rotor_track_comb_amplitude = 0;
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8008f2e:	6013      	str	r3, [r2, #0]
	enable_disturbance_rejection_step = 0;
 8008f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f34:	2200      	movs	r2, #0
 8008f36:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 8008f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]
	enable_plant_rejection_step = 0;
 8008f40:	f107 0320 	add.w	r3, r7, #32
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
		*/

		while (1) {

			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
					- __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008f48:	4b3e      	ldr	r3, [pc, #248]	; (8009044 <main+0x1864>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
 8008f52:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008f56:	601a      	str	r2, [r3, #0]

			readBytes = Extract_Msg(RxBuffer, RxBuffer_ReadIdx,
 8008f58:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	b299      	uxth	r1, r3
 8008f60:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	4b35      	ldr	r3, [pc, #212]	; (8009040 <main+0x1860>)
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	23c8      	movs	r3, #200	; 0xc8
 8008f6e:	4836      	ldr	r0, [pc, #216]	; (8009048 <main+0x1868>)
 8008f70:	f009 f86a 	bl	8012048 <Extract_Msg>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8008f7c:	601a      	str	r2, [r3, #0]


			/*
			* Exit read loop after timeout selecting default Mode 1
			*/
			tick_read_cycle = HAL_GetTick();
 8008f7e:	f507 744e 	add.w	r4, r7, #824	; 0x338
 8008f82:	f7fb f901 	bl	8004188 <HAL_GetTick>
 8008f86:	6020      	str	r0, [r4, #0]
			if (((tick_read_cycle - tick_read_cycle_start) > START_DEFAULT_MODE_TIME) && (mode_interactive == 0)) {
 8008f88:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8008f8c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8008f90:	6812      	ldr	r2, [r2, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d960      	bls.n	8009060 <main+0x1880>
 8008f9e:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d15b      	bne.n	8009060 <main+0x1880>
				sprintf(msg, "\n\rNo Entry Detected - Now Selecting Default Inverted Pendulum Mode 1: ");
 8008fa8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008fac:	4a27      	ldr	r2, [pc, #156]	; (800904c <main+0x186c>)
 8008fae:	4618      	mov	r0, r3
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	2347      	movs	r3, #71	; 0x47
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	f009 fd9b 	bl	8012af0 <memcpy>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8008fba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 f918 	bl	80001f4 <strlen>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fd0:	481a      	ldr	r0, [pc, #104]	; (800903c <main+0x185c>)
 8008fd2:	f7fd fcef 	bl	80069b4 <HAL_UART_Transmit>
				select_suspended_mode = 0;
 8008fd6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
				proportional = 		PRIMARY_PROPORTIONAL_MODE_1;
 8008fde:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8008fe2:	4a1b      	ldr	r2, [pc, #108]	; (8009050 <main+0x1870>)
 8008fe4:	601a      	str	r2, [r3, #0]
				integral = 			PRIMARY_INTEGRAL_MODE_1;
 8008fe6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
				derivative = 		PRIMARY_DERIVATIVE_MODE_1;
 8008ff0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8008ff4:	4a17      	ldr	r2, [pc, #92]	; (8009054 <main+0x1874>)
 8008ff6:	601a      	str	r2, [r3, #0]
				rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_1;
 8008ff8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8008ffc:	4a16      	ldr	r2, [pc, #88]	; (8009058 <main+0x1878>)
 8008ffe:	601a      	str	r2, [r3, #0]
				rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_1;
 8009000:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
				rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_1;
 800900a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800900e:	4a13      	ldr	r2, [pc, #76]	; (800905c <main+0x187c>)
 8009010:	601a      	str	r2, [r3, #0]
				max_speed = 		MAX_SPEED_MODE_1;
 8009012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009016:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
				min_speed = 		MIN_SPEED_MODE_1;
 800901a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800901e:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
				enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 8009022:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
				enable_rotor_position_step_response_cycle = 1;
 800902a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800902e:	2201      	movs	r2, #1
 8009030:	601a      	str	r2, [r3, #0]
				break;
 8009032:	f003 ba3d 	b.w	800c4b0 <main+0x4cd0>
 8009036:	bf00      	nop
 8009038:	0801865c 	.word	0x0801865c
 800903c:	20000f20 	.word	0x20000f20
 8009040:	20000db4 	.word	0x20000db4
 8009044:	20000d54 	.word	0x20000d54
 8009048:	20000e58 	.word	0x20000e58
 800904c:	0801867c 	.word	0x0801867c
 8009050:	44305333 	.word	0x44305333
 8009054:	42bccccd 	.word	0x42bccccd
 8009058:	4087ae14 	.word	0x4087ae14
 800905c:	41047ae1 	.word	0x41047ae1
			}

			if (readBytes) // Message found
 8009060:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f43f af6e 	beq.w	8008f48 <main+0x1768>
			{
				RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes) % UART_RX_BUFFER_SIZE;
 800906c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	441a      	add	r2, r3
 800907a:	4bcf      	ldr	r3, [pc, #828]	; (80093b8 <main+0x1bd8>)
 800907c:	fba3 1302 	umull	r1, r3, r3, r2
 8009080:	099b      	lsrs	r3, r3, #6
 8009082:	21c8      	movs	r1, #200	; 0xc8
 8009084:	fb01 f303 	mul.w	r3, r1, r3
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800908e:	6013      	str	r3, [r2, #0]

				if (Msg.Len != 1) {
 8009090:	4bca      	ldr	r3, [pc, #808]	; (80093bc <main+0x1bdc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	f043 81fb 	bne.w	800c490 <main+0x4cb0>
					continue;
				}

				sprintf(msg, "%s\n\r", (char *)Msg.Data);
 800909a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800909e:	4ac8      	ldr	r2, [pc, #800]	; (80093c0 <main+0x1be0>)
 80090a0:	49c8      	ldr	r1, [pc, #800]	; (80093c4 <main+0x1be4>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f009 fd54 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80090a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7f7 f8a1 	bl	80001f4 <strlen>
 80090b2:	4603      	mov	r3, r0
 80090b4:	b29a      	uxth	r2, r3
 80090b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80090ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090be:	48c2      	ldr	r0, [pc, #776]	; (80093c8 <main+0x1be8>)
 80090c0:	f7fd fc78 	bl	80069b4 <HAL_UART_Transmit>

				char_mode_select = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c

				if (strcmp((char *)Msg.Data,mode_string_mode_single_pid)==0){
 80090ca:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 80090ce:	6819      	ldr	r1, [r3, #0]
 80090d0:	48bb      	ldr	r0, [pc, #748]	; (80093c0 <main+0x1be0>)
 80090d2:	f7f7 f885 	bl	80001e0 <strcmp>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <main+0x1908>
					mode_index = 10;
 80090dc:	230a      	movs	r3, #10
 80090de:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_test)==0){
 80090e8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80090ec:	6819      	ldr	r1, [r3, #0]
 80090ee:	48b4      	ldr	r0, [pc, #720]	; (80093c0 <main+0x1be0>)
 80090f0:	f7f7 f876 	bl	80001e0 <strcmp>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d11f      	bne.n	800913a <main+0x195a>
					mode_index = 11;
 80090fa:	230b      	movs	r3, #11
 80090fc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 8009100:	2301      	movs	r3, #1
 8009102:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
					sprintf(msg, "\n\rTest Mode Selected ");
 8009106:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800910a:	4ab0      	ldr	r2, [pc, #704]	; (80093cc <main+0x1bec>)
 800910c:	461c      	mov	r4, r3
 800910e:	4615      	mov	r5, r2
 8009110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009118:	6020      	str	r0, [r4, #0]
 800911a:	3404      	adds	r4, #4
 800911c:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800911e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 f866 	bl	80001f4 <strlen>
 8009128:	4603      	mov	r3, r0
 800912a:	b29a      	uxth	r2, r3
 800912c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009134:	48a4      	ldr	r0, [pc, #656]	; (80093c8 <main+0x1be8>)
 8009136:	f7fd fc3d 	bl	80069b4 <HAL_UART_Transmit>
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_control)==0){
 800913a:	f207 4364 	addw	r3, r7, #1124	; 0x464
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	489f      	ldr	r0, [pc, #636]	; (80093c0 <main+0x1be0>)
 8009142:	f7f7 f84d 	bl	80001e0 <strcmp>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d120      	bne.n	800918e <main+0x19ae>
					mode_index = 15;
 800914c:	230f      	movs	r3, #15
 800914e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 8009152:	2301      	movs	r3, #1
 8009154:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
					sprintf(msg, "\n\rRotor Actuator Control Mode Selected ");
 8009158:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800915c:	4a9c      	ldr	r2, [pc, #624]	; (80093d0 <main+0x1bf0>)
 800915e:	461c      	mov	r4, r3
 8009160:	4615      	mov	r5, r2
 8009162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800916a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800916e:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009172:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009176:	4618      	mov	r0, r3
 8009178:	f7f7 f83c 	bl	80001f4 <strlen>
 800917c:	4603      	mov	r3, r0
 800917e:	b29a      	uxth	r2, r3
 8009180:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009188:	488f      	ldr	r0, [pc, #572]	; (80093c8 <main+0x1be8>)
 800918a:	f7fd fc13 	bl	80069b4 <HAL_UART_Transmit>
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_high_speed_test)==0){
 800918e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8009192:	6819      	ldr	r1, [r3, #0]
 8009194:	488a      	ldr	r0, [pc, #552]	; (80093c0 <main+0x1be0>)
 8009196:	f7f7 f823 	bl	80001e0 <strcmp>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d105      	bne.n	80091ac <main+0x19cc>
					mode_index = 12;
 80091a0:	230c      	movs	r3, #12
 80091a2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_motor_characterization_mode)==0){
 80091ac:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 80091b0:	6819      	ldr	r1, [r3, #0]
 80091b2:	4883      	ldr	r0, [pc, #524]	; (80093c0 <main+0x1be0>)
 80091b4:	f7f7 f814 	bl	80001e0 <strcmp>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d105      	bne.n	80091ca <main+0x19ea>
					mode_index = 13;
 80091be:	230d      	movs	r3, #13
 80091c0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 80091c4:	2301      	movs	r3, #1
 80091c6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_pendulum_sysid_test)==0){
 80091ca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80091ce:	6819      	ldr	r1, [r3, #0]
 80091d0:	487b      	ldr	r0, [pc, #492]	; (80093c0 <main+0x1be0>)
 80091d2:	f7f7 f805 	bl	80001e0 <strcmp>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d105      	bne.n	80091e8 <main+0x1a08>
					mode_index = 14;
 80091dc:	230e      	movs	r3, #14
 80091de:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_load_dist)==0){
 80091e8:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	4874      	ldr	r0, [pc, #464]	; (80093c0 <main+0x1be0>)
 80091f0:	f7f6 fff6 	bl	80001e0 <strcmp>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d105      	bne.n	8009206 <main+0x1a26>
					mode_index = 16;
 80091fa:	2310      	movs	r3, #16
 80091fc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 8009200:	2301      	movs	r3, #1
 8009202:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_load_dist_step)==0){
 8009206:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800920a:	6819      	ldr	r1, [r3, #0]
 800920c:	486c      	ldr	r0, [pc, #432]	; (80093c0 <main+0x1be0>)
 800920e:	f7f6 ffe7 	bl	80001e0 <strcmp>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <main+0x1a44>
					mode_index = 17;
 8009218:	2311      	movs	r3, #17
 800921a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 800921e:	2301      	movs	r3, #1
 8009220:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_noise_dist_step)==0){
 8009224:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	4865      	ldr	r0, [pc, #404]	; (80093c0 <main+0x1be0>)
 800922c:	f7f6 ffd8 	bl	80001e0 <strcmp>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d105      	bne.n	8009242 <main+0x1a62>
					mode_index = 18;
 8009236:	2312      	movs	r3, #18
 8009238:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 800923c:	2301      	movs	r3, #1
 800923e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_plant_dist_step)==0){
 8009242:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8009246:	6819      	ldr	r1, [r3, #0]
 8009248:	485d      	ldr	r0, [pc, #372]	; (80093c0 <main+0x1be0>)
 800924a:	f7f6 ffc9 	bl	80001e0 <strcmp>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d105      	bne.n	8009260 <main+0x1a80>
					mode_index = 18;
 8009254:	2312      	movs	r3, #18
 8009256:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 800925a:	2301      	movs	r3, #1
 800925c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if (strcmp((char *)Msg.Data,mode_string_mode_8)==0){
 8009260:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8009264:	6819      	ldr	r1, [r3, #0]
 8009266:	4856      	ldr	r0, [pc, #344]	; (80093c0 <main+0x1be0>)
 8009268:	f7f6 ffba 	bl	80001e0 <strcmp>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <main+0x1a9e>
					mode_index = 8;
 8009272:	2308      	movs	r3, #8
 8009274:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					char_mode_select = 1;
 8009278:	2301      	movs	r3, #1
 800927a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				}

				if(char_mode_select == 0){
 800927e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8009282:	2b00      	cmp	r3, #0
 8009284:	d104      	bne.n	8009290 <main+0x1ab0>
					mode_index = atoi((char *)Msg.Data);
 8009286:	484e      	ldr	r0, [pc, #312]	; (80093c0 <main+0x1be0>)
 8009288:	f009 f9cc 	bl	8012624 <atoi>
 800928c:	f8c7 0584 	str.w	r0, [r7, #1412]	; 0x584

				/*
				* Set mode index according to user input
				*/

				switch (mode_index) {
 8009290:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8009294:	3b01      	subs	r3, #1
 8009296:	2b12      	cmp	r3, #18
 8009298:	f200 80c4 	bhi.w	8009424 <main+0x1c44>
 800929c:	a201      	add	r2, pc, #4	; (adr r2, 80092a4 <main+0x1ac4>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	080092f1 	.word	0x080092f1
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009309 	.word	0x08009309
 80092b0:	08009315 	.word	0x08009315
 80092b4:	08009425 	.word	0x08009425
 80092b8:	08009425 	.word	0x08009425
 80092bc:	08009321 	.word	0x08009321
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	08009425 	.word	0x08009425
 80092c8:	08009341 	.word	0x08009341
 80092cc:	08009355 	.word	0x08009355
 80092d0:	08009369 	.word	0x08009369
 80092d4:	0800937d 	.word	0x0800937d
 80092d8:	08009391 	.word	0x08009391
 80092dc:	080093a5 	.word	0x080093a5
 80092e0:	080093d5 	.word	0x080093d5
 80092e4:	080093e9 	.word	0x080093e9
 80092e8:	080093fd 	.word	0x080093fd
 80092ec:	08009411 	.word	0x08009411

				case 1:
					mode_index = mode_1;
 80092f0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 80092fa:	e099      	b.n	8009430 <main+0x1c50>

				case 2:
					mode_index = mode_2;
 80092fc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 8009306:	e093      	b.n	8009430 <main+0x1c50>

				case 3:
					mode_index = mode_3;
 8009308:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 8009312:	e08d      	b.n	8009430 <main+0x1c50>

				case 4:
					mode_index = mode_4;
 8009314:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 800931e:	e087      	b.n	8009430 <main+0x1c50>

				case 7:
					mode_index = mode_adaptive;
 8009320:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 800932a:	e081      	b.n	8009430 <main+0x1c50>

				case 8:
					mode_index = mode_8;
 800932c:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 8009336:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]
					break;
 800933e:	e077      	b.n	8009430 <main+0x1c50>

				case 10:
					mode_index = mode_10;
 8009340:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 800934a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
					break;
 8009352:	e06d      	b.n	8009430 <main+0x1c50>

				case 11:
					mode_index = mode_11;
 8009354:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 800935e:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
					break;
 8009366:	e063      	b.n	8009430 <main+0x1c50>

				case 12:
					mode_index = mode_12;
 8009368:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 8009372:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
					break;
 800937a:	e059      	b.n	8009430 <main+0x1c50>

				case 13:
					mode_index = mode_13;
 800937c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 8009386:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
					break;
 800938e:	e04f      	b.n	8009430 <main+0x1c50>

				case 14:
					mode_index = mode_14;
 8009390:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 800939a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
					break;
 80093a2:	e045      	b.n	8009430 <main+0x1c50>

				case 15:
					mode_index = mode_15;
 80093a4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 80093ae:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
					break;
 80093b6:	e03b      	b.n	8009430 <main+0x1c50>
 80093b8:	51eb851f 	.word	0x51eb851f
 80093bc:	20000db4 	.word	0x20000db4
 80093c0:	20000db8 	.word	0x20000db8
 80093c4:	080186c4 	.word	0x080186c4
 80093c8:	20000f20 	.word	0x20000f20
 80093cc:	080186cc 	.word	0x080186cc
 80093d0:	080186e4 	.word	0x080186e4

				case 16:
					mode_index = mode_16;
 80093d4:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 80093de:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80093e2:	2201      	movs	r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
					break;
 80093e6:	e023      	b.n	8009430 <main+0x1c50>

				case 17:
					mode_index = mode_17;
 80093e8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 80093f2:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
					break;
 80093fa:	e019      	b.n	8009430 <main+0x1c50>

				case 18:
					mode_index = mode_18;
 80093fc:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 8009406:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800940a:	2201      	movs	r2, #1
 800940c:	601a      	str	r2, [r3, #0]
					break;
 800940e:	e00f      	b.n	8009430 <main+0x1c50>

				case 19:
					mode_index = mode_19;
 8009410:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					mode_interactive = 1;
 800941a:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 800941e:	2201      	movs	r2, #1
 8009420:	601a      	str	r2, [r3, #0]
					break;
 8009422:	e005      	b.n	8009430 <main+0x1c50>

				default:
					mode_index = mode_1;
 8009424:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					break;
 800942e:	bf00      	nop

				/*
				* Configure Motor Speed Profile and PID Controller Gains
				*/

				enable_rotor_position_step_response_cycle = 0;
 8009430:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
				enable_mod_sin_rotor_tracking = 0;
 8009438:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
				enable_rotor_chirp = 0;
 8009440:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009444:	2200      	movs	r2, #0
 8009446:	601a      	str	r2, [r3, #0]
				enable_pendulum_position_impulse_response_cycle = 0;
 8009448:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
				enable_pendulum_sysid_test = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
				enable_rotor_tracking_comb_signal = 0;
 8009456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
				enable_disturbance_rejection_step = 0;
 800945e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
				enable_noise_rejection_step = 0;
 8009466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]


				switch (mode_index) {
 800946e:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8009472:	3b01      	subs	r3, #1
 8009474:	2b12      	cmp	r3, #18
 8009476:	f202 87b7 	bhi.w	800c3e8 <main+0x4c08>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <main+0x1ca0>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094cd 	.word	0x080094cd
 8009484:	080098b9 	.word	0x080098b9
 8009488:	08009c9d 	.word	0x08009c9d
 800948c:	0800a081 	.word	0x0800a081
 8009490:	0800c3e9 	.word	0x0800c3e9
 8009494:	0800c3e9 	.word	0x0800c3e9
 8009498:	0800a459 	.word	0x0800a459
 800949c:	0800a509 	.word	0x0800a509
 80094a0:	0800c3e9 	.word	0x0800c3e9
 80094a4:	0800b48d 	.word	0x0800b48d
 80094a8:	0800bcf3 	.word	0x0800bcf3
 80094ac:	0800bd5d 	.word	0x0800bd5d
 80094b0:	0800c173 	.word	0x0800c173
 80094b4:	0800c1ff 	.word	0x0800c1ff
 80094b8:	0800c243 	.word	0x0800c243
 80094bc:	0800c281 	.word	0x0800c281
 80094c0:	0800c2cd 	.word	0x0800c2cd
 80094c4:	0800c31b 	.word	0x0800c31b
 80094c8:	0800c363 	.word	0x0800c363

				case 1:
					select_suspended_mode = 0;
 80094cc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80094d0:	2200      	movs	r2, #0
 80094d2:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_1;
 80094d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80094d8:	4acc      	ldr	r2, [pc, #816]	; (800980c <main+0x202c>)
 80094da:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_1;
 80094dc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_1;
 80094e6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80094ea:	4ac9      	ldr	r2, [pc, #804]	; (8009810 <main+0x2030>)
 80094ec:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_1;
 80094ee:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80094f2:	4ac8      	ldr	r2, [pc, #800]	; (8009814 <main+0x2034>)
 80094f4:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_1;
 80094f6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_1;
 8009500:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8009504:	4ac4      	ldr	r2, [pc, #784]	; (8009818 <main+0x2038>)
 8009506:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_1;
 8009508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800950c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_1;
 8009510:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009514:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606

					enable_mod_sin_rotor_tracking = 0;
 8009518:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 0;
 8009520:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
					enable_pendulum_position_impulse_response_cycle = 0;
 8009528:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rMode %i Configured", mode_index);
 8009530:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009534:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8009538:	49b8      	ldr	r1, [pc, #736]	; (800981c <main+0x203c>)
 800953a:	4618      	mov	r0, r3
 800953c:	f009 fb08 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 8009540:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009544:	4618      	mov	r0, r3
 8009546:	f7f6 fe55 	bl	80001f4 <strlen>
 800954a:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800954c:	b29a      	uxth	r2, r3
 800954e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009556:	48b2      	ldr	r0, [pc, #712]	; (8009820 <main+0x2040>)
 8009558:	f7fd fa2c 	bl	80069b4 <HAL_UART_Transmit>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 800955c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009560:	4ab0      	ldr	r2, [pc, #704]	; (8009824 <main+0x2044>)
 8009562:	461c      	mov	r4, r3
 8009564:	4615      	mov	r5, r2
 8009566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800956a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800956c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800956e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009572:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009576:	6020      	str	r0, [r4, #0]
 8009578:	3404      	adds	r4, #4
 800957a:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800957c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009580:	4618      	mov	r0, r3
 8009582:	f7f6 fe37 	bl	80001f4 <strlen>
 8009586:	4603      	mov	r3, r0
 8009588:	b29a      	uxth	r2, r3
 800958a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800958e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009592:	48a3      	ldr	r0, [pc, #652]	; (8009820 <main+0x2040>)
 8009594:	f7fd fa0e 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 8009598:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800959c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80095a0:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80095a4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80095a8:	f7fe f8bc 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_chirp);
 80095ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80095b6:	499c      	ldr	r1, [pc, #624]	; (8009828 <main+0x2048>)
 80095b8:	4618      	mov	r0, r3
 80095ba:	f009 fac9 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80095be:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7f6 fe16 	bl	80001f4 <strlen>
 80095c8:	4603      	mov	r3, r0
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80095d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095d4:	4892      	ldr	r0, [pc, #584]	; (8009820 <main+0x2040>)
 80095d6:	f7fd f9ed 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_chirp == 0){
 80095da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d17d      	bne.n	80096e0 <main+0x1f00>
					sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 80095e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80095e8:	4a90      	ldr	r2, [pc, #576]	; (800982c <main+0x204c>)
 80095ea:	461c      	mov	r4, r3
 80095ec:	4615      	mov	r5, r2
 80095ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80095fa:	c407      	stmia	r4!, {r0, r1, r2}
 80095fc:	8023      	strh	r3, [r4, #0]
 80095fe:	3402      	adds	r4, #2
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009604:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009608:	4618      	mov	r0, r3
 800960a:	f7f6 fdf3 	bl	80001f4 <strlen>
 800960e:	4603      	mov	r3, r0
 8009610:	b29a      	uxth	r2, r3
 8009612:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800961a:	4881      	ldr	r0, [pc, #516]	; (8009820 <main+0x2040>)
 800961c:	f7fd f9ca 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 8009620:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009624:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009628:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800962c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009630:	f7fe f878 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 8009634:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800963e:	497a      	ldr	r1, [pc, #488]	; (8009828 <main+0x2048>)
 8009640:	4618      	mov	r0, r3
 8009642:	f009 fa85 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009646:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800964a:	4618      	mov	r0, r3
 800964c:	f7f6 fdd2 	bl	80001f4 <strlen>
 8009650:	4603      	mov	r3, r0
 8009652:	b29a      	uxth	r2, r3
 8009654:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800965c:	4870      	ldr	r0, [pc, #448]	; (8009820 <main+0x2040>)
 800965e:	f7fd f9a9 	bl	80069b4 <HAL_UART_Transmit>

					sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 8009662:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009666:	4a72      	ldr	r2, [pc, #456]	; (8009830 <main+0x2050>)
 8009668:	461c      	mov	r4, r3
 800966a:	4615      	mov	r5, r2
 800966c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800966e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009674:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009678:	c407      	stmia	r4!, {r0, r1, r2}
 800967a:	8023      	strh	r3, [r4, #0]
 800967c:	3402      	adds	r4, #2
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009682:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009686:	4618      	mov	r0, r3
 8009688:	f7f6 fdb4 	bl	80001f4 <strlen>
 800968c:	4603      	mov	r3, r0
 800968e:	b29a      	uxth	r2, r3
 8009690:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009698:	4861      	ldr	r0, [pc, #388]	; (8009820 <main+0x2040>)
 800969a:	f7fd f98b 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 800969e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096a2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80096a6:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80096aa:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80096ae:	f7fe f839 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 80096b2:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80096bc:	495a      	ldr	r1, [pc, #360]	; (8009828 <main+0x2048>)
 80096be:	4618      	mov	r0, r3
 80096c0:	f009 fa46 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80096c4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f6 fd93 	bl	80001f4 <strlen>
 80096ce:	4603      	mov	r3, r0
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096da:	4851      	ldr	r0, [pc, #324]	; (8009820 <main+0x2040>)
 80096dc:	f7fd f96a 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 0 && enable_rotor_position_step_response_cycle == 0
 80096e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d153      	bne.n	8009792 <main+0x1fb2>
 80096ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d14e      	bne.n	8009792 <main+0x1fb2>
							&& enable_mod_sin_rotor_tracking == 0){
 80096f4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d149      	bne.n	8009792 <main+0x1fb2>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Tracking Comb Signal; 0 to Disable: ");
 80096fe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009702:	4a4c      	ldr	r2, [pc, #304]	; (8009834 <main+0x2054>)
 8009704:	461c      	mov	r4, r3
 8009706:	4615      	mov	r5, r2
 8009708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800970a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800970c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800970e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009718:	c407      	stmia	r4!, {r0, r1, r2}
 800971a:	8023      	strh	r3, [r4, #0]
 800971c:	3402      	adds	r4, #2
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009722:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009726:	4618      	mov	r0, r3
 8009728:	f7f6 fd64 	bl	80001f4 <strlen>
 800972c:	4603      	mov	r3, r0
 800972e:	b29a      	uxth	r2, r3
 8009730:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009738:	4839      	ldr	r0, [pc, #228]	; (8009820 <main+0x2040>)
 800973a:	f7fd f93b 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_tracking_comb_signal);
 800973e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009742:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009746:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800974a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800974e:	f7fd ffe9 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_tracking_comb_signal);
 8009752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800975c:	4932      	ldr	r1, [pc, #200]	; (8009828 <main+0x2048>)
 800975e:	4618      	mov	r0, r3
 8009760:	f009 f9f6 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009764:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009768:	4618      	mov	r0, r3
 800976a:	f7f6 fd43 	bl	80001f4 <strlen>
 800976e:	4603      	mov	r3, r0
 8009770:	b29a      	uxth	r2, r3
 8009772:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800977a:	4829      	ldr	r0, [pc, #164]	; (8009820 <main+0x2040>)
 800977c:	f7fd f91a 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_tracking_comb_signal == 1){
 8009780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d103      	bne.n	8009792 <main+0x1fb2>
					rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 800978a:	4b2b      	ldr	r3, [pc, #172]	; (8009838 <main+0x2058>)
 800978c:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8009790:	6013      	str	r3, [r2, #0]
					}
					}

					if (enable_rotor_position_step_response_cycle == 1) {
 8009792:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d11c      	bne.n	80097d6 <main+0x1ff6>
						sprintf(msg, "\n\rRotor Step Drive enabled ");
 800979c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097a0:	4a26      	ldr	r2, [pc, #152]	; (800983c <main+0x205c>)
 80097a2:	461c      	mov	r4, r3
 80097a4:	4615      	mov	r5, r2
 80097a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80097ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 80097b2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80097ba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097be:	4618      	mov	r0, r3
 80097c0:	f7f6 fd18 	bl	80001f4 <strlen>
 80097c4:	4603      	mov	r3, r0
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d0:	4813      	ldr	r0, [pc, #76]	; (8009820 <main+0x2040>)
 80097d2:	f7fd f8ef 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_mod_sin_rotor_tracking == 1) {
 80097d6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d13a      	bne.n	8009856 <main+0x2076>
						sprintf(msg, "\n\rRotor Sine Drive enabled ");
 80097e0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80097e4:	4a16      	ldr	r2, [pc, #88]	; (8009840 <main+0x2060>)
 80097e6:	461c      	mov	r4, r3
 80097e8:	4615      	mov	r5, r2
 80097ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80097ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80097f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 80097f6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80097fe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009802:	4618      	mov	r0, r3
 8009804:	f7f6 fcf6 	bl	80001f4 <strlen>
 8009808:	e01c      	b.n	8009844 <main+0x2064>
 800980a:	bf00      	nop
 800980c:	44305333 	.word	0x44305333
 8009810:	42bccccd 	.word	0x42bccccd
 8009814:	4087ae14 	.word	0x4087ae14
 8009818:	41047ae1 	.word	0x41047ae1
 800981c:	0801870c 	.word	0x0801870c
 8009820:	20000f20 	.word	0x20000f20
 8009824:	08018724 	.word	0x08018724
 8009828:	0801875c 	.word	0x0801875c
 800982c:	08018760 	.word	0x08018760
 8009830:	08018790 	.word	0x08018790
 8009834:	080187c0 	.word	0x080187c0
 8009838:	3f638ef3 	.word	0x3f638ef3
 800983c:	08018800 	.word	0x08018800
 8009840:	0801881c 	.word	0x0801881c
 8009844:	4603      	mov	r3, r0
 8009846:	b29a      	uxth	r2, r3
 8009848:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800984c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009850:	4817      	ldr	r0, [pc, #92]	; (80098b0 <main+0x20d0>)
 8009852:	f7fd f8af 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 1) {
 8009856:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	f042 860b 	bne.w	800c478 <main+0x4c98>
						enable_rotor_position_step_response_cycle = 0;
 8009862:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]
						enable_pendulum_position_impulse_response_cycle = 0;
 800986a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 8009872:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
						sprintf(msg, "\n\rRotor Chirp Drive enabled ");
 800987a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800987e:	4a0d      	ldr	r2, [pc, #52]	; (80098b4 <main+0x20d4>)
 8009880:	461c      	mov	r4, r3
 8009882:	4615      	mov	r5, r2
 8009884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009888:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800988c:	c407      	stmia	r4!, {r0, r1, r2}
 800988e:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009890:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009894:	4618      	mov	r0, r3
 8009896:	f7f6 fcad 	bl	80001f4 <strlen>
 800989a:	4603      	mov	r3, r0
 800989c:	b29a      	uxth	r2, r3
 800989e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098a6:	4802      	ldr	r0, [pc, #8]	; (80098b0 <main+0x20d0>)
 80098a8:	f7fd f884 	bl	80069b4 <HAL_UART_Transmit>
					}
					break;
 80098ac:	f002 bde4 	b.w	800c478 <main+0x4c98>
 80098b0:	20000f20 	.word	0x20000f20
 80098b4:	08018838 	.word	0x08018838

				case 2:
					select_suspended_mode = 0;
 80098b8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_2;
 80098c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80098c4:	4acc      	ldr	r2, [pc, #816]	; (8009bf8 <main+0x2418>)
 80098c6:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_2;
 80098c8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_2;
 80098d2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80098d6:	4ac9      	ldr	r2, [pc, #804]	; (8009bfc <main+0x241c>)
 80098d8:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_2;
 80098da:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80098de:	4ac8      	ldr	r2, [pc, #800]	; (8009c00 <main+0x2420>)
 80098e0:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_2;
 80098e2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_2;
 80098ec:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80098f0:	4ac4      	ldr	r2, [pc, #784]	; (8009c04 <main+0x2424>)
 80098f2:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_2;
 80098f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098f8:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_2;
 80098fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009900:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					enable_mod_sin_rotor_tracking = 0;
 8009904:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 0;
 800990c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rMode %i Configured", mode_index);
 8009914:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009918:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800991c:	49ba      	ldr	r1, [pc, #744]	; (8009c08 <main+0x2428>)
 800991e:	4618      	mov	r0, r3
 8009920:	f009 f916 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 8009924:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009928:	4618      	mov	r0, r3
 800992a:	f7f6 fc63 	bl	80001f4 <strlen>
 800992e:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 8009930:	b29a      	uxth	r2, r3
 8009932:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800993a:	48b4      	ldr	r0, [pc, #720]	; (8009c0c <main+0x242c>)
 800993c:	f7fd f83a 	bl	80069b4 <HAL_UART_Transmit>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 8009940:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009944:	4ab2      	ldr	r2, [pc, #712]	; (8009c10 <main+0x2430>)
 8009946:	461c      	mov	r4, r3
 8009948:	4615      	mov	r5, r2
 800994a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800994c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800994e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	3404      	adds	r4, #4
 800995e:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009960:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009964:	4618      	mov	r0, r3
 8009966:	f7f6 fc45 	bl	80001f4 <strlen>
 800996a:	4603      	mov	r3, r0
 800996c:	b29a      	uxth	r2, r3
 800996e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009976:	48a5      	ldr	r0, [pc, #660]	; (8009c0c <main+0x242c>)
 8009978:	f7fd f81c 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 800997c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009980:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009984:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009988:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800998c:	f7fd feca 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_chirp);
 8009990:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800999a:	499e      	ldr	r1, [pc, #632]	; (8009c14 <main+0x2434>)
 800999c:	4618      	mov	r0, r3
 800999e:	f009 f8d7 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80099a2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7f6 fc24 	bl	80001f4 <strlen>
 80099ac:	4603      	mov	r3, r0
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80099b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b8:	4894      	ldr	r0, [pc, #592]	; (8009c0c <main+0x242c>)
 80099ba:	f7fc fffb 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_chirp == 0){
 80099be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d17d      	bne.n	8009ac4 <main+0x22e4>
					sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 80099c8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80099cc:	4a92      	ldr	r2, [pc, #584]	; (8009c18 <main+0x2438>)
 80099ce:	461c      	mov	r4, r3
 80099d0:	4615      	mov	r5, r2
 80099d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80099de:	c407      	stmia	r4!, {r0, r1, r2}
 80099e0:	8023      	strh	r3, [r4, #0]
 80099e2:	3402      	adds	r4, #2
 80099e4:	0c1b      	lsrs	r3, r3, #16
 80099e6:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80099e8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7f6 fc01 	bl	80001f4 <strlen>
 80099f2:	4603      	mov	r3, r0
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80099fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099fe:	4883      	ldr	r0, [pc, #524]	; (8009c0c <main+0x242c>)
 8009a00:	f7fc ffd8 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 8009a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a08:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009a0c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009a10:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009a14:	f7fd fe86 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 8009a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009a22:	497c      	ldr	r1, [pc, #496]	; (8009c14 <main+0x2434>)
 8009a24:	4618      	mov	r0, r3
 8009a26:	f009 f893 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009a2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7f6 fbe0 	bl	80001f4 <strlen>
 8009a34:	4603      	mov	r3, r0
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a40:	4872      	ldr	r0, [pc, #456]	; (8009c0c <main+0x242c>)
 8009a42:	f7fc ffb7 	bl	80069b4 <HAL_UART_Transmit>

					sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 8009a46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009a4a:	4a74      	ldr	r2, [pc, #464]	; (8009c1c <main+0x243c>)
 8009a4c:	461c      	mov	r4, r3
 8009a4e:	4615      	mov	r5, r2
 8009a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009a5c:	c407      	stmia	r4!, {r0, r1, r2}
 8009a5e:	8023      	strh	r3, [r4, #0]
 8009a60:	3402      	adds	r4, #2
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009a66:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fbc2 	bl	80001f4 <strlen>
 8009a70:	4603      	mov	r3, r0
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a7c:	4863      	ldr	r0, [pc, #396]	; (8009c0c <main+0x242c>)
 8009a7e:	f7fc ff99 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 8009a82:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009a86:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009a8a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009a8e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009a92:	f7fd fe47 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 8009a96:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009aa0:	495c      	ldr	r1, [pc, #368]	; (8009c14 <main+0x2434>)
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f009 f854 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009aa8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f6 fba1 	bl	80001f4 <strlen>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009abe:	4853      	ldr	r0, [pc, #332]	; (8009c0c <main+0x242c>)
 8009ac0:	f7fc ff78 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 0 && enable_rotor_position_step_response_cycle == 0
 8009ac4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d153      	bne.n	8009b76 <main+0x2396>
 8009ace:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d14e      	bne.n	8009b76 <main+0x2396>
							&& enable_mod_sin_rotor_tracking == 0){
 8009ad8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d149      	bne.n	8009b76 <main+0x2396>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Tracking Comb Signal; 0 to Disable: ");
 8009ae2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009ae6:	4a4e      	ldr	r2, [pc, #312]	; (8009c20 <main+0x2440>)
 8009ae8:	461c      	mov	r4, r3
 8009aea:	4615      	mov	r5, r2
 8009aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009af8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009afc:	c407      	stmia	r4!, {r0, r1, r2}
 8009afe:	8023      	strh	r3, [r4, #0]
 8009b00:	3402      	adds	r4, #2
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009b06:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f6 fb72 	bl	80001f4 <strlen>
 8009b10:	4603      	mov	r3, r0
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b1c:	483b      	ldr	r0, [pc, #236]	; (8009c0c <main+0x242c>)
 8009b1e:	f7fc ff49 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_tracking_comb_signal);
 8009b22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b26:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009b2a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009b2e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009b32:	f7fd fdf7 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_tracking_comb_signal);
 8009b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009b40:	4934      	ldr	r1, [pc, #208]	; (8009c14 <main+0x2434>)
 8009b42:	4618      	mov	r0, r3
 8009b44:	f009 f804 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009b48:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7f6 fb51 	bl	80001f4 <strlen>
 8009b52:	4603      	mov	r3, r0
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b5e:	482b      	ldr	r0, [pc, #172]	; (8009c0c <main+0x242c>)
 8009b60:	f7fc ff28 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_tracking_comb_signal == 1){
 8009b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d103      	bne.n	8009b76 <main+0x2396>
					rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 8009b6e:	4b2d      	ldr	r3, [pc, #180]	; (8009c24 <main+0x2444>)
 8009b70:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8009b74:	6013      	str	r3, [r2, #0]
					}
					}

					if (enable_rotor_position_step_response_cycle == 1) {
 8009b76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d11c      	bne.n	8009bba <main+0x23da>
						sprintf(msg, "\n\rRotor Step Drive enabled ");
 8009b80:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009b84:	4a28      	ldr	r2, [pc, #160]	; (8009c28 <main+0x2448>)
 8009b86:	461c      	mov	r4, r3
 8009b88:	4615      	mov	r5, r2
 8009b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 8009b96:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009b9e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f6 fb26 	bl	80001f4 <strlen>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb4:	4815      	ldr	r0, [pc, #84]	; (8009c0c <main+0x242c>)
 8009bb6:	f7fc fefd 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_mod_sin_rotor_tracking == 1) {
 8009bba:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d13a      	bne.n	8009c3a <main+0x245a>
						sprintf(msg, "\n\rRotor Sine Drive enabled ");
 8009bc4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009bc8:	4a18      	ldr	r2, [pc, #96]	; (8009c2c <main+0x244c>)
 8009bca:	461c      	mov	r4, r3
 8009bcc:	4615      	mov	r5, r2
 8009bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 8009bda:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009be2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f6 fb04 	bl	80001f4 <strlen>
 8009bec:	4603      	mov	r3, r0
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009bf4:	e01c      	b.n	8009c30 <main+0x2450>
 8009bf6:	bf00      	nop
 8009bf8:	441d2ccd 	.word	0x441d2ccd
 8009bfc:	42a83333 	.word	0x42a83333
 8009c00:	4087ae14 	.word	0x4087ae14
 8009c04:	40cc28f6 	.word	0x40cc28f6
 8009c08:	0801870c 	.word	0x0801870c
 8009c0c:	20000f20 	.word	0x20000f20
 8009c10:	08018724 	.word	0x08018724
 8009c14:	0801875c 	.word	0x0801875c
 8009c18:	08018760 	.word	0x08018760
 8009c1c:	08018790 	.word	0x08018790
 8009c20:	080187c0 	.word	0x080187c0
 8009c24:	3f638ef3 	.word	0x3f638ef3
 8009c28:	08018800 	.word	0x08018800
 8009c2c:	0801881c 	.word	0x0801881c
 8009c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c34:	4817      	ldr	r0, [pc, #92]	; (8009c94 <main+0x24b4>)
 8009c36:	f7fc febd 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 1) {
 8009c3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	f042 841b 	bne.w	800c47c <main+0x4c9c>
						enable_rotor_position_step_response_cycle = 0;
 8009c46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 8009c4e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
						enable_pendulum_position_impulse_response_cycle = 0;
 8009c56:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
						sprintf(msg, "\n\rRotor Chirp Drive enabled ");
 8009c5e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009c62:	4a0d      	ldr	r2, [pc, #52]	; (8009c98 <main+0x24b8>)
 8009c64:	461c      	mov	r4, r3
 8009c66:	4615      	mov	r5, r2
 8009c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009c70:	c407      	stmia	r4!, {r0, r1, r2}
 8009c72:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009c74:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f6 fabb 	bl	80001f4 <strlen>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c8a:	4802      	ldr	r0, [pc, #8]	; (8009c94 <main+0x24b4>)
 8009c8c:	f7fc fe92 	bl	80069b4 <HAL_UART_Transmit>
					}
					break;
 8009c90:	f002 bbf4 	b.w	800c47c <main+0x4c9c>
 8009c94:	20000f20 	.word	0x20000f20
 8009c98:	08018838 	.word	0x08018838

				case 3:
					select_suspended_mode = 0;
 8009c9c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_3;
 8009ca4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8009ca8:	4acc      	ldr	r2, [pc, #816]	; (8009fdc <main+0x27fc>)
 8009caa:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_3;
 8009cac:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_3;
 8009cb6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8009cba:	4ac9      	ldr	r2, [pc, #804]	; (8009fe0 <main+0x2800>)
 8009cbc:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_3;
 8009cbe:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8009cc2:	4ac8      	ldr	r2, [pc, #800]	; (8009fe4 <main+0x2804>)
 8009cc4:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_3;
 8009cc6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8009cca:	f04f 0200 	mov.w	r2, #0
 8009cce:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_3;
 8009cd0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8009cd4:	4ac4      	ldr	r2, [pc, #784]	; (8009fe8 <main+0x2808>)
 8009cd6:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_3;
 8009cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cdc:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_3;
 8009ce0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009ce4:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					enable_mod_sin_rotor_tracking = 0;
 8009ce8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 0;
 8009cf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rMode %i Configured", mode_index);
 8009cf8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009cfc:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8009d00:	49ba      	ldr	r1, [pc, #744]	; (8009fec <main+0x280c>)
 8009d02:	4618      	mov	r0, r3
 8009d04:	f008 ff24 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 8009d08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7f6 fa71 	bl	80001f4 <strlen>
 8009d12:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d1e:	48b4      	ldr	r0, [pc, #720]	; (8009ff0 <main+0x2810>)
 8009d20:	f7fc fe48 	bl	80069b4 <HAL_UART_Transmit>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 8009d24:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009d28:	4ab2      	ldr	r2, [pc, #712]	; (8009ff4 <main+0x2814>)
 8009d2a:	461c      	mov	r4, r3
 8009d2c:	4615      	mov	r5, r2
 8009d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d3e:	6020      	str	r0, [r4, #0]
 8009d40:	3404      	adds	r4, #4
 8009d42:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009d44:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f6 fa53 	bl	80001f4 <strlen>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d5a:	48a5      	ldr	r0, [pc, #660]	; (8009ff0 <main+0x2810>)
 8009d5c:	f7fc fe2a 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 8009d60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d64:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009d68:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009d6c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009d70:	f7fd fcd8 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_chirp);
 8009d74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009d7e:	499e      	ldr	r1, [pc, #632]	; (8009ff8 <main+0x2818>)
 8009d80:	4618      	mov	r0, r3
 8009d82:	f008 fee5 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009d86:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7f6 fa32 	bl	80001f4 <strlen>
 8009d90:	4603      	mov	r3, r0
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d9c:	4894      	ldr	r0, [pc, #592]	; (8009ff0 <main+0x2810>)
 8009d9e:	f7fc fe09 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_chirp == 0){
 8009da2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d17d      	bne.n	8009ea8 <main+0x26c8>
					sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 8009dac:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009db0:	4a92      	ldr	r2, [pc, #584]	; (8009ffc <main+0x281c>)
 8009db2:	461c      	mov	r4, r3
 8009db4:	4615      	mov	r5, r2
 8009db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009dc2:	c407      	stmia	r4!, {r0, r1, r2}
 8009dc4:	8023      	strh	r3, [r4, #0]
 8009dc6:	3402      	adds	r4, #2
 8009dc8:	0c1b      	lsrs	r3, r3, #16
 8009dca:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009dcc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f6 fa0f 	bl	80001f4 <strlen>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009de2:	4883      	ldr	r0, [pc, #524]	; (8009ff0 <main+0x2810>)
 8009de4:	f7fc fde6 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 8009de8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009dec:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009df0:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009df4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009df8:	f7fd fc94 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 8009dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e06:	497c      	ldr	r1, [pc, #496]	; (8009ff8 <main+0x2818>)
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f008 fea1 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009e0e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f6 f9ee 	bl	80001f4 <strlen>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e24:	4872      	ldr	r0, [pc, #456]	; (8009ff0 <main+0x2810>)
 8009e26:	f7fc fdc5 	bl	80069b4 <HAL_UART_Transmit>

					sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 8009e2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e2e:	4a74      	ldr	r2, [pc, #464]	; (800a000 <main+0x2820>)
 8009e30:	461c      	mov	r4, r3
 8009e32:	4615      	mov	r5, r2
 8009e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009e40:	c407      	stmia	r4!, {r0, r1, r2}
 8009e42:	8023      	strh	r3, [r4, #0]
 8009e44:	3402      	adds	r4, #2
 8009e46:	0c1b      	lsrs	r3, r3, #16
 8009e48:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009e4a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f6 f9d0 	bl	80001f4 <strlen>
 8009e54:	4603      	mov	r3, r0
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e60:	4863      	ldr	r0, [pc, #396]	; (8009ff0 <main+0x2810>)
 8009e62:	f7fc fda7 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 8009e66:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009e6a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009e6e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009e72:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009e76:	f7fd fc55 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 8009e7a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e84:	495c      	ldr	r1, [pc, #368]	; (8009ff8 <main+0x2818>)
 8009e86:	4618      	mov	r0, r3
 8009e88:	f008 fe62 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009e8c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7f6 f9af 	bl	80001f4 <strlen>
 8009e96:	4603      	mov	r3, r0
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea2:	4853      	ldr	r0, [pc, #332]	; (8009ff0 <main+0x2810>)
 8009ea4:	f7fc fd86 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 0 && enable_rotor_position_step_response_cycle == 0
 8009ea8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d153      	bne.n	8009f5a <main+0x277a>
 8009eb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d14e      	bne.n	8009f5a <main+0x277a>
							&& enable_mod_sin_rotor_tracking == 0){
 8009ebc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d149      	bne.n	8009f5a <main+0x277a>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Tracking Comb Signal; 0 to Disable: ");
 8009ec6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009eca:	4a4e      	ldr	r2, [pc, #312]	; (800a004 <main+0x2824>)
 8009ecc:	461c      	mov	r4, r3
 8009ece:	4615      	mov	r5, r2
 8009ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009edc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009ee0:	c407      	stmia	r4!, {r0, r1, r2}
 8009ee2:	8023      	strh	r3, [r4, #0]
 8009ee4:	3402      	adds	r4, #2
 8009ee6:	0c1b      	lsrs	r3, r3, #16
 8009ee8:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009eea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7f6 f980 	bl	80001f4 <strlen>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f00:	483b      	ldr	r0, [pc, #236]	; (8009ff0 <main+0x2810>)
 8009f02:	f7fc fd57 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_tracking_comb_signal);
 8009f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f0a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8009f0e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8009f12:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8009f16:	f7fd fc05 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_tracking_comb_signal);
 8009f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009f24:	4934      	ldr	r1, [pc, #208]	; (8009ff8 <main+0x2818>)
 8009f26:	4618      	mov	r0, r3
 8009f28:	f008 fe12 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009f2c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7f6 f95f 	bl	80001f4 <strlen>
 8009f36:	4603      	mov	r3, r0
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f42:	482b      	ldr	r0, [pc, #172]	; (8009ff0 <main+0x2810>)
 8009f44:	f7fc fd36 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_tracking_comb_signal == 1){
 8009f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d103      	bne.n	8009f5a <main+0x277a>
					rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 8009f52:	4b2d      	ldr	r3, [pc, #180]	; (800a008 <main+0x2828>)
 8009f54:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8009f58:	6013      	str	r3, [r2, #0]
					}
					}

					if (enable_rotor_position_step_response_cycle == 1) {
 8009f5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d11c      	bne.n	8009f9e <main+0x27be>
						sprintf(msg, "\n\rRotor Step Drive enabled ");
 8009f64:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009f68:	4a28      	ldr	r2, [pc, #160]	; (800a00c <main+0x282c>)
 8009f6a:	461c      	mov	r4, r3
 8009f6c:	4615      	mov	r5, r2
 8009f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 8009f7a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009f82:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f6 f934 	bl	80001f4 <strlen>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f98:	4815      	ldr	r0, [pc, #84]	; (8009ff0 <main+0x2810>)
 8009f9a:	f7fc fd0b 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_mod_sin_rotor_tracking == 1) {
 8009f9e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d13a      	bne.n	800a01e <main+0x283e>
						sprintf(msg, "\n\rRotor Sine Drive enabled ");
 8009fa8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009fac:	4a18      	ldr	r2, [pc, #96]	; (800a010 <main+0x2830>)
 8009fae:	461c      	mov	r4, r3
 8009fb0:	4615      	mov	r5, r2
 8009fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 8009fbe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009fc6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f6 f912 	bl	80001f4 <strlen>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009fd8:	e01c      	b.n	800a014 <main+0x2834>
 8009fda:	bf00      	nop
 8009fdc:	4452a000 	.word	0x4452a000
 8009fe0:	42e16666 	.word	0x42e16666
 8009fe4:	4087ae14 	.word	0x4087ae14
 8009fe8:	410d1eb8 	.word	0x410d1eb8
 8009fec:	0801870c 	.word	0x0801870c
 8009ff0:	20000f20 	.word	0x20000f20
 8009ff4:	08018724 	.word	0x08018724
 8009ff8:	0801875c 	.word	0x0801875c
 8009ffc:	08018760 	.word	0x08018760
 800a000:	08018790 	.word	0x08018790
 800a004:	080187c0 	.word	0x080187c0
 800a008:	3f638ef3 	.word	0x3f638ef3
 800a00c:	08018800 	.word	0x08018800
 800a010:	0801881c 	.word	0x0801881c
 800a014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a018:	4817      	ldr	r0, [pc, #92]	; (800a078 <main+0x2898>)
 800a01a:	f7fc fccb 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 1) {
 800a01e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	f042 822b 	bne.w	800c480 <main+0x4ca0>
						enable_rotor_position_step_response_cycle = 0;
 800a02a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 800a032:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
						enable_pendulum_position_impulse_response_cycle = 0;
 800a03a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
						sprintf(msg, "\n\rRotor Chirp Drive enabled ");
 800a042:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a046:	4a0d      	ldr	r2, [pc, #52]	; (800a07c <main+0x289c>)
 800a048:	461c      	mov	r4, r3
 800a04a:	4615      	mov	r5, r2
 800a04c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a050:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a054:	c407      	stmia	r4!, {r0, r1, r2}
 800a056:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a058:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7f6 f8c9 	bl	80001f4 <strlen>
 800a062:	4603      	mov	r3, r0
 800a064:	b29a      	uxth	r2, r3
 800a066:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a06e:	4802      	ldr	r0, [pc, #8]	; (800a078 <main+0x2898>)
 800a070:	f7fc fca0 	bl	80069b4 <HAL_UART_Transmit>
					}
					break;
 800a074:	f002 ba04 	b.w	800c480 <main+0x4ca0>
 800a078:	20000f20 	.word	0x20000f20
 800a07c:	08018838 	.word	0x08018838

				case 4:
					select_suspended_mode = 1;
 800a080:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800a084:	2201      	movs	r2, #1
 800a086:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_4;
 800a088:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a08c:	4acb      	ldr	r2, [pc, #812]	; (800a3bc <main+0x2bdc>)
 800a08e:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_4;
 800a090:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a094:	4aca      	ldr	r2, [pc, #808]	; (800a3c0 <main+0x2be0>)
 800a096:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_4;
 800a098:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a09c:	4ac9      	ldr	r2, [pc, #804]	; (800a3c4 <main+0x2be4>)
 800a09e:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_4;
 800a0a0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a0a4:	4ac8      	ldr	r2, [pc, #800]	; (800a3c8 <main+0x2be8>)
 800a0a6:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_4;
 800a0a8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800a0ac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800a0b0:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_4;
 800a0b2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800a0b6:	4ac4      	ldr	r2, [pc, #784]	; (800a3c8 <main+0x2be8>)
 800a0b8:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_1;
 800a0ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0be:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_1;
 800a0c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a0c6:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					enable_mod_sin_rotor_tracking = 0;
 800a0ca:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 0;
 800a0d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rMode %i Configured", mode_index);
 800a0da:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a0de:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800a0e2:	49ba      	ldr	r1, [pc, #744]	; (800a3cc <main+0x2bec>)
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f008 fd33 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 800a0ea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7f6 f880 	bl	80001f4 <strlen>
 800a0f4:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a100:	48b3      	ldr	r0, [pc, #716]	; (800a3d0 <main+0x2bf0>)
 800a102:	f7fc fc57 	bl	80069b4 <HAL_UART_Transmit>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 800a106:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a10a:	4ab2      	ldr	r2, [pc, #712]	; (800a3d4 <main+0x2bf4>)
 800a10c:	461c      	mov	r4, r3
 800a10e:	4615      	mov	r5, r2
 800a110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a11c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a120:	6020      	str	r0, [r4, #0]
 800a122:	3404      	adds	r4, #4
 800a124:	8021      	strh	r1, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a126:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7f6 f862 	bl	80001f4 <strlen>
 800a130:	4603      	mov	r3, r0
 800a132:	b29a      	uxth	r2, r3
 800a134:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a13c:	48a4      	ldr	r0, [pc, #656]	; (800a3d0 <main+0x2bf0>)
 800a13e:	f7fc fc39 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 800a142:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a146:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a14a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a14e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a152:	f7fd fae7 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_chirp);
 800a156:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a160:	499d      	ldr	r1, [pc, #628]	; (800a3d8 <main+0x2bf8>)
 800a162:	4618      	mov	r0, r3
 800a164:	f008 fcf4 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a168:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f6 f841 	bl	80001f4 <strlen>
 800a172:	4603      	mov	r3, r0
 800a174:	b29a      	uxth	r2, r3
 800a176:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a17e:	4894      	ldr	r0, [pc, #592]	; (800a3d0 <main+0x2bf0>)
 800a180:	f7fc fc18 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_chirp == 0){
 800a184:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d17d      	bne.n	800a28a <main+0x2aaa>
					sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 800a18e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a192:	4a92      	ldr	r2, [pc, #584]	; (800a3dc <main+0x2bfc>)
 800a194:	461c      	mov	r4, r3
 800a196:	4615      	mov	r5, r2
 800a198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a19a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a19c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a19e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a1a4:	c407      	stmia	r4!, {r0, r1, r2}
 800a1a6:	8023      	strh	r3, [r4, #0]
 800a1a8:	3402      	adds	r4, #2
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a1ae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7f6 f81e 	bl	80001f4 <strlen>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a1c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1c4:	4882      	ldr	r0, [pc, #520]	; (800a3d0 <main+0x2bf0>)
 800a1c6:	f7fc fbf5 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 800a1ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a1ce:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a1d2:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a1d6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a1da:	f7fd faa3 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 800a1de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a1e8:	497b      	ldr	r1, [pc, #492]	; (800a3d8 <main+0x2bf8>)
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f008 fcb0 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a1f0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f5 fffd 	bl	80001f4 <strlen>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a206:	4872      	ldr	r0, [pc, #456]	; (800a3d0 <main+0x2bf0>)
 800a208:	f7fc fbd4 	bl	80069b4 <HAL_UART_Transmit>

					sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 800a20c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a210:	4a73      	ldr	r2, [pc, #460]	; (800a3e0 <main+0x2c00>)
 800a212:	461c      	mov	r4, r3
 800a214:	4615      	mov	r5, r2
 800a216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a21a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a21c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a21e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a222:	c407      	stmia	r4!, {r0, r1, r2}
 800a224:	8023      	strh	r3, [r4, #0]
 800a226:	3402      	adds	r4, #2
 800a228:	0c1b      	lsrs	r3, r3, #16
 800a22a:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a22c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a230:	4618      	mov	r0, r3
 800a232:	f7f5 ffdf 	bl	80001f4 <strlen>
 800a236:	4603      	mov	r3, r0
 800a238:	b29a      	uxth	r2, r3
 800a23a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a23e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a242:	4863      	ldr	r0, [pc, #396]	; (800a3d0 <main+0x2bf0>)
 800a244:	f7fc fbb6 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 800a248:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a24c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a250:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a254:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a258:	f7fd fa64 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 800a25c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a266:	495c      	ldr	r1, [pc, #368]	; (800a3d8 <main+0x2bf8>)
 800a268:	4618      	mov	r0, r3
 800a26a:	f008 fc71 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a26e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a272:	4618      	mov	r0, r3
 800a274:	f7f5 ffbe 	bl	80001f4 <strlen>
 800a278:	4603      	mov	r3, r0
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a284:	4852      	ldr	r0, [pc, #328]	; (800a3d0 <main+0x2bf0>)
 800a286:	f7fc fb95 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 0 && enable_rotor_position_step_response_cycle == 0
 800a28a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d153      	bne.n	800a33c <main+0x2b5c>
 800a294:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d14e      	bne.n	800a33c <main+0x2b5c>
							&& enable_mod_sin_rotor_tracking == 0){
 800a29e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d149      	bne.n	800a33c <main+0x2b5c>
					sprintf(msg, "\n\rEnter 1 to Enable Rotor Tracking Comb Signal; 0 to Disable: ");
 800a2a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a2ac:	4a4d      	ldr	r2, [pc, #308]	; (800a3e4 <main+0x2c04>)
 800a2ae:	461c      	mov	r4, r3
 800a2b0:	4615      	mov	r5, r2
 800a2b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a2c2:	c407      	stmia	r4!, {r0, r1, r2}
 800a2c4:	8023      	strh	r3, [r4, #0]
 800a2c6:	3402      	adds	r4, #2
 800a2c8:	0c1b      	lsrs	r3, r3, #16
 800a2ca:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a2cc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7f5 ff8f 	bl	80001f4 <strlen>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2e2:	483b      	ldr	r0, [pc, #236]	; (800a3d0 <main+0x2bf0>)
 800a2e4:	f7fc fb66 	bl	80069b4 <HAL_UART_Transmit>
					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_tracking_comb_signal);
 800a2e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2ec:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a2f0:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a2f4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a2f8:	f7fd fa14 	bl	8007724 <read_int>
					sprintf(msg, "%i", enable_rotor_tracking_comb_signal);
 800a2fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a306:	4934      	ldr	r1, [pc, #208]	; (800a3d8 <main+0x2bf8>)
 800a308:	4618      	mov	r0, r3
 800a30a:	f008 fc21 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a30e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a312:	4618      	mov	r0, r3
 800a314:	f7f5 ff6e 	bl	80001f4 <strlen>
 800a318:	4603      	mov	r3, r0
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a324:	482a      	ldr	r0, [pc, #168]	; (800a3d0 <main+0x2bf0>)
 800a326:	f7fc fb45 	bl	80069b4 <HAL_UART_Transmit>

					if (enable_rotor_tracking_comb_signal == 1){
 800a32a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d103      	bne.n	800a33c <main+0x2b5c>
					rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 800a334:	4b2c      	ldr	r3, [pc, #176]	; (800a3e8 <main+0x2c08>)
 800a336:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 800a33a:	6013      	str	r3, [r2, #0]
					}
					}

					if (enable_rotor_position_step_response_cycle == 1) {
 800a33c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d11c      	bne.n	800a380 <main+0x2ba0>
						sprintf(msg, "\n\rRotor Step Drive enabled ");
 800a346:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a34a:	4a28      	ldr	r2, [pc, #160]	; (800a3ec <main+0x2c0c>)
 800a34c:	461c      	mov	r4, r3
 800a34e:	4615      	mov	r5, r2
 800a350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 800a35c:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a364:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a368:	4618      	mov	r0, r3
 800a36a:	f7f5 ff43 	bl	80001f4 <strlen>
 800a36e:	4603      	mov	r3, r0
 800a370:	b29a      	uxth	r2, r3
 800a372:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a37a:	4815      	ldr	r0, [pc, #84]	; (800a3d0 <main+0x2bf0>)
 800a37c:	f7fc fb1a 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_mod_sin_rotor_tracking == 1) {
 800a380:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d139      	bne.n	800a3fe <main+0x2c1e>
						sprintf(msg, "\n\rRotor Sine Drive enabled ");
 800a38a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a38e:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <main+0x2c10>)
 800a390:	461c      	mov	r4, r3
 800a392:	4615      	mov	r5, r2
 800a394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a398:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a39c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						enable_pendulum_position_impulse_response_cycle = 0;
 800a3a0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a3a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7f5 ff21 	bl	80001f4 <strlen>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a3ba:	e01b      	b.n	800a3f4 <main+0x2c14>
 800a3bc:	c3fa0000 	.word	0xc3fa0000
 800a3c0:	c2b40000 	.word	0xc2b40000
 800a3c4:	c28c0000 	.word	0xc28c0000
 800a3c8:	c0a00000 	.word	0xc0a00000
 800a3cc:	0801870c 	.word	0x0801870c
 800a3d0:	20000f20 	.word	0x20000f20
 800a3d4:	08018724 	.word	0x08018724
 800a3d8:	0801875c 	.word	0x0801875c
 800a3dc:	08018760 	.word	0x08018760
 800a3e0:	08018790 	.word	0x08018790
 800a3e4:	080187c0 	.word	0x080187c0
 800a3e8:	3f638ef3 	.word	0x3f638ef3
 800a3ec:	08018800 	.word	0x08018800
 800a3f0:	0801881c 	.word	0x0801881c
 800a3f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3f8:	483c      	ldr	r0, [pc, #240]	; (800a4ec <main+0x2d0c>)
 800a3fa:	f7fc fadb 	bl	80069b4 <HAL_UART_Transmit>
					}

					if (enable_rotor_chirp == 1) {
 800a3fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b01      	cmp	r3, #1
 800a406:	f042 803d 	bne.w	800c484 <main+0x4ca4>
						enable_rotor_position_step_response_cycle = 0;
 800a40a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 800a412:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]
						enable_pendulum_position_impulse_response_cycle = 0;
 800a41a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
						sprintf(msg, "\n\rRotor Chirp Drive enabled ");
 800a422:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a426:	4a32      	ldr	r2, [pc, #200]	; (800a4f0 <main+0x2d10>)
 800a428:	461c      	mov	r4, r3
 800a42a:	4615      	mov	r5, r2
 800a42c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a42e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a434:	c407      	stmia	r4!, {r0, r1, r2}
 800a436:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a438:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f5 fed9 	bl	80001f4 <strlen>
 800a442:	4603      	mov	r3, r0
 800a444:	b29a      	uxth	r2, r3
 800a446:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a44a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a44e:	4827      	ldr	r0, [pc, #156]	; (800a4ec <main+0x2d0c>)
 800a450:	f7fc fab0 	bl	80069b4 <HAL_UART_Transmit>
					}
					break;
 800a454:	f002 b816 	b.w	800c484 <main+0x4ca4>


				case 7:
					enable_adaptive_mode = 1;
 800a458:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800a45c:	2201      	movs	r2, #1
 800a45e:	601a      	str	r2, [r3, #0]
					select_suspended_mode = 0;
 800a460:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_2;
 800a468:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a46c:	4a21      	ldr	r2, [pc, #132]	; (800a4f4 <main+0x2d14>)
 800a46e:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_2;
 800a470:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_2;
 800a47a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a47e:	4a1e      	ldr	r2, [pc, #120]	; (800a4f8 <main+0x2d18>)
 800a480:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_2;
 800a482:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a486:	4a1d      	ldr	r2, [pc, #116]	; (800a4fc <main+0x2d1c>)
 800a488:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_2;
 800a48a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_2;
 800a494:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800a498:	4a19      	ldr	r2, [pc, #100]	; (800a500 <main+0x2d20>)
 800a49a:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_2;
 800a49c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4a0:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_2;
 800a4a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a4a8:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 800a4ac:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = ENABLE_ROTOR_POSITION_STEP_RESPONSE_CYCLE;
 800a4b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rMode %i Configured", mode_index);
 800a4bc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a4c0:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 800a4c4:	490f      	ldr	r1, [pc, #60]	; (800a504 <main+0x2d24>)
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f008 fb42 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 800a4cc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7f5 fe8f 	bl	80001f4 <strlen>
 800a4d6:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a4de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4e2:	4802      	ldr	r0, [pc, #8]	; (800a4ec <main+0x2d0c>)
 800a4e4:	f7fc fa66 	bl	80069b4 <HAL_UART_Transmit>
					break;
 800a4e8:	f001 bfd1 	b.w	800c48e <main+0x4cae>
 800a4ec:	20000f20 	.word	0x20000f20
 800a4f0:	08018838 	.word	0x08018838
 800a4f4:	441d2ccd 	.word	0x441d2ccd
 800a4f8:	42a83333 	.word	0x42a83333
 800a4fc:	4087ae14 	.word	0x4087ae14
 800a500:	40cc28f6 	.word	0x40cc28f6
 800a504:	0801870c 	.word	0x0801870c

				case 8:

						sprintf(msg, "\n\rEnter Pendulum PID Proportional Gain: ");
 800a508:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a50c:	4ad0      	ldr	r2, [pc, #832]	; (800a850 <main+0x3070>)
 800a50e:	461c      	mov	r4, r3
 800a510:	4615      	mov	r5, r2
 800a512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a51a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a51e:	c403      	stmia	r4!, {r0, r1}
 800a520:	7022      	strb	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800a522:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a526:	4618      	mov	r0, r3
 800a528:	f7f5 fe64 	bl	80001f4 <strlen>
 800a52c:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a52e:	b29a      	uxth	r2, r3
 800a530:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a538:	48c6      	ldr	r0, [pc, #792]	; (800a854 <main+0x3074>)
 800a53a:	f7fc fa3b 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);

						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &proportional);
 800a53e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a542:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a546:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a54a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a54e:	f7fd f887 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", proportional);
 800a552:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f6 f80d 	bl	8000578 <__aeabi_f2d>
 800a55e:	4603      	mov	r3, r0
 800a560:	460c      	mov	r4, r1
 800a562:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a566:	461a      	mov	r2, r3
 800a568:	4623      	mov	r3, r4
 800a56a:	49bb      	ldr	r1, [pc, #748]	; (800a858 <main+0x3078>)
 800a56c:	f008 faf0 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a570:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a574:	4618      	mov	r0, r3
 800a576:	f7f5 fe3d 	bl	80001f4 <strlen>
 800a57a:	4603      	mov	r3, r0
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a586:	48b3      	ldr	r0, [pc, #716]	; (800a854 <main+0x3074>)
 800a588:	f7fc fa14 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Pendulum PID Integral Gain: ");
 800a58c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a590:	4ab2      	ldr	r2, [pc, #712]	; (800a85c <main+0x307c>)
 800a592:	461c      	mov	r4, r3
 800a594:	4615      	mov	r5, r2
 800a596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a59e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a5a2:	6020      	str	r0, [r4, #0]
 800a5a4:	3404      	adds	r4, #4
 800a5a6:	7021      	strb	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800a5a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f5 fe21 	bl	80001f4 <strlen>
 800a5b2:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5be:	48a5      	ldr	r0, [pc, #660]	; (800a854 <main+0x3074>)
 800a5c0:	f7fc f9f8 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &integral);
 800a5c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a5c8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a5cc:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a5d0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a5d4:	f7fd f844 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", integral);
 800a5d8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7f5 ffca 	bl	8000578 <__aeabi_f2d>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4623      	mov	r3, r4
 800a5f0:	4999      	ldr	r1, [pc, #612]	; (800a858 <main+0x3078>)
 800a5f2:	f008 faad 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a5f6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7f5 fdfa 	bl	80001f4 <strlen>
 800a600:	4603      	mov	r3, r0
 800a602:	b29a      	uxth	r2, r3
 800a604:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a60c:	4891      	ldr	r0, [pc, #580]	; (800a854 <main+0x3074>)
 800a60e:	f7fc f9d1 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Pendulum PID Differential Gain: ");
 800a612:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a616:	4a92      	ldr	r2, [pc, #584]	; (800a860 <main+0x3080>)
 800a618:	461c      	mov	r4, r3
 800a61a:	4615      	mov	r5, r2
 800a61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a628:	c403      	stmia	r4!, {r0, r1}
 800a62a:	7022      	strb	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800a62c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a630:	4618      	mov	r0, r3
 800a632:	f7f5 fddf 	bl	80001f4 <strlen>
 800a636:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a638:	b29a      	uxth	r2, r3
 800a63a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a642:	4884      	ldr	r0, [pc, #528]	; (800a854 <main+0x3074>)
 800a644:	f7fc f9b6 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &derivative);
 800a648:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a64c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a650:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a654:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a658:	f7fd f802 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", derivative);
 800a65c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f7f5 ff88 	bl	8000578 <__aeabi_f2d>
 800a668:	4603      	mov	r3, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a670:	461a      	mov	r2, r3
 800a672:	4623      	mov	r3, r4
 800a674:	4978      	ldr	r1, [pc, #480]	; (800a858 <main+0x3078>)
 800a676:	f008 fa6b 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a67a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a67e:	4618      	mov	r0, r3
 800a680:	f7f5 fdb8 	bl	80001f4 <strlen>
 800a684:	4603      	mov	r3, r0
 800a686:	b29a      	uxth	r2, r3
 800a688:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a690:	4870      	ldr	r0, [pc, #448]	; (800a854 <main+0x3074>)
 800a692:	f7fc f98f 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Rotor PID Proportional Gain: ");
 800a696:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a69a:	4a72      	ldr	r2, [pc, #456]	; (800a864 <main+0x3084>)
 800a69c:	461c      	mov	r4, r3
 800a69e:	4615      	mov	r5, r2
 800a6a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6ac:	6020      	str	r0, [r4, #0]
 800a6ae:	3404      	adds	r4, #4
 800a6b0:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800a6b2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7f5 fd9c 	bl	80001f4 <strlen>
 800a6bc:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a6c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6c8:	4862      	ldr	r0, [pc, #392]	; (800a854 <main+0x3074>)
 800a6ca:	f7fc f973 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);

						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_p_gain);
 800a6ce:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a6d2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a6d6:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a6da:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a6de:	f7fc ffbf 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", rotor_p_gain);
 800a6e2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7f5 ff45 	bl	8000578 <__aeabi_f2d>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	4957      	ldr	r1, [pc, #348]	; (800a858 <main+0x3078>)
 800a6fc:	f008 fa28 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a700:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a704:	4618      	mov	r0, r3
 800a706:	f7f5 fd75 	bl	80001f4 <strlen>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a716:	484f      	ldr	r0, [pc, #316]	; (800a854 <main+0x3074>)
 800a718:	f7fc f94c 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Rotor PID Integral Gain: ");
 800a71c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a720:	4a51      	ldr	r2, [pc, #324]	; (800a868 <main+0x3088>)
 800a722:	461c      	mov	r4, r3
 800a724:	4615      	mov	r5, r2
 800a726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a72a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a72c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	8023      	strh	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800a732:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a736:	4618      	mov	r0, r3
 800a738:	f7f5 fd5c 	bl	80001f4 <strlen>
 800a73c:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800a73e:	b29a      	uxth	r2, r3
 800a740:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a748:	4842      	ldr	r0, [pc, #264]	; (800a854 <main+0x3074>)
 800a74a:	f7fc f933 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_i_gain);
 800a74e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800a752:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a756:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a75a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a75e:	f7fc ff7f 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", rotor_i_gain);
 800a762:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f5 ff05 	bl	8000578 <__aeabi_f2d>
 800a76e:	4603      	mov	r3, r0
 800a770:	460c      	mov	r4, r1
 800a772:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a776:	461a      	mov	r2, r3
 800a778:	4623      	mov	r3, r4
 800a77a:	4937      	ldr	r1, [pc, #220]	; (800a858 <main+0x3078>)
 800a77c:	f008 f9e8 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a780:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a784:	4618      	mov	r0, r3
 800a786:	f7f5 fd35 	bl	80001f4 <strlen>
 800a78a:	4603      	mov	r3, r0
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a796:	482f      	ldr	r0, [pc, #188]	; (800a854 <main+0x3074>)
 800a798:	f7fc f90c 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Rotor PID Differential Gain: ");
 800a79c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a7a0:	4a32      	ldr	r2, [pc, #200]	; (800a86c <main+0x308c>)
 800a7a2:	461c      	mov	r4, r3
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a7b2:	6020      	str	r0, [r4, #0]
 800a7b4:	3404      	adds	r4, #4
 800a7b6:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a7b8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7f5 fd19 	bl	80001f4 <strlen>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ce:	4821      	ldr	r0, [pc, #132]	; (800a854 <main+0x3074>)
 800a7d0:	f7fc f8f0 	bl	80069b4 <HAL_UART_Transmit>
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_d_gain);
 800a7d4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800a7d8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a7dc:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a7e0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a7e4:	f7fc ff3c 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", rotor_d_gain);
 800a7e8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7f5 fec2 	bl	8000578 <__aeabi_f2d>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4623      	mov	r3, r4
 800a800:	4915      	ldr	r1, [pc, #84]	; (800a858 <main+0x3078>)
 800a802:	f008 f9a5 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a806:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7f5 fcf2 	bl	80001f4 <strlen>
 800a810:	4603      	mov	r3, r0
 800a812:	b29a      	uxth	r2, r3
 800a814:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a81c:	480d      	ldr	r0, [pc, #52]	; (800a854 <main+0x3074>)
 800a81e:	f7fc f8c9 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter 1 for Adaptive Mode - Enter 0 for Normal Mode: ");
 800a822:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a826:	4a12      	ldr	r2, [pc, #72]	; (800a870 <main+0x3090>)
 800a828:	461c      	mov	r4, r3
 800a82a:	4615      	mov	r5, r2
 800a82c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a82e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a838:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a83c:	e884 0003 	stmia.w	r4, {r0, r1}
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a840:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a844:	4618      	mov	r0, r3
 800a846:	f7f5 fcd5 	bl	80001f4 <strlen>
 800a84a:	4603      	mov	r3, r0
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	e011      	b.n	800a874 <main+0x3094>
 800a850:	08018858 	.word	0x08018858
 800a854:	20000f20 	.word	0x20000f20
 800a858:	08018884 	.word	0x08018884
 800a85c:	0801888c 	.word	0x0801888c
 800a860:	080188b4 	.word	0x080188b4
 800a864:	080188e0 	.word	0x080188e0
 800a868:	08018908 	.word	0x08018908
 800a86c:	0801892c 	.word	0x0801892c
 800a870:	08018954 	.word	0x08018954
 800a874:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a87c:	48cf      	ldr	r0, [pc, #828]	; (800abbc <main+0x33dc>)
 800a87e:	f7fc f899 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_adaptive_mode);
 800a882:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800a886:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a88a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a88e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a892:	f7fc ff47 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_adaptive_mode);
 800a896:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a8a0:	49c7      	ldr	r1, [pc, #796]	; (800abc0 <main+0x33e0>)
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f008 f954 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a8a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7f5 fca1 	bl	80001f4 <strlen>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a8ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8be:	48bf      	ldr	r0, [pc, #764]	; (800abbc <main+0x33dc>)
 800a8c0:	f7fc f878 	bl	80069b4 <HAL_UART_Transmit>

						if (enable_adaptive_mode == 1){
 800a8c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	f040 8086 	bne.w	800a9dc <main+0x31fc>
							sprintf(msg, "\n\rEnter Adaptive Low Threshold (30): ");
 800a8d0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a8d4:	4abb      	ldr	r2, [pc, #748]	; (800abc4 <main+0x33e4>)
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	4615      	mov	r5, r2
 800a8da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a8e6:	6020      	str	r0, [r4, #0]
 800a8e8:	3404      	adds	r4, #4
 800a8ea:	8021      	strh	r1, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a8ec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7f5 fc7f 	bl	80001f4 <strlen>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a902:	48ae      	ldr	r0, [pc, #696]	; (800abbc <main+0x33dc>)
 800a904:	f7fc f856 	bl	80069b4 <HAL_UART_Transmit>
							read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &adaptive_threshold_low);
 800a908:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a90c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a910:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a914:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a918:	f7fc fea2 	bl	8007660 <read_float>
							sprintf(msg, "%0.2f", adaptive_threshold_low);
 800a91c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f7f5 fe28 	bl	8000578 <__aeabi_f2d>
 800a928:	4603      	mov	r3, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a930:	461a      	mov	r2, r3
 800a932:	4623      	mov	r3, r4
 800a934:	49a4      	ldr	r1, [pc, #656]	; (800abc8 <main+0x33e8>)
 800a936:	f008 f90b 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a93a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a93e:	4618      	mov	r0, r3
 800a940:	f7f5 fc58 	bl	80001f4 <strlen>
 800a944:	4603      	mov	r3, r0
 800a946:	b29a      	uxth	r2, r3
 800a948:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a94c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a950:	489a      	ldr	r0, [pc, #616]	; (800abbc <main+0x33dc>)
 800a952:	f7fc f82f 	bl	80069b4 <HAL_UART_Transmit>

							sprintf(msg, "\n\rEnter Adaptive High Threshold (2): ");
 800a956:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a95a:	4a9c      	ldr	r2, [pc, #624]	; (800abcc <main+0x33ec>)
 800a95c:	461c      	mov	r4, r3
 800a95e:	4615      	mov	r5, r2
 800a960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a968:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a96c:	6020      	str	r0, [r4, #0]
 800a96e:	3404      	adds	r4, #4
 800a970:	8021      	strh	r1, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a972:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a976:	4618      	mov	r0, r3
 800a978:	f7f5 fc3c 	bl	80001f4 <strlen>
 800a97c:	4603      	mov	r3, r0
 800a97e:	b29a      	uxth	r2, r3
 800a980:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a988:	488c      	ldr	r0, [pc, #560]	; (800abbc <main+0x33dc>)
 800a98a:	f7fc f813 	bl	80069b4 <HAL_UART_Transmit>
							read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &adaptive_threshold_high);
 800a98e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800a992:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800a996:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800a99a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800a99e:	f7fc fe5f 	bl	8007660 <read_float>
							sprintf(msg, "%0.2f", adaptive_threshold_high);
 800a9a2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7f5 fde5 	bl	8000578 <__aeabi_f2d>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4623      	mov	r3, r4
 800a9ba:	4983      	ldr	r1, [pc, #524]	; (800abc8 <main+0x33e8>)
 800a9bc:	f008 f8c8 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800a9c0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f5 fc15 	bl	80001f4 <strlen>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d6:	4879      	ldr	r0, [pc, #484]	; (800abbc <main+0x33dc>)
 800a9d8:	f7fb ffec 	bl	80069b4 <HAL_UART_Transmit>
						}

						select_suspended_mode = 0;
 800a9dc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]

						sprintf(msg, "\n\rEnter 0 for Inverted Mode - Enter 1 for Suspended Mode: ");
 800a9e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800a9e8:	4a79      	ldr	r2, [pc, #484]	; (800abd0 <main+0x33f0>)
 800a9ea:	461c      	mov	r4, r3
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9fe:	c403      	stmia	r4!, {r0, r1}
 800aa00:	8022      	strh	r2, [r4, #0]
 800aa02:	3402      	adds	r4, #2
 800aa04:	0c13      	lsrs	r3, r2, #16
 800aa06:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800aa08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f5 fbf1 	bl	80001f4 <strlen>
 800aa12:	4603      	mov	r3, r0
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa1e:	4867      	ldr	r0, [pc, #412]	; (800abbc <main+0x33dc>)
 800aa20:	f7fb ffc8 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &select_suspended_mode);
 800aa24:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800aa28:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800aa2c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800aa30:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800aa34:	f7fc fe76 	bl	8007724 <read_int>
						sprintf(msg, "%i", select_suspended_mode);
 800aa38:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aa42:	495f      	ldr	r1, [pc, #380]	; (800abc0 <main+0x33e0>)
 800aa44:	4618      	mov	r0, r3
 800aa46:	f008 f883 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800aa4a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7f5 fbd0 	bl	80001f4 <strlen>
 800aa54:	4603      	mov	r3, r0
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa60:	4856      	ldr	r0, [pc, #344]	; (800abbc <main+0x33dc>)
 800aa62:	f7fb ffa7 	bl	80069b4 <HAL_UART_Transmit>

						enable_rotor_position_step_response_cycle = 0;
 800aa66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 800aa6e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
						enable_rotor_chirp = 0;
 800aa76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
						enable_rotor_position_step_response_cycle = 0;
 800aa7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aa82:	2200      	movs	r2, #0
 800aa84:	601a      	str	r2, [r3, #0]

						sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 800aa86:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aa8a:	4a52      	ldr	r2, [pc, #328]	; (800abd4 <main+0x33f4>)
 800aa8c:	461c      	mov	r4, r3
 800aa8e:	4615      	mov	r5, r2
 800aa90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aaa0:	6020      	str	r0, [r4, #0]
 800aaa2:	3404      	adds	r4, #4
 800aaa4:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800aaa6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7f5 fba2 	bl	80001f4 <strlen>
 800aab0:	4603      	mov	r3, r0
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800aab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aabc:	483f      	ldr	r0, [pc, #252]	; (800abbc <main+0x33dc>)
 800aabe:	f7fb ff79 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 800aac2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aac6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800aaca:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800aace:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800aad2:	f7fc fe27 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_rotor_chirp);
 800aad6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aae0:	4937      	ldr	r1, [pc, #220]	; (800abc0 <main+0x33e0>)
 800aae2:	4618      	mov	r0, r3
 800aae4:	f008 f834 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800aae8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f5 fb81 	bl	80001f4 <strlen>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aafe:	482f      	ldr	r0, [pc, #188]	; (800abbc <main+0x33dc>)
 800ab00:	f7fb ff58 	bl	80069b4 <HAL_UART_Transmit>

						if (enable_rotor_chirp == 0){
 800ab04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f040 8091 	bne.w	800ac32 <main+0x3452>
						sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 800ab10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ab14:	4a30      	ldr	r2, [pc, #192]	; (800abd8 <main+0x33f8>)
 800ab16:	461c      	mov	r4, r3
 800ab18:	4615      	mov	r5, r2
 800ab1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ab26:	c407      	stmia	r4!, {r0, r1, r2}
 800ab28:	8023      	strh	r3, [r4, #0]
 800ab2a:	3402      	adds	r4, #2
 800ab2c:	0c1b      	lsrs	r3, r3, #16
 800ab2e:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ab30:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7f5 fb5d 	bl	80001f4 <strlen>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ab42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab46:	481d      	ldr	r0, [pc, #116]	; (800abbc <main+0x33dc>)
 800ab48:	f7fb ff34 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 800ab4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab50:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ab54:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ab58:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ab5c:	f7fc fde2 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 800ab60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ab6a:	4915      	ldr	r1, [pc, #84]	; (800abc0 <main+0x33e0>)
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f007 ffef 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ab72:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f5 fb3c 	bl	80001f4 <strlen>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab88:	480c      	ldr	r0, [pc, #48]	; (800abbc <main+0x33dc>)
 800ab8a:	f7fb ff13 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 800ab8e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ab92:	4a12      	ldr	r2, [pc, #72]	; (800abdc <main+0x33fc>)
 800ab94:	461c      	mov	r4, r3
 800ab96:	4615      	mov	r5, r2
 800ab98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aba0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aba4:	c407      	stmia	r4!, {r0, r1, r2}
 800aba6:	8023      	strh	r3, [r4, #0]
 800aba8:	3402      	adds	r4, #2
 800abaa:	0c1b      	lsrs	r3, r3, #16
 800abac:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800abae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7f5 fb1e 	bl	80001f4 <strlen>
 800abb8:	4603      	mov	r3, r0
 800abba:	e011      	b.n	800abe0 <main+0x3400>
 800abbc:	20000f20 	.word	0x20000f20
 800abc0:	0801875c 	.word	0x0801875c
 800abc4:	0801898c 	.word	0x0801898c
 800abc8:	08018884 	.word	0x08018884
 800abcc:	080189b4 	.word	0x080189b4
 800abd0:	080189dc 	.word	0x080189dc
 800abd4:	08018724 	.word	0x08018724
 800abd8:	08018760 	.word	0x08018760
 800abdc:	08018790 	.word	0x08018790
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800abe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abea:	48d2      	ldr	r0, [pc, #840]	; (800af34 <main+0x3754>)
 800abec:	f7fb fee2 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 800abf0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800abf4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800abf8:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800abfc:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ac00:	f7fc fd90 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 800ac04:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ac0e:	49ca      	ldr	r1, [pc, #808]	; (800af38 <main+0x3758>)
 800ac10:	4618      	mov	r0, r3
 800ac12:	f007 ff9d 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ac16:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7f5 faea 	bl	80001f4 <strlen>
 800ac20:	4603      	mov	r3, r0
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ac28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac2c:	48c1      	ldr	r0, [pc, #772]	; (800af34 <main+0x3754>)
 800ac2e:	f7fb fec1 	bl	80069b4 <HAL_UART_Transmit>
						}

						if (enable_rotor_chirp == 0 && enable_rotor_position_step_response_cycle == 0
 800ac32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d153      	bne.n	800ace4 <main+0x3504>
 800ac3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d14e      	bne.n	800ace4 <main+0x3504>
									&& enable_mod_sin_rotor_tracking == 0){
 800ac46:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d149      	bne.n	800ace4 <main+0x3504>
							sprintf(msg, "\n\rEnter 1 to Enable Rotor Tracking Comb Signal; 0 to Disable: ");
 800ac50:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ac54:	4ab9      	ldr	r2, [pc, #740]	; (800af3c <main+0x375c>)
 800ac56:	461c      	mov	r4, r3
 800ac58:	4615      	mov	r5, r2
 800ac5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ac6a:	c407      	stmia	r4!, {r0, r1, r2}
 800ac6c:	8023      	strh	r3, [r4, #0]
 800ac6e:	3402      	adds	r4, #2
 800ac70:	0c1b      	lsrs	r3, r3, #16
 800ac72:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ac74:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7f5 fabb 	bl	80001f4 <strlen>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ac86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac8a:	48aa      	ldr	r0, [pc, #680]	; (800af34 <main+0x3754>)
 800ac8c:	f7fb fe92 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_tracking_comb_signal);
 800ac90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac94:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ac98:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ac9c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800aca0:	f7fc fd40 	bl	8007724 <read_int>
							sprintf(msg, "%i", enable_rotor_tracking_comb_signal);
 800aca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800acae:	49a2      	ldr	r1, [pc, #648]	; (800af38 <main+0x3758>)
 800acb0:	4618      	mov	r0, r3
 800acb2:	f007 ff4d 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800acb6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f5 fa9a 	bl	80001f4 <strlen>
 800acc0:	4603      	mov	r3, r0
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800accc:	4899      	ldr	r0, [pc, #612]	; (800af34 <main+0x3754>)
 800acce:	f7fb fe71 	bl	80069b4 <HAL_UART_Transmit>

							if (enable_rotor_tracking_comb_signal == 1){
 800acd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d103      	bne.n	800ace4 <main+0x3504>
							rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 800acdc:	4b98      	ldr	r3, [pc, #608]	; (800af40 <main+0x3760>)
 800acde:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 800ace2:	6013      	str	r3, [r2, #0]
							}
						}

						if (enable_rotor_position_step_response_cycle == 1) {
 800ace4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b01      	cmp	r3, #1
 800acec:	d118      	bne.n	800ad20 <main+0x3540>
							sprintf(msg, "\n\rRotor Step Drive enabled ");
 800acee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800acf2:	4a94      	ldr	r2, [pc, #592]	; (800af44 <main+0x3764>)
 800acf4:	461c      	mov	r4, r3
 800acf6:	4615      	mov	r5, r2
 800acf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ad04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f5 fa73 	bl	80001f4 <strlen>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad1a:	4886      	ldr	r0, [pc, #536]	; (800af34 <main+0x3754>)
 800ad1c:	f7fb fe4a 	bl	80069b4 <HAL_UART_Transmit>
						}

						if (enable_mod_sin_rotor_tracking == 1) {
 800ad20:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d118      	bne.n	800ad5c <main+0x357c>
							sprintf(msg, "\n\rRotor Sine Drive enabled ");
 800ad2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ad2e:	4a86      	ldr	r2, [pc, #536]	; (800af48 <main+0x3768>)
 800ad30:	461c      	mov	r4, r3
 800ad32:	4615      	mov	r5, r2
 800ad34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ad3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ad40:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7f5 fa55 	bl	80001f4 <strlen>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ad52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad56:	4877      	ldr	r0, [pc, #476]	; (800af34 <main+0x3754>)
 800ad58:	f7fb fe2c 	bl	80069b4 <HAL_UART_Transmit>
						}

						if (enable_rotor_chirp == 1) {
 800ad5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d120      	bne.n	800ada8 <main+0x35c8>
							enable_rotor_position_step_response_cycle = 0;
 800ad66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]
							enable_mod_sin_rotor_tracking = 0;
 800ad6e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
							sprintf(msg, "\n\rRotor Chirp Drive enabled ");
 800ad76:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ad7a:	4a74      	ldr	r2, [pc, #464]	; (800af4c <main+0x376c>)
 800ad7c:	461c      	mov	r4, r3
 800ad7e:	4615      	mov	r5, r2
 800ad80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ad88:	c407      	stmia	r4!, {r0, r1, r2}
 800ad8a:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ad8c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7f5 fa2f 	bl	80001f4 <strlen>
 800ad96:	4603      	mov	r3, r0
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ada2:	4864      	ldr	r0, [pc, #400]	; (800af34 <main+0x3754>)
 800ada4:	f7fb fe06 	bl	80069b4 <HAL_UART_Transmit>
						}


						sprintf(msg, "\n\rEnter 1 to Enable Disturbance Rejection Sensitivity Function Analysis; 0 to Disable: ");
 800ada8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800adac:	4a68      	ldr	r2, [pc, #416]	; (800af50 <main+0x3770>)
 800adae:	4618      	mov	r0, r3
 800adb0:	4611      	mov	r1, r2
 800adb2:	2358      	movs	r3, #88	; 0x58
 800adb4:	461a      	mov	r2, r3
 800adb6:	f007 fe9b 	bl	8012af0 <memcpy>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800adba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f5 fa18 	bl	80001f4 <strlen>
 800adc4:	4603      	mov	r3, r0
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800add0:	4858      	ldr	r0, [pc, #352]	; (800af34 <main+0x3754>)
 800add2:	f7fb fdef 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_disturbance_rejection_step);
 800add6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adda:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800adde:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ade2:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ade6:	f7fc fc9d 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_disturbance_rejection_step);
 800adea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800adf4:	4950      	ldr	r1, [pc, #320]	; (800af38 <main+0x3758>)
 800adf6:	4618      	mov	r0, r3
 800adf8:	f007 feaa 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800adfc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7f5 f9f7 	bl	80001f4 <strlen>
 800ae06:	4603      	mov	r3, r0
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ae0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae12:	4848      	ldr	r0, [pc, #288]	; (800af34 <main+0x3754>)
 800ae14:	f7fb fdce 	bl	80069b4 <HAL_UART_Transmit>

						if (enable_disturbance_rejection_step == 1){
 800ae18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d103      	bne.n	800ae2a <main+0x364a>
							enable_rotor_position_step_response_cycle = 1;
 800ae22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ae26:	2201      	movs	r2, #1
 800ae28:	601a      	str	r2, [r3, #0]
						}

						if (enable_disturbance_rejection_step == 0){
 800ae2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d137      	bne.n	800aea4 <main+0x36c4>
							sprintf(msg, "\n\rEnter 1 to Enable Noise Rejection Sensitivity Function Analysis; 0 to Disable: ");
 800ae34:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ae38:	4a46      	ldr	r2, [pc, #280]	; (800af54 <main+0x3774>)
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	2352      	movs	r3, #82	; 0x52
 800ae40:	461a      	mov	r2, r3
 800ae42:	f007 fe55 	bl	8012af0 <memcpy>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ae46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7f5 f9d2 	bl	80001f4 <strlen>
 800ae50:	4603      	mov	r3, r0
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ae58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae5c:	4835      	ldr	r0, [pc, #212]	; (800af34 <main+0x3754>)
 800ae5e:	f7fb fda9 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_noise_rejection_step);
 800ae62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae66:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ae6a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ae6e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ae72:	f7fc fc57 	bl	8007724 <read_int>
							sprintf(msg, "%i", enable_noise_rejection_step);
 800ae76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ae80:	492d      	ldr	r1, [pc, #180]	; (800af38 <main+0x3758>)
 800ae82:	4618      	mov	r0, r3
 800ae84:	f007 fe64 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ae88:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f5 f9b1 	bl	80001f4 <strlen>
 800ae92:	4603      	mov	r3, r0
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ae9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae9e:	4825      	ldr	r0, [pc, #148]	; (800af34 <main+0x3754>)
 800aea0:	f7fb fd88 	bl	80069b4 <HAL_UART_Transmit>
						}
						if (enable_noise_rejection_step == 1){
 800aea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d103      	bne.n	800aeb6 <main+0x36d6>
							enable_rotor_position_step_response_cycle = 1;
 800aeae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	601a      	str	r2, [r3, #0]
						}

						if (enable_noise_rejection_step == 0){
 800aeb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d14d      	bne.n	800af5c <main+0x377c>
							sprintf(msg, "\n\rEnter 1 to Enable Plant Sensitivity Function Analysis; 0 to Disable: ");
 800aec0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aec4:	4a24      	ldr	r2, [pc, #144]	; (800af58 <main+0x3778>)
 800aec6:	4618      	mov	r0, r3
 800aec8:	4611      	mov	r1, r2
 800aeca:	2348      	movs	r3, #72	; 0x48
 800aecc:	461a      	mov	r2, r3
 800aece:	f007 fe0f 	bl	8012af0 <memcpy>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800aed2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f5 f98c 	bl	80001f4 <strlen>
 800aedc:	4603      	mov	r3, r0
 800aede:	b29a      	uxth	r2, r3
 800aee0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800aee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aee8:	4812      	ldr	r0, [pc, #72]	; (800af34 <main+0x3754>)
 800aeea:	f7fb fd63 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_plant_rejection_step);
 800aeee:	f107 0320 	add.w	r3, r7, #32
 800aef2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800aef6:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800aefa:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800aefe:	f7fc fc11 	bl	8007724 <read_int>
							sprintf(msg, "%i", enable_plant_rejection_step);
 800af02:	f107 0320 	add.w	r3, r7, #32
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800af0c:	490a      	ldr	r1, [pc, #40]	; (800af38 <main+0x3758>)
 800af0e:	4618      	mov	r0, r3
 800af10:	f007 fe1e 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800af14:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f5 f96b 	bl	80001f4 <strlen>
 800af1e:	4603      	mov	r3, r0
 800af20:	b29a      	uxth	r2, r3
 800af22:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800af26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af2a:	4802      	ldr	r0, [pc, #8]	; (800af34 <main+0x3754>)
 800af2c:	f7fb fd42 	bl	80069b4 <HAL_UART_Transmit>
 800af30:	e014      	b.n	800af5c <main+0x377c>
 800af32:	bf00      	nop
 800af34:	20000f20 	.word	0x20000f20
 800af38:	0801875c 	.word	0x0801875c
 800af3c:	080187c0 	.word	0x080187c0
 800af40:	3f638ef3 	.word	0x3f638ef3
 800af44:	08018800 	.word	0x08018800
 800af48:	0801881c 	.word	0x0801881c
 800af4c:	08018838 	.word	0x08018838
 800af50:	08018a18 	.word	0x08018a18
 800af54:	08018a70 	.word	0x08018a70
 800af58:	08018ac4 	.word	0x08018ac4
						}
						if (enable_plant_rejection_step == 1){
 800af5c:	f107 0320 	add.w	r3, r7, #32
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d103      	bne.n	800af6e <main+0x378e>
							enable_rotor_position_step_response_cycle = 1;
 800af66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
						}

						/*
						* Reverse polarity of gain values to account for suspended mode angle configuration
						*/
						if(select_suspended_mode == 1){
 800af6e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d13b      	bne.n	800aff0 <main+0x3810>
							proportional = 	-proportional;
 800af78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800af7c:	edd3 7a00 	vldr	s15, [r3]
 800af80:	eef1 7a67 	vneg.f32	s15, s15
 800af84:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800af88:	edc3 7a00 	vstr	s15, [r3]
							integral = 		-integral;
 800af8c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800af90:	edd3 7a00 	vldr	s15, [r3]
 800af94:	eef1 7a67 	vneg.f32	s15, s15
 800af98:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800af9c:	edc3 7a00 	vstr	s15, [r3]
							derivative = 	-derivative;
 800afa0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800afa4:	edd3 7a00 	vldr	s15, [r3]
 800afa8:	eef1 7a67 	vneg.f32	s15, s15
 800afac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800afb0:	edc3 7a00 	vstr	s15, [r3]
							rotor_p_gain = 	-rotor_p_gain;
 800afb4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800afb8:	edd3 7a00 	vldr	s15, [r3]
 800afbc:	eef1 7a67 	vneg.f32	s15, s15
 800afc0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800afc4:	edc3 7a00 	vstr	s15, [r3]
							rotor_i_gain = 	-rotor_i_gain;
 800afc8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800afcc:	edd3 7a00 	vldr	s15, [r3]
 800afd0:	eef1 7a67 	vneg.f32	s15, s15
 800afd4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800afd8:	edc3 7a00 	vstr	s15, [r3]
							rotor_d_gain = 	-rotor_d_gain;
 800afdc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800afe0:	edd3 7a00 	vldr	s15, [r3]
 800afe4:	eef1 7a67 	vneg.f32	s15, s15
 800afe8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800afec:	edc3 7a00 	vstr	s15, [r3]
						}


						sprintf(msg, "\n\rEnter Torque Current mA (default is 800: ");
 800aff0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800aff4:	4a52      	ldr	r2, [pc, #328]	; (800b140 <main+0x3960>)
 800aff6:	461c      	mov	r4, r3
 800aff8:	4615      	mov	r5, r2
 800affa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800affc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800affe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b00a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f5 f8f0 	bl	80001f4 <strlen>
 800b014:	4603      	mov	r3, r0
 800b016:	b29a      	uxth	r2, r3
 800b018:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b020:	4848      	ldr	r0, [pc, #288]	; (800b144 <main+0x3964>)
 800b022:	f7fb fcc7 	bl	80069b4 <HAL_UART_Transmit>
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &torq_current_val);
 800b026:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b02a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b02e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b032:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b036:	f7fc fb13 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", torq_current_val);
 800b03a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 fa99 	bl	8000578 <__aeabi_f2d>
 800b046:	4603      	mov	r3, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b04e:	461a      	mov	r2, r3
 800b050:	4623      	mov	r3, r4
 800b052:	493d      	ldr	r1, [pc, #244]	; (800b148 <main+0x3968>)
 800b054:	f007 fd7c 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b058:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f5 f8c9 	bl	80001f4 <strlen>
 800b062:	4603      	mov	r3, r0
 800b064:	b29a      	uxth	r2, r3
 800b066:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b06a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b06e:	4835      	ldr	r0, [pc, #212]	; (800b144 <main+0x3964>)
 800b070:	f7fb fca0 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rSelect Motor Response Model Enter 1, 2, or 3 (4 Custom Entry): ");
 800b074:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b078:	4a34      	ldr	r2, [pc, #208]	; (800b14c <main+0x396c>)
 800b07a:	4618      	mov	r0, r3
 800b07c:	4611      	mov	r1, r2
 800b07e:	2342      	movs	r3, #66	; 0x42
 800b080:	461a      	mov	r2, r3
 800b082:	f007 fd35 	bl	8012af0 <memcpy>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b086:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f5 f8b2 	bl	80001f4 <strlen>
 800b090:	4603      	mov	r3, r0
 800b092:	b29a      	uxth	r2, r3
 800b094:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b09c:	4829      	ldr	r0, [pc, #164]	; (800b144 <main+0x3964>)
 800b09e:	f7fb fc89 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &motor_response_model);
 800b0a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0a6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b0aa:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b0ae:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b0b2:	f7fc fb37 	bl	8007724 <read_int>
						sprintf(msg, "%i", motor_response_model);
 800b0b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b0c0:	4923      	ldr	r1, [pc, #140]	; (800b150 <main+0x3970>)
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f007 fd44 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b0c8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7f5 f891 	bl	80001f4 <strlen>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b0da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0de:	4819      	ldr	r0, [pc, #100]	; (800b144 <main+0x3964>)
 800b0e0:	f7fb fc68 	bl	80069b4 <HAL_UART_Transmit>

						switch(motor_response_model){
 800b0e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	f200 8135 	bhi.w	800b35c <main+0x3b7c>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <main+0x3918>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b109 	.word	0x0800b109
 800b0fc:	0800b11b 	.word	0x0800b11b
 800b100:	0800b12d 	.word	0x0800b12d
 800b104:	0800b155 	.word	0x0800b155
						case 1:
							max_speed = 		MAX_SPEED_MODE_1;
 800b108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b10c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_1;
 800b110:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b114:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800b118:	e120      	b.n	800b35c <main+0x3b7c>
						case 2:
							max_speed = 		MAX_SPEED_MODE_2;
 800b11a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b11e:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_2;
 800b122:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b126:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800b12a:	e117      	b.n	800b35c <main+0x3b7c>
						case 3:
							max_speed = 		MAX_SPEED_MODE_3;
 800b12c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b130:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_3;
 800b134:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800b138:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800b13c:	e10e      	b.n	800b35c <main+0x3b7c>
 800b13e:	bf00      	nop
 800b140:	08018b0c 	.word	0x08018b0c
 800b144:	20000f20 	.word	0x20000f20
 800b148:	08018884 	.word	0x08018884
 800b14c:	08018b38 	.word	0x08018b38
 800b150:	0801875c 	.word	0x0801875c
						case 4:
							sprintf(msg, "\n\rEnter Max Speed: ");
 800b154:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b158:	4ac3      	ldr	r2, [pc, #780]	; (800b468 <main+0x3c88>)
 800b15a:	461c      	mov	r4, r3
 800b15c:	4615      	mov	r5, r2
 800b15e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b162:	682b      	ldr	r3, [r5, #0]
 800b164:	6023      	str	r3, [r4, #0]
								HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b166:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7f5 f842 	bl	80001f4 <strlen>
 800b170:	4603      	mov	r3, r0
 800b172:	b29a      	uxth	r2, r3
 800b174:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b17c:	48bb      	ldr	r0, [pc, #748]	; (800b46c <main+0x3c8c>)
 800b17e:	f7fb fc19 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &max_speed_read);
 800b182:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800b186:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b18a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b18e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b192:	f7fc fac7 	bl	8007724 <read_int>
							sprintf(msg, "%i", max_speed_read);
 800b196:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b1a0:	49b3      	ldr	r1, [pc, #716]	; (800b470 <main+0x3c90>)
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f007 fcd4 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b1a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7f5 f821 	bl	80001f4 <strlen>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1be:	48ab      	ldr	r0, [pc, #684]	; (800b46c <main+0x3c8c>)
 800b1c0:	f7fb fbf8 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Min Speed: ");
 800b1c4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b1c8:	4aaa      	ldr	r2, [pc, #680]	; (800b474 <main+0x3c94>)
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	4615      	mov	r5, r2
 800b1ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	6023      	str	r3, [r4, #0]
								HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b1d6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f5 f80a 	bl	80001f4 <strlen>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1ec:	489f      	ldr	r0, [pc, #636]	; (800b46c <main+0x3c8c>)
 800b1ee:	f7fb fbe1 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &min_speed_read);
 800b1f2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b1f6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b1fa:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b1fe:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b202:	f7fc fa8f 	bl	8007724 <read_int>
							sprintf(msg, "%i", min_speed_read);
 800b206:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b210:	4997      	ldr	r1, [pc, #604]	; (800b470 <main+0x3c90>)
 800b212:	4618      	mov	r0, r3
 800b214:	f007 fc9c 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b218:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f4 ffe9 	bl	80001f4 <strlen>
 800b222:	4603      	mov	r3, r0
 800b224:	b29a      	uxth	r2, r3
 800b226:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b22a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b22e:	488f      	ldr	r0, [pc, #572]	; (800b46c <main+0x3c8c>)
 800b230:	f7fb fbc0 	bl	80069b4 <HAL_UART_Transmit>
							max_speed = (uint16_t)(max_speed_read);
 800b234:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = (uint16_t)(min_speed_read);
 800b23e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							sprintf(msg, "\n\rEnter Max Acceleration: ");
 800b248:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b24c:	4a8a      	ldr	r2, [pc, #552]	; (800b478 <main+0x3c98>)
 800b24e:	461c      	mov	r4, r3
 800b250:	4615      	mov	r5, r2
 800b252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b256:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b25a:	c403      	stmia	r4!, {r0, r1}
 800b25c:	8022      	strh	r2, [r4, #0]
 800b25e:	3402      	adds	r4, #2
 800b260:	0c13      	lsrs	r3, r2, #16
 800b262:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b264:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f4 ffc3 	bl	80001f4 <strlen>
 800b26e:	4603      	mov	r3, r0
 800b270:	b29a      	uxth	r2, r3
 800b272:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b27a:	487c      	ldr	r0, [pc, #496]	; (800b46c <main+0x3c8c>)
 800b27c:	f7fb fb9a 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_test_acceleration_max);
 800b280:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b284:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b288:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b28c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b290:	f7fc fa48 	bl	8007724 <read_int>
							sprintf(msg, "%i", rotor_test_acceleration_max);
 800b294:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b29e:	4974      	ldr	r1, [pc, #464]	; (800b470 <main+0x3c90>)
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f007 fc55 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b2a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7f4 ffa2 	bl	80001f4 <strlen>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2bc:	486b      	ldr	r0, [pc, #428]	; (800b46c <main+0x3c8c>)
 800b2be:	f7fb fb79 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Max Deceleration: ");
 800b2c2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b2c6:	4a6d      	ldr	r2, [pc, #436]	; (800b47c <main+0x3c9c>)
 800b2c8:	461c      	mov	r4, r3
 800b2ca:	4615      	mov	r5, r2
 800b2cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2d4:	c403      	stmia	r4!, {r0, r1}
 800b2d6:	8022      	strh	r2, [r4, #0]
 800b2d8:	3402      	adds	r4, #2
 800b2da:	0c13      	lsrs	r3, r2, #16
 800b2dc:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b2de:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f4 ff86 	bl	80001f4 <strlen>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2f4:	485d      	ldr	r0, [pc, #372]	; (800b46c <main+0x3c8c>)
 800b2f6:	f7fb fb5d 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &swing_deceleration_max);
 800b2fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b2fe:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b302:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b306:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b30a:	f7fc fa0b 	bl	8007724 <read_int>
							sprintf(msg, "%i", swing_deceleration_max);
 800b30e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b318:	4955      	ldr	r1, [pc, #340]	; (800b470 <main+0x3c90>)
 800b31a:	4618      	mov	r0, r3
 800b31c:	f007 fc18 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b320:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b324:	4618      	mov	r0, r3
 800b326:	f7f4 ff65 	bl	80001f4 <strlen>
 800b32a:	4603      	mov	r3, r0
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b336:	484d      	ldr	r0, [pc, #308]	; (800b46c <main+0x3c8c>)
 800b338:	f7fb fb3c 	bl	80069b4 <HAL_UART_Transmit>
							BSP_MotorControl_SetAcceleration(0,(uint16_t)(rotor_test_acceleration_max));
 800b33c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	4619      	mov	r1, r3
 800b346:	2000      	movs	r0, #0
 800b348:	f7f8 fca0 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
							BSP_MotorControl_SetDeceleration(0,(uint16_t)(swing_deceleration_max));
 800b34c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	b29b      	uxth	r3, r3
 800b354:	4619      	mov	r1, r3
 800b356:	2000      	movs	r0, #0
 800b358:	f7f8 fcc0 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

						}

						sprintf(msg, "\n\rPendulum PID Gains: \tP: %.02f; I: %.02f; D: %.02f", proportional, integral, derivative);
 800b35c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4618      	mov	r0, r3
 800b364:	f7f5 f908 	bl	8000578 <__aeabi_f2d>
 800b368:	4682      	mov	sl, r0
 800b36a:	468b      	mov	fp, r1
 800b36c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7f5 f900 	bl	8000578 <__aeabi_f2d>
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4618      	mov	r0, r3
 800b384:	f7f5 f8f8 	bl	8000578 <__aeabi_f2d>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b390:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b394:	e9cd 4500 	strd	r4, r5, [sp]
 800b398:	4652      	mov	r2, sl
 800b39a:	465b      	mov	r3, fp
 800b39c:	4938      	ldr	r1, [pc, #224]	; (800b480 <main+0x3ca0>)
 800b39e:	f007 fbd7 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800b3a2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f4 ff24 	bl	80001f4 <strlen>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3b8:	482c      	ldr	r0, [pc, #176]	; (800b46c <main+0x3c8c>)
 800b3ba:	f7fb fafb 	bl	80069b4 <HAL_UART_Transmit>
						sprintf(msg, "\n\rRotor PID Gains: \tP: %.02f; I: %.02f; D: %.02f", rotor_p_gain, rotor_i_gain, rotor_d_gain);
 800b3be:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7f5 f8d7 	bl	8000578 <__aeabi_f2d>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7f5 f8cf 	bl	8000578 <__aeabi_f2d>
 800b3da:	4604      	mov	r4, r0
 800b3dc:	460d      	mov	r5, r1
 800b3de:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7f5 f8c7 	bl	8000578 <__aeabi_f2d>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b3f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3f6:	e9cd 4500 	strd	r4, r5, [sp]
 800b3fa:	4652      	mov	r2, sl
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	4921      	ldr	r1, [pc, #132]	; (800b484 <main+0x3ca4>)
 800b400:	f007 fba6 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800b404:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b408:	4618      	mov	r0, r3
 800b40a:	f7f4 fef3 	bl	80001f4 <strlen>
 800b40e:	4603      	mov	r3, r0
 800b410:	b29a      	uxth	r2, r3
 800b412:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b41a:	4814      	ldr	r0, [pc, #80]	; (800b46c <main+0x3c8c>)
 800b41c:	f7fb faca 	bl	80069b4 <HAL_UART_Transmit>
						if (select_suspended_mode == 1){
 800b420:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b01      	cmp	r3, #1
 800b428:	f041 802e 	bne.w	800c488 <main+0x4ca8>
							sprintf(msg, "\n\rSuspended Mode gains must be negative");
 800b42c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b430:	4a15      	ldr	r2, [pc, #84]	; (800b488 <main+0x3ca8>)
 800b432:	461c      	mov	r4, r3
 800b434:	4615      	mov	r5, r2
 800b436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b43a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b43c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b43e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b442:	e884 0003 	stmia.w	r4, {r0, r1}
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800b446:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7f4 fed2 	bl	80001f4 <strlen>
 800b450:	4603      	mov	r3, r0
 800b452:	b29a      	uxth	r2, r3
 800b454:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b45c:	4803      	ldr	r0, [pc, #12]	; (800b46c <main+0x3c8c>)
 800b45e:	f7fb faa9 	bl	80069b4 <HAL_UART_Transmit>
						}


					break;
 800b462:	f001 b811 	b.w	800c488 <main+0x4ca8>
 800b466:	bf00      	nop
 800b468:	08018b7c 	.word	0x08018b7c
 800b46c:	20000f20 	.word	0x20000f20
 800b470:	0801875c 	.word	0x0801875c
 800b474:	08018b90 	.word	0x08018b90
 800b478:	08018ba4 	.word	0x08018ba4
 800b47c:	08018bc0 	.word	0x08018bc0
 800b480:	08018bdc 	.word	0x08018bdc
 800b484:	08018c10 	.word	0x08018c10
 800b488:	08018c44 	.word	0x08018c44
					* Interactive entry of Pendulum Controller gains for Single PID Inverted Mode
					*/

					case 10:

						sprintf(msg, "\n\r *** Starting Single PID Configuration Mode ***\n\r ");
 800b48c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b490:	4acd      	ldr	r2, [pc, #820]	; (800b7c8 <main+0x3fe8>)
 800b492:	461c      	mov	r4, r3
 800b494:	4615      	mov	r5, r2
 800b496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b49a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b49c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b49e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b4a6:	6020      	str	r0, [r4, #0]
 800b4a8:	3404      	adds	r4, #4
 800b4aa:	7021      	strb	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800b4ac:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7f4 fe9f 	bl	80001f4 <strlen>
 800b4b6:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b4be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4c2:	48c2      	ldr	r0, [pc, #776]	; (800b7cc <main+0x3fec>)
 800b4c4:	f7fb fa76 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);

						sprintf(msg, "\n\rEnter Pendulum PID Proportional Gain: ");
 800b4c8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b4cc:	4ac0      	ldr	r2, [pc, #768]	; (800b7d0 <main+0x3ff0>)
 800b4ce:	461c      	mov	r4, r3
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4de:	c403      	stmia	r4!, {r0, r1}
 800b4e0:	7022      	strb	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800b4e2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7f4 fe84 	bl	80001f4 <strlen>
 800b4ec:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800b4ee:	b29a      	uxth	r2, r3
 800b4f0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f8:	48b4      	ldr	r0, [pc, #720]	; (800b7cc <main+0x3fec>)
 800b4fa:	f7fb fa5b 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);

						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &proportional);
 800b4fe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b502:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b506:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b50a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b50e:	f7fc f8a7 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", proportional);
 800b512:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7f5 f82d 	bl	8000578 <__aeabi_f2d>
 800b51e:	4603      	mov	r3, r0
 800b520:	460c      	mov	r4, r1
 800b522:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b526:	461a      	mov	r2, r3
 800b528:	4623      	mov	r3, r4
 800b52a:	49aa      	ldr	r1, [pc, #680]	; (800b7d4 <main+0x3ff4>)
 800b52c:	f007 fb10 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b530:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b534:	4618      	mov	r0, r3
 800b536:	f7f4 fe5d 	bl	80001f4 <strlen>
 800b53a:	4603      	mov	r3, r0
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b546:	48a1      	ldr	r0, [pc, #644]	; (800b7cc <main+0x3fec>)
 800b548:	f7fb fa34 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Pendulum PID Integral Gain: ");
 800b54c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b550:	4aa1      	ldr	r2, [pc, #644]	; (800b7d8 <main+0x3ff8>)
 800b552:	461c      	mov	r4, r3
 800b554:	4615      	mov	r5, r2
 800b556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b55c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b55e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b562:	6020      	str	r0, [r4, #0]
 800b564:	3404      	adds	r4, #4
 800b566:	7021      	strb	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800b568:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7f4 fe41 	bl	80001f4 <strlen>
 800b572:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800b574:	b29a      	uxth	r2, r3
 800b576:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b57e:	4893      	ldr	r0, [pc, #588]	; (800b7cc <main+0x3fec>)
 800b580:	f7fb fa18 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &integral);
 800b584:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b588:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b58c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b590:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b594:	f7fc f864 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", integral);
 800b598:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7f4 ffea 	bl	8000578 <__aeabi_f2d>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	4988      	ldr	r1, [pc, #544]	; (800b7d4 <main+0x3ff4>)
 800b5b2:	f007 facd 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b5b6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f4 fe1a 	bl	80001f4 <strlen>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b5c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5cc:	487f      	ldr	r0, [pc, #508]	; (800b7cc <main+0x3fec>)
 800b5ce:	f7fb f9f1 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter Pendulum PID Differential Gain: ");
 800b5d2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b5d6:	4a81      	ldr	r2, [pc, #516]	; (800b7dc <main+0x3ffc>)
 800b5d8:	461c      	mov	r4, r3
 800b5da:	4615      	mov	r5, r2
 800b5dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b5e8:	c403      	stmia	r4!, {r0, r1}
 800b5ea:	7022      	strb	r2, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
								strlen(msg),
 800b5ec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7f4 fdff 	bl	80001f4 <strlen>
 800b5f6:	4603      	mov	r3, r0
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b602:	4872      	ldr	r0, [pc, #456]	; (800b7cc <main+0x3fec>)
 800b604:	f7fb f9d6 	bl	80069b4 <HAL_UART_Transmit>
								HAL_MAX_DELAY);
						read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &derivative);
 800b608:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b60c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b610:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b614:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b618:	f7fc f822 	bl	8007660 <read_float>
						sprintf(msg, "%0.2f", derivative);
 800b61c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f7f4 ffa8 	bl	8000578 <__aeabi_f2d>
 800b628:	4603      	mov	r3, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800b630:	461a      	mov	r2, r3
 800b632:	4623      	mov	r3, r4
 800b634:	4967      	ldr	r1, [pc, #412]	; (800b7d4 <main+0x3ff4>)
 800b636:	f007 fa8b 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b63a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b63e:	4618      	mov	r0, r3
 800b640:	f7f4 fdd8 	bl	80001f4 <strlen>
 800b644:	4603      	mov	r3, r0
 800b646:	b29a      	uxth	r2, r3
 800b648:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b650:	485e      	ldr	r0, [pc, #376]	; (800b7cc <main+0x3fec>)
 800b652:	f7fb f9af 	bl	80069b4 <HAL_UART_Transmit>

						/*
						* Rotor Controller gains for Single PID Mode
						*/
						rotor_p_gain = ROTOR_PID_PROPORTIONAL_GAIN_SINGLE_PID_MODE;
 800b656:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800b65a:	4a61      	ldr	r2, [pc, #388]	; (800b7e0 <main+0x4000>)
 800b65c:	601a      	str	r2, [r3, #0]
						rotor_i_gain = ROTOR_PID_INTEGRAL_GAIN_SINGLE_PID_MODE;
 800b65e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800b662:	f04f 0200 	mov.w	r2, #0
 800b666:	601a      	str	r2, [r3, #0]
						rotor_d_gain = ROTOR_PID_DIFFERENTIAL_GAIN_SINGLE_PID_MODE;
 800b668:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800b66c:	4a5d      	ldr	r2, [pc, #372]	; (800b7e4 <main+0x4004>)
 800b66e:	601a      	str	r2, [r3, #0]

						/*
						 * Only inverted mode is supported in Single PID Mode
						 */

						select_suspended_mode = 0;
 800b670:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]

						enable_rotor_position_step_response_cycle = 0;
 800b678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]
						enable_mod_sin_rotor_tracking = 0;
 800b680:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b684:	2200      	movs	r2, #0
 800b686:	601a      	str	r2, [r3, #0]
						enable_rotor_chirp = 0;
 800b688:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]

						sprintf(msg, "\n\rEnter 1 to Enable Rotor Chirp Drive; 0 to Disable: ");
 800b690:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b694:	4a54      	ldr	r2, [pc, #336]	; (800b7e8 <main+0x4008>)
 800b696:	461c      	mov	r4, r3
 800b698:	4615      	mov	r5, r2
 800b69a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b69c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b69e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b6aa:	6020      	str	r0, [r4, #0]
 800b6ac:	3404      	adds	r4, #4
 800b6ae:	8021      	strh	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b6b0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7f4 fd9d 	bl	80001f4 <strlen>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b6c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6c6:	4841      	ldr	r0, [pc, #260]	; (800b7cc <main+0x3fec>)
 800b6c8:	f7fb f974 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_rotor_chirp);
 800b6cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b6d0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b6d4:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b6d8:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b6dc:	f7fc f822 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_rotor_chirp);
 800b6e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b6ea:	4940      	ldr	r1, [pc, #256]	; (800b7ec <main+0x400c>)
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f007 fa2f 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b6f2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7f4 fd7c 	bl	80001f4 <strlen>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b708:	4830      	ldr	r0, [pc, #192]	; (800b7cc <main+0x3fec>)
 800b70a:	f7fb f953 	bl	80069b4 <HAL_UART_Transmit>

						if (enable_rotor_chirp == 0){
 800b70e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f040 8097 	bne.w	800b848 <main+0x4068>
						sprintf(msg, "\n\rEnter 1 to Enable Step Drive; 0 to Disable: ");
 800b71a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b71e:	4a34      	ldr	r2, [pc, #208]	; (800b7f0 <main+0x4010>)
 800b720:	461c      	mov	r4, r3
 800b722:	4615      	mov	r5, r2
 800b724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b72a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b72c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b730:	c407      	stmia	r4!, {r0, r1, r2}
 800b732:	8023      	strh	r3, [r4, #0]
 800b734:	3402      	adds	r4, #2
 800b736:	0c1b      	lsrs	r3, r3, #16
 800b738:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b73a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b73e:	4618      	mov	r0, r3
 800b740:	f7f4 fd58 	bl	80001f4 <strlen>
 800b744:	4603      	mov	r3, r0
 800b746:	b29a      	uxth	r2, r3
 800b748:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b750:	481e      	ldr	r0, [pc, #120]	; (800b7cc <main+0x3fec>)
 800b752:	f7fb f92f 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &enable_rotor_position_step_response_cycle);
 800b756:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b75a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b75e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b762:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b766:	f7fb ffdd 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_rotor_position_step_response_cycle);
 800b76a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b774:	491d      	ldr	r1, [pc, #116]	; (800b7ec <main+0x400c>)
 800b776:	4618      	mov	r0, r3
 800b778:	f007 f9ea 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b77c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b780:	4618      	mov	r0, r3
 800b782:	f7f4 fd37 	bl	80001f4 <strlen>
 800b786:	4603      	mov	r3, r0
 800b788:	b29a      	uxth	r2, r3
 800b78a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b78e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b792:	480e      	ldr	r0, [pc, #56]	; (800b7cc <main+0x3fec>)
 800b794:	f7fb f90e 	bl	80069b4 <HAL_UART_Transmit>

						sprintf(msg, "\n\rEnter 1 to Enable Sine Drive; 0 to Disable: ");
 800b798:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b79c:	4a15      	ldr	r2, [pc, #84]	; (800b7f4 <main+0x4014>)
 800b79e:	461c      	mov	r4, r3
 800b7a0:	4615      	mov	r5, r2
 800b7a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b7aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b7ae:	c407      	stmia	r4!, {r0, r1, r2}
 800b7b0:	8023      	strh	r3, [r4, #0]
 800b7b2:	3402      	adds	r4, #2
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b7b8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7f4 fd19 	bl	80001f4 <strlen>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	e017      	b.n	800b7f8 <main+0x4018>
 800b7c8:	08018c6c 	.word	0x08018c6c
 800b7cc:	20000f20 	.word	0x20000f20
 800b7d0:	08018858 	.word	0x08018858
 800b7d4:	08018884 	.word	0x08018884
 800b7d8:	0801888c 	.word	0x0801888c
 800b7dc:	080188b4 	.word	0x080188b4
 800b7e0:	4087ae14 	.word	0x4087ae14
 800b7e4:	41226666 	.word	0x41226666
 800b7e8:	08018724 	.word	0x08018724
 800b7ec:	0801875c 	.word	0x0801875c
 800b7f0:	08018760 	.word	0x08018760
 800b7f4:	08018790 	.word	0x08018790
 800b7f8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b800:	48b5      	ldr	r0, [pc, #724]	; (800bad8 <main+0x42f8>)
 800b802:	f7fb f8d7 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_mod_sin_rotor_tracking);
 800b806:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b80a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b80e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b812:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b816:	f7fb ff85 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 800b81a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b824:	49ad      	ldr	r1, [pc, #692]	; (800badc <main+0x42fc>)
 800b826:	4618      	mov	r0, r3
 800b828:	f007 f992 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b82c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b830:	4618      	mov	r0, r3
 800b832:	f7f4 fcdf 	bl	80001f4 <strlen>
 800b836:	4603      	mov	r3, r0
 800b838:	b29a      	uxth	r2, r3
 800b83a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b842:	48a5      	ldr	r0, [pc, #660]	; (800bad8 <main+0x42f8>)
 800b844:	f7fb f8b6 	bl	80069b4 <HAL_UART_Transmit>
						}

						sprintf(msg, "\n\rEnter 1 to Enable Pendulum Impulse; 0 to Disable: ");
 800b848:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b84c:	4aa4      	ldr	r2, [pc, #656]	; (800bae0 <main+0x4300>)
 800b84e:	461c      	mov	r4, r3
 800b850:	4615      	mov	r5, r2
 800b852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b85e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	3404      	adds	r4, #4
 800b866:	7021      	strb	r1, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b868:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f4 fcc1 	bl	80001f4 <strlen>
 800b872:	4603      	mov	r3, r0
 800b874:	b29a      	uxth	r2, r3
 800b876:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b87e:	4896      	ldr	r0, [pc, #600]	; (800bad8 <main+0x42f8>)
 800b880:	f7fb f898 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &enable_pendulum_position_impulse_response_cycle);
 800b884:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800b888:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800b88c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800b890:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800b894:	f7fb ff46 	bl	8007724 <read_int>
						sprintf(msg, "%i", enable_mod_sin_rotor_tracking);
 800b898:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b8a2:	498e      	ldr	r1, [pc, #568]	; (800badc <main+0x42fc>)
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f007 f953 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b8aa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f4 fca0 	bl	80001f4 <strlen>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b8bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8c0:	4885      	ldr	r0, [pc, #532]	; (800bad8 <main+0x42f8>)
 800b8c2:	f7fb f877 	bl	80069b4 <HAL_UART_Transmit>

						if (enable_rotor_position_step_response_cycle == 1) {
 800b8c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d11c      	bne.n	800b90a <main+0x412a>
							sprintf(msg, "\n\rRotor Step Drive enabled ");
 800b8d0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b8d4:	4a83      	ldr	r2, [pc, #524]	; (800bae4 <main+0x4304>)
 800b8d6:	461c      	mov	r4, r3
 800b8d8:	4615      	mov	r5, r2
 800b8da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
							enable_pendulum_position_impulse_response_cycle = 0;
 800b8e6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b8ee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f4 fc7e 	bl	80001f4 <strlen>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b904:	4874      	ldr	r0, [pc, #464]	; (800bad8 <main+0x42f8>)
 800b906:	f7fb f855 	bl	80069b4 <HAL_UART_Transmit>
						}

						if (enable_mod_sin_rotor_tracking == 1) {
 800b90a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d11c      	bne.n	800b94e <main+0x416e>
							sprintf(msg, "\n\rRotor Sine Drive enabled ");
 800b914:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b918:	4a73      	ldr	r2, [pc, #460]	; (800bae8 <main+0x4308>)
 800b91a:	461c      	mov	r4, r3
 800b91c:	4615      	mov	r5, r2
 800b91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b922:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
							enable_pendulum_position_impulse_response_cycle = 0;
 800b92a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800b92e:	2200      	movs	r2, #0
 800b930:	601a      	str	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b932:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b936:	4618      	mov	r0, r3
 800b938:	f7f4 fc5c 	bl	80001f4 <strlen>
 800b93c:	4603      	mov	r3, r0
 800b93e:	b29a      	uxth	r2, r3
 800b940:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b948:	4863      	ldr	r0, [pc, #396]	; (800bad8 <main+0x42f8>)
 800b94a:	f7fb f833 	bl	80069b4 <HAL_UART_Transmit>
						}

						if (enable_pendulum_position_impulse_response_cycle == 1) {
 800b94e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d118      	bne.n	800b98a <main+0x41aa>
							sprintf(msg, "\n\rPendulum Impulse Drive enabled ");
 800b958:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b95c:	4a63      	ldr	r2, [pc, #396]	; (800baec <main+0x430c>)
 800b95e:	461c      	mov	r4, r3
 800b960:	4615      	mov	r5, r2
 800b962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b96a:	682b      	ldr	r3, [r5, #0]
 800b96c:	8023      	strh	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800b96e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800b972:	4618      	mov	r0, r3
 800b974:	f7f4 fc3e 	bl	80001f4 <strlen>
 800b978:	4603      	mov	r3, r0
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800b980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b984:	4854      	ldr	r0, [pc, #336]	; (800bad8 <main+0x42f8>)
 800b986:	f7fb f815 	bl	80069b4 <HAL_UART_Transmit>
						}

						/*
						* Reverse polarity of gain values to account for suspended mode angle configuration
						*/
						if(select_suspended_mode == 1){
 800b98a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d13b      	bne.n	800ba0c <main+0x422c>
							proportional = 	-proportional;
 800b994:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b998:	edd3 7a00 	vldr	s15, [r3]
 800b99c:	eef1 7a67 	vneg.f32	s15, s15
 800b9a0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b9a4:	edc3 7a00 	vstr	s15, [r3]
							integral = 		-integral;
 800b9a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b9ac:	edd3 7a00 	vldr	s15, [r3]
 800b9b0:	eef1 7a67 	vneg.f32	s15, s15
 800b9b4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b9b8:	edc3 7a00 	vstr	s15, [r3]
							derivative = 	-derivative;
 800b9bc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b9c0:	edd3 7a00 	vldr	s15, [r3]
 800b9c4:	eef1 7a67 	vneg.f32	s15, s15
 800b9c8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b9cc:	edc3 7a00 	vstr	s15, [r3]
							rotor_p_gain = 	-rotor_p_gain;
 800b9d0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800b9d4:	edd3 7a00 	vldr	s15, [r3]
 800b9d8:	eef1 7a67 	vneg.f32	s15, s15
 800b9dc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800b9e0:	edc3 7a00 	vstr	s15, [r3]
							rotor_i_gain = 	-rotor_i_gain;
 800b9e4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800b9e8:	edd3 7a00 	vldr	s15, [r3]
 800b9ec:	eef1 7a67 	vneg.f32	s15, s15
 800b9f0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800b9f4:	edc3 7a00 	vstr	s15, [r3]
							rotor_d_gain = 	-rotor_d_gain;
 800b9f8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800b9fc:	edd3 7a00 	vldr	s15, [r3]
 800ba00:	eef1 7a67 	vneg.f32	s15, s15
 800ba04:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800ba08:	edc3 7a00 	vstr	s15, [r3]
						}

						sprintf(msg, "\n\rSelect Motor Response Model Enter 1, 2, or 3 (4 Custom Entry): ");
 800ba0c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ba10:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <main+0x4310>)
 800ba12:	4618      	mov	r0, r3
 800ba14:	4611      	mov	r1, r2
 800ba16:	2342      	movs	r3, #66	; 0x42
 800ba18:	461a      	mov	r2, r3
 800ba1a:	f007 f869 	bl	8012af0 <memcpy>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ba1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7f4 fbe6 	bl	80001f4 <strlen>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba34:	4828      	ldr	r0, [pc, #160]	; (800bad8 <main+0x42f8>)
 800ba36:	f7fa ffbd 	bl	80069b4 <HAL_UART_Transmit>
						read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &motor_response_model);
 800ba3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ba3e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ba42:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ba46:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ba4a:	f7fb fe6b 	bl	8007724 <read_int>
						sprintf(msg, "%i", motor_response_model);
 800ba4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ba58:	4920      	ldr	r1, [pc, #128]	; (800badc <main+0x42fc>)
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f007 f878 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ba60:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7f4 fbc5 	bl	80001f4 <strlen>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ba72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba76:	4818      	ldr	r0, [pc, #96]	; (800bad8 <main+0x42f8>)
 800ba78:	f7fa ff9c 	bl	80069b4 <HAL_UART_Transmit>

						switch(motor_response_model){
 800ba7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	f200 80b0 	bhi.w	800bbea <main+0x440a>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <main+0x42b0>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800bac5 	.word	0x0800bac5
 800ba94:	0800baa1 	.word	0x0800baa1
 800ba98:	0800bab3 	.word	0x0800bab3
 800ba9c:	0800baf5 	.word	0x0800baf5
						/* Medium Speed Selection */
						case 2:
							max_speed = 		MAX_SPEED_MODE_1;
 800baa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800baa4:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_1;
 800baa8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800baac:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800bab0:	e09b      	b.n	800bbea <main+0x440a>
						/* High Speed Selection */
						case 3:
							max_speed = 		MAX_SPEED_MODE_2;
 800bab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bab6:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_2;
 800baba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800babe:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800bac2:	e092      	b.n	800bbea <main+0x440a>
						/* Preferred Selection for Single PID corresponding to model */
						case 1:
							max_speed = 		MAX_SPEED_MODE_3;
 800bac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bac8:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = 		MIN_SPEED_MODE_3;
 800bacc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800bad0:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800bad4:	e089      	b.n	800bbea <main+0x440a>
 800bad6:	bf00      	nop
 800bad8:	20000f20 	.word	0x20000f20
 800badc:	0801875c 	.word	0x0801875c
 800bae0:	08018ca4 	.word	0x08018ca4
 800bae4:	08018800 	.word	0x08018800
 800bae8:	0801881c 	.word	0x0801881c
 800baec:	08018cdc 	.word	0x08018cdc
 800baf0:	08018b38 	.word	0x08018b38
						case 4:
							sprintf(msg, "\n\rEnter Max Speed: ");
 800baf4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800baf8:	4a90      	ldr	r2, [pc, #576]	; (800bd3c <main+0x455c>)
 800bafa:	461c      	mov	r4, r3
 800bafc:	4615      	mov	r5, r2
 800bafe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	6023      	str	r3, [r4, #0]
								HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bb06:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7f4 fb72 	bl	80001f4 <strlen>
 800bb10:	4603      	mov	r3, r0
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bb18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb1c:	4888      	ldr	r0, [pc, #544]	; (800bd40 <main+0x4560>)
 800bb1e:	f7fa ff49 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &max_speed_read);
 800bb22:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bb26:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800bb2a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800bb2e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bb32:	f7fb fdf7 	bl	8007724 <read_int>
							sprintf(msg, "%i", max_speed_read);
 800bb36:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bb40:	4980      	ldr	r1, [pc, #512]	; (800bd44 <main+0x4564>)
 800bb42:	4618      	mov	r0, r3
 800bb44:	f007 f804 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bb48:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7f4 fb51 	bl	80001f4 <strlen>
 800bb52:	4603      	mov	r3, r0
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bb5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb5e:	4878      	ldr	r0, [pc, #480]	; (800bd40 <main+0x4560>)
 800bb60:	f7fa ff28 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Min Speed: ");
 800bb64:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bb68:	4a77      	ldr	r2, [pc, #476]	; (800bd48 <main+0x4568>)
 800bb6a:	461c      	mov	r4, r3
 800bb6c:	4615      	mov	r5, r2
 800bb6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb72:	682b      	ldr	r3, [r5, #0]
 800bb74:	6023      	str	r3, [r4, #0]
								HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bb76:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f4 fb3a 	bl	80001f4 <strlen>
 800bb80:	4603      	mov	r3, r0
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb8c:	486c      	ldr	r0, [pc, #432]	; (800bd40 <main+0x4560>)
 800bb8e:	f7fa ff11 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &min_speed_read);
 800bb92:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800bb96:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800bb9a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800bb9e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bba2:	f7fb fdbf 	bl	8007724 <read_int>
							sprintf(msg, "%i", min_speed_read);
 800bba6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bbb0:	4964      	ldr	r1, [pc, #400]	; (800bd44 <main+0x4564>)
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f006 ffcc 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bbb8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f4 fb19 	bl	80001f4 <strlen>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbce:	485c      	ldr	r0, [pc, #368]	; (800bd40 <main+0x4560>)
 800bbd0:	f7fa fef0 	bl	80069b4 <HAL_UART_Transmit>
							max_speed = (uint16_t)(max_speed_read);
 800bbd4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
							min_speed = (uint16_t)(min_speed_read);
 800bbde:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
							break;
 800bbe8:	bf00      	nop
						}

						sprintf(msg, "\n\rPendulum PID Gains: \tP: %.02f; I: %.02f; D: %.02f", proportional, integral, derivative);
 800bbea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f4 fcc1 	bl	8000578 <__aeabi_f2d>
 800bbf6:	4682      	mov	sl, r0
 800bbf8:	468b      	mov	fp, r1
 800bbfa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f4 fcb9 	bl	8000578 <__aeabi_f2d>
 800bc06:	4604      	mov	r4, r0
 800bc08:	460d      	mov	r5, r1
 800bc0a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f4 fcb1 	bl	8000578 <__aeabi_f2d>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800bc1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc22:	e9cd 4500 	strd	r4, r5, [sp]
 800bc26:	4652      	mov	r2, sl
 800bc28:	465b      	mov	r3, fp
 800bc2a:	4948      	ldr	r1, [pc, #288]	; (800bd4c <main+0x456c>)
 800bc2c:	f006 ff90 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800bc30:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f4 fadd 	bl	80001f4 <strlen>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc46:	483e      	ldr	r0, [pc, #248]	; (800bd40 <main+0x4560>)
 800bc48:	f7fa feb4 	bl	80069b4 <HAL_UART_Transmit>
						sprintf(msg, "\n\rRotor PID Gains: \tP: %.02f; I: %.02f; D: %.02f", rotor_p_gain, rotor_i_gain, rotor_d_gain);
 800bc4c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f4 fc90 	bl	8000578 <__aeabi_f2d>
 800bc58:	4682      	mov	sl, r0
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7f4 fc88 	bl	8000578 <__aeabi_f2d>
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7f4 fc80 	bl	8000578 <__aeabi_f2d>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800bc80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc84:	e9cd 4500 	strd	r4, r5, [sp]
 800bc88:	4652      	mov	r2, sl
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	4930      	ldr	r1, [pc, #192]	; (800bd50 <main+0x4570>)
 800bc8e:	f006 ff5f 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800bc92:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f4 faac 	bl	80001f4 <strlen>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bca8:	4825      	ldr	r0, [pc, #148]	; (800bd40 <main+0x4560>)
 800bcaa:	f7fa fe83 	bl	80069b4 <HAL_UART_Transmit>
						if (select_suspended_mode == 1){
 800bcae:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	f040 83e9 	bne.w	800c48c <main+0x4cac>
							sprintf(msg, "\n\rSuspended Mode gains must be negative");
 800bcba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bcbe:	4a25      	ldr	r2, [pc, #148]	; (800bd54 <main+0x4574>)
 800bcc0:	461c      	mov	r4, r3
 800bcc2:	4615      	mov	r5, r2
 800bcc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bccc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bcd0:	e884 0003 	stmia.w	r4, {r0, r1}
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg),HAL_MAX_DELAY);
 800bcd4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f4 fa8b 	bl	80001f4 <strlen>
 800bcde:	4603      	mov	r3, r0
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcea:	4815      	ldr	r0, [pc, #84]	; (800bd40 <main+0x4560>)
 800bcec:	f7fa fe62 	bl	80069b4 <HAL_UART_Transmit>
						}

					break;
 800bcf0:	e3cc      	b.n	800c48c <main+0x4cac>

						case 11:
							enable_rotor_actuator_test = 1;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
							enable_encoder_test = 1;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
							sprintf(msg, "\n\rTest Mode Configured");
 800bcfe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bd02:	4a15      	ldr	r2, [pc, #84]	; (800bd58 <main+0x4578>)
 800bd04:	461c      	mov	r4, r3
 800bd06:	4615      	mov	r5, r2
 800bd08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd10:	6020      	str	r0, [r4, #0]
 800bd12:	3404      	adds	r4, #4
 800bd14:	8021      	strh	r1, [r4, #0]
 800bd16:	3402      	adds	r4, #2
 800bd18:	0c0b      	lsrs	r3, r1, #16
 800bd1a:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800bd1c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f4 fa67 	bl	80001f4 <strlen>
 800bd26:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800bd28:	b29a      	uxth	r2, r3
 800bd2a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd32:	4803      	ldr	r0, [pc, #12]	; (800bd40 <main+0x4560>)
 800bd34:	f7fa fe3e 	bl	80069b4 <HAL_UART_Transmit>
						break;
 800bd38:	e3a9      	b.n	800c48e <main+0x4cae>
 800bd3a:	bf00      	nop
 800bd3c:	08018b7c 	.word	0x08018b7c
 800bd40:	20000f20 	.word	0x20000f20
 800bd44:	0801875c 	.word	0x0801875c
 800bd48:	08018b90 	.word	0x08018b90
 800bd4c:	08018bdc 	.word	0x08018bdc
 800bd50:	08018c10 	.word	0x08018c10
 800bd54:	08018c44 	.word	0x08018c44
 800bd58:	08018d00 	.word	0x08018d00

						case 12:
							enable_rotor_actuator_high_speed_test = 1;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
							sprintf(msg, "\n\rHigh Speed Test Mode Configured");
 800bd62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bd66:	4ad4      	ldr	r2, [pc, #848]	; (800c0b8 <main+0x48d8>)
 800bd68:	461c      	mov	r4, r3
 800bd6a:	4615      	mov	r5, r2
 800bd6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	8023      	strh	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800bd78:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7f4 fa39 	bl	80001f4 <strlen>
 800bd82:	4603      	mov	r3, r0
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd8e:	48cb      	ldr	r0, [pc, #812]	; (800c0bc <main+0x48dc>)
 800bd90:	f7fa fe10 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Motor Speed Min: ");
 800bd94:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bd98:	4ac9      	ldr	r2, [pc, #804]	; (800c0c0 <main+0x48e0>)
 800bd9a:	461c      	mov	r4, r3
 800bd9c:	4615      	mov	r5, r2
 800bd9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bda0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bda2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bda6:	c403      	stmia	r4!, {r0, r1}
 800bda8:	8022      	strh	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800bdaa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7f4 fa20 	bl	80001f4 <strlen>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc0:	48be      	ldr	r0, [pc, #760]	; (800c0bc <main+0x48dc>)
 800bdc2:	f7fa fdf7 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_test_speed_min);
 800bdc6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bdca:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800bdce:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800bdd2:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bdd6:	f7fb fca5 	bl	8007724 <read_int>
							sprintf(msg, "%i", rotor_test_speed_min);
 800bdda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bde4:	49b7      	ldr	r1, [pc, #732]	; (800c0c4 <main+0x48e4>)
 800bde6:	4618      	mov	r0, r3
 800bde8:	f006 feb2 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800bdec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7f4 f9ff 	bl	80001f4 <strlen>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be02:	48ae      	ldr	r0, [pc, #696]	; (800c0bc <main+0x48dc>)
 800be04:	f7fa fdd6 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Motor Speed Max: ");
 800be08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be0c:	4aae      	ldr	r2, [pc, #696]	; (800c0c8 <main+0x48e8>)
 800be0e:	461c      	mov	r4, r3
 800be10:	4615      	mov	r5, r2
 800be12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800be1a:	c403      	stmia	r4!, {r0, r1}
 800be1c:	8022      	strh	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800be1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be22:	4618      	mov	r0, r3
 800be24:	f7f4 f9e6 	bl	80001f4 <strlen>
 800be28:	4603      	mov	r3, r0
 800be2a:	b29a      	uxth	r2, r3
 800be2c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800be30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be34:	48a1      	ldr	r0, [pc, #644]	; (800c0bc <main+0x48dc>)
 800be36:	f7fa fdbd 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_test_speed_max);
 800be3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800be3e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800be42:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800be46:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800be4a:	f7fb fc6b 	bl	8007724 <read_int>
							sprintf(msg, "%i", rotor_test_speed_max);
 800be4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be58:	499a      	ldr	r1, [pc, #616]	; (800c0c4 <main+0x48e4>)
 800be5a:	4618      	mov	r0, r3
 800be5c:	f006 fe78 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800be60:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be64:	4618      	mov	r0, r3
 800be66:	f7f4 f9c5 	bl	80001f4 <strlen>
 800be6a:	4603      	mov	r3, r0
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800be72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be76:	4891      	ldr	r0, [pc, #580]	; (800c0bc <main+0x48dc>)
 800be78:	f7fa fd9c 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Motor Acceleration Max: ");
 800be7c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be80:	4a92      	ldr	r2, [pc, #584]	; (800c0cc <main+0x48ec>)
 800be82:	461c      	mov	r4, r3
 800be84:	4615      	mov	r5, r2
 800be86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800be8e:	682b      	ldr	r3, [r5, #0]
 800be90:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800be92:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800be96:	4618      	mov	r0, r3
 800be98:	f7f4 f9ac 	bl	80001f4 <strlen>
 800be9c:	4603      	mov	r3, r0
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bea8:	4884      	ldr	r0, [pc, #528]	; (800c0bc <main+0x48dc>)
 800beaa:	f7fa fd83 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &rotor_test_acceleration_max);
 800beae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800beb2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800beb6:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800beba:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bebe:	f7fb fc31 	bl	8007724 <read_int>
							sprintf(msg, "%i", rotor_test_acceleration_max);
 800bec2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800becc:	497d      	ldr	r1, [pc, #500]	; (800c0c4 <main+0x48e4>)
 800bece:	4618      	mov	r0, r3
 800bed0:	f006 fe3e 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bed4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bed8:	4618      	mov	r0, r3
 800beda:	f7f4 f98b 	bl	80001f4 <strlen>
 800bede:	4603      	mov	r3, r0
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beea:	4874      	ldr	r0, [pc, #464]	; (800c0bc <main+0x48dc>)
 800beec:	f7fa fd62 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter Motor Deceleration Max: ");
 800bef0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bef4:	4a76      	ldr	r2, [pc, #472]	; (800c0d0 <main+0x48f0>)
 800bef6:	461c      	mov	r4, r3
 800bef8:	4615      	mov	r5, r2
 800befa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800befc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800befe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf02:	682b      	ldr	r3, [r5, #0]
 800bf04:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800bf06:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7f4 f972 	bl	80001f4 <strlen>
 800bf10:	4603      	mov	r3, r0
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf1c:	4867      	ldr	r0, [pc, #412]	; (800c0bc <main+0x48dc>)
 800bf1e:	f7fa fd49 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &swing_deceleration_max);
 800bf22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf26:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800bf2a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800bf2e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bf32:	f7fb fbf7 	bl	8007724 <read_int>
							sprintf(msg, "%i", swing_deceleration_max);
 800bf36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bf40:	4960      	ldr	r1, [pc, #384]	; (800c0c4 <main+0x48e4>)
 800bf42:	4618      	mov	r0, r3
 800bf44:	f006 fe04 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bf48:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f4 f951 	bl	80001f4 <strlen>
 800bf52:	4603      	mov	r3, r0
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bf5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5e:	4857      	ldr	r0, [pc, #348]	; (800c0bc <main+0x48dc>)
 800bf60:	f7fa fd28 	bl	80069b4 <HAL_UART_Transmit>

							sprintf(msg, "\n\rEnter Number of Swing Cycles: ");
 800bf64:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bf68:	4a5a      	ldr	r2, [pc, #360]	; (800c0d4 <main+0x48f4>)
 800bf6a:	461c      	mov	r4, r3
 800bf6c:	4615      	mov	r5, r2
 800bf6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf76:	682b      	ldr	r3, [r5, #0]
 800bf78:	7023      	strb	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bf7a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f4 f938 	bl	80001f4 <strlen>
 800bf84:	4603      	mov	r3, r0
 800bf86:	b29a      	uxth	r2, r3
 800bf88:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf90:	484a      	ldr	r0, [pc, #296]	; (800c0bc <main+0x48dc>)
 800bf92:	f7fa fd0f 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &swing_cycles);
 800bf96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf9a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800bf9e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800bfa2:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800bfa6:	f7fb fbbd 	bl	8007724 <read_int>
							sprintf(msg, "%i", swing_cycles);
 800bfaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bfb4:	4943      	ldr	r1, [pc, #268]	; (800c0c4 <main+0x48e4>)
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f006 fdca 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bfbc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f4 f917 	bl	80001f4 <strlen>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800bfce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfd2:	483a      	ldr	r0, [pc, #232]	; (800c0bc <main+0x48dc>)
 800bfd4:	f7fa fcee 	bl	80069b4 <HAL_UART_Transmit>
							m = 0;
 800bfd8:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]

							sprintf(msg, "\n\rEnter Start Angle %i: ", m);
 800bfe0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800bfe4:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	493b      	ldr	r1, [pc, #236]	; (800c0d8 <main+0x48f8>)
 800bfec:	f006 fdb0 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800bff0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7f4 f8fd 	bl	80001f4 <strlen>
 800bffa:	4603      	mov	r3, r0
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c006:	482d      	ldr	r0, [pc, #180]	; (800c0bc <main+0x48dc>)
 800c008:	f7fa fcd4 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &start_angle_a[m]);
 800c00c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800c010:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800c01e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800c022:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800c026:	f7fb fb7d 	bl	8007724 <read_int>
							sprintf(msg, "%i", start_angle_a[m]);
 800c02a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c02e:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800c032:	6812      	ldr	r2, [r2, #0]
 800c034:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c038:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c03c:	4921      	ldr	r1, [pc, #132]	; (800c0c4 <main+0x48e4>)
 800c03e:	4618      	mov	r0, r3
 800c040:	f006 fd86 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800c044:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f4 f8d3 	bl	80001f4 <strlen>
 800c04e:	4603      	mov	r3, r0
 800c050:	b29a      	uxth	r2, r3
 800c052:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c05a:	4818      	ldr	r0, [pc, #96]	; (800c0bc <main+0x48dc>)
 800c05c:	f7fa fcaa 	bl	80069b4 <HAL_UART_Transmit>
							sprintf(msg, "\n\rEnter End Angle %i: ", m);
 800c060:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c064:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	491c      	ldr	r1, [pc, #112]	; (800c0dc <main+0x48fc>)
 800c06c:	f006 fd70 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800c070:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c074:	4618      	mov	r0, r3
 800c076:	f7f4 f8bd 	bl	80001f4 <strlen>
 800c07a:	4603      	mov	r3, r0
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c086:	480d      	ldr	r0, [pc, #52]	; (800c0bc <main+0x48dc>)
 800c088:	f7fa fc94 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &end_angle_a[m]);
 800c08c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800c090:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	4413      	add	r3, r2
 800c09a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800c09e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800c0a2:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800c0a6:	f7fb fb3d 	bl	8007724 <read_int>
							sprintf(msg, "%i", end_angle_a[m]);
 800c0aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c0ae:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	e014      	b.n	800c0e0 <main+0x4900>
 800c0b6:	bf00      	nop
 800c0b8:	08018d18 	.word	0x08018d18
 800c0bc:	20000f20 	.word	0x20000f20
 800c0c0:	08018d3c 	.word	0x08018d3c
 800c0c4:	0801875c 	.word	0x0801875c
 800c0c8:	08018d58 	.word	0x08018d58
 800c0cc:	08018d74 	.word	0x08018d74
 800c0d0:	08018d98 	.word	0x08018d98
 800c0d4:	08018dbc 	.word	0x08018dbc
 800c0d8:	08018de0 	.word	0x08018de0
 800c0dc:	08018dfc 	.word	0x08018dfc
 800c0e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c0e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c0e8:	49b0      	ldr	r1, [pc, #704]	; (800c3ac <main+0x4bcc>)
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f006 fd30 	bl	8012b50 <sprintf>
							sprintf(msg, "\n\rEnter Dwell (milliseconds) %i: ",m);
 800c0f0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c0f4:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	49ad      	ldr	r1, [pc, #692]	; (800c3b0 <main+0x4bd0>)
 800c0fc:	f006 fd28 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800c100:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c104:	4618      	mov	r0, r3
 800c106:	f7f4 f875 	bl	80001f4 <strlen>
 800c10a:	4603      	mov	r3, r0
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c116:	48a7      	ldr	r0, [pc, #668]	; (800c3b4 <main+0x4bd4>)
 800c118:	f7fa fc4c 	bl	80069b4 <HAL_UART_Transmit>
							read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx , &readBytes, &motion_dwell_a[m]);
 800c11c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c120:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800c12e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800c132:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800c136:	f7fb faf5 	bl	8007724 <read_int>
							sprintf(msg, "%i", motion_dwell_a[m]);
 800c13a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c13e:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c148:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c14c:	4997      	ldr	r1, [pc, #604]	; (800c3ac <main+0x4bcc>)
 800c14e:	4618      	mov	r0, r3
 800c150:	f006 fcfe 	bl	8012b50 <sprintf>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800c154:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c158:	4618      	mov	r0, r3
 800c15a:	f7f4 f84b 	bl	80001f4 <strlen>
 800c15e:	4603      	mov	r3, r0
 800c160:	b29a      	uxth	r2, r3
 800c162:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c16a:	4892      	ldr	r0, [pc, #584]	; (800c3b4 <main+0x4bd4>)
 800c16c:	f7fa fc22 	bl	80069b4 <HAL_UART_Transmit>
							//m = m + 1;
							//}
							break;
 800c170:	e18d      	b.n	800c48e <main+0x4cae>

						case 13:
							enable_motor_actuator_characterization_mode = 1;
 800c172:	2301      	movs	r3, #1
 800c174:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
							sprintf(msg, "\n\rMotor Characterization Mode Configured");
 800c178:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c17c:	4a8e      	ldr	r2, [pc, #568]	; (800c3b8 <main+0x4bd8>)
 800c17e:	461c      	mov	r4, r3
 800c180:	4615      	mov	r5, r2
 800c182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c18a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c18e:	c403      	stmia	r4!, {r0, r1}
 800c190:	7022      	strb	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,strlen(msg), HAL_MAX_DELAY);
 800c192:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c196:	4618      	mov	r0, r3
 800c198:	f7f4 f82c 	bl	80001f4 <strlen>
 800c19c:	4603      	mov	r3, r0
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c1a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1a8:	4882      	ldr	r0, [pc, #520]	; (800c3b4 <main+0x4bd4>)
 800c1aa:	f7fa fc03 	bl	80069b4 <HAL_UART_Transmit>

							rotor_test_speed_min = 200;
 800c1ae:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c1b2:	22c8      	movs	r2, #200	; 0xc8
 800c1b4:	601a      	str	r2, [r3, #0]
							rotor_test_speed_max = 1000;
 800c1b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c1ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1be:	601a      	str	r2, [r3, #0]
							rotor_test_acceleration_max = 3000;
 800c1c0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800c1c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c1c8:	601a      	str	r2, [r3, #0]
							swing_deceleration_max = 3000;
 800c1ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c1ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800c1d2:	601a      	str	r2, [r3, #0]
							torq_current_val = 800;
 800c1d4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800c1d8:	4a78      	ldr	r2, [pc, #480]	; (800c3bc <main+0x4bdc>)
 800c1da:	601a      	str	r2, [r3, #0]
							rotor_chirp_amplitude = 5;
 800c1dc:	4b78      	ldr	r3, [pc, #480]	; (800c3c0 <main+0x4be0>)
 800c1de:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800c1e2:	6013      	str	r3, [r2, #0]
							rotor_chirp_start_freq = 0.05;
 800c1e4:	4b77      	ldr	r3, [pc, #476]	; (800c3c4 <main+0x4be4>)
 800c1e6:	f207 5244 	addw	r2, r7, #1348	; 0x544
 800c1ea:	6013      	str	r3, [r2, #0]
							rotor_chirp_end_freq = 5;
 800c1ec:	4b74      	ldr	r3, [pc, #464]	; (800c3c0 <main+0x4be0>)
 800c1ee:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800c1f2:	6013      	str	r3, [r2, #0]
							rotor_chirp_period = 40;
 800c1f4:	4b74      	ldr	r3, [pc, #464]	; (800c3c8 <main+0x4be8>)
 800c1f6:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 800c1fa:	6013      	str	r3, [r2, #0]

							break;
 800c1fc:	e147      	b.n	800c48e <main+0x4cae>

						case 14:
							enable_pendulum_sysid_test = 1;
 800c1fe:	2301      	movs	r3, #1
 800c200:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
							sprintf(msg, "\n\rPendulum System Identification Test Mode Configured");
 800c204:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c208:	4a70      	ldr	r2, [pc, #448]	; (800c3cc <main+0x4bec>)
 800c20a:	461c      	mov	r4, r3
 800c20c:	4615      	mov	r5, r2
 800c20e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c21a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c21e:	6020      	str	r0, [r4, #0]
 800c220:	3404      	adds	r4, #4
 800c222:	8021      	strh	r1, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800c224:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c228:	4618      	mov	r0, r3
 800c22a:	f7f3 ffe3 	bl	80001f4 <strlen>
 800c22e:	4603      	mov	r3, r0
 800c230:	b29a      	uxth	r2, r3
 800c232:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c23a:	485e      	ldr	r0, [pc, #376]	; (800c3b4 <main+0x4bd4>)
 800c23c:	f7fa fbba 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c240:	e125      	b.n	800c48e <main+0x4cae>

						case 15:
							enable_rotor_actuator_control = 1;
 800c242:	2301      	movs	r3, #1
 800c244:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
							sprintf(msg, "\n\rRotor Actuator Control Mode Configured");
 800c248:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c24c:	4a60      	ldr	r2, [pc, #384]	; (800c3d0 <main+0x4bf0>)
 800c24e:	461c      	mov	r4, r3
 800c250:	4615      	mov	r5, r2
 800c252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c25a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c25e:	c403      	stmia	r4!, {r0, r1}
 800c260:	7022      	strb	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800c262:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c266:	4618      	mov	r0, r3
 800c268:	f7f3 ffc4 	bl	80001f4 <strlen>
 800c26c:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c26e:	b29a      	uxth	r2, r3
 800c270:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c278:	484e      	ldr	r0, [pc, #312]	; (800c3b4 <main+0x4bd4>)
 800c27a:	f7fa fb9b 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c27e:	e106      	b.n	800c48e <main+0x4cae>

						case 16:
							enable_rotor_tracking_comb_signal = 1;
 800c280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c284:	2201      	movs	r2, #1
 800c286:	601a      	str	r2, [r3, #0]
							rotor_track_comb_amplitude = ROTOR_TRACK_COMB_SIGNAL_AMPLITUDE * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 800c288:	4b52      	ldr	r3, [pc, #328]	; (800c3d4 <main+0x4bf4>)
 800c28a:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 800c28e:	6013      	str	r3, [r2, #0]
							sprintf(msg, "\n\rLoad Disturbance Sensitivity Spectrum Analyzer Enabled");
 800c290:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c294:	4a50      	ldr	r2, [pc, #320]	; (800c3d8 <main+0x4bf8>)
 800c296:	461c      	mov	r4, r3
 800c298:	4615      	mov	r5, r2
 800c29a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c29c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c29e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c2aa:	c403      	stmia	r4!, {r0, r1}
 800c2ac:	7022      	strb	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800c2ae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f3 ff9e 	bl	80001f4 <strlen>
 800c2b8:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2c4:	483b      	ldr	r0, [pc, #236]	; (800c3b4 <main+0x4bd4>)
 800c2c6:	f7fa fb75 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c2ca:	e0e0      	b.n	800c48e <main+0x4cae>

						case 17:
							enable_disturbance_rejection_step = 1;
 800c2cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]
							enable_rotor_position_step_response_cycle = 1;
 800c2d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c2d8:	2201      	movs	r2, #1
 800c2da:	601a      	str	r2, [r3, #0]
							sprintf(msg, "\n\rLoad Disturbance Sensitivity Step Response Enabled");
 800c2dc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c2e0:	4a3e      	ldr	r2, [pc, #248]	; (800c3dc <main+0x4bfc>)
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	4615      	mov	r5, r2
 800c2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c2f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c2f6:	6020      	str	r0, [r4, #0]
 800c2f8:	3404      	adds	r4, #4
 800c2fa:	7021      	strb	r1, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800c2fc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c300:	4618      	mov	r0, r3
 800c302:	f7f3 ff77 	bl	80001f4 <strlen>
 800c306:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c308:	b29a      	uxth	r2, r3
 800c30a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c312:	4828      	ldr	r0, [pc, #160]	; (800c3b4 <main+0x4bd4>)
 800c314:	f7fa fb4e 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c318:	e0b9      	b.n	800c48e <main+0x4cae>

						case 18:
							enable_noise_rejection_step = 1;
 800c31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c31e:	2201      	movs	r2, #1
 800c320:	601a      	str	r2, [r3, #0]
							enable_rotor_position_step_response_cycle = 1;
 800c322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c326:	2201      	movs	r2, #1
 800c328:	601a      	str	r2, [r3, #0]
							sprintf(msg, "\n\rNoise Rejection Sensitivity Step Response Enabled");
 800c32a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c32e:	4a2c      	ldr	r2, [pc, #176]	; (800c3e0 <main+0x4c00>)
 800c330:	461c      	mov	r4, r3
 800c332:	4615      	mov	r5, r2
 800c334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c33a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c33c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c33e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	6023      	str	r3, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800c344:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c348:	4618      	mov	r0, r3
 800c34a:	f7f3 ff53 	bl	80001f4 <strlen>
 800c34e:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c350:	b29a      	uxth	r2, r3
 800c352:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c35a:	4816      	ldr	r0, [pc, #88]	; (800c3b4 <main+0x4bd4>)
 800c35c:	f7fa fb2a 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c360:	e095      	b.n	800c48e <main+0x4cae>

						case 19:
							enable_plant_rejection_step = 1;
 800c362:	f107 0320 	add.w	r3, r7, #32
 800c366:	2201      	movs	r2, #1
 800c368:	601a      	str	r2, [r3, #0]
							enable_rotor_position_step_response_cycle = 1;
 800c36a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
							sprintf(msg, "\n\rPlant Sensitivity Step Response Enabled");
 800c372:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c376:	4a1b      	ldr	r2, [pc, #108]	; (800c3e4 <main+0x4c04>)
 800c378:	461c      	mov	r4, r3
 800c37a:	4615      	mov	r5, r2
 800c37c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c37e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c388:	c403      	stmia	r4!, {r0, r1}
 800c38a:	8022      	strh	r2, [r4, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
									strlen(msg), HAL_MAX_DELAY);
 800c38c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c390:	4618      	mov	r0, r3
 800c392:	f7f3 ff2f 	bl	80001f4 <strlen>
 800c396:	4603      	mov	r3, r0
							HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c398:	b29a      	uxth	r2, r3
 800c39a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c39e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a2:	4804      	ldr	r0, [pc, #16]	; (800c3b4 <main+0x4bd4>)
 800c3a4:	f7fa fb06 	bl	80069b4 <HAL_UART_Transmit>
							break;
 800c3a8:	e071      	b.n	800c48e <main+0x4cae>
 800c3aa:	bf00      	nop
 800c3ac:	0801875c 	.word	0x0801875c
 800c3b0:	08018e14 	.word	0x08018e14
 800c3b4:	20000f20 	.word	0x20000f20
 800c3b8:	08018e38 	.word	0x08018e38
 800c3bc:	44480000 	.word	0x44480000
 800c3c0:	40a00000 	.word	0x40a00000
 800c3c4:	3d4ccccd 	.word	0x3d4ccccd
 800c3c8:	42200000 	.word	0x42200000
 800c3cc:	08018e64 	.word	0x08018e64
 800c3d0:	08018e9c 	.word	0x08018e9c
 800c3d4:	3f638ef3 	.word	0x3f638ef3
 800c3d8:	08018ec8 	.word	0x08018ec8
 800c3dc:	08018f04 	.word	0x08018f04
 800c3e0:	08018f3c 	.word	0x08018f3c
 800c3e4:	08018f70 	.word	0x08018f70


				default:

					select_suspended_mode = 0;
 800c3e8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
					proportional = 		PRIMARY_PROPORTIONAL_MODE_1;
 800c3f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c3f4:	4a28      	ldr	r2, [pc, #160]	; (800c498 <main+0x4cb8>)
 800c3f6:	601a      	str	r2, [r3, #0]
					integral = 			PRIMARY_INTEGRAL_MODE_1;
 800c3f8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	601a      	str	r2, [r3, #0]
					derivative = 		PRIMARY_DERIVATIVE_MODE_1;
 800c402:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c406:	4a25      	ldr	r2, [pc, #148]	; (800c49c <main+0x4cbc>)
 800c408:	601a      	str	r2, [r3, #0]
					rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_1;
 800c40a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800c40e:	4a24      	ldr	r2, [pc, #144]	; (800c4a0 <main+0x4cc0>)
 800c410:	601a      	str	r2, [r3, #0]
					rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_1;
 800c412:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800c416:	f04f 0200 	mov.w	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
					rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_1;
 800c41c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800c420:	4a20      	ldr	r2, [pc, #128]	; (800c4a4 <main+0x4cc4>)
 800c422:	601a      	str	r2, [r3, #0]
					max_speed = 		MAX_SPEED_MODE_1;
 800c424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c428:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = 		MIN_SPEED_MODE_1;
 800c42c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c430:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					enable_rotor_position_step_response_cycle = 0;
 800c434:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
					enable_mod_sin_rotor_tracking = 1;
 800c43c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800c440:	2201      	movs	r2, #1
 800c442:	601a      	str	r2, [r3, #0]
					sprintf(msg, "\n\rDefault Mode 1 Configured");
 800c444:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c448:	4a17      	ldr	r2, [pc, #92]	; (800c4a8 <main+0x4cc8>)
 800c44a:	461c      	mov	r4, r3
 800c44c:	4615      	mov	r5, r2
 800c44e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c452:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
							strlen(msg), HAL_MAX_DELAY);
 800c45a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f3 fec8 	bl	80001f4 <strlen>
 800c464:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c466:	b29a      	uxth	r2, r3
 800c468:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c470:	480e      	ldr	r0, [pc, #56]	; (800c4ac <main+0x4ccc>)
 800c472:	f7fa fa9f 	bl	80069b4 <HAL_UART_Transmit>
					break;
 800c476:	e00a      	b.n	800c48e <main+0x4cae>
					break;
 800c478:	bf00      	nop
 800c47a:	e019      	b.n	800c4b0 <main+0x4cd0>
					break;
 800c47c:	bf00      	nop
 800c47e:	e017      	b.n	800c4b0 <main+0x4cd0>
					break;
 800c480:	bf00      	nop
 800c482:	e015      	b.n	800c4b0 <main+0x4cd0>
					break;
 800c484:	bf00      	nop
 800c486:	e013      	b.n	800c4b0 <main+0x4cd0>
					break;
 800c488:	bf00      	nop
 800c48a:	e011      	b.n	800c4b0 <main+0x4cd0>
					break;
 800c48c:	bf00      	nop
				}

				/*
				* Exit user input read loop with selected or default mode
				*/
				break;
 800c48e:	e00f      	b.n	800c4b0 <main+0x4cd0>
					continue;
 800c490:	bf00      	nop
			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
 800c492:	f7fc bd59 	b.w	8008f48 <main+0x1768>
 800c496:	bf00      	nop
 800c498:	44305333 	.word	0x44305333
 800c49c:	42bccccd 	.word	0x42bccccd
 800c4a0:	4087ae14 	.word	0x4087ae14
 800c4a4:	41047ae1 	.word	0x41047ae1
 800c4a8:	08018f9c 	.word	0x08018f9c
 800c4ac:	20000f20 	.word	0x20000f20

		/*
		* Set Motor Speed Profile
		*/

		BSP_MotorControl_SoftStop(0);
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	f7f7 fcad 	bl	8003e10 <BSP_MotorControl_SoftStop>
		BSP_MotorControl_WaitWhileActive(0);
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f7f7 fcee 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
		L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 800c4bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800c4c0:	edd3 7a00 	vldr	s15, [r3]
 800c4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800c4c8:	2109      	movs	r1, #9
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	f7f5 fcae 	bl	8001e2c <L6474_SetAnalogValue>

		BSP_MotorControl_SetMaxSpeed(0, max_speed);
 800c4d0:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	f7f7 fc4a 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_SetMinSpeed(0, min_speed);
 800c4dc:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f7f7 fc6c 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
		BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 800c4e8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	f7f7 fbcd 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
		BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 800c4f2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	f7f7 fbf0 	bl	8003cdc <BSP_MotorControl_SetDeceleration>



		sprintf(msg, "\n\rMotor Profile Speeds Set at Min %u Max %u Steps per Second and Suspended Mode %i",
 800c4fc:	f8b7 2606 	ldrh.w	r2, [r7, #1542]	; 0x606
 800c500:	f8b7 15f6 	ldrh.w	r1, [r7, #1526]	; 0x5f6
 800c504:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	460b      	mov	r3, r1
 800c512:	49c5      	ldr	r1, [pc, #788]	; (800c828 <main+0x5048>)
 800c514:	f006 fb1c 	bl	8012b50 <sprintf>
				min_speed, max_speed, select_suspended_mode);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
				strlen(msg), HAL_MAX_DELAY);
 800c518:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f3 fe69 	bl	80001f4 <strlen>
 800c522:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c524:	b29a      	uxth	r2, r3
 800c526:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c52e:	48bf      	ldr	r0, [pc, #764]	; (800c82c <main+0x504c>)
 800c530:	f7fa fa40 	bl	80069b4 <HAL_UART_Transmit>

		sprintf(msg, "\n\rMotor Torque Current Set at %f",
 800c534:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f4 f81c 	bl	8000578 <__aeabi_f2d>
 800c540:	4603      	mov	r3, r0
 800c542:	460c      	mov	r4, r1
 800c544:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c548:	461a      	mov	r2, r3
 800c54a:	4623      	mov	r3, r4
 800c54c:	49b8      	ldr	r1, [pc, #736]	; (800c830 <main+0x5050>)
 800c54e:	f006 faff 	bl	8012b50 <sprintf>
				torq_current_val);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
				strlen(msg), HAL_MAX_DELAY);
 800c552:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c556:	4618      	mov	r0, r3
 800c558:	f7f3 fe4c 	bl	80001f4 <strlen>
 800c55c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c55e:	b29a      	uxth	r2, r3
 800c560:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c568:	48b0      	ldr	r0, [pc, #704]	; (800c82c <main+0x504c>)
 800c56a:	f7fa fa23 	bl	80069b4 <HAL_UART_Transmit>

		if (select_suspended_mode == 1){
 800c56e:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d118      	bne.n	800c5aa <main+0x4dca>
		sprintf(msg, "\n\rSuspended Mode selected...");
 800c578:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c57c:	4aad      	ldr	r2, [pc, #692]	; (800c834 <main+0x5054>)
 800c57e:	461c      	mov	r4, r3
 800c580:	4615      	mov	r5, r2
 800c582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c586:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c58a:	c407      	stmia	r4!, {r0, r1, r2}
 800c58c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
				strlen(msg), HAL_MAX_DELAY);
 800c58e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c592:	4618      	mov	r0, r3
 800c594:	f7f3 fe2e 	bl	80001f4 <strlen>
 800c598:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5a4:	48a1      	ldr	r0, [pc, #644]	; (800c82c <main+0x504c>)
 800c5a6:	f7fa fa05 	bl	80069b4 <HAL_UART_Transmit>
		}

/*
 *		Configure Primary and Secondary PID controller data structures
 */
		pid_filter->integrator_windup_limit = windup;
 800c5aa:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f507 7261 	add.w	r2, r7, #900	; 0x384
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	609a      	str	r2, [r3, #8]
		pid_filter->warn = 0;
 800c5b8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	60da      	str	r2, [r3, #12]
		pid_filter->p_gain = proportional;
 800c5c2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	601a      	str	r2, [r3, #0]
		pid_filter->i_gain = integral;
 800c5d0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	605a      	str	r2, [r3, #4]
		pid_filter->d_gain = derivative;
 800c5de:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	611a      	str	r2, [r3, #16]

		rotor_pid->integrator_windup_limit = rotor_windup;
 800c5ec:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f507 7260 	add.w	r2, r7, #896	; 0x380
 800c5f6:	6812      	ldr	r2, [r2, #0]
 800c5f8:	609a      	str	r2, [r3, #8]
		rotor_pid->warn = 0;
 800c5fa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2200      	movs	r2, #0
 800c602:	60da      	str	r2, [r3, #12]
		rotor_pid->p_gain = rotor_p_gain;
 800c604:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	601a      	str	r2, [r3, #0]
		rotor_pid->i_gain = rotor_i_gain;
 800c612:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	605a      	str	r2, [r3, #4]
		rotor_pid->d_gain = rotor_d_gain;
 800c620:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	611a      	str	r2, [r3, #16]
		 *  Setting enable_pid enables control loop
		 *  Note, enable_pid may be reset to zero and disabling
		 *  control loop is user action to orient pendulum vertical
		 */

		enable_pid = ENABLE_PID;
 800c62e:	2301      	movs	r3, #1
 800c630:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

/*
 * High Speed Rotor Actuator Test
 */

		if (enable_rotor_actuator_high_speed_test == 1) {
 800c634:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800c638:	2b01      	cmp	r3, #1
 800c63a:	f040 8400 	bne.w	800ce3e <main+0x565e>
			i = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0

			/*
			 * Set Motor Speed Profile
			 */

			BSP_MotorControl_SetAcceleration(0,(uint16_t)(rotor_test_acceleration_max));
 800c644:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	2000      	movs	r0, #0
 800c650:	f7f7 fb1c 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
			BSP_MotorControl_SetDeceleration(0,(uint16_t)(swing_deceleration_max));
 800c654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	4619      	mov	r1, r3
 800c65e:	2000      	movs	r0, #0
 800c660:	f7f7 fb3c 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

			sprintf(msg, "\n\rMotor Profile Speeds Min %u Max %u",
 800c664:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c674:	4970      	ldr	r1, [pc, #448]	; (800c838 <main+0x5058>)
 800c676:	f006 fa6b 	bl	8012b50 <sprintf>
					rotor_test_speed_min, rotor_test_speed_max);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800c67a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c67e:	4618      	mov	r0, r3
 800c680:	f7f3 fdb8 	bl	80001f4 <strlen>
 800c684:	4603      	mov	r3, r0
 800c686:	b29a      	uxth	r2, r3
 800c688:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c690:	4866      	ldr	r0, [pc, #408]	; (800c82c <main+0x504c>)
 800c692:	f7fa f98f 	bl	80069b4 <HAL_UART_Transmit>

			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
					BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800c696:	2000      	movs	r0, #0
 800c698:	f7f7 fa22 	bl	8003ae0 <BSP_MotorControl_GetAcceleration>
 800c69c:	4603      	mov	r3, r0
			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
 800c69e:	461c      	mov	r4, r3
					BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	f7f7 fa65 	bl	8003b70 <BSP_MotorControl_GetDeceleration>
 800c6a6:	4603      	mov	r3, r0
			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
 800c6a8:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4963      	ldr	r1, [pc, #396]	; (800c83c <main+0x505c>)
 800c6b0:	f006 fa4e 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800c6b4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7f3 fd9b 	bl	80001f4 <strlen>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6ca:	4858      	ldr	r0, [pc, #352]	; (800c82c <main+0x504c>)
 800c6cc:	f7fa f972 	bl	80069b4 <HAL_UART_Transmit>

			/*
			* Set Rotor Position Zero
			*/

			rotor_position_set();
 800c6d0:	f7fa fe2c 	bl	800732c <rotor_position_set>
			ret = rotor_position_read(&rotor_position);
 800c6d4:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c6d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fa fe36 	bl	800734e <rotor_position_read>
 800c6e2:	6020      	str	r0, [r4, #0]

				sprintf(msg,
 800c6e4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c6e8:	4a55      	ldr	r2, [pc, #340]	; (800c840 <main+0x5060>)
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	4615      	mov	r5, r2
 800c6ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c6fe:	c403      	stmia	r4!, {r0, r1}
 800c700:	7022      	strb	r2, [r4, #0]
						"\r\n\r\n********  Starting Rotor High Speed Test  ********\r\n");
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800c702:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c706:	4618      	mov	r0, r3
 800c708:	f7f3 fd74 	bl	80001f4 <strlen>
 800c70c:	4603      	mov	r3, r0
 800c70e:	b29a      	uxth	r2, r3
 800c710:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c718:	4844      	ldr	r0, [pc, #272]	; (800c82c <main+0x504c>)
 800c71a:	f7fa f94b 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				sprintf(msg, "\n\rMotor Profile Speeds Min %u Max %u",
 800c71e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c72e:	4942      	ldr	r1, [pc, #264]	; (800c838 <main+0x5058>)
 800c730:	f006 fa0e 	bl	8012b50 <sprintf>
						rotor_test_speed_min, rotor_test_speed_max);
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800c734:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c738:	4618      	mov	r0, r3
 800c73a:	f7f3 fd5b 	bl	80001f4 <strlen>
 800c73e:	4603      	mov	r3, r0
 800c740:	b29a      	uxth	r2, r3
 800c742:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c74a:	4838      	ldr	r0, [pc, #224]	; (800c82c <main+0x504c>)
 800c74c:	f7fa f932 	bl	80069b4 <HAL_UART_Transmit>

				ret = encoder_position_read(&encoder_position, &htim3);
 800c750:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c754:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c758:	493a      	ldr	r1, [pc, #232]	; (800c844 <main+0x5064>)
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fa fe2a 	bl	80073b4 <encoder_position_read>
 800c760:	6020      	str	r0, [r4, #0]
				encoder_position_down = encoder_position;
 800c762:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
				sprintf(msg, "\n\rInitial encoder position: %i", encoder_position_down);
 800c76c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c770:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 800c774:	4934      	ldr	r1, [pc, #208]	; (800c848 <main+0x5068>)
 800c776:	4618      	mov	r0, r3
 800c778:	f006 f9ea 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800c77c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c780:	4618      	mov	r0, r3
 800c782:	f7f3 fd37 	bl	80001f4 <strlen>
 800c786:	4603      	mov	r3, r0
 800c788:	b29a      	uxth	r2, r3
 800c78a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c78e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c792:	4826      	ldr	r0, [pc, #152]	; (800c82c <main+0x504c>)
 800c794:	f7fa f90e 	bl	80069b4 <HAL_UART_Transmit>

				k = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
				m = 0;
 800c79e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
				tick_cycle_start = HAL_GetTick();
 800c7a6:	f7f7 fcef 	bl	8004188 <HAL_GetTick>
 800c7aa:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8

				while (k < swing_cycles) {
 800c7ae:	e31f      	b.n	800cdf0 <main+0x5610>

					ret = rotor_position_read(&rotor_position);
 800c7b0:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c7b4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fa fdc8 	bl	800734e <rotor_position_read>
 800c7be:	6020      	str	r0, [r4, #0]
					BSP_MotorControl_GoTo(0,rotor_position + (int) (round(start_angle_a[m] * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)));
 800c7c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800c7c4:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800c7c8:	6812      	ldr	r2, [r2, #0]
 800c7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 fec0 	bl	8000554 <__aeabi_i2d>
 800c7d4:	a312      	add	r3, pc, #72	; (adr r3, 800c820 <main+0x5040>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 ff25 	bl	8000628 <__aeabi_dmul>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	ec44 3b17 	vmov	d7, r3, r4
 800c7e6:	eeb0 0a47 	vmov.f32	s0, s14
 800c7ea:	eef0 0a67 	vmov.f32	s1, s15
 800c7ee:	f00a fc71 	bl	80170d4 <round>
 800c7f2:	ec54 3b10 	vmov	r3, r4, d0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	f7f4 f9c5 	bl	8000b88 <__aeabi_d2iz>
 800c7fe:	4602      	mov	r2, r0
 800c800:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4413      	add	r3, r2
 800c808:	4619      	mov	r1, r3
 800c80a:	2000      	movs	r0, #0
 800c80c:	f7f7 fa1c 	bl	8003c48 <BSP_MotorControl_GoTo>
					current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800c810:	2000      	movs	r0, #0
 800c812:	f7f7 f989 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800c816:	4603      	mov	r3, r0
 800c818:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
					while(abs(current_speed) > 0){
 800c81c:	e08a      	b.n	800c934 <main+0x5154>
 800c81e:	bf00      	nop
 800c820:	020c49ba 	.word	0x020c49ba
 800c824:	4031c72b 	.word	0x4031c72b
 800c828:	08018fb8 	.word	0x08018fb8
 800c82c:	20000f20 	.word	0x20000f20
 800c830:	0801900c 	.word	0x0801900c
 800c834:	08019030 	.word	0x08019030
 800c838:	08019050 	.word	0x08019050
 800c83c:	08019078 	.word	0x08019078
 800c840:	080190b0 	.word	0x080190b0
 800c844:	20000e1c 	.word	0x20000e1c
 800c848:	080190ec 	.word	0x080190ec
						current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800c84c:	2000      	movs	r0, #0
 800c84e:	f7f7 f96b 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800c852:	4603      	mov	r3, r0
 800c854:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
						ret = rotor_position_read(&rotor_position);
 800c858:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c85c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c860:	4618      	mov	r0, r3
 800c862:	f7fa fd74 	bl	800734e <rotor_position_read>
 800c866:	6020      	str	r0, [r4, #0]
						ret = encoder_position_read(&encoder_position, &htim3);
 800c868:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c86c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c870:	49b9      	ldr	r1, [pc, #740]	; (800cb58 <main+0x5378>)
 800c872:	4618      	mov	r0, r3
 800c874:	f7fa fd9e 	bl	80073b4 <encoder_position_read>
 800c878:	6020      	str	r0, [r4, #0]
						tick = HAL_GetTick();
 800c87a:	f7f7 fc85 	bl	8004188 <HAL_GetTick>
 800c87e:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
						test_time = (float) (abs(tick - tick_cycle_start)) / 1000;
 800c882:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 800c886:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bfb8      	it	lt
 800c890:	425b      	neglt	r3, r3
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c89a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800c89e:	eddf 6aaf 	vldr	s13, [pc, #700]	; 800cb5c <main+0x537c>
 800c8a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c8a6:	edc3 7a00 	vstr	s15, [r3]
						sprintf(msg, "\n\r%f\t%i\t%i", test_time, (int)(rotor_position/STEPPER_READ_POSITION_STEPS_PER_DEGREE),(int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
 800c8aa:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	f7f3 fe62 	bl	8000578 <__aeabi_f2d>
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	460e      	mov	r6, r1
 800c8b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f3 fe48 	bl	8000554 <__aeabi_i2d>
 800c8c4:	a39e      	add	r3, pc, #632	; (adr r3, 800cb40 <main+0x5360>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	f7f3 ffd7 	bl	800087c <__aeabi_ddiv>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f7f4 f957 	bl	8000b88 <__aeabi_d2iz>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f3 fe33 	bl	8000554 <__aeabi_i2d>
 800c8ee:	a396      	add	r3, pc, #600	; (adr r3, 800cb48 <main+0x5368>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 ffc2 	bl	800087c <__aeabi_ddiv>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4619      	mov	r1, r3
 800c900:	f7f4 f942 	bl	8000b88 <__aeabi_d2iz>
 800c904:	4603      	mov	r3, r0
 800c906:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	9400      	str	r4, [sp, #0]
 800c90e:	462a      	mov	r2, r5
 800c910:	4633      	mov	r3, r6
 800c912:	4993      	ldr	r1, [pc, #588]	; (800cb60 <main+0x5380>)
 800c914:	f006 f91c 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800c918:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f3 fc69 	bl	80001f4 <strlen>
 800c922:	4603      	mov	r3, r0
 800c924:	b29a      	uxth	r2, r3
 800c926:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800c92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c92e:	488d      	ldr	r0, [pc, #564]	; (800cb64 <main+0x5384>)
 800c930:	f7fa f840 	bl	80069b4 <HAL_UART_Transmit>
					while(abs(current_speed) > 0){
 800c934:	f8b7 351a 	ldrh.w	r3, [r7, #1306]	; 0x51a
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d187      	bne.n	800c84c <main+0x506c>
					/*
					 * Motion right corresponds to rotor angle positive
					 * Pendulum motion left corresponds to angle negative
					 */

					abs_encoder_position_max = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
					HAL_Delay(motion_dwell_a[0]);
 800c942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f7 fc29 	bl	80041a0 <HAL_Delay>
					while (1){
						/*
						 * Wait for pendulum angle positive indicating motion right occurring
						 */
						ret = encoder_position_read(&encoder_position, &htim3);
 800c94e:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c952:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c956:	4980      	ldr	r1, [pc, #512]	; (800cb58 <main+0x5378>)
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fa fd2b 	bl	80073b4 <encoder_position_read>
 800c95e:	6020      	str	r0, [r4, #0]
						tick = HAL_GetTick();
 800c960:	f7f7 fc12 	bl	8004188 <HAL_GetTick>
 800c964:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
						test_time = (float) (abs(tick - tick_cycle_start)) / 1000;
 800c968:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 800c96c:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfb8      	it	lt
 800c976:	425b      	neglt	r3, r3
 800c978:	ee07 3a90 	vmov	s15, r3
 800c97c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c980:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800c984:	eddf 6a75 	vldr	s13, [pc, #468]	; 800cb5c <main+0x537c>
 800c988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c98c:	edc3 7a00 	vstr	s15, [r3]
						ret = rotor_position_read(&rotor_position);
 800c990:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800c994:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fa fcd8 	bl	800734e <rotor_position_read>
 800c99e:	6020      	str	r0, [r4, #0]
						sprintf(msg, "\n\r%f\t%i\t%i", test_time, (int)(rotor_position/STEPPER_READ_POSITION_STEPS_PER_DEGREE),(int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
 800c9a0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800c9a4:	6818      	ldr	r0, [r3, #0]
 800c9a6:	f7f3 fde7 	bl	8000578 <__aeabi_f2d>
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	460e      	mov	r6, r1
 800c9ae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7f3 fdcd 	bl	8000554 <__aeabi_i2d>
 800c9ba:	a361      	add	r3, pc, #388	; (adr r3, 800cb40 <main+0x5360>)
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	f7f3 ff5c 	bl	800087c <__aeabi_ddiv>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	f7f4 f8dc 	bl	8000b88 <__aeabi_d2iz>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f3 fdb8 	bl	8000554 <__aeabi_i2d>
 800c9e4:	a358      	add	r3, pc, #352	; (adr r3, 800cb48 <main+0x5368>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 ff47 	bl	800087c <__aeabi_ddiv>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f7f4 f8c7 	bl	8000b88 <__aeabi_d2iz>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800ca00:	9301      	str	r3, [sp, #4]
 800ca02:	9400      	str	r4, [sp, #0]
 800ca04:	462a      	mov	r2, r5
 800ca06:	4633      	mov	r3, r6
 800ca08:	4955      	ldr	r1, [pc, #340]	; (800cb60 <main+0x5380>)
 800ca0a:	f006 f8a1 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800ca0e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7f3 fbee 	bl	80001f4 <strlen>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ca20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca24:	484f      	ldr	r0, [pc, #316]	; (800cb64 <main+0x5384>)
 800ca26:	f7f9 ffc5 	bl	80069b4 <HAL_UART_Transmit>
						if ((encoder_position - encoder_position_down) < 0){
 800ca2a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	da03      	bge.n	800ca42 <main+0x5262>
							//sprintf(msg, "\n\rAngle %i", (int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
							//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
							HAL_Delay(10);
 800ca3a:	200a      	movs	r0, #10
 800ca3c:	f7f7 fbb0 	bl	80041a0 <HAL_Delay>
							continue;
 800ca40:	e041      	b.n	800cac6 <main+0x52e6>
						}
						/*
						 * Find maximum
						 */
						ret = encoder_position_read(&encoder_position, &htim3);
 800ca42:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ca46:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ca4a:	4943      	ldr	r1, [pc, #268]	; (800cb58 <main+0x5378>)
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fa fcb1 	bl	80073b4 <encoder_position_read>
 800ca52:	6020      	str	r0, [r4, #0]
						abs_encoder_position_prior = abs(encoder_position - encoder_position_down);
 800ca54:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ca64:	2a00      	cmp	r2, #0
 800ca66:	bfb8      	it	lt
 800ca68:	4252      	neglt	r2, r2
 800ca6a:	601a      	str	r2, [r3, #0]
						HAL_Delay(10);
 800ca6c:	200a      	movs	r0, #10
 800ca6e:	f7f7 fb97 	bl	80041a0 <HAL_Delay>
						ret = encoder_position_read(&encoder_position, &htim3);
 800ca72:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ca76:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ca7a:	4937      	ldr	r1, [pc, #220]	; (800cb58 <main+0x5378>)
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7fa fc99 	bl	80073b4 <encoder_position_read>
 800ca82:	6020      	str	r0, [r4, #0]
						abs_encoder_position_after = abs(encoder_position - encoder_position_down);
 800ca84:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800ca94:	2a00      	cmp	r2, #0
 800ca96:	bfb8      	it	lt
 800ca98:	4252      	neglt	r2, r2
 800ca9a:	601a      	str	r2, [r3, #0]
						if (abs_encoder_position_prior > abs_encoder_position_max){
 800ca9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800caa6:	429a      	cmp	r2, r3
 800caa8:	dd04      	ble.n	800cab4 <main+0x52d4>
							abs_encoder_position_max = abs_encoder_position_prior;
 800caaa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
						/*
						 * Add additional wait for encoder angle to drop below 90
						 * prior to next motion
						 */

						if ((abs_encoder_position_after - abs_encoder_position_prior) < 10){
 800cab4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800cab8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800cabc:	6812      	ldr	r2, [r2, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	dd00      	ble.n	800cac8 <main+0x52e8>
						ret = encoder_position_read(&encoder_position, &htim3);
 800cac6:	e742      	b.n	800c94e <main+0x516e>
								break;
 800cac8:	bf00      	nop
						}
					}



					ret = rotor_position_read(&rotor_position);
 800caca:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cace:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fa fc3b 	bl	800734e <rotor_position_read>
 800cad8:	6020      	str	r0, [r4, #0]
					BSP_MotorControl_GoTo(0,rotor_position + (int) (round(-start_angle_a[m] * STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)));
 800cada:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800cade:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800cae2:	6812      	ldr	r2, [r2, #0]
 800cae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae8:	425b      	negs	r3, r3
 800caea:	4618      	mov	r0, r3
 800caec:	f7f3 fd32 	bl	8000554 <__aeabi_i2d>
 800caf0:	a317      	add	r3, pc, #92	; (adr r3, 800cb50 <main+0x5370>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fd97 	bl	8000628 <__aeabi_dmul>
 800cafa:	4603      	mov	r3, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	ec44 3b17 	vmov	d7, r3, r4
 800cb02:	eeb0 0a47 	vmov.f32	s0, s14
 800cb06:	eef0 0a67 	vmov.f32	s1, s15
 800cb0a:	f00a fae3 	bl	80170d4 <round>
 800cb0e:	ec54 3b10 	vmov	r3, r4, d0
 800cb12:	4618      	mov	r0, r3
 800cb14:	4621      	mov	r1, r4
 800cb16:	f7f4 f837 	bl	8000b88 <__aeabi_d2iz>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4413      	add	r3, r2
 800cb24:	4619      	mov	r1, r3
 800cb26:	2000      	movs	r0, #0
 800cb28:	f7f7 f88e 	bl	8003c48 <BSP_MotorControl_GoTo>
					current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7f6 fffb 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800cb32:	4603      	mov	r3, r0
 800cb34:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
					while(abs(current_speed) > 0){
 800cb38:	e08a      	b.n	800cc50 <main+0x5470>
 800cb3a:	bf00      	nop
 800cb3c:	f3af 8000 	nop.w
 800cb40:	020c49ba 	.word	0x020c49ba
 800cb44:	4021c72b 	.word	0x4021c72b
 800cb48:	67a0f909 	.word	0x67a0f909
 800cb4c:	401aaab3 	.word	0x401aaab3
 800cb50:	020c49ba 	.word	0x020c49ba
 800cb54:	4031c72b 	.word	0x4031c72b
 800cb58:	20000e1c 	.word	0x20000e1c
 800cb5c:	447a0000 	.word	0x447a0000
 800cb60:	0801910c 	.word	0x0801910c
 800cb64:	20000f20 	.word	0x20000f20
						current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800cb68:	2000      	movs	r0, #0
 800cb6a:	f7f6 ffdd 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
						ret = rotor_position_read(&rotor_position);
 800cb74:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cb78:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fa fbe6 	bl	800734e <rotor_position_read>
 800cb82:	6020      	str	r0, [r4, #0]
						ret = encoder_position_read(&encoder_position, &htim3);
 800cb84:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cb88:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cb8c:	49c6      	ldr	r1, [pc, #792]	; (800cea8 <main+0x56c8>)
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fa fc10 	bl	80073b4 <encoder_position_read>
 800cb94:	6020      	str	r0, [r4, #0]
						tick = HAL_GetTick();
 800cb96:	f7f7 faf7 	bl	8004188 <HAL_GetTick>
 800cb9a:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
						test_time = (float) (abs(tick - tick_cycle_start)) / 1000;
 800cb9e:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 800cba2:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	bfb8      	it	lt
 800cbac:	425b      	neglt	r3, r3
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cbb6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800cbba:	eddf 6abc 	vldr	s13, [pc, #752]	; 800ceac <main+0x56cc>
 800cbbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbc2:	edc3 7a00 	vstr	s15, [r3]
						sprintf(msg, "\n\r%f\t%i\t%i", test_time, (int)(rotor_position/STEPPER_READ_POSITION_STEPS_PER_DEGREE),(int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
 800cbc6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800cbca:	6818      	ldr	r0, [r3, #0]
 800cbcc:	f7f3 fcd4 	bl	8000578 <__aeabi_f2d>
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	460e      	mov	r6, r1
 800cbd4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f3 fcba 	bl	8000554 <__aeabi_i2d>
 800cbe0:	a3ad      	add	r3, pc, #692	; (adr r3, 800ce98 <main+0x56b8>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fe49 	bl	800087c <__aeabi_ddiv>
 800cbea:	4603      	mov	r3, r0
 800cbec:	460c      	mov	r4, r1
 800cbee:	4618      	mov	r0, r3
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	f7f3 ffc9 	bl	8000b88 <__aeabi_d2iz>
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7f3 fca5 	bl	8000554 <__aeabi_i2d>
 800cc0a:	a3a5      	add	r3, pc, #660	; (adr r3, 800cea0 <main+0x56c0>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 fe34 	bl	800087c <__aeabi_ddiv>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	f7f3 ffb4 	bl	8000b88 <__aeabi_d2iz>
 800cc20:	4603      	mov	r3, r0
 800cc22:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800cc26:	9301      	str	r3, [sp, #4]
 800cc28:	9400      	str	r4, [sp, #0]
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	4633      	mov	r3, r6
 800cc2e:	49a0      	ldr	r1, [pc, #640]	; (800ceb0 <main+0x56d0>)
 800cc30:	f005 ff8e 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800cc34:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7f3 fadb 	bl	80001f4 <strlen>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc4a:	489a      	ldr	r0, [pc, #616]	; (800ceb4 <main+0x56d4>)
 800cc4c:	f7f9 feb2 	bl	80069b4 <HAL_UART_Transmit>
					while(abs(current_speed) > 0){
 800cc50:	f8b7 351a 	ldrh.w	r3, [r7, #1306]	; 0x51a
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d187      	bne.n	800cb68 <main+0x5388>

					/*
					 * Motion left corresponds to rotor angle negative
					 * Pendulum motion right corresponds to angle positive
					 */
					abs_encoder_position_max = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
					HAL_Delay(motion_dwell_a[0]);
 800cc5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7f7 fa9b 	bl	80041a0 <HAL_Delay>
					while (1){
						/*
						 * Wait for pendulum angle negative indicating pendulum motion left
						 */
						ret = encoder_position_read(&encoder_position, &htim3);
 800cc6a:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cc6e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cc72:	498d      	ldr	r1, [pc, #564]	; (800cea8 <main+0x56c8>)
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fa fb9d 	bl	80073b4 <encoder_position_read>
 800cc7a:	6020      	str	r0, [r4, #0]
						tick = HAL_GetTick();
 800cc7c:	f7f7 fa84 	bl	8004188 <HAL_GetTick>
 800cc80:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
						test_time = (float) (abs(tick - tick_cycle_start)) / 1000;
 800cc84:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 800cc88:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfb8      	it	lt
 800cc92:	425b      	neglt	r3, r3
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc9c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800cca0:	eddf 6a82 	vldr	s13, [pc, #520]	; 800ceac <main+0x56cc>
 800cca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cca8:	edc3 7a00 	vstr	s15, [r3]
						ret = rotor_position_read(&rotor_position);
 800ccac:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ccb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fa fb4a 	bl	800734e <rotor_position_read>
 800ccba:	6020      	str	r0, [r4, #0]
						sprintf(msg, "\n\r%f\t%i\t%i", test_time, (int)(rotor_position/STEPPER_READ_POSITION_STEPS_PER_DEGREE),(int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
 800ccbc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	f7f3 fc59 	bl	8000578 <__aeabi_f2d>
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	460e      	mov	r6, r1
 800ccca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7f3 fc3f 	bl	8000554 <__aeabi_i2d>
 800ccd6:	a370      	add	r3, pc, #448	; (adr r3, 800ce98 <main+0x56b8>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	f7f3 fdce 	bl	800087c <__aeabi_ddiv>
 800cce0:	4603      	mov	r3, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	4618      	mov	r0, r3
 800cce6:	4621      	mov	r1, r4
 800cce8:	f7f3 ff4e 	bl	8000b88 <__aeabi_d2iz>
 800ccec:	4604      	mov	r4, r0
 800ccee:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7f3 fc2a 	bl	8000554 <__aeabi_i2d>
 800cd00:	a367      	add	r3, pc, #412	; (adr r3, 800cea0 <main+0x56c0>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7f3 fdb9 	bl	800087c <__aeabi_ddiv>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4610      	mov	r0, r2
 800cd10:	4619      	mov	r1, r3
 800cd12:	f7f3 ff39 	bl	8000b88 <__aeabi_d2iz>
 800cd16:	4603      	mov	r3, r0
 800cd18:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	9400      	str	r4, [sp, #0]
 800cd20:	462a      	mov	r2, r5
 800cd22:	4633      	mov	r3, r6
 800cd24:	4962      	ldr	r1, [pc, #392]	; (800ceb0 <main+0x56d0>)
 800cd26:	f005 ff13 	bl	8012b50 <sprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800cd2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f3 fa60 	bl	80001f4 <strlen>
 800cd34:	4603      	mov	r3, r0
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd40:	485c      	ldr	r0, [pc, #368]	; (800ceb4 <main+0x56d4>)
 800cd42:	f7f9 fe37 	bl	80069b4 <HAL_UART_Transmit>
						if ((encoder_position - encoder_position_down) > 0){
 800cd46:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dd03      	ble.n	800cd5e <main+0x557e>
							//sprintf(msg, "\n\rAngle %i", (int)((encoder_position - encoder_position_down)/ENCODER_READ_ANGLE_SCALE));
							//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
							HAL_Delay(10);
 800cd56:	200a      	movs	r0, #10
 800cd58:	f7f7 fa22 	bl	80041a0 <HAL_Delay>
							continue;
 800cd5c:	e041      	b.n	800cde2 <main+0x5602>
						}
						/*
						 * Find maximum
						 */
						ret = encoder_position_read(&encoder_position, &htim3);
 800cd5e:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cd62:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cd66:	4950      	ldr	r1, [pc, #320]	; (800cea8 <main+0x56c8>)
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fa fb23 	bl	80073b4 <encoder_position_read>
 800cd6e:	6020      	str	r0, [r4, #0]
						abs_encoder_position_prior = abs(encoder_position - encoder_position_down);
 800cd70:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800cd7a:	1ad2      	subs	r2, r2, r3
 800cd7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	bfb8      	it	lt
 800cd84:	4252      	neglt	r2, r2
 800cd86:	601a      	str	r2, [r3, #0]
						HAL_Delay(10);
 800cd88:	200a      	movs	r0, #10
 800cd8a:	f7f7 fa09 	bl	80041a0 <HAL_Delay>
						ret = encoder_position_read(&encoder_position, &htim3);
 800cd8e:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cd92:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cd96:	4944      	ldr	r1, [pc, #272]	; (800cea8 <main+0x56c8>)
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f7fa fb0b 	bl	80073b4 <encoder_position_read>
 800cd9e:	6020      	str	r0, [r4, #0]
						abs_encoder_position_after = abs(encoder_position - encoder_position_down);
 800cda0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800cdaa:	1ad2      	subs	r2, r2, r3
 800cdac:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800cdb0:	2a00      	cmp	r2, #0
 800cdb2:	bfb8      	it	lt
 800cdb4:	4252      	neglt	r2, r2
 800cdb6:	601a      	str	r2, [r3, #0]
						if (abs_encoder_position_prior > abs_encoder_position_max){
 800cdb8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	dd04      	ble.n	800cdd0 <main+0x55f0>
							abs_encoder_position_max = abs_encoder_position_prior;
 800cdc6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
						 * Add additional wait for encoder angle to drop below 90
						 * prior to next motion
						 */


						if ((abs_encoder_position_after - abs_encoder_position_prior) < 10){
 800cdd0:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800cdd4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800cdd8:	6812      	ldr	r2, [r2, #0]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b09      	cmp	r3, #9
 800cde0:	dd00      	ble.n	800cde4 <main+0x5604>
						ret = encoder_position_read(&encoder_position, &htim3);
 800cde2:	e742      	b.n	800cc6a <main+0x548a>
								break;
 800cde4:	bf00      	nop
						}
					}
					k = k + 1;
 800cde6:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800cdea:	3301      	adds	r3, #1
 800cdec:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
				while (k < swing_cycles) {
 800cdf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	; 0x5dc
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	f6ff acd8 	blt.w	800c7b0 <main+0x4fd0>
				}

				L6474_CmdDisable(0);
 800ce00:	2000      	movs	r0, #0
 800ce02:	f7f4 f8f9 	bl	8000ff8 <L6474_CmdDisable>
				while (1) {
					sprintf(msg,
 800ce06:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ce0a:	4a2b      	ldr	r2, [pc, #172]	; (800ceb8 <main+0x56d8>)
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	4611      	mov	r1, r2
 800ce10:	234c      	movs	r3, #76	; 0x4c
 800ce12:	461a      	mov	r2, r3
 800ce14:	f005 fe6c 	bl	8012af0 <memcpy>
							"Test Operation Complete, System in Standby, Press Reset Button to Restart\r\n");
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800ce18:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7f3 f9e9 	bl	80001f4 <strlen>
 800ce22:	4603      	mov	r3, r0
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ce2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce2e:	4821      	ldr	r0, [pc, #132]	; (800ceb4 <main+0x56d4>)
 800ce30:	f7f9 fdc0 	bl	80069b4 <HAL_UART_Transmit>
							HAL_MAX_DELAY);
					HAL_Delay(5000);
 800ce34:	f241 3088 	movw	r0, #5000	; 0x1388
 800ce38:	f7f7 f9b2 	bl	80041a0 <HAL_Delay>
					sprintf(msg,
 800ce3c:	e7e3      	b.n	800ce06 <main+0x5626>
		 *
		 * Pendulum System Identification Test
		 *
		 */

		if (enable_pendulum_sysid_test == 1){
 800ce3e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	f040 8110 	bne.w	800d068 <main+0x5888>

			ret = rotor_position_read(&rotor_position);
 800ce48:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ce4c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7fa fa7c 	bl	800734e <rotor_position_read>
 800ce56:	6020      	str	r0, [r4, #0]
			sprintf(msg, "\r\n\r\n********  Starting Pendulum System Identification Test in 5 Seconds ********\r\n");
 800ce58:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ce5c:	4a17      	ldr	r2, [pc, #92]	; (800cebc <main+0x56dc>)
 800ce5e:	4618      	mov	r0, r3
 800ce60:	4611      	mov	r1, r2
 800ce62:	2353      	movs	r3, #83	; 0x53
 800ce64:	461a      	mov	r2, r3
 800ce66:	f005 fe43 	bl	8012af0 <memcpy>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ce6a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f3 f9c0 	bl	80001f4 <strlen>
 800ce74:	4603      	mov	r3, r0
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ce7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce80:	480c      	ldr	r0, [pc, #48]	; (800ceb4 <main+0x56d4>)
 800ce82:	f7f9 fd97 	bl	80069b4 <HAL_UART_Transmit>


			tick_cycle_start = HAL_GetTick();
 800ce86:	f7f7 f97f 	bl	8004188 <HAL_GetTick>
 800ce8a:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8
			k = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
			while (k < 10){
 800ce94:	e0c4      	b.n	800d020 <main+0x5840>
 800ce96:	bf00      	nop
 800ce98:	020c49ba 	.word	0x020c49ba
 800ce9c:	4021c72b 	.word	0x4021c72b
 800cea0:	67a0f909 	.word	0x67a0f909
 800cea4:	401aaab3 	.word	0x401aaab3
 800cea8:	20000e1c 	.word	0x20000e1c
 800ceac:	447a0000 	.word	0x447a0000
 800ceb0:	0801910c 	.word	0x0801910c
 800ceb4:	20000f20 	.word	0x20000f20
 800ceb8:	08019118 	.word	0x08019118
 800cebc:	08019164 	.word	0x08019164
				ret = rotor_position_read(&rotor_position);
 800cec0:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cec4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fa fa40 	bl	800734e <rotor_position_read>
 800cece:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0,rotor_position + (int)(16*(STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)));
 800ced0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ceda:	4619      	mov	r1, r3
 800cedc:	2000      	movs	r0, #0
 800cede:	f7f6 feb3 	bl	8003c48 <BSP_MotorControl_GoTo>
				HAL_Delay(5000);
 800cee2:	f241 3088 	movw	r0, #5000	; 0x1388
 800cee6:	f7f7 f95b 	bl	80041a0 <HAL_Delay>
				ret = rotor_position_read(&rotor_position);
 800ceea:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ceee:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fa fa2b 	bl	800734e <rotor_position_read>
 800cef8:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0,(int)(rotor_position - 16*(STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)));
 800cefa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7f3 fb27 	bl	8000554 <__aeabi_i2d>
 800cf06:	a3ef      	add	r3, pc, #956	; (adr r3, 800d2c4 <main+0x5ae4>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	f7f3 f9d4 	bl	80002b8 <__aeabi_dsub>
 800cf10:	4603      	mov	r3, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	4618      	mov	r0, r3
 800cf16:	4621      	mov	r1, r4
 800cf18:	f7f3 fe36 	bl	8000b88 <__aeabi_d2iz>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	4619      	mov	r1, r3
 800cf20:	2000      	movs	r0, #0
 800cf22:	f7f6 fe91 	bl	8003c48 <BSP_MotorControl_GoTo>
				i = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
				while (i < 5000){
 800cf2c:	e06d      	b.n	800d00a <main+0x582a>
					test_time = HAL_GetTick() - tick_cycle_start;
 800cf2e:	f7f7 f92b 	bl	8004188 <HAL_GetTick>
 800cf32:	4602      	mov	r2, r0
 800cf34:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800cf38:	1ad2      	subs	r2, r2, r3
 800cf3a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800cf3e:	ee07 2a90 	vmov	s15, r2
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	edc3 7a00 	vstr	s15, [r3]
					ret = encoder_position_read(&encoder_position, &htim3);
 800cf4a:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800cf4e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cf52:	49cf      	ldr	r1, [pc, #828]	; (800d290 <main+0x5ab0>)
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fa fa2d 	bl	80073b4 <encoder_position_read>
 800cf5a:	6020      	str	r0, [r4, #0]
					sprintf(msg, "\n\r%i\t%i\t%0.1f\t%0.1f", i, (int)((HAL_GetTick() - tick_cycle_start)),
 800cf5c:	f7f7 f914 	bl	8004188 <HAL_GetTick>
 800cf60:	4602      	mov	r2, r0
 800cf62:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	461e      	mov	r6, r3
							(float)(encoder_position/ENCODER_READ_ANGLE_SCALE),
 800cf6a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7f3 faef 	bl	8000554 <__aeabi_i2d>
 800cf76:	a3c2      	add	r3, pc, #776	; (adr r3, 800d280 <main+0x5aa0>)
 800cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7c:	f7f3 fc7e 	bl	800087c <__aeabi_ddiv>
 800cf80:	4603      	mov	r3, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	4618      	mov	r0, r3
 800cf86:	4621      	mov	r1, r4
 800cf88:	f7f3 fe46 	bl	8000c18 <__aeabi_d2f>
 800cf8c:	4603      	mov	r3, r0
					sprintf(msg, "\n\r%i\t%i\t%0.1f\t%0.1f", i, (int)((HAL_GetTick() - tick_cycle_start)),
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7f3 faf2 	bl	8000578 <__aeabi_f2d>
 800cf94:	4604      	mov	r4, r0
 800cf96:	460d      	mov	r5, r1
							(float)(rotor_position/STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800cf98:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7f3 fad8 	bl	8000554 <__aeabi_i2d>
 800cfa4:	a3b8      	add	r3, pc, #736	; (adr r3, 800d288 <main+0x5aa8>)
 800cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfaa:	f7f3 fc67 	bl	800087c <__aeabi_ddiv>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7f3 fe2f 	bl	8000c18 <__aeabi_d2f>
 800cfba:	4603      	mov	r3, r0
					sprintf(msg, "\n\r%i\t%i\t%0.1f\t%0.1f", i, (int)((HAL_GetTick() - tick_cycle_start)),
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7f3 fadb 	bl	8000578 <__aeabi_f2d>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800cfca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfce:	e9cd 4500 	strd	r4, r5, [sp]
 800cfd2:	4633      	mov	r3, r6
 800cfd4:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800cfd8:	49ae      	ldr	r1, [pc, #696]	; (800d294 <main+0x5ab4>)
 800cfda:	f005 fdb9 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800cfde:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7f3 f906 	bl	80001f4 <strlen>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800cff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cff4:	48a8      	ldr	r0, [pc, #672]	; (800d298 <main+0x5ab8>)
 800cff6:	f7f9 fcdd 	bl	80069b4 <HAL_UART_Transmit>
					HAL_Delay(2);
 800cffa:	2002      	movs	r0, #2
 800cffc:	f7f7 f8d0 	bl	80041a0 <HAL_Delay>
					i = i + 1;
 800d000:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800d004:	3301      	adds	r3, #1
 800d006:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
				while (i < 5000){
 800d00a:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800d00e:	f241 3287 	movw	r2, #4999	; 0x1387
 800d012:	4293      	cmp	r3, r2
 800d014:	dd8b      	ble.n	800cf2e <main+0x574e>
				}
				k = k + 1;
 800d016:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800d01a:	3301      	adds	r3, #1
 800d01c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
			while (k < 10){
 800d020:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800d024:	2b09      	cmp	r3, #9
 800d026:	f77f af4b 	ble.w	800cec0 <main+0x56e0>
			}
			L6474_CmdDisable(0);
 800d02a:	2000      	movs	r0, #0
 800d02c:	f7f3 ffe4 	bl	8000ff8 <L6474_CmdDisable>
			while (1) {
				sprintf(msg,
 800d030:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800d034:	4a99      	ldr	r2, [pc, #612]	; (800d29c <main+0x5abc>)
 800d036:	4618      	mov	r0, r3
 800d038:	4611      	mov	r1, r2
 800d03a:	234c      	movs	r3, #76	; 0x4c
 800d03c:	461a      	mov	r2, r3
 800d03e:	f005 fd57 	bl	8012af0 <memcpy>
						"Test Operation Complete, System in Standby, Press Reset Button to Restart\r\n");
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800d042:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800d046:	4618      	mov	r0, r3
 800d048:	f7f3 f8d4 	bl	80001f4 <strlen>
 800d04c:	4603      	mov	r3, r0
 800d04e:	b29a      	uxth	r2, r3
 800d050:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800d054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d058:	488f      	ldr	r0, [pc, #572]	; (800d298 <main+0x5ab8>)
 800d05a:	f7f9 fcab 	bl	80069b4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				HAL_Delay(5000);
 800d05e:	f241 3088 	movw	r0, #5000	; 0x1388
 800d062:	f7f7 f89d 	bl	80041a0 <HAL_Delay>
				sprintf(msg,
 800d066:	e7e3      	b.n	800d030 <main+0x5850>
		 * Motor Control Characterization Test
		 *
		 */


		if (enable_motor_actuator_characterization_mode == 1) {
 800d068:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	f040 8539 	bne.w	800dae4 <main+0x6304>

			/*
			 * Set Motor Speed Profile
			 */

			BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 800d072:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	b29b      	uxth	r3, r3
 800d07a:	4619      	mov	r1, r3
 800d07c:	2000      	movs	r0, #0
 800d07e:	f7f6 fe77 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 800d082:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	4619      	mov	r1, r3
 800d08c:	2000      	movs	r0, #0
 800d08e:	f7f6 fe97 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>

			sprintf(msg, "\n\rMotor Profile Speeds Min %u Max %u",
 800d092:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800d0a2:	497f      	ldr	r1, [pc, #508]	; (800d2a0 <main+0x5ac0>)
 800d0a4:	f005 fd54 	bl	8012b50 <sprintf>
					rotor_test_speed_min, rotor_test_speed_max);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800d0a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7f3 f8a1 	bl	80001f4 <strlen>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	b29a      	uxth	r2, r3
 800d0b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0be:	4876      	ldr	r0, [pc, #472]	; (800d298 <main+0x5ab8>)
 800d0c0:	f7f9 fc78 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			BSP_MotorControl_SetAcceleration(0,
 800d0c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f7f6 fddc 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					(uint16_t) (rotor_test_acceleration_max));
			BSP_MotorControl_SetDeceleration(0,
 800d0d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	4619      	mov	r1, r3
 800d0de:	2000      	movs	r0, #0
 800d0e0:	f7f6 fdfc 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
					(uint16_t) (swing_deceleration_max));

			sprintf(msg,
					"\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
					BSP_MotorControl_GetAcceleration(0),
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	f7f6 fcfb 	bl	8003ae0 <BSP_MotorControl_GetAcceleration>
 800d0ea:	4603      	mov	r3, r0
			sprintf(msg,
 800d0ec:	461c      	mov	r4, r3
					BSP_MotorControl_GetDeceleration(0));
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f7f6 fd3e 	bl	8003b70 <BSP_MotorControl_GetDeceleration>
 800d0f4:	4603      	mov	r3, r0
			sprintf(msg,
 800d0f6:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	4969      	ldr	r1, [pc, #420]	; (800d2a4 <main+0x5ac4>)
 800d0fe:	f005 fd27 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800d102:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800d106:	4618      	mov	r0, r3
 800d108:	f7f3 f874 	bl	80001f4 <strlen>
 800d10c:	4603      	mov	r3, r0
 800d10e:	b29a      	uxth	r2, r3
 800d110:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800d114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d118:	485f      	ldr	r0, [pc, #380]	; (800d298 <main+0x5ab8>)
 800d11a:	f7f9 fc4b 	bl	80069b4 <HAL_UART_Transmit>

			/*
			 * Set Rotor Position Zero
			 */

			rotor_position_set();
 800d11e:	f7fa f905 	bl	800732c <rotor_position_set>
			ret = rotor_position_read(&rotor_position_initial);
 800d122:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800d126:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fa f90f 	bl	800734e <rotor_position_read>
 800d130:	6020      	str	r0, [r4, #0]
			test_time = HAL_GetTick() - tick_cycle_start;
 800d132:	f7f7 f829 	bl	8004188 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800d13c:	1ad2      	subs	r2, r2, r3
 800d13e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800d142:	ee07 2a90 	vmov	s15, r2
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	edc3 7a00 	vstr	s15, [r3]

			rotor_chirp_step_period = (int) (rotor_chirp_period * 240.0);
 800d14e:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	f7f3 fa10 	bl	8000578 <__aeabi_f2d>
 800d158:	f04f 0200 	mov.w	r2, #0
 800d15c:	4b52      	ldr	r3, [pc, #328]	; (800d2a8 <main+0x5ac8>)
 800d15e:	f7f3 fa63 	bl	8000628 <__aeabi_dmul>
 800d162:	4603      	mov	r3, r0
 800d164:	460c      	mov	r4, r1
 800d166:	461a      	mov	r2, r3
 800d168:	4623      	mov	r3, r4
 800d16a:	f507 7439 	add.w	r4, r7, #740	; 0x2e4
 800d16e:	4610      	mov	r0, r2
 800d170:	4619      	mov	r1, r3
 800d172:	f7f3 fd09 	bl	8000b88 <__aeabi_d2iz>
 800d176:	4603      	mov	r3, r0
 800d178:	6023      	str	r3, [r4, #0]
			tick_cycle_start = HAL_GetTick();
 800d17a:	f7f7 f805 	bl	8004188 <HAL_GetTick>
 800d17e:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8
			mode_index_command = 1;
 800d182:	2301      	movs	r3, #1
 800d184:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
			mode_index = 1;
 800d188:	2301      	movs	r3, #1
 800d18a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584

			while (1) {
				i = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
				while (i < rotor_chirp_step_period) {
 800d194:	f000 bc5b 	b.w	800da4e <main+0x626e>
					RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
							- __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800d198:	4b44      	ldr	r3, [pc, #272]	; (800d2ac <main+0x5acc>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
					RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
 800d1a2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800d1a6:	601a      	str	r2, [r3, #0]
					readBytes = Extract_Msg(RxBuffer, RxBuffer_ReadIdx,
 800d1a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	b299      	uxth	r1, r3
 800d1b0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	4b3d      	ldr	r3, [pc, #244]	; (800d2b0 <main+0x5ad0>)
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	23c8      	movs	r3, #200	; 0xc8
 800d1be:	483d      	ldr	r0, [pc, #244]	; (800d2b4 <main+0x5ad4>)
 800d1c0:	f004 ff42 	bl	8012048 <Extract_Msg>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d1cc:	601a      	str	r2, [r3, #0]
							RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);

					if (readBytes == 2 && Msg.Len == 1 && i % 10 == 0) {
 800d1ce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	f040 80a8 	bne.w	800d32a <main+0x5b4a>
 800d1da:	4b35      	ldr	r3, [pc, #212]	; (800d2b0 <main+0x5ad0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	f040 80a3 	bne.w	800d32a <main+0x5b4a>
 800d1e4:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800d1e8:	4b33      	ldr	r3, [pc, #204]	; (800d2b8 <main+0x5ad8>)
 800d1ea:	fb83 2301 	smull	r2, r3, r3, r1
 800d1ee:	109a      	asrs	r2, r3, #2
 800d1f0:	17cb      	asrs	r3, r1, #31
 800d1f2:	1ad2      	subs	r2, r2, r3
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	1aca      	subs	r2, r1, r3
 800d1fe:	2a00      	cmp	r2, #0
 800d200:	f040 8093 	bne.w	800d32a <main+0x5b4a>
						RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes)
 800d204:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	441a      	add	r2, r3
								% UART_RX_BUFFER_SIZE;
 800d212:	4b2a      	ldr	r3, [pc, #168]	; (800d2bc <main+0x5adc>)
 800d214:	fba3 1302 	umull	r1, r3, r3, r2
 800d218:	099b      	lsrs	r3, r3, #6
 800d21a:	21c8      	movs	r1, #200	; 0xc8
 800d21c:	fb01 f303 	mul.w	r3, r1, r3
 800d220:	1ad3      	subs	r3, r2, r3
						RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes)
 800d222:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800d226:	6013      	str	r3, [r2, #0]
						mode_transition_state = 1;
 800d228:	2301      	movs	r3, #1
 800d22a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						if (strcmp((char *) Msg.Data, mode_string_stop) == 0) {
 800d22e:	f207 4334 	addw	r3, r7, #1076	; 0x434
 800d232:	6819      	ldr	r1, [r3, #0]
 800d234:	4822      	ldr	r0, [pc, #136]	; (800d2c0 <main+0x5ae0>)
 800d236:	f7f2 ffd3 	bl	80001e0 <strcmp>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <main+0x5a6c>
							mode_index_command = mode_quit;
 800d240:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d24a:	e06e      	b.n	800d32a <main+0x5b4a>
						} else if (strcmp((char *) Msg.Data, mode_string_inc_accel)
 800d24c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800d250:	6819      	ldr	r1, [r3, #0]
 800d252:	481b      	ldr	r0, [pc, #108]	; (800d2c0 <main+0x5ae0>)
 800d254:	f7f2 ffc4 	bl	80001e0 <strcmp>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d103      	bne.n	800d266 <main+0x5a86>
								== 0) {
							mode_index_command = 17;
 800d25e:	2311      	movs	r3, #17
 800d260:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d264:	e061      	b.n	800d32a <main+0x5b4a>
						} else if (strcmp((char *) Msg.Data, mode_string_dec_accel)
 800d266:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800d26a:	6819      	ldr	r1, [r3, #0]
 800d26c:	4814      	ldr	r0, [pc, #80]	; (800d2c0 <main+0x5ae0>)
 800d26e:	f7f2 ffb7 	bl	80001e0 <strcmp>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d129      	bne.n	800d2cc <main+0x5aec>
								== 0) {
							mode_index_command = 16;
 800d278:	2310      	movs	r3, #16
 800d27a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d27e:	e054      	b.n	800d32a <main+0x5b4a>
 800d280:	67a0f909 	.word	0x67a0f909
 800d284:	401aaab3 	.word	0x401aaab3
 800d288:	020c49ba 	.word	0x020c49ba
 800d28c:	4031c72b 	.word	0x4031c72b
 800d290:	20000e1c 	.word	0x20000e1c
 800d294:	080191b8 	.word	0x080191b8
 800d298:	20000f20 	.word	0x20000f20
 800d29c:	08019118 	.word	0x08019118
 800d2a0:	08019050 	.word	0x08019050
 800d2a4:	08019078 	.word	0x08019078
 800d2a8:	406e0000 	.word	0x406e0000
 800d2ac:	20000d54 	.word	0x20000d54
 800d2b0:	20000db4 	.word	0x20000db4
 800d2b4:	20000e58 	.word	0x20000e58
 800d2b8:	66666667 	.word	0x66666667
 800d2bc:	51eb851f 	.word	0x51eb851f
 800d2c0:	20000db8 	.word	0x20000db8
 800d2c4:	020c49ba 	.word	0x020c49ba
 800d2c8:	4071c72b 	.word	0x4071c72b
						} else if (strcmp((char *) Msg.Data,mode_string_inc_amp)
 800d2cc:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800d2d0:	6819      	ldr	r1, [r3, #0]
 800d2d2:	4812      	ldr	r0, [pc, #72]	; (800d31c <main+0x5b3c>)
 800d2d4:	f7f2 ff84 	bl	80001e0 <strcmp>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d103      	bne.n	800d2e6 <main+0x5b06>
								== 0) {
							mode_index_command = 18;
 800d2de:	2312      	movs	r3, #18
 800d2e0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d2e4:	e021      	b.n	800d32a <main+0x5b4a>
						} else if (strcmp((char *) Msg.Data,mode_string_dec_amp)
 800d2e6:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800d2ea:	6819      	ldr	r1, [r3, #0]
 800d2ec:	480b      	ldr	r0, [pc, #44]	; (800d31c <main+0x5b3c>)
 800d2ee:	f7f2 ff77 	bl	80001e0 <strcmp>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d103      	bne.n	800d300 <main+0x5b20>
								== 0) {
							mode_index_command = 19;
 800d2f8:	2313      	movs	r3, #19
 800d2fa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d2fe:	e014      	b.n	800d32a <main+0x5b4a>
						} else if (strcmp((char *) Msg.Data,
 800d300:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800d304:	6819      	ldr	r1, [r3, #0]
 800d306:	4805      	ldr	r0, [pc, #20]	; (800d31c <main+0x5b3c>)
 800d308:	f7f2 ff6a 	bl	80001e0 <strcmp>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <main+0x5b40>
								mode_string_mode_motor_characterization_mode)
								== 0) {
							mode_index_command = 1;
 800d312:	2301      	movs	r3, #1
 800d314:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800d318:	e007      	b.n	800d32a <main+0x5b4a>
 800d31a:	bf00      	nop
 800d31c:	20000db8 	.word	0x20000db8
						} else {
							mode_index_command = atoi((char*) Msg.Data);
 800d320:	48cb      	ldr	r0, [pc, #812]	; (800d650 <main+0x5e70>)
 800d322:	f005 f97f 	bl	8012624 <atoi>
 800d326:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
						}
					}



					if (mode_index_command == mode_quit) {
 800d32a:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800d32e:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	429a      	cmp	r2, r3
 800d336:	f000 8393 	beq.w	800da60 <main+0x6280>
						break;
					}

					if (mode_index_command == 1 && mode_transition_state == 1) {
 800d33a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d109      	bne.n	800d356 <main+0x5b76>
 800d342:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d346:	2b01      	cmp	r3, #1
 800d348:	d105      	bne.n	800d356 <main+0x5b76>
						mode_index = 1;
 800d34a:	2301      	movs	r3, #1
 800d34c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_transition_state = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 2 && mode_transition_state == 1) {
 800d356:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d109      	bne.n	800d372 <main+0x5b92>
 800d35e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d362:	2b01      	cmp	r3, #1
 800d364:	d105      	bne.n	800d372 <main+0x5b92>
						mode_index = 2;
 800d366:	2302      	movs	r3, #2
 800d368:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_transition_state = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 3 && mode_transition_state == 1) {
 800d372:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d376:	2b03      	cmp	r3, #3
 800d378:	d10c      	bne.n	800d394 <main+0x5bb4>
 800d37a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d108      	bne.n	800d394 <main+0x5bb4>
						L6474_SetAnalogValue(0, L6474_TVAL, 400);
 800d382:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 800d654 <main+0x5e74>
 800d386:	2109      	movs	r1, #9
 800d388:	2000      	movs	r0, #0
 800d38a:	f7f4 fd4f 	bl	8001e2c <L6474_SetAnalogValue>
						mode_transition_state = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 4 && mode_transition_state == 1) {
 800d394:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d398:	2b04      	cmp	r3, #4
 800d39a:	d10c      	bne.n	800d3b6 <main+0x5bd6>
 800d39c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	d108      	bne.n	800d3b6 <main+0x5bd6>
						L6474_SetAnalogValue(0, L6474_TVAL, 600);
 800d3a4:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800d658 <main+0x5e78>
 800d3a8:	2109      	movs	r1, #9
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	f7f4 fd3e 	bl	8001e2c <L6474_SetAnalogValue>
						mode_transition_state = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}
					if (mode_index_command == 5 && mode_transition_state == 1) {
 800d3b6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d3ba:	2b05      	cmp	r3, #5
 800d3bc:	d10c      	bne.n	800d3d8 <main+0x5bf8>
 800d3be:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d108      	bne.n	800d3d8 <main+0x5bf8>
						L6474_SetAnalogValue(0, L6474_TVAL, 800);
 800d3c6:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 800d65c <main+0x5e7c>
 800d3ca:	2109      	movs	r1, #9
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	f7f4 fd2d 	bl	8001e2c <L6474_SetAnalogValue>
						mode_transition_state = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 6 && mode_transition_state == 1) {
 800d3d8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d3dc:	2b06      	cmp	r3, #6
 800d3de:	d127      	bne.n	800d430 <main+0x5c50>
 800d3e0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d123      	bne.n	800d430 <main+0x5c50>
						rotor_test_speed_max = rotor_test_speed_max + 100;
 800d3e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800d3f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d3f6:	601a      	str	r2, [r3, #0]
						if (rotor_test_speed_max > 1000) {
 800d3f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d402:	dd04      	ble.n	800d40e <main+0x5c2e>
							rotor_test_speed_max = 1000;
 800d404:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d40c:	601a      	str	r2, [r3, #0]
						}
						BSP_MotorControl_SoftStop(0);
 800d40e:	2000      	movs	r0, #0
 800d410:	f7f6 fcfe 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d414:	2000      	movs	r0, #0
 800d416:	f7f6 fd3f 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 800d41a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	4619      	mov	r1, r3
 800d424:	2000      	movs	r0, #0
 800d426:	f7f6 fca3 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
						mode_transition_state = 0;
 800d42a:	2300      	movs	r3, #0
 800d42c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 7 && mode_transition_state == 1) {
 800d430:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d434:	2b07      	cmp	r3, #7
 800d436:	d133      	bne.n	800d4a0 <main+0x5cc0>
 800d438:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d12f      	bne.n	800d4a0 <main+0x5cc0>
						rotor_test_speed_max = rotor_test_speed_max - 100;
 800d440:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800d44a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d44e:	601a      	str	r2, [r3, #0]
						if (rotor_test_speed_max < 200) {
 800d450:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2bc7      	cmp	r3, #199	; 0xc7
 800d458:	dc03      	bgt.n	800d462 <main+0x5c82>
							rotor_test_speed_max = 200;
 800d45a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d45e:	22c8      	movs	r2, #200	; 0xc8
 800d460:	601a      	str	r2, [r3, #0]
						}
						if (rotor_test_speed_min > rotor_test_speed_max) {
 800d462:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	429a      	cmp	r2, r3
 800d470:	dd05      	ble.n	800d47e <main+0x5c9e>
							rotor_test_speed_max = rotor_test_speed_min;
 800d472:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d47c:	601a      	str	r2, [r3, #0]
						}
						BSP_MotorControl_SoftStop(0);
 800d47e:	2000      	movs	r0, #0
 800d480:	f7f6 fcc6 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d484:	2000      	movs	r0, #0
 800d486:	f7f6 fd07 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 800d48a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	b29b      	uxth	r3, r3
 800d492:	4619      	mov	r1, r3
 800d494:	2000      	movs	r0, #0
 800d496:	f7f6 fc6b 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
						mode_transition_state = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 8 && mode_transition_state == 1) {
 800d4a0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d4a4:	2b08      	cmp	r3, #8
 800d4a6:	d135      	bne.n	800d514 <main+0x5d34>
 800d4a8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d131      	bne.n	800d514 <main+0x5d34>
						rotor_test_speed_min = rotor_test_speed_min + 100;
 800d4b0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800d4ba:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4be:	601a      	str	r2, [r3, #0]
						if (rotor_test_speed_min > rotor_test_speed_max) {
 800d4c0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	dd05      	ble.n	800d4dc <main+0x5cfc>
							rotor_test_speed_min = rotor_test_speed_max;
 800d4d0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4da:	601a      	str	r2, [r3, #0]
						}
						if (rotor_test_speed_min > 1000) {
 800d4dc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d4e6:	dd04      	ble.n	800d4f2 <main+0x5d12>
							rotor_test_speed_min = 1000;
 800d4e8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d4ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d4f0:	601a      	str	r2, [r3, #0]
						}
						BSP_MotorControl_SoftStop(0);
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	f7f6 fc8c 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	f7f6 fccd 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 800d4fe:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	b29b      	uxth	r3, r3
 800d506:	4619      	mov	r1, r3
 800d508:	2000      	movs	r0, #0
 800d50a:	f7f6 fc59 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
						mode_transition_state = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 9 && mode_transition_state == 1) {
 800d514:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d518:	2b09      	cmp	r3, #9
 800d51a:	d125      	bne.n	800d568 <main+0x5d88>
 800d51c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d520:	2b01      	cmp	r3, #1
 800d522:	d121      	bne.n	800d568 <main+0x5d88>
						rotor_test_speed_min = rotor_test_speed_min - 100;
 800d524:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800d52e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d532:	601a      	str	r2, [r3, #0]
						if (rotor_test_speed_min < 200) {
 800d534:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2bc7      	cmp	r3, #199	; 0xc7
 800d53c:	dc03      	bgt.n	800d546 <main+0x5d66>
							rotor_test_speed_min = 200;
 800d53e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d542:	22c8      	movs	r2, #200	; 0xc8
 800d544:	601a      	str	r2, [r3, #0]
						}
						BSP_MotorControl_SoftStop(0);
 800d546:	2000      	movs	r0, #0
 800d548:	f7f6 fc62 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d54c:	2000      	movs	r0, #0
 800d54e:	f7f6 fca3 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 800d552:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	4619      	mov	r1, r3
 800d55c:	2000      	movs	r0, #0
 800d55e:	f7f6 fc2f 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
						mode_transition_state = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 16 && mode_transition_state == 1) {
 800d568:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d56c:	2b10      	cmp	r3, #16
 800d56e:	d133      	bne.n	800d5d8 <main+0x5df8>
 800d570:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d574:	2b01      	cmp	r3, #1
 800d576:	d12f      	bne.n	800d5d8 <main+0x5df8>
						rotor_test_acceleration_max = rotor_test_acceleration_max - 500;
 800d578:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800d582:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d586:	601a      	str	r2, [r3, #0]
						if (rotor_test_acceleration_max < 0) {
 800d588:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	da03      	bge.n	800d59a <main+0x5dba>
							rotor_test_acceleration_max = 0;
 800d592:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d596:	2200      	movs	r2, #0
 800d598:	601a      	str	r2, [r3, #0]
						}
						swing_deceleration_max = rotor_test_acceleration_max;
 800d59a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d5a4:	601a      	str	r2, [r3, #0]
						BSP_MotorControl_SoftStop(0);
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	f7f6 fc32 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	f7f6 fc73 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetAcceleration(0,
 800d5b2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7f6 fb65 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
								(uint16_t) (rotor_test_acceleration_max));
						BSP_MotorControl_SetDeceleration(0,
 800d5c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	f7f6 fb85 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
								(uint16_t) (swing_deceleration_max));
						mode_transition_state = 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 17 && mode_transition_state == 1) {
 800d5d8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d5dc:	2b11      	cmp	r3, #17
 800d5de:	d13f      	bne.n	800d660 <main+0x5e80>
 800d5e0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d13b      	bne.n	800d660 <main+0x5e80>
						rotor_test_acceleration_max = rotor_test_acceleration_max + 500;
 800d5e8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800d5f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d5f6:	601a      	str	r2, [r3, #0]
						if (rotor_test_acceleration_max > 10000) {
 800d5f8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800d602:	4293      	cmp	r3, r2
 800d604:	dd04      	ble.n	800d610 <main+0x5e30>
							rotor_test_acceleration_max = 10000;
 800d606:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d60a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d60e:	601a      	str	r2, [r3, #0]
						}
						swing_deceleration_max = rotor_test_acceleration_max;
 800d610:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d61a:	601a      	str	r2, [r3, #0]
						BSP_MotorControl_SoftStop(0);
 800d61c:	2000      	movs	r0, #0
 800d61e:	f7f6 fbf7 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 800d622:	2000      	movs	r0, #0
 800d624:	f7f6 fc38 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetAcceleration(0,
 800d628:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	b29b      	uxth	r3, r3
 800d630:	4619      	mov	r1, r3
 800d632:	2000      	movs	r0, #0
 800d634:	f7f6 fb2a 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
								(uint16_t) (rotor_test_acceleration_max));
						BSP_MotorControl_SetDeceleration(0,
 800d638:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4619      	mov	r1, r3
 800d642:	2000      	movs	r0, #0
 800d644:	f7f6 fb4a 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
								(uint16_t) (swing_deceleration_max));
						mode_transition_state = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800d64e:	e007      	b.n	800d660 <main+0x5e80>
 800d650:	20000db8 	.word	0x20000db8
 800d654:	43c80000 	.word	0x43c80000
 800d658:	44160000 	.word	0x44160000
 800d65c:	44480000 	.word	0x44480000
					}

					if (mode_index_command == 18 && mode_transition_state == 1) {
 800d660:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d664:	2b12      	cmp	r3, #18
 800d666:	d121      	bne.n	800d6ac <main+0x5ecc>
 800d668:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d11d      	bne.n	800d6ac <main+0x5ecc>
						rotor_chirp_amplitude = rotor_chirp_amplitude + 1;
 800d670:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d674:	edd3 7a00 	vldr	s15, [r3]
 800d678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d67c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d680:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d684:	edc3 7a00 	vstr	s15, [r3]
						if (rotor_chirp_amplitude > 10) {
 800d688:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d68c:	edd3 7a00 	vldr	s15, [r3]
 800d690:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800d694:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69c:	dd03      	ble.n	800d6a6 <main+0x5ec6>
							rotor_chirp_amplitude = 10;
 800d69e:	4b88      	ldr	r3, [pc, #544]	; (800d8c0 <main+0x60e0>)
 800d6a0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800d6a4:	6013      	str	r3, [r2, #0]
						}
						mode_transition_state = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (mode_index_command == 19 && mode_transition_state == 1) {
 800d6ac:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800d6b0:	2b13      	cmp	r3, #19
 800d6b2:	d122      	bne.n	800d6fa <main+0x5f1a>
 800d6b4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d11e      	bne.n	800d6fa <main+0x5f1a>
						rotor_chirp_amplitude = rotor_chirp_amplitude - 1;
 800d6bc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d6c0:	edd3 7a00 	vldr	s15, [r3]
 800d6c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6cc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d6d0:	edc3 7a00 	vstr	s15, [r3]
						if (rotor_chirp_amplitude < 1) {
 800d6d4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d6d8:	edd3 7a00 	vldr	s15, [r3]
 800d6dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e8:	d504      	bpl.n	800d6f4 <main+0x5f14>
							rotor_chirp_amplitude = 1;
 800d6ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800d6ee:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800d6f2:	6013      	str	r3, [r2, #0]
						}
						mode_transition_state = 0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					}

					if (i == 0) {
 800d6fa:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d107      	bne.n	800d712 <main+0x5f32>
						cycle_period_start = HAL_GetTick();
 800d702:	f7f6 fd41 	bl	8004188 <HAL_GetTick>
 800d706:	4603      	mov	r3, r0
 800d708:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
						cycle_period_sum = 100 * T_SAMPLE * 1000 - 1;
 800d70c:	23c7      	movs	r3, #199	; 0xc7
 800d70e:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
					}
					if (i % 100 == 0) {
 800d712:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800d716:	4b6b      	ldr	r3, [pc, #428]	; (800d8c4 <main+0x60e4>)
 800d718:	fb83 1302 	smull	r1, r3, r3, r2
 800d71c:	1159      	asrs	r1, r3, #5
 800d71e:	17d3      	asrs	r3, r2, #31
 800d720:	1acb      	subs	r3, r1, r3
 800d722:	2164      	movs	r1, #100	; 0x64
 800d724:	fb01 f303 	mul.w	r3, r1, r3
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10c      	bne.n	800d748 <main+0x5f68>
						cycle_period_sum = HAL_GetTick() - cycle_period_start;
 800d72e:	f7f6 fd2b 	bl	8004188 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
						cycle_period_start = HAL_GetTick();
 800d73e:	f7f6 fd23 	bl	8004188 <HAL_GetTick>
 800d742:	4603      	mov	r3, r0
 800d744:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
					}

					tick_cycle_previous = tick_cycle_current;
 800d748:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800d74c:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800d750:	601a      	str	r2, [r3, #0]
					tick_cycle_current = tick;
 800d752:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800d756:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
					chirp_time = (float) (i) / 400;
 800d75a:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800d75e:	ee07 3a90 	vmov	s15, r3
 800d762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d766:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d76a:	eddf 6a57 	vldr	s13, [pc, #348]	; 800d8c8 <main+0x60e8>
 800d76e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d772:	edc3 7a00 	vstr	s15, [r3]
					rotor_chirp_frequency = rotor_chirp_start_freq
							+ (rotor_chirp_end_freq - rotor_chirp_start_freq)
 800d776:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800d77a:	ed93 7a00 	vldr	s14, [r3]
 800d77e:	f207 5344 	addw	r3, r7, #1348	; 0x544
 800d782:	edd3 7a00 	vldr	s15, [r3]
 800d786:	ee37 7a67 	vsub.f32	s14, s14, s15
									* (float) (i) / rotor_chirp_step_period;
 800d78a:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800d78e:	ee07 3a90 	vmov	s15, r3
 800d792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d796:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d79a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	ee07 3a90 	vmov	s15, r3
 800d7a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					rotor_chirp_frequency = rotor_chirp_start_freq
 800d7ac:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800d7b0:	f207 5244 	addw	r2, r7, #1348	; 0x544
 800d7b4:	ed92 7a00 	vldr	s14, [r2]
 800d7b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7bc:	edc3 7a00 	vstr	s15, [r3]

					if (mode_index == 1) {
 800d7c0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d140      	bne.n	800d84a <main+0x606a>
						rotor_position_command =
								rotor_chirp_amplitude
										* (float) (STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)
 800d7c8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d7cc:	edd3 7a00 	vldr	s15, [r3]
 800d7d0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d8cc <main+0x60ec>
 800d7d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7d8:	ee17 0a90 	vmov	r0, s15
 800d7dc:	f7f2 fecc 	bl	8000578 <__aeabi_f2d>
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	460d      	mov	r5, r1
										* sin(
												2.0 * 3.14159
														* rotor_chirp_frequency
 800d7e4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f7f2 fec5 	bl	8000578 <__aeabi_f2d>
 800d7ee:	a332      	add	r3, pc, #200	; (adr r3, 800d8b8 <main+0x60d8>)
 800d7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f4:	f7f2 ff18 	bl	8000628 <__aeabi_dmul>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4690      	mov	r8, r2
 800d7fe:	4699      	mov	r9, r3
										* sin(
 800d800:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	f7f2 feb7 	bl	8000578 <__aeabi_f2d>
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	4640      	mov	r0, r8
 800d810:	4649      	mov	r1, r9
 800d812:	f7f2 ff09 	bl	8000628 <__aeabi_dmul>
 800d816:	4602      	mov	r2, r0
 800d818:	460b      	mov	r3, r1
 800d81a:	ec43 2b17 	vmov	d7, r2, r3
 800d81e:	eeb0 0a47 	vmov.f32	s0, s14
 800d822:	eef0 0a67 	vmov.f32	s1, s15
 800d826:	f009 fc9f 	bl	8017168 <sin>
 800d82a:	ec53 2b10 	vmov	r2, r3, d0
 800d82e:	4620      	mov	r0, r4
 800d830:	4629      	mov	r1, r5
 800d832:	f7f2 fef9 	bl	8000628 <__aeabi_dmul>
 800d836:	4603      	mov	r3, r0
 800d838:	460c      	mov	r4, r1
 800d83a:	4618      	mov	r0, r3
 800d83c:	4621      	mov	r1, r4
 800d83e:	f7f3 f9eb 	bl	8000c18 <__aeabi_d2f>
 800d842:	4602      	mov	r2, r0
						rotor_position_command =
 800d844:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d848:	601a      	str	r2, [r3, #0]
														* chirp_time);
					}

					if (mode_index == 2) {
 800d84a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800d84e:	2b02      	cmp	r3, #2
 800d850:	d160      	bne.n	800d914 <main+0x6134>
						if (sin(
								2.0 * 3.14159 * rotor_chirp_frequency
 800d852:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800d856:	6818      	ldr	r0, [r3, #0]
 800d858:	f7f2 fe8e 	bl	8000578 <__aeabi_f2d>
 800d85c:	a316      	add	r3, pc, #88	; (adr r3, 800d8b8 <main+0x60d8>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	f7f2 fee1 	bl	8000628 <__aeabi_dmul>
 800d866:	4603      	mov	r3, r0
 800d868:	460c      	mov	r4, r1
 800d86a:	4625      	mov	r5, r4
 800d86c:	461c      	mov	r4, r3
						if (sin(
 800d86e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	f7f2 fe80 	bl	8000578 <__aeabi_f2d>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 fed2 	bl	8000628 <__aeabi_dmul>
 800d884:	4603      	mov	r3, r0
 800d886:	460c      	mov	r4, r1
 800d888:	ec44 3b17 	vmov	d7, r3, r4
 800d88c:	eeb0 0a47 	vmov.f32	s0, s14
 800d890:	eef0 0a67 	vmov.f32	s1, s15
 800d894:	f009 fc68 	bl	8017168 <sin>
 800d898:	ec51 0b10 	vmov	r0, r1, d0
 800d89c:	f04f 0200 	mov.w	r2, #0
 800d8a0:	f04f 0300 	mov.w	r3, #0
 800d8a4:	f7f3 f932 	bl	8000b0c <__aeabi_dcmplt>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d010      	beq.n	800d8d0 <main+0x60f0>
										* chirp_time) < 0) {
							k = -1;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8b2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800d8b6:	e00e      	b.n	800d8d6 <main+0x60f6>
 800d8b8:	f01b866e 	.word	0xf01b866e
 800d8bc:	401921f9 	.word	0x401921f9
 800d8c0:	41200000 	.word	0x41200000
 800d8c4:	51eb851f 	.word	0x51eb851f
 800d8c8:	43c80000 	.word	0x43c80000
 800d8cc:	418e3958 	.word	0x418e3958
						} else {
							k = 1;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
						}
						rotor_position_command = k * rotor_chirp_amplitude
 800d8d6:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800d8da:	ee07 3a90 	vmov	s15, r3
 800d8de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8e2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800d8e6:	edd3 7a00 	vldr	s15, [r3]
 800d8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ee:	ee17 0a90 	vmov	r0, s15
 800d8f2:	f7f2 fe41 	bl	8000578 <__aeabi_f2d>
								* STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 800d8f6:	a379      	add	r3, pc, #484	; (adr r3, 800dadc <main+0x62fc>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	f7f2 fe94 	bl	8000628 <__aeabi_dmul>
 800d900:	4603      	mov	r3, r0
 800d902:	460c      	mov	r4, r1
 800d904:	4618      	mov	r0, r3
 800d906:	4621      	mov	r1, r4
 800d908:	f7f3 f986 	bl	8000c18 <__aeabi_d2f>
 800d90c:	4602      	mov	r2, r0
						rotor_position_command = k * rotor_chirp_amplitude
 800d90e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d912:	601a      	str	r2, [r3, #0]
					}

					current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800d914:	2000      	movs	r0, #0
 800d916:	f7f6 f907 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
					ret = rotor_position_read(&rotor_position_initial);
 800d920:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800d924:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800d928:	4618      	mov	r0, r3
 800d92a:	f7f9 fd10 	bl	800734e <rotor_position_read>
 800d92e:	6020      	str	r0, [r4, #0]
					BSP_MotorControl_GoTo(0,
							-rotor_position_initial
									+ (int) (rotor_position_command));
 800d930:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d934:	edd3 7a00 	vldr	s15, [r3]
 800d938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d93c:	ee17 2a90 	vmov	r2, s15
					BSP_MotorControl_GoTo(0,
 800d940:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800d944:	681b      	ldr	r3, [r3, #0]
									+ (int) (rotor_position_command));
 800d946:	1ad3      	subs	r3, r2, r3
					BSP_MotorControl_GoTo(0,
 800d948:	4619      	mov	r1, r3
 800d94a:	2000      	movs	r0, #0
 800d94c:	f7f6 f97c 	bl	8003c48 <BSP_MotorControl_GoTo>

					if (BSP_MotorControl_GetDeviceState(0) == ACCELERATING) {
 800d950:	2000      	movs	r0, #0
 800d952:	f7f6 f931 	bl	8003bb8 <BSP_MotorControl_GetDeviceState>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <main+0x6182>
						motor_state = 1;
 800d95c:	2301      	movs	r3, #1
 800d95e:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
					}
					if (BSP_MotorControl_GetDeviceState(0) == DECELERATING) {
 800d962:	2000      	movs	r0, #0
 800d964:	f7f6 f928 	bl	8003bb8 <BSP_MotorControl_GetDeviceState>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d103      	bne.n	800d976 <main+0x6196>
						motor_state = -1;
 800d96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d972:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
					}
					if (BSP_MotorControl_GetDeviceState(0) == STEADY) {
 800d976:	2000      	movs	r0, #0
 800d978:	f7f6 f91e 	bl	8003bb8 <BSP_MotorControl_GetDeviceState>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b03      	cmp	r3, #3
 800d980:	d103      	bne.n	800d98a <main+0x61aa>
						motor_state = -2;
 800d982:	f06f 0301 	mvn.w	r3, #1
 800d986:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
					}
					if (BSP_MotorControl_GetDeviceState(0) == INACTIVE) {
 800d98a:	2000      	movs	r0, #0
 800d98c:	f7f6 f914 	bl	8003bb8 <BSP_MotorControl_GetDeviceState>
 800d990:	4603      	mov	r3, r0
 800d992:	2b08      	cmp	r3, #8
 800d994:	d102      	bne.n	800d99c <main+0x61bc>
						motor_state = 0;
 800d996:	2300      	movs	r3, #0
 800d998:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
					}
					ret = rotor_position_read(&rotor_position);
 800d99c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800d9a0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7f9 fcd2 	bl	800734e <rotor_position_read>
 800d9aa:	6020      	str	r0, [r4, #0]
					current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	f7f6 f8bb 	bl	8003b28 <BSP_MotorControl_GetCurrentSpeed>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f8a7 351a 	strh.w	r3, [r7, #1306]	; 0x51a
					sprintf(msg,
							"%i\t%i\t%i\t%i\t%i\t%f\t%i\t%i\t%i\t%i\t%i\r\n", i,
							cycle_period_sum,
							(int) (tick_cycle_current - tick_cycle_previous),
 800d9b8:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800d9bc:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	1ad3      	subs	r3, r2, r3
					sprintf(msg,
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	f8b7 551a 	ldrh.w	r5, [r7, #1306]	; 0x51a
 800d9ca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800d9ce:	681e      	ldr	r6, [r3, #0]
 800d9d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f2 fdce 	bl	8000578 <__aeabi_f2d>
 800d9dc:	4680      	mov	r8, r0
 800d9de:	4689      	mov	r9, r1
 800d9e0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800d9e4:	6812      	ldr	r2, [r2, #0]
 800d9e6:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800d9ea:	6809      	ldr	r1, [r1, #0]
 800d9ec:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800d9f0:	6800      	ldr	r0, [r0, #0]
 800d9f2:	f507 7c90 	add.w	ip, r7, #288	; 0x120
 800d9f6:	f8dc 4000 	ldr.w	r4, [ip]
 800d9fa:	f507 7c07 	add.w	ip, r7, #540	; 0x21c
 800d9fe:	940a      	str	r4, [sp, #40]	; 0x28
 800da00:	9009      	str	r0, [sp, #36]	; 0x24
 800da02:	9108      	str	r1, [sp, #32]
 800da04:	9207      	str	r2, [sp, #28]
 800da06:	f8d7 2550 	ldr.w	r2, [r7, #1360]	; 0x550
 800da0a:	9206      	str	r2, [sp, #24]
 800da0c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800da10:	9602      	str	r6, [sp, #8]
 800da12:	9501      	str	r5, [sp, #4]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 800da1c:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800da20:	492b      	ldr	r1, [pc, #172]	; (800dad0 <main+0x62f0>)
 800da22:	4660      	mov	r0, ip
 800da24:	f005 f894 	bl	8012b50 <sprintf>
							current_speed, rotor_position,
							rotor_position_command, motor_state,
							rotor_test_speed_max, rotor_test_speed_min,
							rotor_test_acceleration_max, swing_deceleration_max);
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800da28:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7f2 fbe1 	bl	80001f4 <strlen>
 800da32:	4603      	mov	r3, r0
 800da34:	b29a      	uxth	r2, r3
 800da36:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800da3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da3e:	4825      	ldr	r0, [pc, #148]	; (800dad4 <main+0x62f4>)
 800da40:	f7f8 ffb8 	bl	80069b4 <HAL_UART_Transmit>
							HAL_MAX_DELAY);
					i = i + 1;
 800da44:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 800da48:	3301      	adds	r3, #1
 800da4a:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
				while (i < rotor_chirp_step_period) {
 800da4e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800da52:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	f6ff ab9d 	blt.w	800d198 <main+0x59b8>
 800da5e:	e000      	b.n	800da62 <main+0x6282>
						break;
 800da60:	bf00      	nop
				}
				if (mode_index_command == mode_quit) {
 800da62:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800da66:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d008      	beq.n	800da82 <main+0x62a2>
					break;
				}
				j = j + 1;
 800da70:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800da7c:	601a      	str	r2, [r3, #0]
				i = 0;
 800da7e:	f7ff bb86 	b.w	800d18e <main+0x59ae>
					break;
 800da82:	bf00      	nop
			}
			L6474_CmdDisable(0);
 800da84:	2000      	movs	r0, #0
 800da86:	f7f3 fab7 	bl	8000ff8 <L6474_CmdDisable>
			while (1){
				HAL_Delay(5000);
 800da8a:	f241 3088 	movw	r0, #5000	; 0x1388
 800da8e:	f7f6 fb87 	bl	80041a0 <HAL_Delay>
				sprintf(msg, "\r\nMotor Characterization Terminated, Press Reset to Continue");
 800da92:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800da96:	4a10      	ldr	r2, [pc, #64]	; (800dad8 <main+0x62f8>)
 800da98:	461c      	mov	r4, r3
 800da9a:	4615      	mov	r5, r2
 800da9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800daa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800daac:	c407      	stmia	r4!, {r0, r1, r2}
 800daae:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dab0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7f2 fb9d 	bl	80001f4 <strlen>
 800daba:	4603      	mov	r3, r0
 800dabc:	b29a      	uxth	r2, r3
 800dabe:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dac6:	4803      	ldr	r0, [pc, #12]	; (800dad4 <main+0x62f4>)
 800dac8:	f7f8 ff74 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(5000);
 800dacc:	e7dd      	b.n	800da8a <main+0x62aa>
 800dace:	bf00      	nop
 800dad0:	080191cc 	.word	0x080191cc
 800dad4:	20000f20 	.word	0x20000f20
 800dad8:	080191f0 	.word	0x080191f0
 800dadc:	020c49ba 	.word	0x020c49ba
 800dae0:	4031c72b 	.word	0x4031c72b
		 *
		 * Interactive Digital Motor Control system
		 *
		 */

		if (enable_rotor_actuator_control == 1) {
 800dae4:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800dae8:	2b01      	cmp	r3, #1
 800daea:	f040 8231 	bne.w	800df50 <main+0x6770>

				/*
				 * Set Motor Speed Profile
				 */

				sprintf(msg, "\r\nEnter Motor Maximum Speed: ");
 800daee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800daf2:	4ad5      	ldr	r2, [pc, #852]	; (800de48 <main+0x6668>)
 800daf4:	461c      	mov	r4, r3
 800daf6:	4615      	mov	r5, r2
 800daf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dafa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dafc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800db00:	c407      	stmia	r4!, {r0, r1, r2}
 800db02:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800db04:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800db08:	4618      	mov	r0, r3
 800db0a:	f7f2 fb73 	bl	80001f4 <strlen>
 800db0e:	4603      	mov	r3, r0
 800db10:	b29a      	uxth	r2, r3
 800db12:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800db16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db1a:	48cc      	ldr	r0, [pc, #816]	; (800de4c <main+0x666c>)
 800db1c:	f7f8 ff4a 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 800db20:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800db24:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800db28:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800db2c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800db30:	f7f9 fdf8 	bl	8007724 <read_int>
						&rotor_test_speed_max);
				sprintf(msg, "%i", rotor_test_speed_max);
 800db34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800db3e:	49c4      	ldr	r1, [pc, #784]	; (800de50 <main+0x6670>)
 800db40:	4618      	mov	r0, r3
 800db42:	f005 f805 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800db46:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7f2 fb52 	bl	80001f4 <strlen>
 800db50:	4603      	mov	r3, r0
 800db52:	b29a      	uxth	r2, r3
 800db54:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800db58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db5c:	48bb      	ldr	r0, [pc, #748]	; (800de4c <main+0x666c>)
 800db5e:	f7f8 ff29 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				sprintf(msg, "\r\nEnter Motor Minimum Speed: ");
 800db62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800db66:	4abb      	ldr	r2, [pc, #748]	; (800de54 <main+0x6674>)
 800db68:	461c      	mov	r4, r3
 800db6a:	4615      	mov	r5, r2
 800db6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800db74:	c407      	stmia	r4!, {r0, r1, r2}
 800db76:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800db78:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7f2 fb39 	bl	80001f4 <strlen>
 800db82:	4603      	mov	r3, r0
 800db84:	b29a      	uxth	r2, r3
 800db86:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800db8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db8e:	48af      	ldr	r0, [pc, #700]	; (800de4c <main+0x666c>)
 800db90:	f7f8 ff10 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 800db94:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800db98:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800db9c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800dba0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800dba4:	f7f9 fdbe 	bl	8007724 <read_int>
						&rotor_test_speed_min);
				sprintf(msg, "%i", rotor_test_speed_min);
 800dba8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dbb2:	49a7      	ldr	r1, [pc, #668]	; (800de50 <main+0x6670>)
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f004 ffcb 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dbba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7f2 fb18 	bl	80001f4 <strlen>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dbcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbd0:	489e      	ldr	r0, [pc, #632]	; (800de4c <main+0x666c>)
 800dbd2:	f7f8 feef 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				sprintf(msg, "\r\nEnter Motor Maximum Acceleration: ");
 800dbd6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dbda:	4a9f      	ldr	r2, [pc, #636]	; (800de58 <main+0x6678>)
 800dbdc:	461c      	mov	r4, r3
 800dbde:	4615      	mov	r5, r2
 800dbe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dbe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dbe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dbec:	6020      	str	r0, [r4, #0]
 800dbee:	3404      	adds	r4, #4
 800dbf0:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dbf2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7f2 fafc 	bl	80001f4 <strlen>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc08:	4890      	ldr	r0, [pc, #576]	; (800de4c <main+0x666c>)
 800dc0a:	f7f8 fed3 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 800dc0e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dc12:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800dc16:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800dc1a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800dc1e:	f7f9 fd81 	bl	8007724 <read_int>
						&rotor_test_acceleration_max);
				sprintf(msg, "%i", rotor_test_acceleration_max);
 800dc22:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dc2c:	4988      	ldr	r1, [pc, #544]	; (800de50 <main+0x6670>)
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f004 ff8e 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dc34:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f2 fadb 	bl	80001f4 <strlen>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc4a:	4880      	ldr	r0, [pc, #512]	; (800de4c <main+0x666c>)
 800dc4c:	f7f8 feb2 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				sprintf(msg, "\r\nEnter Motor Maximum Deceleration: ");
 800dc50:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dc54:	4a81      	ldr	r2, [pc, #516]	; (800de5c <main+0x667c>)
 800dc56:	461c      	mov	r4, r3
 800dc58:	4615      	mov	r5, r2
 800dc5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dc66:	6020      	str	r0, [r4, #0]
 800dc68:	3404      	adds	r4, #4
 800dc6a:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dc6c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7f2 fabf 	bl	80001f4 <strlen>
 800dc76:	4603      	mov	r3, r0
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dc7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc82:	4872      	ldr	r0, [pc, #456]	; (800de4c <main+0x666c>)
 800dc84:	f7f8 fe96 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 800dc88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dc8c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800dc90:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800dc94:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800dc98:	f7f9 fd44 	bl	8007724 <read_int>
						&swing_deceleration_max);
				sprintf(msg, "%i", swing_deceleration_max);
 800dc9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dca6:	496a      	ldr	r1, [pc, #424]	; (800de50 <main+0x6670>)
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f004 ff51 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dcae:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7f2 fa9e 	bl	80001f4 <strlen>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dcc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcc4:	4861      	ldr	r0, [pc, #388]	; (800de4c <main+0x666c>)
 800dcc6:	f7f8 fe75 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 800dcca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	f7f6 f84b 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
				BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 800dcda:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	4619      	mov	r1, r3
 800dce4:	2000      	movs	r0, #0
 800dce6:	f7f6 f86b 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>

				sprintf(msg, "\n\rMotor Profile Speeds Minimum %u Maximum %u",
 800dcea:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800dcfa:	4959      	ldr	r1, [pc, #356]	; (800de60 <main+0x6680>)
 800dcfc:	f004 ff28 	bl	8012b50 <sprintf>
						rotor_test_speed_min, rotor_test_speed_max);
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800dd00:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f2 fa75 	bl	80001f4 <strlen>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dd12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd16:	484d      	ldr	r0, [pc, #308]	; (800de4c <main+0x666c>)
 800dd18:	f7f8 fe4c 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

				BSP_MotorControl_SetAcceleration(0, rotor_test_acceleration_max);
 800dd1c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4619      	mov	r1, r3
 800dd26:	2000      	movs	r0, #0
 800dd28:	f7f5 ffb0 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
				BSP_MotorControl_SetDeceleration(0, swing_deceleration_max);
 800dd2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4619      	mov	r1, r3
 800dd36:	2000      	movs	r0, #0
 800dd38:	f7f5 ffd0 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

				sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
						BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800dd3c:	2000      	movs	r0, #0
 800dd3e:	f7f5 fecf 	bl	8003ae0 <BSP_MotorControl_GetAcceleration>
 800dd42:	4603      	mov	r3, r0
				sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
 800dd44:	461c      	mov	r4, r3
						BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800dd46:	2000      	movs	r0, #0
 800dd48:	f7f5 ff12 	bl	8003b70 <BSP_MotorControl_GetDeceleration>
 800dd4c:	4603      	mov	r3, r0
				sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
 800dd4e:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800dd52:	4622      	mov	r2, r4
 800dd54:	4943      	ldr	r1, [pc, #268]	; (800de64 <main+0x6684>)
 800dd56:	f004 fefb 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800dd5a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f2 fa48 	bl	80001f4 <strlen>
 800dd64:	4603      	mov	r3, r0
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dd6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd70:	4836      	ldr	r0, [pc, #216]	; (800de4c <main+0x666c>)
 800dd72:	f7f8 fe1f 	bl	80069b4 <HAL_UART_Transmit>

				j = 1;
 800dd76:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]
				 * Set initial rotor position
				 */

				while (1) {

					sprintf(msg, "\r\nEnter Motor Position Target in Degrees: ");
 800dd7e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dd82:	4a39      	ldr	r2, [pc, #228]	; (800de68 <main+0x6688>)
 800dd84:	461c      	mov	r4, r3
 800dd86:	4615      	mov	r5, r2
 800dd88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd94:	c403      	stmia	r4!, {r0, r1}
 800dd96:	8022      	strh	r2, [r4, #0]
 800dd98:	3402      	adds	r4, #2
 800dd9a:	0c13      	lsrs	r3, r2, #16
 800dd9c:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800dd9e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7f2 fa26 	bl	80001f4 <strlen>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ddb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddb4:	4825      	ldr	r0, [pc, #148]	; (800de4c <main+0x666c>)
 800ddb6:	f7f8 fdfd 	bl	80069b4 <HAL_UART_Transmit>

					read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &rotor_position_command);
 800ddba:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ddbe:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800ddc2:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800ddc6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800ddca:	f7f9 fc49 	bl	8007660 <read_float>
					sprintf(msg, "%0.3f", rotor_position_command);
 800ddce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7f2 fbcf 	bl	8000578 <__aeabi_f2d>
 800ddda:	4603      	mov	r3, r0
 800dddc:	460c      	mov	r4, r1
 800ddde:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800dde2:	461a      	mov	r2, r3
 800dde4:	4623      	mov	r3, r4
 800dde6:	4921      	ldr	r1, [pc, #132]	; (800de6c <main+0x668c>)
 800dde8:	f004 feb2 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ddec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7f2 f9ff 	bl	80001f4 <strlen>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ddfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de02:	4812      	ldr	r0, [pc, #72]	; (800de4c <main+0x666c>)
 800de04:	f7f8 fdd6 	bl	80069b4 <HAL_UART_Transmit>

					ret = rotor_position_read(&rotor_position_initial);
 800de08:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800de0c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de10:	4618      	mov	r0, r3
 800de12:	f7f9 fa9c 	bl	800734e <rotor_position_read>
 800de16:	6020      	str	r0, [r4, #0]
					BSP_MotorControl_GoTo(0, -rotor_position_initial + (int)(rotor_position_command*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800de18:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4618      	mov	r0, r3
 800de20:	f7f2 fbaa 	bl	8000578 <__aeabi_f2d>
 800de24:	a306      	add	r3, pc, #24	; (adr r3, 800de40 <main+0x6660>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 fbfd 	bl	8000628 <__aeabi_dmul>
 800de2e:	4603      	mov	r3, r0
 800de30:	460c      	mov	r4, r1
 800de32:	4618      	mov	r0, r3
 800de34:	4621      	mov	r1, r4
 800de36:	f7f2 fea7 	bl	8000b88 <__aeabi_d2iz>
 800de3a:	4602      	mov	r2, r0
 800de3c:	e018      	b.n	800de70 <main+0x6690>
 800de3e:	bf00      	nop
 800de40:	020c49ba 	.word	0x020c49ba
 800de44:	4031c72b 	.word	0x4031c72b
 800de48:	08019230 	.word	0x08019230
 800de4c:	20000f20 	.word	0x20000f20
 800de50:	0801875c 	.word	0x0801875c
 800de54:	08019250 	.word	0x08019250
 800de58:	08019270 	.word	0x08019270
 800de5c:	08019298 	.word	0x08019298
 800de60:	080192c0 	.word	0x080192c0
 800de64:	080192f0 	.word	0x080192f0
 800de68:	08019330 	.word	0x08019330
 800de6c:	0801935c 	.word	0x0801935c
 800de70:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	4619      	mov	r1, r3
 800de7a:	2000      	movs	r0, #0
 800de7c:	f7f5 fee4 	bl	8003c48 <BSP_MotorControl_GoTo>
					BSP_MotorControl_WaitWhileActive(0);
 800de80:	2000      	movs	r0, #0
 800de82:	f7f6 f809 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

					ret = rotor_position_read(&rotor_position);
 800de86:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800de8a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800de8e:	4618      	mov	r0, r3
 800de90:	f7f9 fa5d 	bl	800734e <rotor_position_read>
 800de94:	6020      	str	r0, [r4, #0]
					sprintf(msg, "Motor Position in Steps %i and Degrees %.2f\r\n",
 800de96:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800de9a:	681d      	ldr	r5, [r3, #0]
							rotor_position, (float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800de9c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f2 fb56 	bl	8000554 <__aeabi_i2d>
 800dea8:	a353      	add	r3, pc, #332	; (adr r3, 800dff8 <main+0x6818>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	f7f2 fce5 	bl	800087c <__aeabi_ddiv>
 800deb2:	4603      	mov	r3, r0
 800deb4:	460c      	mov	r4, r1
 800deb6:	4618      	mov	r0, r3
 800deb8:	4621      	mov	r1, r4
 800deba:	f7f2 fead 	bl	8000c18 <__aeabi_d2f>
 800debe:	4603      	mov	r3, r0
					sprintf(msg, "Motor Position in Steps %i and Degrees %.2f\r\n",
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f2 fb59 	bl	8000578 <__aeabi_f2d>
 800dec6:	4603      	mov	r3, r0
 800dec8:	460c      	mov	r4, r1
 800deca:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800dece:	e9cd 3400 	strd	r3, r4, [sp]
 800ded2:	462a      	mov	r2, r5
 800ded4:	494a      	ldr	r1, [pc, #296]	; (800e000 <main+0x6820>)
 800ded6:	f004 fe3b 	bl	8012b50 <sprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800deda:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dede:	4618      	mov	r0, r3
 800dee0:	f7f2 f988 	bl	80001f4 <strlen>
 800dee4:	4603      	mov	r3, r0
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800deec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800def0:	4844      	ldr	r0, [pc, #272]	; (800e004 <main+0x6824>)
 800def2:	f7f8 fd5f 	bl	80069b4 <HAL_UART_Transmit>

					sprintf(msg, "\r\nEnter 1 to Exit Motor Test, 0 to Continue ");
 800def6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800defa:	4a43      	ldr	r2, [pc, #268]	; (800e008 <main+0x6828>)
 800defc:	461c      	mov	r4, r3
 800defe:	4615      	mov	r5, r2
 800df00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800df0c:	c407      	stmia	r4!, {r0, r1, r2}
 800df0e:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800df10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800df14:	4618      	mov	r0, r3
 800df16:	f7f2 f96d 	bl	80001f4 <strlen>
 800df1a:	4603      	mov	r3, r0
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800df22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df26:	4837      	ldr	r0, [pc, #220]	; (800e004 <main+0x6824>)
 800df28:	f7f8 fd44 	bl	80069b4 <HAL_UART_Transmit>

					read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 800df2c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800df30:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800df34:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800df38:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800df3c:	f7f9 fbf2 	bl	8007724 <read_int>
							&j);
					if (j == 1) {
 800df40:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d000      	beq.n	800df4c <main+0x676c>
					sprintf(msg, "\r\nEnter Motor Position Target in Degrees: ");
 800df4a:	e718      	b.n	800dd7e <main+0x659e>
						break;
 800df4c:	bf00      	nop
				sprintf(msg, "\r\nEnter Motor Maximum Speed: ");
 800df4e:	e5ce      	b.n	800daee <main+0x630e>
		 *	Correct Operation is confirmed if Rotor first rotates clockwise (viewing from above) by 90
		 *	degrees, then returns to initial location, then rotates 90 degrees counterclockwise by 90
		 *	degrees and then returns to initial location
		 */

		if (enable_rotor_actuator_test == 1) {
 800df50:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800df54:	2b01      	cmp	r3, #1
 800df56:	f040 8350 	bne.w	800e5fa <main+0x6e1a>

			/*
			 * Set Motor Speed Profile
			 */

			BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_MODE_1);
 800df5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800df5e:	2000      	movs	r0, #0
 800df60:	f7f5 ff06 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
			BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_MODE_1);
 800df64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800df68:	2000      	movs	r0, #0
 800df6a:	f7f5 ff29 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>

			sprintf(msg, "\n\rMotor Profile Speeds Min %u Max %u",
 800df6e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800df7e:	4923      	ldr	r1, [pc, #140]	; (800e00c <main+0x682c>)
 800df80:	f004 fde6 	bl	8012b50 <sprintf>
					rotor_test_speed_min, rotor_test_speed_max);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800df84:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800df88:	4618      	mov	r0, r3
 800df8a:	f7f2 f933 	bl	80001f4 <strlen>
 800df8e:	4603      	mov	r3, r0
 800df90:	b29a      	uxth	r2, r3
 800df92:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800df96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df9a:	481a      	ldr	r0, [pc, #104]	; (800e004 <main+0x6824>)
 800df9c:	f7f8 fd0a 	bl	80069b4 <HAL_UART_Transmit>

			BSP_MotorControl_SetAcceleration(0,(uint16_t)(MAX_ACCEL));
 800dfa0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f7f5 fe71 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
			BSP_MotorControl_SetDeceleration(0,(uint16_t)(MAX_DECEL));
 800dfaa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800dfae:	2000      	movs	r0, #0
 800dfb0:	f7f5 fe94 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
					BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f7f5 fd93 	bl	8003ae0 <BSP_MotorControl_GetAcceleration>
 800dfba:	4603      	mov	r3, r0
			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
 800dfbc:	461c      	mov	r4, r3
					BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f7f5 fdd6 	bl	8003b70 <BSP_MotorControl_GetDeceleration>
 800dfc4:	4603      	mov	r3, r0
			sprintf(msg, "\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
 800dfc6:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800dfca:	4622      	mov	r2, r4
 800dfcc:	4910      	ldr	r1, [pc, #64]	; (800e010 <main+0x6830>)
 800dfce:	f004 fdbf 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800dfd2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f2 f90c 	bl	80001f4 <strlen>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800dfe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dfe8:	4806      	ldr	r0, [pc, #24]	; (800e004 <main+0x6824>)
 800dfea:	f7f8 fce3 	bl	80069b4 <HAL_UART_Transmit>

			j = 0;
 800dfee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800dff2:	2200      	movs	r2, #0
 800dff4:	601a      	str	r2, [r3, #0]

			while (j < ROTOR_ACTUATOR_TEST_CYCLES) {
 800dff6:	e2fa      	b.n	800e5ee <main+0x6e0e>
 800dff8:	020c49ba 	.word	0x020c49ba
 800dffc:	4021c72b 	.word	0x4021c72b
 800e000:	08019364 	.word	0x08019364
 800e004:	20000f20 	.word	0x20000f20
 800e008:	08019394 	.word	0x08019394
 800e00c:	08019050 	.word	0x08019050
 800e010:	08019078 	.word	0x08019078

				j++;
 800e014:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	1c5a      	adds	r2, r3, #1
 800e01c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e020:	601a      	str	r2, [r3, #0]

				sprintf(msg, "\r\n\r\n********  Starting Rotor Motor Control Test  ********\r\n");
 800e022:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e026:	4ad2      	ldr	r2, [pc, #840]	; (800e370 <main+0x6b90>)
 800e028:	461c      	mov	r4, r3
 800e02a:	4615      	mov	r5, r2
 800e02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e040:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e044:	4618      	mov	r0, r3
 800e046:	f7f2 f8d5 	bl	80001f4 <strlen>
 800e04a:	4603      	mov	r3, r0
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e056:	48c7      	ldr	r0, [pc, #796]	; (800e374 <main+0x6b94>)
 800e058:	f7f8 fcac 	bl	80069b4 <HAL_UART_Transmit>

				ret = rotor_position_read(&rotor_position);
 800e05c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e060:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e064:	4618      	mov	r0, r3
 800e066:	f7f9 f972 	bl	800734e <rotor_position_read>
 800e06a:	6020      	str	r0, [r4, #0]
				sprintf(msg, "Motor Position at Zero Angle: %.2f\r\n",
						(float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800e06c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4618      	mov	r0, r3
 800e074:	f7f2 fa6e 	bl	8000554 <__aeabi_i2d>
 800e078:	a3b9      	add	r3, pc, #740	; (adr r3, 800e360 <main+0x6b80>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	f7f2 fbfd 	bl	800087c <__aeabi_ddiv>
 800e082:	4603      	mov	r3, r0
 800e084:	460c      	mov	r4, r1
 800e086:	4618      	mov	r0, r3
 800e088:	4621      	mov	r1, r4
 800e08a:	f7f2 fdc5 	bl	8000c18 <__aeabi_d2f>
 800e08e:	4603      	mov	r3, r0
				sprintf(msg, "Motor Position at Zero Angle: %.2f\r\n",
 800e090:	4618      	mov	r0, r3
 800e092:	f7f2 fa71 	bl	8000578 <__aeabi_f2d>
 800e096:	4603      	mov	r3, r0
 800e098:	460c      	mov	r4, r1
 800e09a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e09e:	461a      	mov	r2, r3
 800e0a0:	4623      	mov	r3, r4
 800e0a2:	49b5      	ldr	r1, [pc, #724]	; (800e378 <main+0x6b98>)
 800e0a4:	f004 fd54 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e0a8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7f2 f8a1 	bl	80001f4 <strlen>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0be:	48ad      	ldr	r0, [pc, #692]	; (800e374 <main+0x6b94>)
 800e0c0:	f7f8 fc78 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Next Test in 3s\r\n\r\n");
 800e0c4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e0c8:	4aac      	ldr	r2, [pc, #688]	; (800e37c <main+0x6b9c>)
 800e0ca:	461c      	mov	r4, r3
 800e0cc:	4615      	mov	r5, r2
 800e0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0d2:	682b      	ldr	r3, [r5, #0]
 800e0d4:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e0d6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f2 f88a 	bl	80001f4 <strlen>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e0e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0ec:	48a1      	ldr	r0, [pc, #644]	; (800e374 <main+0x6b94>)
 800e0ee:	f7f8 fc61 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(3000);
 800e0f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e0f6:	f7f6 f853 	bl	80041a0 <HAL_Delay>

				rotor_position_command = -45;
 800e0fa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e0fe:	4aa0      	ldr	r2, [pc, #640]	; (800e380 <main+0x6ba0>)
 800e100:	601a      	str	r2, [r3, #0]
				ret = rotor_position_read(&rotor_position_initial);
 800e102:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e106:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7f9 f91f 	bl	800734e <rotor_position_read>
 800e110:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0, -rotor_position_initial + (int)(rotor_position_command*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800e112:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7f2 fa2d 	bl	8000578 <__aeabi_f2d>
 800e11e:	a392      	add	r3, pc, #584	; (adr r3, 800e368 <main+0x6b88>)
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f7f2 fa80 	bl	8000628 <__aeabi_dmul>
 800e128:	4603      	mov	r3, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	4618      	mov	r0, r3
 800e12e:	4621      	mov	r1, r4
 800e130:	f7f2 fd2a 	bl	8000b88 <__aeabi_d2iz>
 800e134:	4602      	mov	r2, r0
 800e136:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	4619      	mov	r1, r3
 800e140:	2000      	movs	r0, #0
 800e142:	f7f5 fd81 	bl	8003c48 <BSP_MotorControl_GoTo>
				BSP_MotorControl_WaitWhileActive(0);
 800e146:	2000      	movs	r0, #0
 800e148:	f7f5 fea6 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

				ret = rotor_position_read(&rotor_position);
 800e14c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e150:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e154:	4618      	mov	r0, r3
 800e156:	f7f9 f8fa 	bl	800734e <rotor_position_read>
 800e15a:	6020      	str	r0, [r4, #0]
				sprintf(msg, "Motor Position Test to -45 Degree Angle: %.2f\r\n",
						(float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800e15c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4618      	mov	r0, r3
 800e164:	f7f2 f9f6 	bl	8000554 <__aeabi_i2d>
 800e168:	a37d      	add	r3, pc, #500	; (adr r3, 800e360 <main+0x6b80>)
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	f7f2 fb85 	bl	800087c <__aeabi_ddiv>
 800e172:	4603      	mov	r3, r0
 800e174:	460c      	mov	r4, r1
 800e176:	4618      	mov	r0, r3
 800e178:	4621      	mov	r1, r4
 800e17a:	f7f2 fd4d 	bl	8000c18 <__aeabi_d2f>
 800e17e:	4603      	mov	r3, r0
				sprintf(msg, "Motor Position Test to -45 Degree Angle: %.2f\r\n",
 800e180:	4618      	mov	r0, r3
 800e182:	f7f2 f9f9 	bl	8000578 <__aeabi_f2d>
 800e186:	4603      	mov	r3, r0
 800e188:	460c      	mov	r4, r1
 800e18a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e18e:	461a      	mov	r2, r3
 800e190:	4623      	mov	r3, r4
 800e192:	497c      	ldr	r1, [pc, #496]	; (800e384 <main+0x6ba4>)
 800e194:	f004 fcdc 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e198:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7f2 f829 	bl	80001f4 <strlen>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e1aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1ae:	4871      	ldr	r0, [pc, #452]	; (800e374 <main+0x6b94>)
 800e1b0:	f7f8 fc00 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Correct motion shows rotor rotating to left\r\n");
 800e1b4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e1b8:	4a73      	ldr	r2, [pc, #460]	; (800e388 <main+0x6ba8>)
 800e1ba:	461c      	mov	r4, r3
 800e1bc:	4615      	mov	r5, r2
 800e1be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e1ca:	c407      	stmia	r4!, {r0, r1, r2}
 800e1cc:	8023      	strh	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800e1ce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7f2 f80e 	bl	80001f4 <strlen>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1e4:	4863      	ldr	r0, [pc, #396]	; (800e374 <main+0x6b94>)
 800e1e6:	f7f8 fbe5 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Next Test in 3s\r\n\r\n");
 800e1ea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e1ee:	4a63      	ldr	r2, [pc, #396]	; (800e37c <main+0x6b9c>)
 800e1f0:	461c      	mov	r4, r3
 800e1f2:	4615      	mov	r5, r2
 800e1f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800e1fc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e200:	4618      	mov	r0, r3
 800e202:	f7f1 fff7 	bl	80001f4 <strlen>
 800e206:	4603      	mov	r3, r0
 800e208:	b29a      	uxth	r2, r3
 800e20a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e212:	4858      	ldr	r0, [pc, #352]	; (800e374 <main+0x6b94>)
 800e214:	f7f8 fbce 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(3000);
 800e218:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e21c:	f7f5 ffc0 	bl	80041a0 <HAL_Delay>

				rotor_position_command = 0;
 800e220:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e224:	f04f 0200 	mov.w	r2, #0
 800e228:	601a      	str	r2, [r3, #0]
				ret = rotor_position_read(&rotor_position_initial);
 800e22a:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e22e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e232:	4618      	mov	r0, r3
 800e234:	f7f9 f88b 	bl	800734e <rotor_position_read>
 800e238:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0, -rotor_position_initial + (int)(rotor_position_command*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800e23a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4618      	mov	r0, r3
 800e242:	f7f2 f999 	bl	8000578 <__aeabi_f2d>
 800e246:	a348      	add	r3, pc, #288	; (adr r3, 800e368 <main+0x6b88>)
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f7f2 f9ec 	bl	8000628 <__aeabi_dmul>
 800e250:	4603      	mov	r3, r0
 800e252:	460c      	mov	r4, r1
 800e254:	4618      	mov	r0, r3
 800e256:	4621      	mov	r1, r4
 800e258:	f7f2 fc96 	bl	8000b88 <__aeabi_d2iz>
 800e25c:	4602      	mov	r2, r0
 800e25e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	4619      	mov	r1, r3
 800e268:	2000      	movs	r0, #0
 800e26a:	f7f5 fced 	bl	8003c48 <BSP_MotorControl_GoTo>
				BSP_MotorControl_WaitWhileActive(0);
 800e26e:	2000      	movs	r0, #0
 800e270:	f7f5 fe12 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

				ret = rotor_position_read(&rotor_position);
 800e274:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e278:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f9 f866 	bl	800734e <rotor_position_read>
 800e282:	6020      	str	r0, [r4, #0]
				sprintf(msg, "Motor Position Test to Zero Angle: %.2f\r\n",
						(float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800e284:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f2 f962 	bl	8000554 <__aeabi_i2d>
 800e290:	a333      	add	r3, pc, #204	; (adr r3, 800e360 <main+0x6b80>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f2 faf1 	bl	800087c <__aeabi_ddiv>
 800e29a:	4603      	mov	r3, r0
 800e29c:	460c      	mov	r4, r1
 800e29e:	4618      	mov	r0, r3
 800e2a0:	4621      	mov	r1, r4
 800e2a2:	f7f2 fcb9 	bl	8000c18 <__aeabi_d2f>
 800e2a6:	4603      	mov	r3, r0
				sprintf(msg, "Motor Position Test to Zero Angle: %.2f\r\n",
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7f2 f965 	bl	8000578 <__aeabi_f2d>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4623      	mov	r3, r4
 800e2ba:	4934      	ldr	r1, [pc, #208]	; (800e38c <main+0x6bac>)
 800e2bc:	f004 fc48 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e2c0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7f1 ff95 	bl	80001f4 <strlen>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2d6:	4827      	ldr	r0, [pc, #156]	; (800e374 <main+0x6b94>)
 800e2d8:	f7f8 fb6c 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Correct motion shows rotor returning to zero angle\r\n");
 800e2dc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e2e0:	4a2b      	ldr	r2, [pc, #172]	; (800e390 <main+0x6bb0>)
 800e2e2:	461c      	mov	r4, r3
 800e2e4:	4615      	mov	r5, r2
 800e2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e2f6:	6020      	str	r0, [r4, #0]
 800e2f8:	3404      	adds	r4, #4
 800e2fa:	7021      	strb	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e2fc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e300:	4618      	mov	r0, r3
 800e302:	f7f1 ff77 	bl	80001f4 <strlen>
 800e306:	4603      	mov	r3, r0
 800e308:	b29a      	uxth	r2, r3
 800e30a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e312:	4818      	ldr	r0, [pc, #96]	; (800e374 <main+0x6b94>)
 800e314:	f7f8 fb4e 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Next Test in 3s\r\n\r\n");
 800e318:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e31c:	4a17      	ldr	r2, [pc, #92]	; (800e37c <main+0x6b9c>)
 800e31e:	461c      	mov	r4, r3
 800e320:	4615      	mov	r5, r2
 800e322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e326:	682b      	ldr	r3, [r5, #0]
 800e328:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e32a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f1 ff60 	bl	80001f4 <strlen>
 800e334:	4603      	mov	r3, r0
 800e336:	b29a      	uxth	r2, r3
 800e338:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e340:	480c      	ldr	r0, [pc, #48]	; (800e374 <main+0x6b94>)
 800e342:	f7f8 fb37 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(3000);
 800e346:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e34a:	f7f5 ff29 	bl	80041a0 <HAL_Delay>

				rotor_position_command = 90;
 800e34e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e352:	4a10      	ldr	r2, [pc, #64]	; (800e394 <main+0x6bb4>)
 800e354:	601a      	str	r2, [r3, #0]
				ret = rotor_position_read(&rotor_position_initial);
 800e356:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e35a:	e01d      	b.n	800e398 <main+0x6bb8>
 800e35c:	f3af 8000 	nop.w
 800e360:	020c49ba 	.word	0x020c49ba
 800e364:	4021c72b 	.word	0x4021c72b
 800e368:	020c49ba 	.word	0x020c49ba
 800e36c:	4031c72b 	.word	0x4031c72b
 800e370:	080193c4 	.word	0x080193c4
 800e374:	20000f20 	.word	0x20000f20
 800e378:	08019400 	.word	0x08019400
 800e37c:	08019428 	.word	0x08019428
 800e380:	c2340000 	.word	0xc2340000
 800e384:	0801943c 	.word	0x0801943c
 800e388:	0801946c 	.word	0x0801946c
 800e38c:	0801949c 	.word	0x0801949c
 800e390:	080194c8 	.word	0x080194c8
 800e394:	42b40000 	.word	0x42b40000
 800e398:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7f8 ffd6 	bl	800734e <rotor_position_read>
 800e3a2:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0, -rotor_position_initial + (int)(rotor_position_command*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800e3a4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7f2 f8e4 	bl	8000578 <__aeabi_f2d>
 800e3b0:	a3e9      	add	r3, pc, #932	; (adr r3, 800e758 <main+0x6f78>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	f7f2 f937 	bl	8000628 <__aeabi_dmul>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	460c      	mov	r4, r1
 800e3be:	4618      	mov	r0, r3
 800e3c0:	4621      	mov	r1, r4
 800e3c2:	f7f2 fbe1 	bl	8000b88 <__aeabi_d2iz>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	f7f5 fc38 	bl	8003c48 <BSP_MotorControl_GoTo>
				BSP_MotorControl_WaitWhileActive(0);
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f7f5 fd5d 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

				ret = rotor_position_read(&rotor_position);
 800e3de:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e3e2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f8 ffb1 	bl	800734e <rotor_position_read>
 800e3ec:	6020      	str	r0, [r4, #0]
				sprintf(msg, "Motor Position at 90 Degree Angle: %.2f\r\n",
						(float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800e3ee:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f2 f8ad 	bl	8000554 <__aeabi_i2d>
 800e3fa:	a3d9      	add	r3, pc, #868	; (adr r3, 800e760 <main+0x6f80>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	f7f2 fa3c 	bl	800087c <__aeabi_ddiv>
 800e404:	4603      	mov	r3, r0
 800e406:	460c      	mov	r4, r1
 800e408:	4618      	mov	r0, r3
 800e40a:	4621      	mov	r1, r4
 800e40c:	f7f2 fc04 	bl	8000c18 <__aeabi_d2f>
 800e410:	4603      	mov	r3, r0
				sprintf(msg, "Motor Position at 90 Degree Angle: %.2f\r\n",
 800e412:	4618      	mov	r0, r3
 800e414:	f7f2 f8b0 	bl	8000578 <__aeabi_f2d>
 800e418:	4603      	mov	r3, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e420:	461a      	mov	r2, r3
 800e422:	4623      	mov	r3, r4
 800e424:	49d0      	ldr	r1, [pc, #832]	; (800e768 <main+0x6f88>)
 800e426:	f004 fb93 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800e42a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f1 fee0 	bl	80001f4 <strlen>
 800e434:	4603      	mov	r3, r0
 800e436:	b29a      	uxth	r2, r3
 800e438:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e440:	48ca      	ldr	r0, [pc, #808]	; (800e76c <main+0x6f8c>)
 800e442:	f7f8 fab7 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Correct motion shows rotor rotating to right\r\n");
 800e446:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e44a:	4ac9      	ldr	r2, [pc, #804]	; (800e770 <main+0x6f90>)
 800e44c:	461c      	mov	r4, r3
 800e44e:	4615      	mov	r5, r2
 800e450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e458:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e45c:	c407      	stmia	r4!, {r0, r1, r2}
 800e45e:	8023      	strh	r3, [r4, #0]
 800e460:	3402      	adds	r4, #2
 800e462:	0c1b      	lsrs	r3, r3, #16
 800e464:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e466:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f1 fec2 	bl	80001f4 <strlen>
 800e470:	4603      	mov	r3, r0
 800e472:	b29a      	uxth	r2, r3
 800e474:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e47c:	48bb      	ldr	r0, [pc, #748]	; (800e76c <main+0x6f8c>)
 800e47e:	f7f8 fa99 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Next Test in 3s\r\n\r\n");
 800e482:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e486:	4abb      	ldr	r2, [pc, #748]	; (800e774 <main+0x6f94>)
 800e488:	461c      	mov	r4, r3
 800e48a:	4615      	mov	r5, r2
 800e48c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e48e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e494:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f1 feab 	bl	80001f4 <strlen>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4aa:	48b0      	ldr	r0, [pc, #704]	; (800e76c <main+0x6f8c>)
 800e4ac:	f7f8 fa82 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(3000);
 800e4b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e4b4:	f7f5 fe74 	bl	80041a0 <HAL_Delay>

				rotor_position_command = 0;
 800e4b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4bc:	f04f 0200 	mov.w	r2, #0
 800e4c0:	601a      	str	r2, [r3, #0]
				ret = rotor_position_read(&rotor_position_initial);
 800e4c2:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e4c6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f8 ff3f 	bl	800734e <rotor_position_read>
 800e4d0:	6020      	str	r0, [r4, #0]
				BSP_MotorControl_GoTo(0, -rotor_position_initial + (int)(rotor_position_command*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 800e4d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f2 f84d 	bl	8000578 <__aeabi_f2d>
 800e4de:	a39e      	add	r3, pc, #632	; (adr r3, 800e758 <main+0x6f78>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	f7f2 f8a0 	bl	8000628 <__aeabi_dmul>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	f7f2 fb4a 	bl	8000b88 <__aeabi_d2iz>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	4619      	mov	r1, r3
 800e500:	2000      	movs	r0, #0
 800e502:	f7f5 fba1 	bl	8003c48 <BSP_MotorControl_GoTo>
				BSP_MotorControl_WaitWhileActive(0);
 800e506:	2000      	movs	r0, #0
 800e508:	f7f5 fcc6 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

				ret = rotor_position_read(&rotor_position);
 800e50c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e510:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e514:	4618      	mov	r0, r3
 800e516:	f7f8 ff1a 	bl	800734e <rotor_position_read>
 800e51a:	6020      	str	r0, [r4, #0]
				sprintf(msg, "Motor Position at Zero Angle: %.2f\r\n",
						(float) ((rotor_position) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 800e51c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4618      	mov	r0, r3
 800e524:	f7f2 f816 	bl	8000554 <__aeabi_i2d>
 800e528:	a38d      	add	r3, pc, #564	; (adr r3, 800e760 <main+0x6f80>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	f7f2 f9a5 	bl	800087c <__aeabi_ddiv>
 800e532:	4603      	mov	r3, r0
 800e534:	460c      	mov	r4, r1
 800e536:	4618      	mov	r0, r3
 800e538:	4621      	mov	r1, r4
 800e53a:	f7f2 fb6d 	bl	8000c18 <__aeabi_d2f>
 800e53e:	4603      	mov	r3, r0
				sprintf(msg, "Motor Position at Zero Angle: %.2f\r\n",
 800e540:	4618      	mov	r0, r3
 800e542:	f7f2 f819 	bl	8000578 <__aeabi_f2d>
 800e546:	4603      	mov	r3, r0
 800e548:	460c      	mov	r4, r1
 800e54a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e54e:	461a      	mov	r2, r3
 800e550:	4623      	mov	r3, r4
 800e552:	4989      	ldr	r1, [pc, #548]	; (800e778 <main+0x6f98>)
 800e554:	f004 fafc 	bl	8012b50 <sprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e558:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7f1 fe49 	bl	80001f4 <strlen>
 800e562:	4603      	mov	r3, r0
 800e564:	b29a      	uxth	r2, r3
 800e566:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e56e:	487f      	ldr	r0, [pc, #508]	; (800e76c <main+0x6f8c>)
 800e570:	f7f8 fa20 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Correct motion shows rotor rotating to zero angle\r\n");
 800e574:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e578:	4a80      	ldr	r2, [pc, #512]	; (800e77c <main+0x6f9c>)
 800e57a:	461c      	mov	r4, r3
 800e57c:	4615      	mov	r5, r2
 800e57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e58a:	682b      	ldr	r3, [r5, #0]
 800e58c:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e58e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e592:	4618      	mov	r0, r3
 800e594:	f7f1 fe2e 	bl	80001f4 <strlen>
 800e598:	4603      	mov	r3, r0
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5a4:	4871      	ldr	r0, [pc, #452]	; (800e76c <main+0x6f8c>)
 800e5a6:	f7f8 fa05 	bl	80069b4 <HAL_UART_Transmit>

				sprintf(msg, "Rotor Actuator Test Cycle Complete, Next Test in 3s\r\n");
 800e5aa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e5ae:	4a74      	ldr	r2, [pc, #464]	; (800e780 <main+0x6fa0>)
 800e5b0:	461c      	mov	r4, r3
 800e5b2:	4615      	mov	r5, r2
 800e5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e5c4:	6020      	str	r0, [r4, #0]
 800e5c6:	3404      	adds	r4, #4
 800e5c8:	8021      	strh	r1, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 800e5ca:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7f1 fe10 	bl	80001f4 <strlen>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e5dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5e0:	4862      	ldr	r0, [pc, #392]	; (800e76c <main+0x6f8c>)
 800e5e2:	f7f8 f9e7 	bl	80069b4 <HAL_UART_Transmit>
				HAL_Delay(3000);
 800e5e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e5ea:	f7f5 fdd9 	bl	80041a0 <HAL_Delay>
			while (j < ROTOR_ACTUATOR_TEST_CYCLES) {
 800e5ee:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f77f ad0d 	ble.w	800e014 <main+0x6834>

/*
 * 	Encoder Test Sequence will execute at each cycle of operation if enable_encoder_test is set to 1
 */

		if (enable_encoder_test == 1) {
 800e5fa:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	f040 81b0 	bne.w	800e964 <main+0x7184>
			sprintf(msg, "\r\n*************  Starting Encoder Test  ***************\r\n\r\n");
 800e604:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e608:	4a5e      	ldr	r2, [pc, #376]	; (800e784 <main+0x6fa4>)
 800e60a:	461c      	mov	r4, r3
 800e60c:	4615      	mov	r5, r2
 800e60e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e61a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e61e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e622:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e626:	4618      	mov	r0, r3
 800e628:	f7f1 fde4 	bl	80001f4 <strlen>
 800e62c:	4603      	mov	r3, r0
 800e62e:	b29a      	uxth	r2, r3
 800e630:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e638:	484c      	ldr	r0, [pc, #304]	; (800e76c <main+0x6f8c>)
 800e63a:	f7f8 f9bb 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			sprintf(msg, "Permit Pendulum to Stabilize in Vertical Down\r\n");
 800e63e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e642:	4a51      	ldr	r2, [pc, #324]	; (800e788 <main+0x6fa8>)
 800e644:	461c      	mov	r4, r3
 800e646:	4615      	mov	r5, r2
 800e648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e64c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e64e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e650:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e658:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f1 fdc9 	bl	80001f4 <strlen>
 800e662:	4603      	mov	r3, r0
 800e664:	b29a      	uxth	r2, r3
 800e666:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e66e:	483f      	ldr	r0, [pc, #252]	; (800e76c <main+0x6f8c>)
 800e670:	f7f8 f9a0 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			HAL_Delay(1000);
 800e674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e678:	f7f5 fd92 	bl	80041a0 <HAL_Delay>
			sprintf(msg, "Angle will be measured in 3 seconds\r\n");
 800e67c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e680:	4a42      	ldr	r2, [pc, #264]	; (800e78c <main+0x6fac>)
 800e682:	461c      	mov	r4, r3
 800e684:	4615      	mov	r5, r2
 800e686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e68a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e68c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e68e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e692:	6020      	str	r0, [r4, #0]
 800e694:	3404      	adds	r4, #4
 800e696:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e698:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7f1 fda9 	bl	80001f4 <strlen>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6ae:	482f      	ldr	r0, [pc, #188]	; (800e76c <main+0x6f8c>)
 800e6b0:	f7f8 f980 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			HAL_Delay(3000);
 800e6b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800e6b8:	f7f5 fd72 	bl	80041a0 <HAL_Delay>

			ret = encoder_position_read(&encoder_position, &htim3);
 800e6bc:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e6c0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e6c4:	4932      	ldr	r1, [pc, #200]	; (800e790 <main+0x6fb0>)
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7f8 fe74 	bl	80073b4 <encoder_position_read>
 800e6cc:	6020      	str	r0, [r4, #0]
			encoder_position_down = encoder_position;
 800e6ce:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
			sprintf(msg, "Encoder Angle is: %.2f \r\n(Correct value should lie between -0.5 and 0.5 degrees))\r\n\r\n",
					(float) (encoder_position_down / angle_scale));
 800e6d8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800e6dc:	ee07 3a90 	vmov	s15, r3
 800e6e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e6e4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800e6e8:	edd3 7a00 	vldr	s15, [r3]
 800e6ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
			sprintf(msg, "Encoder Angle is: %.2f \r\n(Correct value should lie between -0.5 and 0.5 degrees))\r\n\r\n",
 800e6f0:	ee16 0a90 	vmov	r0, s13
 800e6f4:	f7f1 ff40 	bl	8000578 <__aeabi_f2d>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e700:	461a      	mov	r2, r3
 800e702:	4623      	mov	r3, r4
 800e704:	4923      	ldr	r1, [pc, #140]	; (800e794 <main+0x6fb4>)
 800e706:	f004 fa23 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e70a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f1 fd70 	bl	80001f4 <strlen>
 800e714:	4603      	mov	r3, r0
 800e716:	b29a      	uxth	r2, r3
 800e718:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e720:	4812      	ldr	r0, [pc, #72]	; (800e76c <main+0x6f8c>)
 800e722:	f7f8 f947 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			sprintf(msg,
 800e726:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e72a:	4a1b      	ldr	r2, [pc, #108]	; (800e798 <main+0x6fb8>)
 800e72c:	4618      	mov	r0, r3
 800e72e:	4611      	mov	r1, r2
 800e730:	235f      	movs	r3, #95	; 0x5f
 800e732:	461a      	mov	r2, r3
 800e734:	f004 f9dc 	bl	8012af0 <memcpy>
					"Manually Rotate Pendulum in Clock Wise Direction One Full 360 Degree Turn and Stabilize Down\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e738:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7f1 fd59 	bl	80001f4 <strlen>
 800e742:	4603      	mov	r3, r0
 800e744:	b29a      	uxth	r2, r3
 800e746:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e74e:	4807      	ldr	r0, [pc, #28]	; (800e76c <main+0x6f8c>)
 800e750:	f7f8 f930 	bl	80069b4 <HAL_UART_Transmit>
 800e754:	e022      	b.n	800e79c <main+0x6fbc>
 800e756:	bf00      	nop
 800e758:	020c49ba 	.word	0x020c49ba
 800e75c:	4031c72b 	.word	0x4031c72b
 800e760:	020c49ba 	.word	0x020c49ba
 800e764:	4021c72b 	.word	0x4021c72b
 800e768:	08019500 	.word	0x08019500
 800e76c:	20000f20 	.word	0x20000f20
 800e770:	0801952c 	.word	0x0801952c
 800e774:	08019428 	.word	0x08019428
 800e778:	08019400 	.word	0x08019400
 800e77c:	0801955c 	.word	0x0801955c
 800e780:	08019590 	.word	0x08019590
 800e784:	080195c8 	.word	0x080195c8
 800e788:	08019604 	.word	0x08019604
 800e78c:	08019634 	.word	0x08019634
 800e790:	20000e1c 	.word	0x20000e1c
 800e794:	0801965c 	.word	0x0801965c
 800e798:	080196b4 	.word	0x080196b4
					HAL_MAX_DELAY);
			sprintf(msg, "Angle will be measured in 10 seconds\r\n");
 800e79c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e7a0:	4aa0      	ldr	r2, [pc, #640]	; (800ea24 <main+0x7244>)
 800e7a2:	461c      	mov	r4, r3
 800e7a4:	4615      	mov	r5, r2
 800e7a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e7b2:	6020      	str	r0, [r4, #0]
 800e7b4:	3404      	adds	r4, #4
 800e7b6:	8021      	strh	r1, [r4, #0]
 800e7b8:	3402      	adds	r4, #2
 800e7ba:	0c0b      	lsrs	r3, r1, #16
 800e7bc:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e7be:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f1 fd16 	bl	80001f4 <strlen>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7d4:	4894      	ldr	r0, [pc, #592]	; (800ea28 <main+0x7248>)
 800e7d6:	f7f8 f8ed 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			HAL_Delay(10000);
 800e7da:	f242 7010 	movw	r0, #10000	; 0x2710
 800e7de:	f7f5 fcdf 	bl	80041a0 <HAL_Delay>

			ret = encoder_position_read(&encoder_position, &htim3);
 800e7e2:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e7e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e7ea:	4990      	ldr	r1, [pc, #576]	; (800ea2c <main+0x724c>)
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7f8 fde1 	bl	80073b4 <encoder_position_read>
 800e7f2:	6020      	str	r0, [r4, #0]
			sprintf(msg, "Encoder Angle is: %.2f\r\n(Correct value should lie between -359.5 and -360.5 degrees)\r\n\r\n",
					(float) ((encoder_position - encoder_position_down)
 800e7f4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	ee07 3a90 	vmov	s15, r3
 800e804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e808:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800e80c:	edd3 7a00 	vldr	s15, [r3]
 800e810:	eec7 6a27 	vdiv.f32	s13, s14, s15
			sprintf(msg, "Encoder Angle is: %.2f\r\n(Correct value should lie between -359.5 and -360.5 degrees)\r\n\r\n",
 800e814:	ee16 0a90 	vmov	r0, s13
 800e818:	f7f1 feae 	bl	8000578 <__aeabi_f2d>
 800e81c:	4603      	mov	r3, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e824:	461a      	mov	r2, r3
 800e826:	4623      	mov	r3, r4
 800e828:	4981      	ldr	r1, [pc, #516]	; (800ea30 <main+0x7250>)
 800e82a:	f004 f991 	bl	8012b50 <sprintf>
							/ angle_scale));
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e82e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e832:	4618      	mov	r0, r3
 800e834:	f7f1 fcde 	bl	80001f4 <strlen>
 800e838:	4603      	mov	r3, r0
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e844:	4878      	ldr	r0, [pc, #480]	; (800ea28 <main+0x7248>)
 800e846:	f7f8 f8b5 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			sprintf(msg,
 800e84a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e84e:	4a79      	ldr	r2, [pc, #484]	; (800ea34 <main+0x7254>)
 800e850:	4618      	mov	r0, r3
 800e852:	4611      	mov	r1, r2
 800e854:	2367      	movs	r3, #103	; 0x67
 800e856:	461a      	mov	r2, r3
 800e858:	f004 f94a 	bl	8012af0 <memcpy>
					"Manually Rotate Pendulum in Counter Clock Wise Direction One Full 360 Degree Turn and Stabilize Down\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e85c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e860:	4618      	mov	r0, r3
 800e862:	f7f1 fcc7 	bl	80001f4 <strlen>
 800e866:	4603      	mov	r3, r0
 800e868:	b29a      	uxth	r2, r3
 800e86a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e86e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e872:	486d      	ldr	r0, [pc, #436]	; (800ea28 <main+0x7248>)
 800e874:	f7f8 f89e 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			sprintf(msg, "Angle will be measured in 10 seconds\r\n");
 800e878:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e87c:	4a69      	ldr	r2, [pc, #420]	; (800ea24 <main+0x7244>)
 800e87e:	461c      	mov	r4, r3
 800e880:	4615      	mov	r5, r2
 800e882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e88a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e88e:	6020      	str	r0, [r4, #0]
 800e890:	3404      	adds	r4, #4
 800e892:	8021      	strh	r1, [r4, #0]
 800e894:	3402      	adds	r4, #2
 800e896:	0c0b      	lsrs	r3, r1, #16
 800e898:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e89a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f1 fca8 	bl	80001f4 <strlen>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e8ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8b0:	485d      	ldr	r0, [pc, #372]	; (800ea28 <main+0x7248>)
 800e8b2:	f7f8 f87f 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			HAL_Delay(10000);
 800e8b6:	f242 7010 	movw	r0, #10000	; 0x2710
 800e8ba:	f7f5 fc71 	bl	80041a0 <HAL_Delay>

			ret = encoder_position_read(&encoder_position, &htim3);
 800e8be:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e8c2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e8c6:	4959      	ldr	r1, [pc, #356]	; (800ea2c <main+0x724c>)
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f8 fd73 	bl	80073b4 <encoder_position_read>
 800e8ce:	6020      	str	r0, [r4, #0]
			sprintf(msg, "Encoder Angle is: %.2f \r\n(Correct value should lie between -0.5 and 0.5 degrees) \r\n\r\n",
					(float) ((encoder_position - encoder_position_down)
 800e8d0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	ee07 3a90 	vmov	s15, r3
 800e8e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e8e4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800e8e8:	edd3 7a00 	vldr	s15, [r3]
 800e8ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
			sprintf(msg, "Encoder Angle is: %.2f \r\n(Correct value should lie between -0.5 and 0.5 degrees) \r\n\r\n",
 800e8f0:	ee16 0a90 	vmov	r0, s13
 800e8f4:	f7f1 fe40 	bl	8000578 <__aeabi_f2d>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800e900:	461a      	mov	r2, r3
 800e902:	4623      	mov	r3, r4
 800e904:	494c      	ldr	r1, [pc, #304]	; (800ea38 <main+0x7258>)
 800e906:	f004 f923 	bl	8012b50 <sprintf>
							/ angle_scale));
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e90a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e90e:	4618      	mov	r0, r3
 800e910:	f7f1 fc70 	bl	80001f4 <strlen>
 800e914:	4603      	mov	r3, r0
 800e916:	b29a      	uxth	r2, r3
 800e918:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e920:	4841      	ldr	r0, [pc, #260]	; (800ea28 <main+0x7248>)
 800e922:	f7f8 f847 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);

			L6474_CmdDisable(0);
 800e926:	2000      	movs	r0, #0
 800e928:	f7f2 fb66 	bl	8000ff8 <L6474_CmdDisable>
			while(1){
				sprintf(msg, "Test Operation Complete, System in Standby, Press Reset Button to Restart\r\n");
 800e92c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e930:	4a42      	ldr	r2, [pc, #264]	; (800ea3c <main+0x725c>)
 800e932:	4618      	mov	r0, r3
 800e934:	4611      	mov	r1, r2
 800e936:	234c      	movs	r3, #76	; 0x4c
 800e938:	461a      	mov	r2, r3
 800e93a:	f004 f8d9 	bl	8012af0 <memcpy>
							HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800e93e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e942:	4618      	mov	r0, r3
 800e944:	f7f1 fc56 	bl	80001f4 <strlen>
 800e948:	4603      	mov	r3, r0
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e954:	4834      	ldr	r0, [pc, #208]	; (800ea28 <main+0x7248>)
 800e956:	f7f8 f82d 	bl	80069b4 <HAL_UART_Transmit>
									HAL_MAX_DELAY);
							HAL_Delay(5000);
 800e95a:	f241 3088 	movw	r0, #5000	; 0x1388
 800e95e:	f7f5 fc1f 	bl	80041a0 <HAL_Delay>
				sprintf(msg, "Test Operation Complete, System in Standby, Press Reset Button to Restart\r\n");
 800e962:	e7e3      	b.n	800e92c <main+0x714c>

		/*
		 * Set Motor Position Zero
		 */

		rotor_position_set();
 800e964:	f7f8 fce2 	bl	800732c <rotor_position_set>
		ret = rotor_position_read(&rotor_position);
 800e968:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e96c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e970:	4618      	mov	r0, r3
 800e972:	f7f8 fcec 	bl	800734e <rotor_position_read>
 800e976:	6020      	str	r0, [r4, #0]
		sprintf(msg,
 800e978:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e982:	492f      	ldr	r1, [pc, #188]	; (800ea40 <main+0x7260>)
 800e984:	4618      	mov	r0, r3
 800e986:	f004 f8e3 	bl	8012b50 <sprintf>
				"\r\nPrepare for Control Start - Initial Rotor Position: %i\r\n",
				rotor_position);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800e98a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f1 fc30 	bl	80001f4 <strlen>
 800e994:	4603      	mov	r3, r0
 800e996:	b29a      	uxth	r2, r3
 800e998:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e99c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9a0:	4821      	ldr	r0, [pc, #132]	; (800ea28 <main+0x7248>)
 800e9a2:	f7f8 f807 	bl	80069b4 <HAL_UART_Transmit>
		* Detect motion of Pendulum prior to measurement of down angle reference
		*
		* If motion detected, delay start until Pendulum is motionless
		*
		*/
		sprintf(msg, "Test for Pendulum at Rest - Stabilize Pendulum Now\r\n");
 800e9a6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e9aa:	4a26      	ldr	r2, [pc, #152]	; (800ea44 <main+0x7264>)
 800e9ac:	461c      	mov	r4, r3
 800e9ae:	4615      	mov	r5, r2
 800e9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e9c0:	6020      	str	r0, [r4, #0]
 800e9c2:	3404      	adds	r4, #4
 800e9c4:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800e9c6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7f1 fc12 	bl	80001f4 <strlen>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800e9d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9dc:	4812      	ldr	r0, [pc, #72]	; (800ea28 <main+0x7248>)
 800e9de:	f7f7 ffe9 	bl	80069b4 <HAL_UART_Transmit>

		ret = encoder_position_read(&encoder_position, &htim3);
 800e9e2:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800e9e6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e9ea:	4910      	ldr	r1, [pc, #64]	; (800ea2c <main+0x724c>)
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f8 fce1 	bl	80073b4 <encoder_position_read>
 800e9f2:	6020      	str	r0, [r4, #0]
		encoder_position_prev = encoder_position;
 800e9f4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
		HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 800e9fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ea02:	f7f5 fbcd 	bl	80041a0 <HAL_Delay>
		ret = encoder_position_read(&encoder_position, &htim3);
 800ea06:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ea0a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea0e:	4907      	ldr	r1, [pc, #28]	; (800ea2c <main+0x724c>)
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f8 fccf 	bl	80073b4 <encoder_position_read>
 800ea16:	6020      	str	r0, [r4, #0]
		encoder_position_curr = encoder_position;
 800ea18:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
		while (encoder_position_curr != encoder_position_prev) {
 800ea22:	e08f      	b.n	800eb44 <main+0x7364>
 800ea24:	08019714 	.word	0x08019714
 800ea28:	20000f20 	.word	0x20000f20
 800ea2c:	20000e1c 	.word	0x20000e1c
 800ea30:	0801973c 	.word	0x0801973c
 800ea34:	08019798 	.word	0x08019798
 800ea38:	08019800 	.word	0x08019800
 800ea3c:	08019118 	.word	0x08019118
 800ea40:	08019858 	.word	0x08019858
 800ea44:	08019894 	.word	0x08019894
			ret = encoder_position_read(&encoder_position, &htim3);
 800ea48:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ea4c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea50:	4943      	ldr	r1, [pc, #268]	; (800eb60 <main+0x7380>)
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7f8 fcae 	bl	80073b4 <encoder_position_read>
 800ea58:	6020      	str	r0, [r4, #0]
			encoder_position_prev = encoder_position;
 800ea5a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 800ea64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ea68:	f7f5 fb9a 	bl	80041a0 <HAL_Delay>
			ret = encoder_position_read(&encoder_position, &htim3);
 800ea6c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ea70:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea74:	493a      	ldr	r1, [pc, #232]	; (800eb60 <main+0x7380>)
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f8 fc9c 	bl	80073b4 <encoder_position_read>
 800ea7c:	6020      	str	r0, [r4, #0]
			encoder_position_curr = encoder_position;
 800ea7e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
			/*
			* Ensure stability reached with final motion test
			*/
			if (encoder_position_prev == encoder_position_curr) {
 800ea88:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800ea8c:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d129      	bne.n	800eae8 <main+0x7308>
				HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 800ea94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ea98:	f7f5 fb82 	bl	80041a0 <HAL_Delay>
				ret = encoder_position_read(&encoder_position, &htim3);
 800ea9c:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800eaa0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800eaa4:	492e      	ldr	r1, [pc, #184]	; (800eb60 <main+0x7380>)
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7f8 fc84 	bl	80073b4 <encoder_position_read>
 800eaac:	6020      	str	r0, [r4, #0]
				encoder_position_prev = encoder_position;
 800eaae:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
				HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 800eab8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800eabc:	f7f5 fb70 	bl	80041a0 <HAL_Delay>
				ret = encoder_position_read(&encoder_position, &htim3);
 800eac0:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800eac4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800eac8:	4925      	ldr	r1, [pc, #148]	; (800eb60 <main+0x7380>)
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7f8 fc72 	bl	80073b4 <encoder_position_read>
 800ead0:	6020      	str	r0, [r4, #0]
				encoder_position_curr = encoder_position;
 800ead2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
				if (encoder_position_prev == encoder_position_curr) {
 800eadc:	f8d7 25c8 	ldr.w	r2, [r7, #1480]	; 0x5c8
 800eae0:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	; 0x5cc
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d041      	beq.n	800eb6c <main+0x738c>
				break;
				}
			}
			sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Stabilize Pendulum Now\r\n",
					(float) ((encoder_position_curr - encoder_position_prev)
 800eae8:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800eaec:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 800eaf0:	1ad3      	subs	r3, r2, r3
							/ ENCODER_READ_ANGLE_SCALE));
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7f1 fd2e 	bl	8000554 <__aeabi_i2d>
 800eaf8:	a317      	add	r3, pc, #92	; (adr r3, 800eb58 <main+0x7378>)
 800eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafe:	f7f1 febd 	bl	800087c <__aeabi_ddiv>
 800eb02:	4603      	mov	r3, r0
 800eb04:	460c      	mov	r4, r1
					(float) ((encoder_position_curr - encoder_position_prev)
 800eb06:	4618      	mov	r0, r3
 800eb08:	4621      	mov	r1, r4
 800eb0a:	f7f2 f885 	bl	8000c18 <__aeabi_d2f>
 800eb0e:	4603      	mov	r3, r0
			sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Stabilize Pendulum Now\r\n",
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f1 fd31 	bl	8000578 <__aeabi_f2d>
 800eb16:	4603      	mov	r3, r0
 800eb18:	460c      	mov	r4, r1
 800eb1a:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800eb1e:	461a      	mov	r2, r3
 800eb20:	4623      	mov	r3, r4
 800eb22:	4910      	ldr	r1, [pc, #64]	; (800eb64 <main+0x7384>)
 800eb24:	f004 f814 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800eb28:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7f1 fb61 	bl	80001f4 <strlen>
 800eb32:	4603      	mov	r3, r0
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800eb3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb3e:	480a      	ldr	r0, [pc, #40]	; (800eb68 <main+0x7388>)
 800eb40:	f7f7 ff38 	bl	80069b4 <HAL_UART_Transmit>
		while (encoder_position_curr != encoder_position_prev) {
 800eb44:	f8d7 25cc 	ldr.w	r2, [r7, #1484]	; 0x5cc
 800eb48:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	; 0x5c8
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	f47f af7b 	bne.w	800ea48 <main+0x7268>
 800eb52:	e00c      	b.n	800eb6e <main+0x738e>
 800eb54:	f3af 8000 	nop.w
 800eb58:	67a0f909 	.word	0x67a0f909
 800eb5c:	401aaab3 	.word	0x401aaab3
 800eb60:	20000e1c 	.word	0x20000e1c
 800eb64:	080198cc 	.word	0x080198cc
 800eb68:	20000f20 	.word	0x20000f20
				break;
 800eb6c:	bf00      	nop
					HAL_MAX_DELAY);
		}

		sprintf(msg,
 800eb6e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eb72:	4ac4      	ldr	r2, [pc, #784]	; (800ee84 <main+0x76a4>)
 800eb74:	461c      	mov	r4, r3
 800eb76:	4615      	mov	r5, r2
 800eb78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800eb88:	c403      	stmia	r4!, {r0, r1}
 800eb8a:	7022      	strb	r2, [r4, #0]
				"Pendulum Now at Rest and Measuring Pendulum Down Angle\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800eb8c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7f1 fb2f 	bl	80001f4 <strlen>
 800eb96:	4603      	mov	r3, r0
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800eb9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eba2:	48b9      	ldr	r0, [pc, #740]	; (800ee88 <main+0x76a8>)
 800eba4:	f7f7 ff06 	bl	80069b4 <HAL_UART_Transmit>

		/*
		* Detect encoder read fault
		*/

		ret = encoder_position_read(&encoder_position, &htim3);
 800eba8:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ebac:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ebb0:	49b6      	ldr	r1, [pc, #728]	; (800ee8c <main+0x76ac>)
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7f8 fbfe 	bl	80073b4 <encoder_position_read>
 800ebb8:	6020      	str	r0, [r4, #0]
		if (ret == -1) {
 800ebba:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebc4:	d11b      	bne.n	800ebfe <main+0x741e>
			sprintf(msg, "Encoder Position Under Range Error\r\n");
 800ebc6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ebca:	4ab1      	ldr	r2, [pc, #708]	; (800ee90 <main+0x76b0>)
 800ebcc:	461c      	mov	r4, r3
 800ebce:	4615      	mov	r5, r2
 800ebd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ebdc:	6020      	str	r0, [r4, #0]
 800ebde:	3404      	adds	r4, #4
 800ebe0:	7021      	strb	r1, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800ebe2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7f1 fb04 	bl	80001f4 <strlen>
 800ebec:	4603      	mov	r3, r0
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ebf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebf8:	48a3      	ldr	r0, [pc, #652]	; (800ee88 <main+0x76a8>)
 800ebfa:	f7f7 fedb 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		if (ret == 1) {
 800ebfe:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d118      	bne.n	800ec3a <main+0x745a>
			sprintf(msg, "Encoder Position Over Range Error\r\n");
 800ec08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ec0c:	4aa1      	ldr	r2, [pc, #644]	; (800ee94 <main+0x76b4>)
 800ec0e:	461c      	mov	r4, r3
 800ec10:	4615      	mov	r5, r2
 800ec12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec1a:	682b      	ldr	r3, [r5, #0]
 800ec1c:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800ec1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f1 fae6 	bl	80001f4 <strlen>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ec30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec34:	4894      	ldr	r0, [pc, #592]	; (800ee88 <main+0x76a8>)
 800ec36:	f7f7 febd 	bl	80069b4 <HAL_UART_Transmit>
		}

		/*
		* Calibrate down angle
		*/
		encoder_position_down = encoder_position;
 800ec3a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0

		ret = encoder_position_read(&encoder_position, &htim3);
 800ec44:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ec48:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ec4c:	498f      	ldr	r1, [pc, #572]	; (800ee8c <main+0x76ac>)
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7f8 fbb0 	bl	80073b4 <encoder_position_read>
 800ec54:	6020      	str	r0, [r4, #0]
		if (ret == -1) {
 800ec56:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec60:	d11b      	bne.n	800ec9a <main+0x74ba>
			sprintf(msg, "Encoder Position Under Range Error\r\n");
 800ec62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ec66:	4a8a      	ldr	r2, [pc, #552]	; (800ee90 <main+0x76b0>)
 800ec68:	461c      	mov	r4, r3
 800ec6a:	4615      	mov	r5, r2
 800ec6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec74:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ec78:	6020      	str	r0, [r4, #0]
 800ec7a:	3404      	adds	r4, #4
 800ec7c:	7021      	strb	r1, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800ec7e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f1 fab6 	bl	80001f4 <strlen>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ec90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec94:	487c      	ldr	r0, [pc, #496]	; (800ee88 <main+0x76a8>)
 800ec96:	f7f7 fe8d 	bl	80069b4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
		}
		if (ret == 1) {
 800ec9a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d118      	bne.n	800ecd6 <main+0x74f6>
			sprintf(msg, "Encoder Position Over Range Error\r\n");
 800eca4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eca8:	4a7a      	ldr	r2, [pc, #488]	; (800ee94 <main+0x76b4>)
 800ecaa:	461c      	mov	r4, r3
 800ecac:	4615      	mov	r5, r2
 800ecae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ecb6:	682b      	ldr	r3, [r5, #0]
 800ecb8:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 800ecba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7f1 fa98 	bl	80001f4 <strlen>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800eccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecd0:	486d      	ldr	r0, [pc, #436]	; (800ee88 <main+0x76a8>)
 800ecd2:	f7f7 fe6f 	bl	80069b4 <HAL_UART_Transmit>
		/*
		* Alert user to adjust pendulum upright by
		* counter clockwise rotation by Motor Position displacement prompt
		*
		*/
		BSP_MotorControl_GoTo(0, 80);
 800ecd6:	2150      	movs	r1, #80	; 0x50
 800ecd8:	2000      	movs	r0, #0
 800ecda:	f7f4 ffb5 	bl	8003c48 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 800ecde:	2000      	movs	r0, #0
 800ece0:	f7f5 f8da 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 800ece4:	2096      	movs	r0, #150	; 0x96
 800ece6:	f7f5 fa5b 	bl	80041a0 <HAL_Delay>
		BSP_MotorControl_GoTo(0, -80);
 800ecea:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f7f4 ffaa 	bl	8003c48 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	f7f5 f8cf 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 800ecfa:	2096      	movs	r0, #150	; 0x96
 800ecfc:	f7f5 fa50 	bl	80041a0 <HAL_Delay>
		BSP_MotorControl_GoTo(0, 80);
 800ed00:	2150      	movs	r1, #80	; 0x50
 800ed02:	2000      	movs	r0, #0
 800ed04:	f7f4 ffa0 	bl	8003c48 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 800ed08:	2000      	movs	r0, #0
 800ed0a:	f7f5 f8c5 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 800ed0e:	2096      	movs	r0, #150	; 0x96
 800ed10:	f7f5 fa46 	bl	80041a0 <HAL_Delay>
		BSP_MotorControl_GoTo(0, 0);
 800ed14:	2100      	movs	r1, #0
 800ed16:	2000      	movs	r0, #0
 800ed18:	f7f4 ff96 	bl	8003c48 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	f7f5 f8bb 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>

		if(select_suspended_mode == 0){
 800ed22:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d116      	bne.n	800ed5a <main+0x757a>
		sprintf(msg,
 800ed2c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ed30:	4a59      	ldr	r2, [pc, #356]	; (800ee98 <main+0x76b8>)
 800ed32:	4618      	mov	r0, r3
 800ed34:	4611      	mov	r1, r2
 800ed36:	234a      	movs	r3, #74	; 0x4a
 800ed38:	461a      	mov	r2, r3
 800ed3a:	f003 fed9 	bl	8012af0 <memcpy>
				"Adjust Pendulum Upright By Turning CCW Control Will Start When Vertical\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ed3e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7f1 fa56 	bl	80001f4 <strlen>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ed50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed54:	484c      	ldr	r0, [pc, #304]	; (800ee88 <main+0x76a8>)
 800ed56:	f7f7 fe2d 	bl	80069b4 <HAL_UART_Transmit>
		 * Permitted delay for user action is PENDULUM_ORIENTATION_START_DELAY.
		 *
		 */


		tick_wait_start = HAL_GetTick();
 800ed5a:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 800ed5e:	f7f5 fa13 	bl	8004188 <HAL_GetTick>
 800ed62:	6020      	str	r0, [r4, #0]
		if (select_suspended_mode == 0) {
 800ed64:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f040 80cb 	bne.w	800ef06 <main+0x7726>
			while (1){
				ret = encoder_position_read(&encoder_position, &htim3);
 800ed70:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ed74:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ed78:	4944      	ldr	r1, [pc, #272]	; (800ee8c <main+0x76ac>)
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f8 fb1a 	bl	80073b4 <encoder_position_read>
 800ed80:	6020      	str	r0, [r4, #0]
				if (abs(encoder_position - encoder_position_down - (int) ((round)(180 * angle_scale))) < START_ANGLE * angle_scale){
 800ed82:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800ed8c:	1ad4      	subs	r4, r2, r3
 800ed8e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800ed92:	edd3 7a00 	vldr	s15, [r3]
 800ed96:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ee9c <main+0x76bc>
 800ed9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed9e:	ee17 0a90 	vmov	r0, s15
 800eda2:	f7f1 fbe9 	bl	8000578 <__aeabi_f2d>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	ec43 2b10 	vmov	d0, r2, r3
 800edae:	f008 f991 	bl	80170d4 <round>
 800edb2:	ec53 2b10 	vmov	r2, r3, d0
 800edb6:	4610      	mov	r0, r2
 800edb8:	4619      	mov	r1, r3
 800edba:	f7f1 fee5 	bl	8000b88 <__aeabi_d2iz>
 800edbe:	4603      	mov	r3, r0
 800edc0:	1ae3      	subs	r3, r4, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	bfb8      	it	lt
 800edc6:	425b      	neglt	r3, r3
 800edc8:	ee07 3a90 	vmov	s15, r3
 800edcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edd0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800edd4:	ed93 7a00 	vldr	s14, [r3]
 800edd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede0:	f300 8090 	bgt.w	800ef04 <main+0x7724>
					break;
				}
				if (abs(encoder_position - encoder_position_down + (int) ((round)(180 * angle_scale))) < START_ANGLE * angle_scale){
 800ede4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 800edee:	1ad4      	subs	r4, r2, r3
 800edf0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800edf4:	edd3 7a00 	vldr	s15, [r3]
 800edf8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ee9c <main+0x76bc>
 800edfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee00:	ee17 0a90 	vmov	r0, s15
 800ee04:	f7f1 fbb8 	bl	8000578 <__aeabi_f2d>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	ec43 2b10 	vmov	d0, r2, r3
 800ee10:	f008 f960 	bl	80170d4 <round>
 800ee14:	ec53 2b10 	vmov	r2, r3, d0
 800ee18:	4610      	mov	r0, r2
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	f7f1 feb4 	bl	8000b88 <__aeabi_d2iz>
 800ee20:	4603      	mov	r3, r0
 800ee22:	4423      	add	r3, r4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb8      	it	lt
 800ee28:	425b      	neglt	r3, r3
 800ee2a:	ee07 3a90 	vmov	s15, r3
 800ee2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee32:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800ee36:	ed93 7a00 	vldr	s14, [r3]
 800ee3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee42:	dd2d      	ble.n	800eea0 <main+0x76c0>
					encoder_position_down = encoder_position_down - 2*(int) ((round)(180 * angle_scale));
 800ee44:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800ee48:	edd3 7a00 	vldr	s15, [r3]
 800ee4c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800ee9c <main+0x76bc>
 800ee50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee54:	ee17 0a90 	vmov	r0, s15
 800ee58:	f7f1 fb8e 	bl	8000578 <__aeabi_f2d>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	460c      	mov	r4, r1
 800ee60:	ec44 3b10 	vmov	d0, r3, r4
 800ee64:	f008 f936 	bl	80170d4 <round>
 800ee68:	ec54 3b10 	vmov	r3, r4, d0
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	4621      	mov	r1, r4
 800ee70:	f7f1 fe8a 	bl	8000b88 <__aeabi_d2iz>
 800ee74:	4603      	mov	r3, r0
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	f8d7 25d0 	ldr.w	r2, [r7, #1488]	; 0x5d0
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	f8c7 35d0 	str.w	r3, [r7, #1488]	; 0x5d0
					break;
 800ee82:	e040      	b.n	800ef06 <main+0x7726>
 800ee84:	08019914 	.word	0x08019914
 800ee88:	20000f20 	.word	0x20000f20
 800ee8c:	20000e1c 	.word	0x20000e1c
 800ee90:	08019950 	.word	0x08019950
 800ee94:	08019978 	.word	0x08019978
 800ee98:	0801999c 	.word	0x0801999c
 800ee9c:	43340000 	.word	0x43340000
				}
				tick_wait = HAL_GetTick();
 800eea0:	f507 744a 	add.w	r4, r7, #808	; 0x328
 800eea4:	f7f5 f970 	bl	8004188 <HAL_GetTick>
 800eea8:	6020      	str	r0, [r4, #0]

				if ( (tick_wait - tick_wait_start) > PENDULUM_ORIENTATION_START_DELAY){
 800eeaa:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800eeae:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800eeb2:	6812      	ldr	r2, [r2, #0]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	f242 7210 	movw	r2, #10000	; 0x2710
 800eebc:	4293      	cmp	r3, r2
 800eebe:	f67f af57 	bls.w	800ed70 <main+0x7590>
					sprintf(msg, "Pendulum Upright Action Not Detected - Restarting ...\r\n");
 800eec2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eec6:	4aa1      	ldr	r2, [pc, #644]	; (800f14c <main+0x796c>)
 800eec8:	461c      	mov	r4, r3
 800eeca:	4615      	mov	r5, r2
 800eecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eedc:	e884 0003 	stmia.w	r4, {r0, r1}
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800eee0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7f1 f985 	bl	80001f4 <strlen>
 800eeea:	4603      	mov	r3, r0
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800eef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eef6:	4896      	ldr	r0, [pc, #600]	; (800f150 <main+0x7970>)
 800eef8:	f7f7 fd5c 	bl	80069b4 <HAL_UART_Transmit>
					enable_pid = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					break;
 800ef02:	e000      	b.n	800ef06 <main+0x7726>
					break;
 800ef04:	bf00      	nop

		/*
		 * For case of Suspended Mode Operation, no initial condition check is required
		 */

		if(select_suspended_mode == 1){
 800ef06:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d114      	bne.n	800ef3a <main+0x775a>
		sprintf(msg, "Suspended Mode Control Will Start in %i Seconds\r\n",
 800ef10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ef14:	2203      	movs	r2, #3
 800ef16:	498f      	ldr	r1, [pc, #572]	; (800f154 <main+0x7974>)
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f003 fe19 	bl	8012b50 <sprintf>
				(int) (CONTROL_START_DELAY / 1000));
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ef1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f1 f966 	bl	80001f4 <strlen>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ef30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef34:	4886      	ldr	r0, [pc, #536]	; (800f150 <main+0x7970>)
 800ef36:	f7f7 fd3d 	bl	80069b4 <HAL_UART_Transmit>

		/*
		* Set Rotor Position Zero
		*/

		rotor_position_set();
 800ef3a:	f7f8 f9f7 	bl	800732c <rotor_position_set>
		ret = rotor_position_read(&rotor_position);
 800ef3e:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800ef42:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7f8 fa01 	bl	800734e <rotor_position_read>
 800ef4c:	6020      	str	r0, [r4, #0]

		sprintf(msg, "Initial Rotor Position: %i\r\n", rotor_position);
 800ef4e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ef58:	497f      	ldr	r1, [pc, #508]	; (800f158 <main+0x7978>)
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f003 fdf8 	bl	8012b50 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800ef60:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f1 f945 	bl	80001f4 <strlen>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800ef72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef76:	4876      	ldr	r0, [pc, #472]	; (800f150 <main+0x7970>)
 800ef78:	f7f7 fd1c 	bl	80069b4 <HAL_UART_Transmit>

		/*
		* Initialize Primary and Secondary PID controllers
		*/

		*current_error = 0;
 800ef7c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f04f 0200 	mov.w	r2, #0
 800ef86:	601a      	str	r2, [r3, #0]
		pid_filter_control_execute(pid_filter, current_error, sample_period,
 800ef88:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800ef8c:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 800ef90:	f507 7169 	add.w	r1, r7, #932	; 0x3a4
 800ef94:	f507 7063 	add.w	r0, r7, #908	; 0x38c
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6812      	ldr	r2, [r2, #0]
 800ef9c:	6809      	ldr	r1, [r1, #0]
 800ef9e:	6800      	ldr	r0, [r0, #0]
 800efa0:	f7f8 fa6a 	bl	8007478 <pid_filter_control_execute>
				deriv_lp_corner_f);
		*current_error_rotor = 0;
 800efa4:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f04f 0200 	mov.w	r2, #0
 800efae:	601a      	str	r2, [r3, #0]
		pid_filter_control_execute(rotor_pid, current_error_rotor,
 800efb0:	f507 7365 	add.w	r3, r7, #916	; 0x394
 800efb4:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800efb8:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 800efbc:	f507 7062 	add.w	r0, r7, #904	; 0x388
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6812      	ldr	r2, [r2, #0]
 800efc4:	6809      	ldr	r1, [r1, #0]
 800efc6:	6800      	ldr	r0, [r0, #0]
 800efc8:	f7f8 fa56 	bl	8007478 <pid_filter_control_execute>
				sample_period_rotor, deriv_lp_corner_f_rotor);


		cycle_count = CYCLE_LIMIT;
 800efcc:	f507 7349 	add.w	r3, r7, #804	; 0x324
 800efd0:	4a62      	ldr	r2, [pc, #392]	; (800f15c <main+0x797c>)
 800efd2:	601a      	str	r2, [r3, #0]
		i = 0;
 800efd4:	2300      	movs	r3, #0
 800efd6:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0


		rotor_position = 0;
 800efda:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800efde:	2200      	movs	r2, #0
 800efe0:	601a      	str	r2, [r3, #0]
		rotor_position_prev = 0;
 800efe2:	f04f 0300 	mov.w	r3, #0
 800efe6:	f207 52c4 	addw	r2, r7, #1476	; 0x5c4
 800efea:	6013      	str	r3, [r2, #0]
		rotor_position_filter = 0;
 800efec:	f04f 0300 	mov.w	r3, #0
 800eff0:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800eff4:	6013      	str	r3, [r2, #0]
		rotor_position_filter_prev = 0;
 800eff6:	f04f 0300 	mov.w	r3, #0
 800effa:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 800effe:	6013      	str	r3, [r2, #0]
		rotor_position_command = 0;
 800f000:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800f004:	f04f 0200 	mov.w	r2, #0
 800f008:	601a      	str	r2, [r3, #0]

		rotor_position_diff = 0;
 800f00a:	f04f 0300 	mov.w	r3, #0
 800f00e:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800f012:	6013      	str	r3, [r2, #0]
		rotor_position_diff_prev = 0;
 800f014:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800f018:	f04f 0200 	mov.w	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]
		rotor_position_diff_filter = 0;
 800f01e:	f04f 0300 	mov.w	r3, #0
 800f022:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 800f026:	6013      	str	r3, [r2, #0]
		rotor_position_diff_filter_prev = 0;
 800f028:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800f02c:	f04f 0200 	mov.w	r2, #0
 800f030:	601a      	str	r2, [r3, #0]

		rotor_position_step_polarity = 1;
 800f032:	2301      	movs	r3, #1
 800f034:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
		* Default start mode is with Step Drive tracking command
		* if Sine Drive is selected at run-time, Sine Drive is retained
		* since discontinuities are otherwise encountered
		*/

		encoder_angle_slope_corr = 0;
 800f038:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800f03c:	f04f 0200 	mov.w	r2, #0
 800f040:	601a      	str	r2, [r3, #0]

		rotor_sine_drive = 0;
 800f042:	f04f 0300 	mov.w	r3, #0
 800f046:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 800f04a:	6013      	str	r3, [r2, #0]
		sine_drive_transition = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
		rotor_mod_control = 1.0;
 800f052:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f056:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800f05a:	6013      	str	r3, [r2, #0]

		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 800f05c:	2300      	movs	r3, #0
 800f05e:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800f062:	e00b      	b.n	800f07c <main+0x789c>
			Msg.Data[k] = 0;
 800f064:	4a3e      	ldr	r2, [pc, #248]	; (800f160 <main+0x7980>)
 800f066:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800f06a:	4413      	add	r3, r2
 800f06c:	3304      	adds	r3, #4
 800f06e:	2200      	movs	r2, #0
 800f070:	701a      	strb	r2, [r3, #0]
		for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 800f072:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800f076:	3301      	adds	r3, #1
 800f078:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800f07c:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	; 0x5dc
 800f080:	2b63      	cmp	r3, #99	; 0x63
 800f082:	ddef      	ble.n	800f064 <main+0x7884>
		}

		__HAL_DMA_RESET_HANDLE_STATE(&hdma_usart2_rx);
 800f084:	4b37      	ldr	r3, [pc, #220]	; (800f164 <main+0x7984>)
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		enable_adaptive_mode = 0;
 800f08c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]

		tick_cycle_start = HAL_GetTick();
 800f094:	f7f5 f878 	bl	8004188 <HAL_GetTick>
 800f098:	f8c7 05f8 	str.w	r0, [r7, #1528]	; 0x5f8
		tick_cycle_previous = tick_cycle_start;
 800f09c:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800f0a0:	f8d7 25f8 	ldr.w	r2, [r7, #1528]	; 0x5f8
 800f0a4:	601a      	str	r2, [r3, #0]
		tick_cycle_current =  tick_cycle_start;
 800f0a6:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800f0aa:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
		tick_cycle_current = tick_cycle_start;
 800f0ae:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	; 0x5f8
 800f0b2:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
		chirp_cycle = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
		chirp_dwell_cycle = 0;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
		pendulum_position_command = 0;
 800f0c2:	f04f 0300 	mov.w	r3, #0
 800f0c6:	f207 5234 	addw	r2, r7, #1332	; 0x534
 800f0ca:	6013      	str	r3, [r2, #0]
		impulse_start_index = 0;
 800f0cc:	f04f 0300 	mov.w	r3, #0
 800f0d0:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 800f0d4:	6013      	str	r3, [r2, #0]
		mode_transition_state = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
		transition_to_adaptive_mode = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
        error_sum_prev = 0;
 800f0e2:	f04f 0300 	mov.w	r3, #0
 800f0e6:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800f0ea:	6013      	str	r3, [r2, #0]
        error_sum_filter_prev = 0;
 800f0ec:	f04f 0300 	mov.w	r3, #0
 800f0f0:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 800f0f4:	6013      	str	r3, [r2, #0]
        adaptive_state = 4;
 800f0f6:	2304      	movs	r3, #4
 800f0f8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
		rotor_position_target_prev = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		rotor_position_command_prev = 0;
 800f102:	f04f 0300 	mov.w	r3, #0
 800f106:	f207 5294 	addw	r2, r7, #1428	; 0x594
 800f10a:	6013      	str	r3, [r2, #0]
		enable_high_speed_sampling = ENABLE_HIGH_SPEED_SAMPLING_MODE;
 800f10c:	2300      	movs	r3, #0
 800f10e:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
		slope_prev = 0;
 800f112:	2300      	movs	r3, #0
 800f114:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
		rotor_track_comb_command = 0;
 800f118:	f04f 0300 	mov.w	r3, #0
 800f11c:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800f120:	6013      	str	r3, [r2, #0]

		noise_rej_signal_prev = 0;
 800f122:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800f126:	f04f 0200 	mov.w	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
		noise_rej_signal_filter_prev = 0;
 800f12c:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 800f130:	f04f 0200 	mov.w	r2, #0
 800f134:	601a      	str	r2, [r3, #0]


		/*
		 * Set initial rotor position
		 */
		ret = rotor_position_read(&rotor_position_initial);
 800f136:	f507 744c 	add.w	r4, r7, #816	; 0x330
 800f13a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f8 f905 	bl	800734e <rotor_position_read>
 800f144:	6020      	str	r0, [r4, #0]
 * Control Loop Start
 *
 * *************************************************************************************************
 */

		while (enable_pid == 1) {
 800f146:	f002 bf2a 	b.w	8011f9e <main+0xa7be>
 800f14a:	bf00      	nop
 800f14c:	080199e8 	.word	0x080199e8
 800f150:	20000f20 	.word	0x20000f20
 800f154:	08019a20 	.word	0x08019a20
 800f158:	08019a54 	.word	0x08019a54
 800f15c:	000186a0 	.word	0x000186a0
 800f160:	20000db4 	.word	0x20000db4
 800f164:	20000d54 	.word	0x20000d54
			*	Test for run time user input requesting change in Motor Speed Profile
			*	mode, switch to Suspended Mode, or control terminate
			*/

			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
					- __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800f168:	4bc6      	ldr	r3, [pc, #792]	; (800f484 <main+0x7ca4>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
 800f172:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800f176:	601a      	str	r2, [r3, #0]
			readBytes = Extract_Msg(RxBuffer, RxBuffer_ReadIdx,
 800f178:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	b299      	uxth	r1, r3
 800f180:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	b29a      	uxth	r2, r3
 800f188:	4bbf      	ldr	r3, [pc, #764]	; (800f488 <main+0x7ca8>)
 800f18a:	9300      	str	r3, [sp, #0]
 800f18c:	23c8      	movs	r3, #200	; 0xc8
 800f18e:	48bf      	ldr	r0, [pc, #764]	; (800f48c <main+0x7cac>)
 800f190:	f002 ff5a 	bl	8012048 <Extract_Msg>
 800f194:	4603      	mov	r3, r0
 800f196:	461a      	mov	r2, r3
 800f198:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f19c:	601a      	str	r2, [r3, #0]
					RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);

			config_command = 0;
 800f19e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]
			if (readBytes == 2 && Msg.Len == 1 && i % 10 == 0){
 800f1a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b02      	cmp	r3, #2
 800f1ae:	f041 8183 	bne.w	80104b8 <main+0x8cd8>
 800f1b2:	4bb5      	ldr	r3, [pc, #724]	; (800f488 <main+0x7ca8>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	f041 817e 	bne.w	80104b8 <main+0x8cd8>
 800f1bc:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 800f1c0:	4bb3      	ldr	r3, [pc, #716]	; (800f490 <main+0x7cb0>)
 800f1c2:	fb83 2301 	smull	r2, r3, r3, r1
 800f1c6:	109a      	asrs	r2, r3, #2
 800f1c8:	17cb      	asrs	r3, r1, #31
 800f1ca:	1ad2      	subs	r2, r2, r3
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	005b      	lsls	r3, r3, #1
 800f1d4:	1aca      	subs	r2, r1, r3
 800f1d6:	2a00      	cmp	r2, #0
 800f1d8:	f041 816e 	bne.w	80104b8 <main+0x8cd8>
				RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes) % UART_RX_BUFFER_SIZE;
 800f1dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	441a      	add	r2, r3
 800f1ea:	4baa      	ldr	r3, [pc, #680]	; (800f494 <main+0x7cb4>)
 800f1ec:	fba3 1302 	umull	r1, r3, r3, r2
 800f1f0:	099b      	lsrs	r3, r3, #6
 800f1f2:	21c8      	movs	r1, #200	; 0xc8
 800f1f4:	fb01 f303 	mul.w	r3, r1, r3
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800f1fe:	6013      	str	r3, [r2, #0]

				mode_index_prev = mode_index;
 800f200:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800f204:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

				strcpy(config_message, (char *) Msg.Data);
 800f208:	f107 0310 	add.w	r3, r7, #16
 800f20c:	49a2      	ldr	r1, [pc, #648]	; (800f498 <main+0x7cb8>)
 800f20e:	4618      	mov	r0, r3
 800f210:	f003 fcbe 	bl	8012b90 <strcpy>
				if (strcmp((char *) Msg.Data, mode_string_inc_pend_p) == 0){
 800f214:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800f218:	6819      	ldr	r1, [r3, #0]
 800f21a:	489f      	ldr	r0, [pc, #636]	; (800f498 <main+0x7cb8>)
 800f21c:	f7f0 ffe0 	bl	80001e0 <strcmp>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d115      	bne.n	800f252 <main+0x7a72>
					pid_filter->p_gain = pid_filter->p_gain + adjust_increment;
 800f226:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	ed93 7a00 	vldr	s14, [r3]
 800f230:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f234:	edd3 7a00 	vldr	s15, [r3]
 800f238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f23c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	edc3 7a00 	vstr	s15, [r3]
					config_command = 1;
 800f246:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f24a:	2201      	movs	r2, #1
 800f24c:	601a      	str	r2, [r3, #0]
 800f24e:	f000 be1b 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_pend_p) == 0) {
 800f252:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800f256:	6819      	ldr	r1, [r3, #0]
 800f258:	488f      	ldr	r0, [pc, #572]	; (800f498 <main+0x7cb8>)
 800f25a:	f7f0 ffc1 	bl	80001e0 <strcmp>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d125      	bne.n	800f2b0 <main+0x7ad0>
					pid_filter->p_gain = pid_filter->p_gain - adjust_increment;
 800f264:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	ed93 7a00 	vldr	s14, [r3]
 800f26e:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f272:	edd3 7a00 	vldr	s15, [r3]
 800f276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f27a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	edc3 7a00 	vstr	s15, [r3]
					if (pid_filter->p_gain <= 0) { pid_filter->p_gain = 0; }
 800f284:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	edd3 7a00 	vldr	s15, [r3]
 800f28e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f296:	d805      	bhi.n	800f2a4 <main+0x7ac4>
 800f298:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f04f 0200 	mov.w	r2, #0
 800f2a2:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800f2a4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	601a      	str	r2, [r3, #0]
 800f2ac:	f000 bdec 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_pend_d) == 0) {
 800f2b0:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800f2b4:	6819      	ldr	r1, [r3, #0]
 800f2b6:	4878      	ldr	r0, [pc, #480]	; (800f498 <main+0x7cb8>)
 800f2b8:	f7f0 ff92 	bl	80001e0 <strcmp>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d115      	bne.n	800f2ee <main+0x7b0e>
					pid_filter->d_gain = pid_filter->d_gain + adjust_increment;
 800f2c2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	ed93 7a04 	vldr	s14, [r3, #16]
 800f2cc:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f2d0:	edd3 7a00 	vldr	s15, [r3]
 800f2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2d8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	edc3 7a04 	vstr	s15, [r3, #16]
					config_command = 1;
 800f2e2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	f000 bdcd 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_pend_d) == 0) {
 800f2ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800f2f2:	6819      	ldr	r1, [r3, #0]
 800f2f4:	4868      	ldr	r0, [pc, #416]	; (800f498 <main+0x7cb8>)
 800f2f6:	f7f0 ff73 	bl	80001e0 <strcmp>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d125      	bne.n	800f34c <main+0x7b6c>
					pid_filter->d_gain = pid_filter->d_gain - adjust_increment;
 800f300:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	ed93 7a04 	vldr	s14, [r3, #16]
 800f30a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f30e:	edd3 7a00 	vldr	s15, [r3]
 800f312:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f316:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	edc3 7a04 	vstr	s15, [r3, #16]
					if (pid_filter->d_gain <= 0) { pid_filter->d_gain = 0; }
 800f320:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	edd3 7a04 	vldr	s15, [r3, #16]
 800f32a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f332:	d805      	bhi.n	800f340 <main+0x7b60>
 800f334:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f04f 0200 	mov.w	r2, #0
 800f33e:	611a      	str	r2, [r3, #16]
					config_command = 1;
 800f340:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f344:	2201      	movs	r2, #1
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	f000 bd9e 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_pend_i) == 0) {
 800f34c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800f350:	6819      	ldr	r1, [r3, #0]
 800f352:	4851      	ldr	r0, [pc, #324]	; (800f498 <main+0x7cb8>)
 800f354:	f7f0 ff44 	bl	80001e0 <strcmp>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d115      	bne.n	800f38a <main+0x7baa>
					pid_filter->i_gain = pid_filter->i_gain + adjust_increment;
 800f35e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	ed93 7a01 	vldr	s14, [r3, #4]
 800f368:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f36c:	edd3 7a00 	vldr	s15, [r3]
 800f370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f374:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	edc3 7a01 	vstr	s15, [r3, #4]
					config_command = 1;
 800f37e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f382:	2201      	movs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	f000 bd7f 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_pend_i) == 0) {
 800f38a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f38e:	6819      	ldr	r1, [r3, #0]
 800f390:	4841      	ldr	r0, [pc, #260]	; (800f498 <main+0x7cb8>)
 800f392:	f7f0 ff25 	bl	80001e0 <strcmp>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d125      	bne.n	800f3e8 <main+0x7c08>
					pid_filter->i_gain = pid_filter->i_gain - adjust_increment;
 800f39c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3a6:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f3aa:	edd3 7a00 	vldr	s15, [r3]
 800f3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3b2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	edc3 7a01 	vstr	s15, [r3, #4]
					if (pid_filter->i_gain <= 0) { pid_filter->i_gain = 0; }
 800f3bc:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	d805      	bhi.n	800f3dc <main+0x7bfc>
 800f3d0:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f04f 0200 	mov.w	r2, #0
 800f3da:	605a      	str	r2, [r3, #4]
					config_command = 1;
 800f3dc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f000 bd50 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_rotor_p) == 0){
 800f3e8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 800f3ec:	6819      	ldr	r1, [r3, #0]
 800f3ee:	482a      	ldr	r0, [pc, #168]	; (800f498 <main+0x7cb8>)
 800f3f0:	f7f0 fef6 	bl	80001e0 <strcmp>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d115      	bne.n	800f426 <main+0x7c46>
					rotor_pid->p_gain = rotor_pid->p_gain + adjust_increment;
 800f3fa:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	ed93 7a00 	vldr	s14, [r3]
 800f404:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f408:	edd3 7a00 	vldr	s15, [r3]
 800f40c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f410:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	edc3 7a00 	vstr	s15, [r3]
					config_command = 1;
 800f41a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f41e:	2201      	movs	r2, #1
 800f420:	601a      	str	r2, [r3, #0]
 800f422:	f000 bd31 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_rotor_p) == 0) {
 800f426:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f42a:	6819      	ldr	r1, [r3, #0]
 800f42c:	481a      	ldr	r0, [pc, #104]	; (800f498 <main+0x7cb8>)
 800f42e:	f7f0 fed7 	bl	80001e0 <strcmp>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d131      	bne.n	800f49c <main+0x7cbc>
					rotor_pid->p_gain = rotor_pid->p_gain - adjust_increment;
 800f438:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	ed93 7a00 	vldr	s14, [r3]
 800f442:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f446:	edd3 7a00 	vldr	s15, [r3]
 800f44a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f44e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	edc3 7a00 	vstr	s15, [r3]
					if (rotor_pid->p_gain <= 0) { rotor_pid->p_gain = 0; }
 800f458:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	edd3 7a00 	vldr	s15, [r3]
 800f462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46a:	d805      	bhi.n	800f478 <main+0x7c98>
 800f46c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f04f 0200 	mov.w	r2, #0
 800f476:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800f478:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f47c:	2201      	movs	r2, #1
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	f000 bd02 	b.w	800fe88 <main+0x86a8>
 800f484:	20000d54 	.word	0x20000d54
 800f488:	20000db4 	.word	0x20000db4
 800f48c:	20000e58 	.word	0x20000e58
 800f490:	66666667 	.word	0x66666667
 800f494:	51eb851f 	.word	0x51eb851f
 800f498:	20000db8 	.word	0x20000db8
				} else if (strcmp((char *) Msg.Data, mode_string_inc_rotor_d) == 0) {
 800f49c:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800f4a0:	6819      	ldr	r1, [r3, #0]
 800f4a2:	48d1      	ldr	r0, [pc, #836]	; (800f7e8 <main+0x8008>)
 800f4a4:	f7f0 fe9c 	bl	80001e0 <strcmp>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d115      	bne.n	800f4da <main+0x7cfa>
					rotor_pid->d_gain = rotor_pid->d_gain + adjust_increment;
 800f4ae:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	ed93 7a04 	vldr	s14, [r3, #16]
 800f4b8:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f4bc:	edd3 7a00 	vldr	s15, [r3]
 800f4c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4c4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	edc3 7a04 	vstr	s15, [r3, #16]
					config_command = 1;
 800f4ce:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	601a      	str	r2, [r3, #0]
 800f4d6:	f000 bcd7 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_rotor_d) == 0) {
 800f4da:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800f4de:	6819      	ldr	r1, [r3, #0]
 800f4e0:	48c1      	ldr	r0, [pc, #772]	; (800f7e8 <main+0x8008>)
 800f4e2:	f7f0 fe7d 	bl	80001e0 <strcmp>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d125      	bne.n	800f538 <main+0x7d58>
					rotor_pid->d_gain = rotor_pid->d_gain - adjust_increment;
 800f4ec:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	ed93 7a04 	vldr	s14, [r3, #16]
 800f4f6:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f4fa:	edd3 7a00 	vldr	s15, [r3]
 800f4fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f502:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	edc3 7a04 	vstr	s15, [r3, #16]
					if (rotor_pid->d_gain <= 0) { rotor_pid->d_gain = 0; }
 800f50c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	edd3 7a04 	vldr	s15, [r3, #16]
 800f516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	d805      	bhi.n	800f52c <main+0x7d4c>
 800f520:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f04f 0200 	mov.w	r2, #0
 800f52a:	611a      	str	r2, [r3, #16]
					config_command = 1;
 800f52c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f530:	2201      	movs	r2, #1
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	f000 bca8 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_rotor_i) == 0) {
 800f538:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800f53c:	6819      	ldr	r1, [r3, #0]
 800f53e:	48aa      	ldr	r0, [pc, #680]	; (800f7e8 <main+0x8008>)
 800f540:	f7f0 fe4e 	bl	80001e0 <strcmp>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d115      	bne.n	800f576 <main+0x7d96>
					rotor_pid->i_gain = rotor_pid->i_gain + adjust_increment;
 800f54a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	ed93 7a01 	vldr	s14, [r3, #4]
 800f554:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f558:	edd3 7a00 	vldr	s15, [r3]
 800f55c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f560:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	edc3 7a01 	vstr	s15, [r3, #4]
					config_command = 1;
 800f56a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f56e:	2201      	movs	r2, #1
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	f000 bc89 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_rotor_i) == 0) {
 800f576:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800f57a:	6819      	ldr	r1, [r3, #0]
 800f57c:	489a      	ldr	r0, [pc, #616]	; (800f7e8 <main+0x8008>)
 800f57e:	f7f0 fe2f 	bl	80001e0 <strcmp>
 800f582:	4603      	mov	r3, r0
 800f584:	2b00      	cmp	r3, #0
 800f586:	d125      	bne.n	800f5d4 <main+0x7df4>
					rotor_pid->i_gain = rotor_pid->i_gain - adjust_increment;
 800f588:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	ed93 7a01 	vldr	s14, [r3, #4]
 800f592:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f596:	edd3 7a00 	vldr	s15, [r3]
 800f59a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f59e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	edc3 7a01 	vstr	s15, [r3, #4]
					if (rotor_pid->i_gain <= 0) { rotor_pid->i_gain = 0; }
 800f5a8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	edd3 7a01 	vldr	s15, [r3, #4]
 800f5b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ba:	d805      	bhi.n	800f5c8 <main+0x7de8>
 800f5bc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f04f 0200 	mov.w	r2, #0
 800f5c6:	605a      	str	r2, [r3, #4]
					config_command = 1;
 800f5c8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f000 bc5a 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_torq_c) == 0) {
 800f5d4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800f5d8:	6819      	ldr	r1, [r3, #0]
 800f5da:	4883      	ldr	r0, [pc, #524]	; (800f7e8 <main+0x8008>)
 800f5dc:	f7f0 fe00 	bl	80001e0 <strcmp>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d13c      	bne.n	800f660 <main+0x7e80>
					torq_current_val = L6474_GetAnalogValue(0, L6474_TVAL);
 800f5e6:	2109      	movs	r1, #9
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	f7f1 fff1 	bl	80015d0 <L6474_GetAnalogValue>
 800f5ee:	eef0 7a40 	vmov.f32	s15, s0
 800f5f2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f5f6:	edc3 7a00 	vstr	s15, [r3]
					torq_current_val = torq_current_val - adjust_increment;
 800f5fa:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f5fe:	ed93 7a00 	vldr	s14, [r3]
 800f602:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f606:	edd3 7a00 	vldr	s15, [r3]
 800f60a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f60e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f612:	edc3 7a00 	vstr	s15, [r3]
					if (torq_current_val < 200){ torq_current_val = 200; }
 800f616:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f61a:	edd3 7a00 	vldr	s15, [r3]
 800f61e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f7ec <main+0x800c>
 800f622:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	d503      	bpl.n	800f634 <main+0x7e54>
 800f62c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f630:	4a6f      	ldr	r2, [pc, #444]	; (800f7f0 <main+0x8010>)
 800f632:	601a      	str	r2, [r3, #0]
					BSP_MotorControl_SoftStop(0);
 800f634:	2000      	movs	r0, #0
 800f636:	f7f4 fbeb 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f63a:	2000      	movs	r0, #0
 800f63c:	f7f4 fc2c 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 800f640:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f644:	edd3 7a00 	vldr	s15, [r3]
 800f648:	eeb0 0a67 	vmov.f32	s0, s15
 800f64c:	2109      	movs	r1, #9
 800f64e:	2000      	movs	r0, #0
 800f650:	f7f2 fbec 	bl	8001e2c <L6474_SetAnalogValue>
					config_command = 1;
 800f654:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f658:	2201      	movs	r2, #1
 800f65a:	601a      	str	r2, [r3, #0]
 800f65c:	f000 bc14 	b.w	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_torq_c) == 0) {
 800f660:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800f664:	6819      	ldr	r1, [r3, #0]
 800f666:	4860      	ldr	r0, [pc, #384]	; (800f7e8 <main+0x8008>)
 800f668:	f7f0 fdba 	bl	80001e0 <strcmp>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d13b      	bne.n	800f6ea <main+0x7f0a>
					torq_current_val = L6474_GetAnalogValue(0, L6474_TVAL);
 800f672:	2109      	movs	r1, #9
 800f674:	2000      	movs	r0, #0
 800f676:	f7f1 ffab 	bl	80015d0 <L6474_GetAnalogValue>
 800f67a:	eef0 7a40 	vmov.f32	s15, s0
 800f67e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f682:	edc3 7a00 	vstr	s15, [r3]
					torq_current_val = torq_current_val + adjust_increment;
 800f686:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f68a:	ed93 7a00 	vldr	s14, [r3]
 800f68e:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f692:	edd3 7a00 	vldr	s15, [r3]
 800f696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f69a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f69e:	edc3 7a00 	vstr	s15, [r3]
					if (torq_current_val > 800){ torq_current_val = 800; }
 800f6a2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f6a6:	edd3 7a00 	vldr	s15, [r3]
 800f6aa:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800f7f4 <main+0x8014>
 800f6ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b6:	dd03      	ble.n	800f6c0 <main+0x7ee0>
 800f6b8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f6bc:	4a4e      	ldr	r2, [pc, #312]	; (800f7f8 <main+0x8018>)
 800f6be:	601a      	str	r2, [r3, #0]
					BSP_MotorControl_SoftStop(0);
 800f6c0:	2000      	movs	r0, #0
 800f6c2:	f7f4 fba5 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	f7f4 fbe6 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 800f6cc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800f6d0:	edd3 7a00 	vldr	s15, [r3]
 800f6d4:	eeb0 0a67 	vmov.f32	s0, s15
 800f6d8:	2109      	movs	r1, #9
 800f6da:	2000      	movs	r0, #0
 800f6dc:	f7f2 fba6 	bl	8001e2c <L6474_SetAnalogValue>
					config_command = 1;
 800f6e0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	e3ce      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_max_s) == 0) {
 800f6ea:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800f6ee:	6819      	ldr	r1, [r3, #0]
 800f6f0:	483d      	ldr	r0, [pc, #244]	; (800f7e8 <main+0x8008>)
 800f6f2:	f7f0 fd75 	bl	80001e0 <strcmp>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d139      	bne.n	800f770 <main+0x7f90>
					max_speed = L6474_GetMaxSpeed(0);
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	f7f2 f85b 	bl	80017b8 <L6474_GetMaxSpeed>
 800f702:	4603      	mov	r3, r0
 800f704:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					max_speed = max_speed - adjust_increment;
 800f708:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f70c:	ee07 3a90 	vmov	s15, r3
 800f710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f714:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f718:	edd3 7a00 	vldr	s15, [r3]
 800f71c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f724:	ee17 3a90 	vmov	r3, s15
 800f728:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					if (max_speed < 100){ max_speed = 100; }
 800f72c:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f730:	2b63      	cmp	r3, #99	; 0x63
 800f732:	d802      	bhi.n	800f73a <main+0x7f5a>
 800f734:	2364      	movs	r3, #100	; 0x64
 800f736:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					if (max_speed < min_speed){ max_speed = min_speed;}
 800f73a:	f8b7 25f6 	ldrh.w	r2, [r7, #1526]	; 0x5f6
 800f73e:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f742:	429a      	cmp	r2, r3
 800f744:	d203      	bcs.n	800f74e <main+0x7f6e>
 800f746:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f74a:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					BSP_MotorControl_SoftStop(0);
 800f74e:	2000      	movs	r0, #0
 800f750:	f7f4 fb5e 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f754:	2000      	movs	r0, #0
 800f756:	f7f4 fb9f 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetMaxSpeed(0, max_speed);
 800f75a:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f75e:	4619      	mov	r1, r3
 800f760:	2000      	movs	r0, #0
 800f762:	f7f2 fd33 	bl	80021cc <L6474_SetMaxSpeed>
					config_command = 1;
 800f766:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f76a:	2201      	movs	r2, #1
 800f76c:	601a      	str	r2, [r3, #0]
 800f76e:	e38b      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_max_s) == 0) {
 800f770:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800f774:	6819      	ldr	r1, [r3, #0]
 800f776:	481c      	ldr	r0, [pc, #112]	; (800f7e8 <main+0x8008>)
 800f778:	f7f0 fd32 	bl	80001e0 <strcmp>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d13c      	bne.n	800f7fc <main+0x801c>
					max_speed = L6474_GetMaxSpeed(0);
 800f782:	2000      	movs	r0, #0
 800f784:	f7f2 f818 	bl	80017b8 <L6474_GetMaxSpeed>
 800f788:	4603      	mov	r3, r0
 800f78a:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					max_speed = max_speed + adjust_increment;
 800f78e:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f792:	ee07 3a90 	vmov	s15, r3
 800f796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f79a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f79e:	edd3 7a00 	vldr	s15, [r3]
 800f7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7aa:	ee17 3a90 	vmov	r3, s15
 800f7ae:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					if (max_speed > 1000){ max_speed = 1000; }
 800f7b2:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f7b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f7ba:	d903      	bls.n	800f7c4 <main+0x7fe4>
 800f7bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f7c0:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					BSP_MotorControl_SoftStop(0);
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	f7f4 fb23 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	f7f4 fb64 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetMaxSpeed(0, max_speed);
 800f7d0:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	f7f2 fcf8 	bl	80021cc <L6474_SetMaxSpeed>
					config_command = 1;
 800f7dc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	e350      	b.n	800fe88 <main+0x86a8>
 800f7e6:	bf00      	nop
 800f7e8:	20000db8 	.word	0x20000db8
 800f7ec:	43480000 	.word	0x43480000
 800f7f0:	43480000 	.word	0x43480000
 800f7f4:	44480000 	.word	0x44480000
 800f7f8:	44480000 	.word	0x44480000
				} else if (strcmp((char *) Msg.Data, mode_string_dec_min_s) == 0) {
 800f7fc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800f800:	6819      	ldr	r1, [r3, #0]
 800f802:	48d3      	ldr	r0, [pc, #844]	; (800fb50 <main+0x8370>)
 800f804:	f7f0 fcec 	bl	80001e0 <strcmp>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d12f      	bne.n	800f86e <main+0x808e>
					min_speed = L6474_GetMinSpeed(0);
 800f80e:	2000      	movs	r0, #0
 800f810:	f7f1 ffea 	bl	80017e8 <L6474_GetMinSpeed>
 800f814:	4603      	mov	r3, r0
 800f816:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					min_speed = min_speed - adjust_increment;
 800f81a:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f81e:	ee07 3a90 	vmov	s15, r3
 800f822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f826:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f82a:	edd3 7a00 	vldr	s15, [r3]
 800f82e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f836:	ee17 3a90 	vmov	r3, s15
 800f83a:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					if (min_speed < 100){ min_speed = 100; }
 800f83e:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f842:	2b63      	cmp	r3, #99	; 0x63
 800f844:	d802      	bhi.n	800f84c <main+0x806c>
 800f846:	2364      	movs	r3, #100	; 0x64
 800f848:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					BSP_MotorControl_SoftStop(0);
 800f84c:	2000      	movs	r0, #0
 800f84e:	f7f4 fadf 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f852:	2000      	movs	r0, #0
 800f854:	f7f4 fb20 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetMinSpeed(0, min_speed);
 800f858:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f85c:	4619      	mov	r1, r3
 800f85e:	2000      	movs	r0, #0
 800f860:	f7f2 fd00 	bl	8002264 <L6474_SetMinSpeed>
					config_command = 1;
 800f864:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f868:	2201      	movs	r2, #1
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	e30c      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_min_s) == 0) {
 800f86e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 800f872:	6819      	ldr	r1, [r3, #0]
 800f874:	48b6      	ldr	r0, [pc, #728]	; (800fb50 <main+0x8370>)
 800f876:	f7f0 fcb3 	bl	80001e0 <strcmp>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d13f      	bne.n	800f900 <main+0x8120>
					min_speed = L6474_GetMinSpeed(0);
 800f880:	2000      	movs	r0, #0
 800f882:	f7f1 ffb1 	bl	80017e8 <L6474_GetMinSpeed>
 800f886:	4603      	mov	r3, r0
 800f888:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					min_speed = min_speed + adjust_increment;
 800f88c:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f890:	ee07 3a90 	vmov	s15, r3
 800f894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f898:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f89c:	edd3 7a00 	vldr	s15, [r3]
 800f8a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f8a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8a8:	ee17 3a90 	vmov	r3, s15
 800f8ac:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					if (min_speed > 1000){ min_speed = 1000; }
 800f8b0:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f8b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f8b8:	d903      	bls.n	800f8c2 <main+0x80e2>
 800f8ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8be:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					if (min_speed > max_speed){ min_speed = max_speed;}
 800f8c2:	f8b7 2606 	ldrh.w	r2, [r7, #1542]	; 0x606
 800f8c6:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d903      	bls.n	800f8d6 <main+0x80f6>
 800f8ce:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 800f8d2:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					BSP_MotorControl_SoftStop(0);
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	f7f4 fa9a 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f8dc:	2000      	movs	r0, #0
 800f8de:	f7f4 fadb 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetMinSpeed(0, min_speed);
 800f8e2:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	f7f2 fcbb 	bl	8002264 <L6474_SetMinSpeed>
					config_command = 1;
 800f8ee:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	601a      	str	r2, [r3, #0]
					mode_index_command = -1;
 800f8f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8fa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800f8fe:	e2c3      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_max_a) == 0) {
 800f900:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800f904:	6819      	ldr	r1, [r3, #0]
 800f906:	4892      	ldr	r0, [pc, #584]	; (800fb50 <main+0x8370>)
 800f908:	f7f0 fc6a 	bl	80001e0 <strcmp>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d128      	bne.n	800f964 <main+0x8184>
					max_accel = L6474_GetAcceleration(0);
 800f912:	2000      	movs	r0, #0
 800f914:	f7f1 fe44 	bl	80015a0 <L6474_GetAcceleration>
 800f918:	4603      	mov	r3, r0
 800f91a:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
					max_accel = max_accel - adjust_increment;
 800f91e:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 800f922:	ee07 3a90 	vmov	s15, r3
 800f926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f92a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f92e:	edd3 7a00 	vldr	s15, [r3]
 800f932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f93a:	ee17 3a90 	vmov	r3, s15
 800f93e:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
					if (max_accel <  0){ max_accel = 0;}
					BSP_MotorControl_SoftStop(0);
 800f942:	2000      	movs	r0, #0
 800f944:	f7f4 fa64 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f948:	2000      	movs	r0, #0
 800f94a:	f7f4 faa5 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetAcceleration(0, max_accel);
 800f94e:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 800f952:	4619      	mov	r1, r3
 800f954:	2000      	movs	r0, #0
 800f956:	f7f2 fa2f 	bl	8001db8 <L6474_SetAcceleration>
					config_command = 1;
 800f95a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f95e:	2201      	movs	r2, #1
 800f960:	601a      	str	r2, [r3, #0]
 800f962:	e291      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_max_a) == 0) {
 800f964:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800f968:	6819      	ldr	r1, [r3, #0]
 800f96a:	4879      	ldr	r0, [pc, #484]	; (800fb50 <main+0x8370>)
 800f96c:	f7f0 fc38 	bl	80001e0 <strcmp>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	d132      	bne.n	800f9dc <main+0x81fc>
					max_accel = L6474_GetAcceleration(0);
 800f976:	2000      	movs	r0, #0
 800f978:	f7f1 fe12 	bl	80015a0 <L6474_GetAcceleration>
 800f97c:	4603      	mov	r3, r0
 800f97e:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
					max_accel = max_accel + adjust_increment;
 800f982:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 800f986:	ee07 3a90 	vmov	s15, r3
 800f98a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f98e:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800f992:	edd3 7a00 	vldr	s15, [r3]
 800f996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f99a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f99e:	ee17 3a90 	vmov	r3, s15
 800f9a2:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
					if (max_accel >  10000){ max_accel = 10000;}
 800f9a6:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 800f9aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d903      	bls.n	800f9ba <main+0x81da>
 800f9b2:	f242 7310 	movw	r3, #10000	; 0x2710
 800f9b6:	f8a7 35f4 	strh.w	r3, [r7, #1524]	; 0x5f4
					BSP_MotorControl_SoftStop(0);
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	f7f4 fa28 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f7f4 fa69 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetAcceleration(0, max_accel);
 800f9c6:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	f7f2 f9f3 	bl	8001db8 <L6474_SetAcceleration>
					config_command = 1;
 800f9d2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	601a      	str	r2, [r3, #0]
 800f9da:	e255      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_max_d) == 0) {
 800f9dc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800f9e0:	6819      	ldr	r1, [r3, #0]
 800f9e2:	485b      	ldr	r0, [pc, #364]	; (800fb50 <main+0x8370>)
 800f9e4:	f7f0 fbfc 	bl	80001e0 <strcmp>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d128      	bne.n	800fa40 <main+0x8260>
					max_decel = L6474_GetDeceleration(0);
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f7f1 fe72 	bl	80016d8 <L6474_GetDeceleration>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
					max_decel = max_decel - adjust_increment;
 800f9fa:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 800f9fe:	ee07 3a90 	vmov	s15, r3
 800fa02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fa06:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fa0a:	edd3 7a00 	vldr	s15, [r3]
 800fa0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa16:	ee17 3a90 	vmov	r3, s15
 800fa1a:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
					if (max_decel <  0){ max_decel = 0;}
					BSP_MotorControl_SoftStop(0);
 800fa1e:	2000      	movs	r0, #0
 800fa20:	f7f4 f9f6 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800fa24:	2000      	movs	r0, #0
 800fa26:	f7f4 fa37 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetDeceleration(0, max_decel);
 800fa2a:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 800fa2e:	4619      	mov	r1, r3
 800fa30:	2000      	movs	r0, #0
 800fa32:	f7f2 fb01 	bl	8002038 <L6474_SetDeceleration>
					config_command = 1;
 800fa36:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	e223      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_max_d) == 0) {
 800fa40:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800fa44:	6819      	ldr	r1, [r3, #0]
 800fa46:	4842      	ldr	r0, [pc, #264]	; (800fb50 <main+0x8370>)
 800fa48:	f7f0 fbca 	bl	80001e0 <strcmp>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d132      	bne.n	800fab8 <main+0x82d8>
					max_decel = L6474_GetDeceleration(0);
 800fa52:	2000      	movs	r0, #0
 800fa54:	f7f1 fe40 	bl	80016d8 <L6474_GetDeceleration>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
					max_decel = max_decel + adjust_increment;
 800fa5e:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 800fa62:	ee07 3a90 	vmov	s15, r3
 800fa66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fa6a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fa6e:	edd3 7a00 	vldr	s15, [r3]
 800fa72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa7a:	ee17 3a90 	vmov	r3, s15
 800fa7e:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
					if (max_decel > 10000) { max_decel = 10000; }
 800fa82:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 800fa86:	f242 7210 	movw	r2, #10000	; 0x2710
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d903      	bls.n	800fa96 <main+0x82b6>
 800fa8e:	f242 7310 	movw	r3, #10000	; 0x2710
 800fa92:	f8a7 35f2 	strh.w	r3, [r7, #1522]	; 0x5f2
					BSP_MotorControl_SoftStop(0);
 800fa96:	2000      	movs	r0, #0
 800fa98:	f7f4 f9ba 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f7f4 f9fb 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetDeceleration(0, max_decel);
 800faa2:	f8b7 35f2 	ldrh.w	r3, [r7, #1522]	; 0x5f2
 800faa6:	4619      	mov	r1, r3
 800faa8:	2000      	movs	r0, #0
 800faaa:	f7f2 fac5 	bl	8002038 <L6474_SetDeceleration>
					config_command = 1;
 800faae:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fab2:	2201      	movs	r2, #1
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	e1e7      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_select_mode_5) == 0) {
 800fab8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800fabc:	6819      	ldr	r1, [r3, #0]
 800fabe:	4824      	ldr	r0, [pc, #144]	; (800fb50 <main+0x8370>)
 800fac0:	f7f0 fb8e 	bl	80001e0 <strcmp>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d14c      	bne.n	800fb64 <main+0x8384>
					BSP_MotorControl_SoftStop(0);
 800faca:	2000      	movs	r0, #0
 800facc:	f7f4 f9a0 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 800fad0:	2000      	movs	r0, #0
 800fad2:	f7f4 f9e1 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					L6474_SetDeceleration(0, MAX_DECEL);
 800fad6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800fada:	2000      	movs	r0, #0
 800fadc:	f7f2 faac 	bl	8002038 <L6474_SetDeceleration>
					L6474_SetAcceleration(0, MAX_ACCEL);
 800fae0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800fae4:	2000      	movs	r0, #0
 800fae6:	f7f2 f967 	bl	8001db8 <L6474_SetAcceleration>
					L6474_SetMinSpeed(0, MIN_SPEED_MODE_5);
 800faea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800faee:	2000      	movs	r0, #0
 800faf0:	f7f2 fbb8 	bl	8002264 <L6474_SetMinSpeed>
					L6474_SetMaxSpeed(0, MAX_SPEED_MODE_5);
 800faf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800faf8:	2000      	movs	r0, #0
 800fafa:	f7f2 fb67 	bl	80021cc <L6474_SetMaxSpeed>
					pid_filter->p_gain = PRIMARY_PROPORTIONAL_MODE_5;
 800fafe:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a13      	ldr	r2, [pc, #76]	; (800fb54 <main+0x8374>)
 800fb06:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = PRIMARY_INTEGRAL_MODE_5;
 800fb08:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	4a12      	ldr	r2, [pc, #72]	; (800fb58 <main+0x8378>)
 800fb10:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = PRIMARY_DERIVATIVE_MODE_5;
 800fb12:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a10      	ldr	r2, [pc, #64]	; (800fb5c <main+0x837c>)
 800fb1a:	611a      	str	r2, [r3, #16]
					rotor_pid->p_gain = SECONDARY_PROPORTIONAL_MODE_5;
 800fb1c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800fb26:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = SECONDARY_INTEGRAL_MODE_5;
 800fb28:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a0c      	ldr	r2, [pc, #48]	; (800fb60 <main+0x8380>)
 800fb30:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = SECONDARY_DERIVATIVE_MODE_5;
 800fb32:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800fb3c:	611a      	str	r2, [r3, #16]
					enable_adaptive_mode = 0;
 800fb3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fb46:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	e19b      	b.n	800fe88 <main+0x86a8>
 800fb50:	20000db8 	.word	0x20000db8
 800fb54:	44fa0000 	.word	0x44fa0000
 800fb58:	43c80000 	.word	0x43c80000
 800fb5c:	43960000 	.word	0x43960000
 800fb60:	3e4ccccd 	.word	0x3e4ccccd
				} else if (strcmp((char *) Msg.Data, mode_string_enable_step ) == 0 ){
 800fb64:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800fb68:	6819      	ldr	r1, [r3, #0]
 800fb6a:	48b8      	ldr	r0, [pc, #736]	; (800fe4c <main+0x866c>)
 800fb6c:	f7f0 fb38 	bl	80001e0 <strcmp>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d110      	bne.n	800fb98 <main+0x83b8>
					enable_rotor_position_step_response_cycle = 1;
 800fb76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	601a      	str	r2, [r3, #0]
					enable_noise_rejection_step = 0;
 800fb7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]
					enable_disturbance_rejection_step = 0;
 800fb86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fb8e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fb92:	2201      	movs	r2, #1
 800fb94:	601a      	str	r2, [r3, #0]
 800fb96:	e177      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_disable_step ) == 0 ){
 800fb98:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 800fb9c:	6819      	ldr	r1, [r3, #0]
 800fb9e:	48ab      	ldr	r0, [pc, #684]	; (800fe4c <main+0x866c>)
 800fba0:	f7f0 fb1e 	bl	80001e0 <strcmp>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d108      	bne.n	800fbbc <main+0x83dc>
					enable_rotor_position_step_response_cycle = 0;
 800fbaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fbae:	2200      	movs	r2, #0
 800fbb0:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fbb2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	601a      	str	r2, [r3, #0]
 800fbba:	e165      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_enable_noise_rej_step ) == 0 ){
 800fbbc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800fbc0:	6819      	ldr	r1, [r3, #0]
 800fbc2:	48a2      	ldr	r0, [pc, #648]	; (800fe4c <main+0x866c>)
 800fbc4:	f7f0 fb0c 	bl	80001e0 <strcmp>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d110      	bne.n	800fbf0 <main+0x8410>
					enable_noise_rejection_step = 1;
 800fbce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 1;
 800fbd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fbda:	2201      	movs	r2, #1
 800fbdc:	601a      	str	r2, [r3, #0]
					enable_disturbance_rejection_step = 0;
 800fbde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fbe6:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fbea:	2201      	movs	r2, #1
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	e14b      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_disable_noise_rej_step ) == 0 ){
 800fbf0:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800fbf4:	6819      	ldr	r1, [r3, #0]
 800fbf6:	4895      	ldr	r0, [pc, #596]	; (800fe4c <main+0x866c>)
 800fbf8:	f7f0 faf2 	bl	80001e0 <strcmp>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d110      	bne.n	800fc24 <main+0x8444>
					enable_noise_rejection_step = 0;
 800fc02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc06:	2200      	movs	r2, #0
 800fc08:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 1;
 800fc0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fc0e:	2201      	movs	r2, #1
 800fc10:	601a      	str	r2, [r3, #0]
					enable_disturbance_rejection_step = 0;
 800fc12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fc1a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fc1e:	2201      	movs	r2, #1
 800fc20:	601a      	str	r2, [r3, #0]
 800fc22:	e131      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_enable_sensitivity_fnc_step ) == 0 ){
 800fc24:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800fc28:	6819      	ldr	r1, [r3, #0]
 800fc2a:	4888      	ldr	r0, [pc, #544]	; (800fe4c <main+0x866c>)
 800fc2c:	f7f0 fad8 	bl	80001e0 <strcmp>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d114      	bne.n	800fc60 <main+0x8480>
					enable_sensitivity_fnc_step = 1;
 800fc36:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 1;
 800fc3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fc42:	2201      	movs	r2, #1
 800fc44:	601a      	str	r2, [r3, #0]
					enable_disturbance_rejection_step = 0;
 800fc46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	601a      	str	r2, [r3, #0]
					enable_noise_rejection_step = 0;
 800fc4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fc56:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	601a      	str	r2, [r3, #0]
 800fc5e:	e113      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_disable_sensitivity_fnc_step ) == 0 ){
 800fc60:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 800fc64:	6819      	ldr	r1, [r3, #0]
 800fc66:	4879      	ldr	r0, [pc, #484]	; (800fe4c <main+0x866c>)
 800fc68:	f7f0 faba 	bl	80001e0 <strcmp>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d108      	bne.n	800fc84 <main+0x84a4>
					enable_sensitivity_fnc_step = 0;
 800fc72:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fc7a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fc7e:	2201      	movs	r2, #1
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	e101      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_enable_load_dist ) == 0 ){
 800fc84:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800fc88:	6819      	ldr	r1, [r3, #0]
 800fc8a:	4870      	ldr	r0, [pc, #448]	; (800fe4c <main+0x866c>)
 800fc8c:	f7f0 faa8 	bl	80001e0 <strcmp>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d114      	bne.n	800fcc0 <main+0x84e0>
					enable_sensitivity_fnc_step = 0;
 800fc96:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	601a      	str	r2, [r3, #0]
					enable_rotor_position_step_response_cycle = 1;
 800fc9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800fca2:	2201      	movs	r2, #1
 800fca4:	601a      	str	r2, [r3, #0]
					enable_disturbance_rejection_step = 1;
 800fca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcaa:	2201      	movs	r2, #1
 800fcac:	601a      	str	r2, [r3, #0]
					enable_noise_rejection_step = 0;
 800fcae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fcb6:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fcba:	2201      	movs	r2, #1
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	e0e3      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_disable_load_dist ) == 0 ){
 800fcc0:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 800fcc4:	6819      	ldr	r1, [r3, #0]
 800fcc6:	4861      	ldr	r0, [pc, #388]	; (800fe4c <main+0x866c>)
 800fcc8:	f7f0 fa8a 	bl	80001e0 <strcmp>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d108      	bne.n	800fce4 <main+0x8504>
					enable_disturbance_rejection_step = 0;
 800fcd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fcda:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fcde:	2201      	movs	r2, #1
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	e0d1      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_step_size ) == 0 ){
 800fce4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800fce8:	6819      	ldr	r1, [r3, #0]
 800fcea:	4858      	ldr	r0, [pc, #352]	; (800fe4c <main+0x866c>)
 800fcec:	f7f0 fa78 	bl	80001e0 <strcmp>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d147      	bne.n	800fd86 <main+0x85a6>
					step_size = step_size + 1;
 800fcf6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fcfa:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800fcfe:	6812      	ldr	r2, [r2, #0]
 800fd00:	3201      	adds	r2, #1
 800fd02:	601a      	str	r2, [r3, #0]
					if (step_size > 4) { step_size = 4; }
 800fd04:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b04      	cmp	r3, #4
 800fd0c:	dd03      	ble.n	800fd16 <main+0x8536>
 800fd0e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd12:	2204      	movs	r2, #4
 800fd14:	601a      	str	r2, [r3, #0]
					if (step_size == 0) { adjust_increment = 0.5;}
 800fd16:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d105      	bne.n	800fd2c <main+0x854c>
 800fd20:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fd24:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800fd28:	601a      	str	r2, [r3, #0]
 800fd2a:	e027      	b.n	800fd7c <main+0x859c>
					else if (step_size == 1) { adjust_increment = 2;}
 800fd2c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d105      	bne.n	800fd42 <main+0x8562>
 800fd36:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fd3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fd3e:	601a      	str	r2, [r3, #0]
 800fd40:	e01c      	b.n	800fd7c <main+0x859c>
					else if (step_size == 2) { adjust_increment = 10;}
 800fd42:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d104      	bne.n	800fd56 <main+0x8576>
 800fd4c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fd50:	4a3f      	ldr	r2, [pc, #252]	; (800fe50 <main+0x8670>)
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	e012      	b.n	800fd7c <main+0x859c>
					else if (step_size == 3) { adjust_increment = 50;}
 800fd56:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d104      	bne.n	800fd6a <main+0x858a>
 800fd60:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fd64:	4a3b      	ldr	r2, [pc, #236]	; (800fe54 <main+0x8674>)
 800fd66:	601a      	str	r2, [r3, #0]
 800fd68:	e008      	b.n	800fd7c <main+0x859c>
					else if (step_size == 4) { adjust_increment = 100;}
 800fd6a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b04      	cmp	r3, #4
 800fd72:	d103      	bne.n	800fd7c <main+0x859c>
 800fd74:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fd78:	4a37      	ldr	r2, [pc, #220]	; (800fe58 <main+0x8678>)
 800fd7a:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fd7c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fd80:	2201      	movs	r2, #1
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	e080      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_step_size ) == 0 ){
 800fd86:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 800fd8a:	6819      	ldr	r1, [r3, #0]
 800fd8c:	482f      	ldr	r0, [pc, #188]	; (800fe4c <main+0x866c>)
 800fd8e:	f7f0 fa27 	bl	80001e0 <strcmp>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d147      	bne.n	800fe28 <main+0x8648>
					step_size = step_size - 1;
 800fd98:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fd9c:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800fda0:	6812      	ldr	r2, [r2, #0]
 800fda2:	3a01      	subs	r2, #1
 800fda4:	601a      	str	r2, [r3, #0]
					if (step_size < 0) { step_size = 0; }
 800fda6:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da03      	bge.n	800fdb8 <main+0x85d8>
 800fdb0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	601a      	str	r2, [r3, #0]
					if (step_size == 0) { adjust_increment = 0.5;}
 800fdb8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d105      	bne.n	800fdce <main+0x85ee>
 800fdc2:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fdc6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	e027      	b.n	800fe1e <main+0x863e>
					else if (step_size == 1) { adjust_increment = 2;}
 800fdce:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d105      	bne.n	800fde4 <main+0x8604>
 800fdd8:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	e01c      	b.n	800fe1e <main+0x863e>
					else if (step_size == 2) { adjust_increment = 10;}
 800fde4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	d104      	bne.n	800fdf8 <main+0x8618>
 800fdee:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fdf2:	4a17      	ldr	r2, [pc, #92]	; (800fe50 <main+0x8670>)
 800fdf4:	601a      	str	r2, [r3, #0]
 800fdf6:	e012      	b.n	800fe1e <main+0x863e>
					else if (step_size == 3) { adjust_increment = 50;}
 800fdf8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d104      	bne.n	800fe0c <main+0x862c>
 800fe02:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fe06:	4a13      	ldr	r2, [pc, #76]	; (800fe54 <main+0x8674>)
 800fe08:	601a      	str	r2, [r3, #0]
 800fe0a:	e008      	b.n	800fe1e <main+0x863e>
					else if (step_size == 4) { adjust_increment = 100;}
 800fe0c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b04      	cmp	r3, #4
 800fe14:	d103      	bne.n	800fe1e <main+0x863e>
 800fe16:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800fe1a:	4a0f      	ldr	r2, [pc, #60]	; (800fe58 <main+0x8678>)
 800fe1c:	601a      	str	r2, [r3, #0]
					config_command = 1;
 800fe1e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fe22:	2201      	movs	r2, #1
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	e02f      	b.n	800fe88 <main+0x86a8>
				} else if (strcmp((char *) Msg.Data, mode_string_enable_high_speed_sampling ) == 0 ){
 800fe28:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 800fe2c:	6819      	ldr	r1, [r3, #0]
 800fe2e:	4807      	ldr	r0, [pc, #28]	; (800fe4c <main+0x866c>)
 800fe30:	f7f0 f9d6 	bl	80001e0 <strcmp>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d110      	bne.n	800fe5c <main+0x867c>
					enable_high_speed_sampling = 1;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
					config_command = 1;
 800fe40:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fe44:	2201      	movs	r2, #1
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	e01e      	b.n	800fe88 <main+0x86a8>
 800fe4a:	bf00      	nop
 800fe4c:	20000db8 	.word	0x20000db8
 800fe50:	41200000 	.word	0x41200000
 800fe54:	42480000 	.word	0x42480000
 800fe58:	42c80000 	.word	0x42c80000
				} else if (strcmp((char *) Msg.Data, mode_string_disable_high_speed_sampling ) == 0 ){
 800fe5c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800fe60:	6819      	ldr	r1, [r3, #0]
 800fe62:	4820      	ldr	r0, [pc, #128]	; (800fee4 <main+0x8704>)
 800fe64:	f7f0 f9bc 	bl	80001e0 <strcmp>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d107      	bne.n	800fe7e <main+0x869e>
					enable_high_speed_sampling = 0;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
					config_command = 1;
 800fe74:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800fe78:	2201      	movs	r2, #1
 800fe7a:	601a      	str	r2, [r3, #0]
 800fe7c:	e004      	b.n	800fe88 <main+0x86a8>
				} else {
					mode_index_command = atoi((char*) Msg.Data);
 800fe7e:	4819      	ldr	r0, [pc, #100]	; (800fee4 <main+0x8704>)
 800fe80:	f002 fbd0 	bl	8012624 <atoi>
 800fe84:	f8c7 0574 	str.w	r0, [r7, #1396]	; 0x574
				}


				if (strcmp(config_message, "q") == 0){
 800fe88:	f107 0310 	add.w	r3, r7, #16
 800fe8c:	4916      	ldr	r1, [pc, #88]	; (800fee8 <main+0x8708>)
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f0 f9a6 	bl	80001e0 <strcmp>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d12e      	bne.n	800fef8 <main+0x8718>
					sprintf(tmp_string,
 800fe9a:	4b14      	ldr	r3, [pc, #80]	; (800feec <main+0x870c>)
 800fe9c:	4a14      	ldr	r2, [pc, #80]	; (800fef0 <main+0x8710>)
 800fe9e:	4614      	mov	r4, r2
 800fea0:	469c      	mov	ip, r3
 800fea2:	f104 0e20 	add.w	lr, r4, #32
 800fea6:	4665      	mov	r5, ip
 800fea8:	4626      	mov	r6, r4
 800feaa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800feac:	6028      	str	r0, [r5, #0]
 800feae:	6069      	str	r1, [r5, #4]
 800feb0:	60aa      	str	r2, [r5, #8]
 800feb2:	60eb      	str	r3, [r5, #12]
 800feb4:	3410      	adds	r4, #16
 800feb6:	f10c 0c10 	add.w	ip, ip, #16
 800feba:	4574      	cmp	r4, lr
 800febc:	d1f3      	bne.n	800fea6 <main+0x86c6>
 800febe:	4663      	mov	r3, ip
 800fec0:	4622      	mov	r2, r4
 800fec2:	6810      	ldr	r0, [r2, #0]
 800fec4:	6018      	str	r0, [r3, #0]
 800fec6:	8892      	ldrh	r2, [r2, #4]
 800fec8:	809a      	strh	r2, [r3, #4]
							"\n\rExit Control Loop Command Received ");
					HAL_UART_Transmit(&huart2, (uint8_t*) tmp_string,
							strlen(tmp_string), HAL_MAX_DELAY);
 800feca:	4808      	ldr	r0, [pc, #32]	; (800feec <main+0x870c>)
 800fecc:	f7f0 f992 	bl	80001f4 <strlen>
 800fed0:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) tmp_string,
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fed8:	4904      	ldr	r1, [pc, #16]	; (800feec <main+0x870c>)
 800feda:	4806      	ldr	r0, [pc, #24]	; (800fef4 <main+0x8714>)
 800fedc:	f7f6 fd6a 	bl	80069b4 <HAL_UART_Transmit>
					break;
 800fee0:	f002 b862 	b.w	8011fa8 <main+0xa7c8>
 800fee4:	20000db8 	.word	0x20000db8
 800fee8:	0801823c 	.word	0x0801823c
 800feec:	20000f60 	.word	0x20000f60
 800fef0:	08019a74 	.word	0x08019a74
 800fef4:	20000f20 	.word	0x20000f20
				/*
				* Disable sin drive tracking
				*/


				if (mode_index_command == mode_9){
 800fef8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800fefc:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d109      	bne.n	800ff1a <main+0x873a>
					disable_mod_sin_rotor_tracking = 1;
 800ff06:	2301      	movs	r3, #1
 800ff08:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
					sine_drive_transition = 1;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
					mode_index_command = -1;
 800ff12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff16:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
				}

				if (config_command == 0){
 800ff1a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	f040 82c9 	bne.w	80104b8 <main+0x8cd8>

				/*
				* Enable sin drive tracking
				*/

				if (mode_index_command == mode_5){
 800ff26:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800ff2a:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d109      	bne.n	800ff48 <main+0x8768>
					disable_mod_sin_rotor_tracking = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
					sine_drive_transition = 1;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
					mode_index_command = -1;
 800ff40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff44:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

				/*
				* Enable state change only if transition not occurring
				*/

				if (mode_transition_state == 0) {
 800ff48:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f040 82b3 	bne.w	80104b8 <main+0x8cd8>
					* If user selects a Motor Model, then disable adaptive mode
					* Place adaptive state in readiness for transition to return
					* to adaptive
					*/

					if (mode_index_command == mode_1
 800ff52:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800ff56:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d014      	beq.n	800ff8a <main+0x87aa>
							|| mode_index_command == mode_2
 800ff60:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800ff64:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d00d      	beq.n	800ff8a <main+0x87aa>
							|| mode_index_command == mode_3
 800ff6e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800ff72:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d006      	beq.n	800ff8a <main+0x87aa>
							|| mode_index_command == mode_4) {
 800ff7c:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 800ff80:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	d106      	bne.n	800ff98 <main+0x87b8>
						adaptive_state = 4;
 800ff8a:	2304      	movs	r3, #4
 800ff8c:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 800ff90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ff94:	2200      	movs	r2, #0
 800ff96:	601a      	str	r2, [r3, #0]
					}

					if (mode_index_command == mode_adaptive) {
 800ff98:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800ff9c:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d10d      	bne.n	800ffc2 <main+0x87e2>
						adaptive_state = 4;
 800ffa6:	2304      	movs	r3, #4
 800ffa8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						transition_to_adaptive_mode = 1;
 800ffac:	2301      	movs	r3, #1
 800ffae:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
						enable_adaptive_mode = 1;
 800ffb2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	601a      	str	r2, [r3, #0]
						mode_index_command = -1;
 800ffba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffbe:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

					/*
					* Disable adaptive mode and set to Motor Model M
					*/

					if (mode_index_command == mode_adaptive_off) {
 800ffc2:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800ffc6:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d114      	bne.n	800fffa <main+0x881a>
						adaptive_state = 4;
 800ffd0:	2304      	movs	r3, #4
 800ffd2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 800ffd6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800ffda:	2200      	movs	r2, #0
 800ffdc:	601a      	str	r2, [r3, #0]
						mode_index = mode_1;
 800ffde:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_index_prev = mode_1;
 800ffe8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
						mode_index_command = -1;
 800fff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fff6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					}


					if (mode_index_prev == mode_3
 800fffa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800fffe:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d116      	bne.n	8010036 <main+0x8856>
							&& mode_index_command == mode_1) {
 8010008:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801000c:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d10f      	bne.n	8010036 <main+0x8856>
						adaptive_state = 4;
 8010016:	2304      	movs	r3, #4
 8010018:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 801001c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8010020:	2200      	movs	r2, #0
 8010022:	601a      	str	r2, [r3, #0]
						mode_index = mode_1;
 8010024:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_index_command = -1;
 801002e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010032:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					}

					if (mode_index_prev == mode_2
 8010036:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801003a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d116      	bne.n	8010072 <main+0x8892>
							&& mode_index_command == mode_1) {
 8010044:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010048:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	d10f      	bne.n	8010072 <main+0x8892>
						adaptive_state = 4;
 8010052:	2304      	movs	r3, #4
 8010054:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 8010058:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801005c:	2200      	movs	r2, #0
 801005e:	601a      	str	r2, [r3, #0]
						mode_index = mode_1;
 8010060:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_index_command = -1;
 801006a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801006e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					}

					if (mode_index_prev == mode_1
 8010072:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010076:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	429a      	cmp	r2, r3
 801007e:	d116      	bne.n	80100ae <main+0x88ce>
							&& mode_index_command == mode_3) {
 8010080:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8010084:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d10f      	bne.n	80100ae <main+0x88ce>
						adaptive_state = 4;
 801008e:	2304      	movs	r3, #4
 8010090:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 8010094:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8010098:	2200      	movs	r2, #0
 801009a:	601a      	str	r2, [r3, #0]
						mode_index = mode_3;
 801009c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_index_command = -1;
 80100a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100aa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					}

					if (mode_index_prev == mode_1
 80100ae:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80100b2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d116      	bne.n	80100ea <main+0x890a>
							&& mode_index_command == mode_2) {
 80100bc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80100c0:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d10f      	bne.n	80100ea <main+0x890a>
						adaptive_state = 4;
 80100ca:	2304      	movs	r3, #4
 80100cc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 80100d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80100d4:	2200      	movs	r2, #0
 80100d6:	601a      	str	r2, [r3, #0]
						mode_index = mode_2;
 80100d8:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_index_command = -1;
 80100e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100e6:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					* Protect user mode transition from Motor Model L to Motor Model H
					* by introducing state through Motor Model M.  The following is first
					* step in transition through Motor Model M.
					*/

					if (mode_index_prev == mode_3
 80100ea:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80100ee:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d11e      	bne.n	8010136 <main+0x8956>
							&& mode_index_command == mode_2) {
 80100f8:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80100fc:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d117      	bne.n	8010136 <main+0x8956>
						adaptive_state = 4;
 8010106:	2304      	movs	r3, #4
 8010108:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 801010c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8010110:	2200      	movs	r2, #0
 8010112:	601a      	str	r2, [r3, #0]
						mode_index = mode_1;
 8010114:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_transition_tick = HAL_GetTick();
 801011e:	f7f4 f833 	bl	8004188 <HAL_GetTick>
 8010122:	4603      	mov	r3, r0
 8010124:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
						mode_transition_state = 1;
 8010128:	2301      	movs	r3, #1
 801012a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						mode_index_command = -1;
 801012e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010132:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					* by introducing state through Motor Model M.  The following is first
					* step in transition through Motor Model M.
					*/


					if (mode_index_prev == mode_2
 8010136:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801013a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d11e      	bne.n	8010182 <main+0x89a2>
							&& mode_index_command == mode_3) {
 8010144:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8010148:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d117      	bne.n	8010182 <main+0x89a2>
						adaptive_state = 4;
 8010152:	2304      	movs	r3, #4
 8010154:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 0;
 8010158:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801015c:	2200      	movs	r2, #0
 801015e:	601a      	str	r2, [r3, #0]
						mode_index = mode_1;
 8010160:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
						mode_transition_tick = HAL_GetTick();
 801016a:	f7f4 f80d 	bl	8004188 <HAL_GetTick>
 801016e:	4603      	mov	r3, r0
 8010170:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
						mode_transition_state = 1;
 8010174:	2301      	movs	r3, #1
 8010176:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
						mode_index_command = -1;
 801017a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801017e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
					}

					if (mode_index == mode_2) {
 8010182:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8010186:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	429a      	cmp	r2, r3
 801018e:	d179      	bne.n	8010284 <main+0x8aa4>
						select_suspended_mode = 0;
 8010190:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8010194:	2200      	movs	r2, #0
 8010196:	601a      	str	r2, [r3, #0]
						proportional = PRIMARY_PROPORTIONAL_MODE_2;
 8010198:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801019c:	4abb      	ldr	r2, [pc, #748]	; (801048c <main+0x8cac>)
 801019e:	601a      	str	r2, [r3, #0]
						integral = PRIMARY_INTEGRAL_MODE_2;
 80101a0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80101a4:	f04f 0200 	mov.w	r2, #0
 80101a8:	601a      	str	r2, [r3, #0]
						derivative = PRIMARY_DERIVATIVE_MODE_2;
 80101aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80101ae:	4ab8      	ldr	r2, [pc, #736]	; (8010490 <main+0x8cb0>)
 80101b0:	601a      	str	r2, [r3, #0]
						rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_2;
 80101b2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80101b6:	4ab7      	ldr	r2, [pc, #732]	; (8010494 <main+0x8cb4>)
 80101b8:	601a      	str	r2, [r3, #0]
						rotor_i_gain = SECONDARY_INTEGRAL_MODE_2;
 80101ba:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80101be:	f04f 0200 	mov.w	r2, #0
 80101c2:	601a      	str	r2, [r3, #0]
						rotor_d_gain = SECONDARY_DERIVATIVE_MODE_2;
 80101c4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80101c8:	4ab3      	ldr	r2, [pc, #716]	; (8010498 <main+0x8cb8>)
 80101ca:	601a      	str	r2, [r3, #0]
						max_speed = MAX_SPEED_MODE_2;
 80101cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101d0:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
						min_speed = MIN_SPEED_MODE_2;
 80101d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80101d8:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
						pid_filter->p_gain = proportional;
 80101dc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	601a      	str	r2, [r3, #0]
						pid_filter->i_gain = integral;
 80101ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	605a      	str	r2, [r3, #4]
						pid_filter->d_gain = derivative;
 80101f8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	611a      	str	r2, [r3, #16]
						rotor_pid->p_gain = rotor_p_gain;
 8010206:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	601a      	str	r2, [r3, #0]
						rotor_pid->i_gain = rotor_i_gain;
 8010214:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	605a      	str	r2, [r3, #4]
						rotor_pid->d_gain = rotor_d_gain;
 8010222:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	611a      	str	r2, [r3, #16]
						torq_current_val = 800;
 8010230:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8010234:	4a99      	ldr	r2, [pc, #612]	; (801049c <main+0x8cbc>)
 8010236:	601a      	str	r2, [r3, #0]
						L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8010238:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801023c:	edd3 7a00 	vldr	s15, [r3]
 8010240:	eeb0 0a67 	vmov.f32	s0, s15
 8010244:	2109      	movs	r1, #9
 8010246:	2000      	movs	r0, #0
 8010248:	f7f1 fdf0 	bl	8001e2c <L6474_SetAnalogValue>
						BSP_MotorControl_SoftStop(0);
 801024c:	2000      	movs	r0, #0
 801024e:	f7f3 fddf 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 8010252:	2000      	movs	r0, #0
 8010254:	f7f3 fe20 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8010258:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 801025c:	4619      	mov	r1, r3
 801025e:	2000      	movs	r0, #0
 8010260:	f7f3 fd86 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
						BSP_MotorControl_SetMinSpeed(0, min_speed);
 8010264:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 8010268:	4619      	mov	r1, r3
 801026a:	2000      	movs	r0, #0
 801026c:	f7f3 fda8 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
						BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8010270:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8010274:	2000      	movs	r0, #0
 8010276:	f7f3 fd09 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
						BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 801027a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801027e:	2000      	movs	r0, #0
 8010280:	f7f3 fd2c 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
					}

					if (mode_index == mode_3) {
 8010284:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8010288:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	429a      	cmp	r2, r3
 8010290:	d179      	bne.n	8010386 <main+0x8ba6>
						select_suspended_mode = 0;
 8010292:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8010296:	2200      	movs	r2, #0
 8010298:	601a      	str	r2, [r3, #0]
						proportional = PRIMARY_PROPORTIONAL_MODE_3;
 801029a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801029e:	4a80      	ldr	r2, [pc, #512]	; (80104a0 <main+0x8cc0>)
 80102a0:	601a      	str	r2, [r3, #0]
						integral = PRIMARY_INTEGRAL_MODE_3;
 80102a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80102a6:	f04f 0200 	mov.w	r2, #0
 80102aa:	601a      	str	r2, [r3, #0]
						derivative = PRIMARY_DERIVATIVE_MODE_3;
 80102ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80102b0:	4a7c      	ldr	r2, [pc, #496]	; (80104a4 <main+0x8cc4>)
 80102b2:	601a      	str	r2, [r3, #0]
						rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_3;
 80102b4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80102b8:	4a76      	ldr	r2, [pc, #472]	; (8010494 <main+0x8cb4>)
 80102ba:	601a      	str	r2, [r3, #0]
						rotor_i_gain = SECONDARY_INTEGRAL_MODE_3;
 80102bc:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80102c0:	f04f 0200 	mov.w	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
						rotor_d_gain = SECONDARY_DERIVATIVE_MODE_3;
 80102c6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80102ca:	4a77      	ldr	r2, [pc, #476]	; (80104a8 <main+0x8cc8>)
 80102cc:	601a      	str	r2, [r3, #0]
						max_speed = MAX_SPEED_MODE_3;
 80102ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102d2:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
						min_speed = MIN_SPEED_MODE_3;
 80102d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80102da:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
						pid_filter->p_gain = proportional;
 80102de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	601a      	str	r2, [r3, #0]
						pid_filter->i_gain = integral;
 80102ec:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	605a      	str	r2, [r3, #4]
						pid_filter->d_gain = derivative;
 80102fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	611a      	str	r2, [r3, #16]
						rotor_pid->p_gain = rotor_p_gain;
 8010308:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801030c:	681a      	ldr	r2, [r3, #0]
 801030e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	601a      	str	r2, [r3, #0]
						rotor_pid->i_gain = rotor_i_gain;
 8010316:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	605a      	str	r2, [r3, #4]
						rotor_pid->d_gain = rotor_d_gain;
 8010324:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	611a      	str	r2, [r3, #16]
						torq_current_val = 800;
 8010332:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8010336:	4a59      	ldr	r2, [pc, #356]	; (801049c <main+0x8cbc>)
 8010338:	601a      	str	r2, [r3, #0]
						L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 801033a:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801033e:	edd3 7a00 	vldr	s15, [r3]
 8010342:	eeb0 0a67 	vmov.f32	s0, s15
 8010346:	2109      	movs	r1, #9
 8010348:	2000      	movs	r0, #0
 801034a:	f7f1 fd6f 	bl	8001e2c <L6474_SetAnalogValue>
						BSP_MotorControl_SoftStop(0);
 801034e:	2000      	movs	r0, #0
 8010350:	f7f3 fd5e 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 8010354:	2000      	movs	r0, #0
 8010356:	f7f3 fd9f 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMaxSpeed(0, max_speed);
 801035a:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 801035e:	4619      	mov	r1, r3
 8010360:	2000      	movs	r0, #0
 8010362:	f7f3 fd05 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
						BSP_MotorControl_SetMinSpeed(0, min_speed);
 8010366:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 801036a:	4619      	mov	r1, r3
 801036c:	2000      	movs	r0, #0
 801036e:	f7f3 fd27 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
						BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8010372:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8010376:	2000      	movs	r0, #0
 8010378:	f7f3 fc88 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
						BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 801037c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8010380:	2000      	movs	r0, #0
 8010382:	f7f3 fcab 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
					}

					if (mode_index == mode_1) {
 8010386:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801038a:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	429a      	cmp	r2, r3
 8010392:	f040 8091 	bne.w	80104b8 <main+0x8cd8>
						select_suspended_mode = 0;
 8010396:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
						proportional = PRIMARY_PROPORTIONAL_MODE_1;
 801039e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80103a2:	4a42      	ldr	r2, [pc, #264]	; (80104ac <main+0x8ccc>)
 80103a4:	601a      	str	r2, [r3, #0]
						integral = PRIMARY_INTEGRAL_MODE_1;
 80103a6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80103aa:	f04f 0200 	mov.w	r2, #0
 80103ae:	601a      	str	r2, [r3, #0]
						derivative = PRIMARY_DERIVATIVE_MODE_1;
 80103b0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80103b4:	4a3e      	ldr	r2, [pc, #248]	; (80104b0 <main+0x8cd0>)
 80103b6:	601a      	str	r2, [r3, #0]
						rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_1;
 80103b8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80103bc:	4a35      	ldr	r2, [pc, #212]	; (8010494 <main+0x8cb4>)
 80103be:	601a      	str	r2, [r3, #0]
						rotor_i_gain = SECONDARY_INTEGRAL_MODE_1;
 80103c0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80103c4:	f04f 0200 	mov.w	r2, #0
 80103c8:	601a      	str	r2, [r3, #0]
						rotor_d_gain = SECONDARY_DERIVATIVE_MODE_1;
 80103ca:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80103ce:	4a39      	ldr	r2, [pc, #228]	; (80104b4 <main+0x8cd4>)
 80103d0:	601a      	str	r2, [r3, #0]
						max_speed = MAX_SPEED_MODE_1;
 80103d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80103d6:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
						min_speed = MIN_SPEED_MODE_1;
 80103da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80103de:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
						pid_filter->p_gain = proportional;
 80103e2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	601a      	str	r2, [r3, #0]
						pid_filter->i_gain = integral;
 80103f0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	605a      	str	r2, [r3, #4]
						pid_filter->d_gain = derivative;
 80103fe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	611a      	str	r2, [r3, #16]
						rotor_pid->p_gain = rotor_p_gain;
 801040c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	601a      	str	r2, [r3, #0]
						rotor_pid->i_gain = rotor_i_gain;
 801041a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801041e:	681a      	ldr	r2, [r3, #0]
 8010420:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	605a      	str	r2, [r3, #4]
						rotor_pid->d_gain = rotor_d_gain;
 8010428:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801042c:	681a      	ldr	r2, [r3, #0]
 801042e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	611a      	str	r2, [r3, #16]
						torq_current_val = 800;
 8010436:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801043a:	4a18      	ldr	r2, [pc, #96]	; (801049c <main+0x8cbc>)
 801043c:	601a      	str	r2, [r3, #0]
						L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 801043e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8010442:	edd3 7a00 	vldr	s15, [r3]
 8010446:	eeb0 0a67 	vmov.f32	s0, s15
 801044a:	2109      	movs	r1, #9
 801044c:	2000      	movs	r0, #0
 801044e:	f7f1 fced 	bl	8001e2c <L6474_SetAnalogValue>
						BSP_MotorControl_SoftStop(0);
 8010452:	2000      	movs	r0, #0
 8010454:	f7f3 fcdc 	bl	8003e10 <BSP_MotorControl_SoftStop>
						BSP_MotorControl_WaitWhileActive(0);
 8010458:	2000      	movs	r0, #0
 801045a:	f7f3 fd1d 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
						BSP_MotorControl_SetMaxSpeed(0, max_speed);
 801045e:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 8010462:	4619      	mov	r1, r3
 8010464:	2000      	movs	r0, #0
 8010466:	f7f3 fc83 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
						BSP_MotorControl_SetMinSpeed(0, min_speed);
 801046a:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 801046e:	4619      	mov	r1, r3
 8010470:	2000      	movs	r0, #0
 8010472:	f7f3 fca5 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
						BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8010476:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801047a:	2000      	movs	r0, #0
 801047c:	f7f3 fc06 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
						BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 8010480:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8010484:	2000      	movs	r0, #0
 8010486:	f7f3 fc29 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
 801048a:	e015      	b.n	80104b8 <main+0x8cd8>
 801048c:	441d2ccd 	.word	0x441d2ccd
 8010490:	42a83333 	.word	0x42a83333
 8010494:	4087ae14 	.word	0x4087ae14
 8010498:	40cc28f6 	.word	0x40cc28f6
 801049c:	44480000 	.word	0x44480000
 80104a0:	4452a000 	.word	0x4452a000
 80104a4:	42e16666 	.word	0x42e16666
 80104a8:	410d1eb8 	.word	0x410d1eb8
 80104ac:	44305333 	.word	0x44305333
 80104b0:	42bccccd 	.word	0x42bccccd
 80104b4:	41047ae1 	.word	0x41047ae1
			* by introducing state through Motor Model M.  The following is final
			* step in transition and includes restoration of enable_adaptive if
			* transition from adaptive off to adaptive on.
			*/

			if (mode_transition_state == 1){
 80104b8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80104bc:	2b01      	cmp	r3, #1
 80104be:	f040 811f 	bne.w	8010700 <main+0x8f20>
				if ((HAL_GetTick() - mode_transition_tick) > USER_TRANSITION_DWELL){
 80104c2:	f7f3 fe61 	bl	8004188 <HAL_GetTick>
 80104c6:	4602      	mov	r2, r0
 80104c8:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80104d2:	f240 8115 	bls.w	8010700 <main+0x8f20>
					mode_transition_state = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
					select_suspended_mode = 0;
 80104dc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80104e0:	2200      	movs	r2, #0
 80104e2:	601a      	str	r2, [r3, #0]
					if (transition_to_adaptive_mode == 1) {
 80104e4:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d109      	bne.n	8010500 <main+0x8d20>
						adaptive_state = 4;
 80104ec:	2304      	movs	r3, #4
 80104ee:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						enable_adaptive_mode = 1;
 80104f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80104f6:	2201      	movs	r2, #1
 80104f8:	601a      	str	r2, [r3, #0]
						transition_to_adaptive_mode = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					}

					if (mode_index_prev == mode_3){
 8010500:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8010504:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	429a      	cmp	r2, r3
 801050c:	d178      	bne.n	8010600 <main+0x8e20>
					mode_index = 2;
 801050e:	2302      	movs	r3, #2
 8010510:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					proportional = PRIMARY_PROPORTIONAL_MODE_2;
 8010514:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8010518:	4ad1      	ldr	r2, [pc, #836]	; (8010860 <main+0x9080>)
 801051a:	601a      	str	r2, [r3, #0]
					integral = PRIMARY_INTEGRAL_MODE_2;
 801051c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8010520:	f04f 0200 	mov.w	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
					derivative = PRIMARY_DERIVATIVE_MODE_2;
 8010526:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801052a:	4ace      	ldr	r2, [pc, #824]	; (8010864 <main+0x9084>)
 801052c:	601a      	str	r2, [r3, #0]
					rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_2;
 801052e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010532:	4acd      	ldr	r2, [pc, #820]	; (8010868 <main+0x9088>)
 8010534:	601a      	str	r2, [r3, #0]
					rotor_i_gain = SECONDARY_INTEGRAL_MODE_2;
 8010536:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801053a:	f04f 0200 	mov.w	r2, #0
 801053e:	601a      	str	r2, [r3, #0]
					rotor_d_gain = SECONDARY_DERIVATIVE_MODE_2;
 8010540:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010544:	4ac9      	ldr	r2, [pc, #804]	; (801086c <main+0x908c>)
 8010546:	601a      	str	r2, [r3, #0]
					max_speed = MAX_SPEED_MODE_2;
 8010548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801054c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = MIN_SPEED_MODE_2;
 8010550:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010554:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					pid_filter->p_gain = proportional;
 8010558:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801055c:	681a      	ldr	r2, [r3, #0]
 801055e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = integral;
 8010566:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = derivative;
 8010574:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	611a      	str	r2, [r3, #16]
					rotor_pid->p_gain = rotor_p_gain;
 8010582:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = rotor_i_gain;
 8010590:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = rotor_d_gain;
 801059e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	611a      	str	r2, [r3, #16]
					torq_current_val = 800;
 80105ac:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80105b0:	4aaf      	ldr	r2, [pc, #700]	; (8010870 <main+0x9090>)
 80105b2:	601a      	str	r2, [r3, #0]
					L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80105b4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80105b8:	edd3 7a00 	vldr	s15, [r3]
 80105bc:	eeb0 0a67 	vmov.f32	s0, s15
 80105c0:	2109      	movs	r1, #9
 80105c2:	2000      	movs	r0, #0
 80105c4:	f7f1 fc32 	bl	8001e2c <L6474_SetAnalogValue>
					BSP_MotorControl_SoftStop(0);
 80105c8:	2000      	movs	r0, #0
 80105ca:	f7f3 fc21 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 80105ce:	2000      	movs	r0, #0
 80105d0:	f7f3 fc62 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					BSP_MotorControl_SetMaxSpeed(0,max_speed);
 80105d4:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 80105d8:	4619      	mov	r1, r3
 80105da:	2000      	movs	r0, #0
 80105dc:	f7f3 fbc8 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
					BSP_MotorControl_SetMinSpeed(0, min_speed);
 80105e0:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 80105e4:	4619      	mov	r1, r3
 80105e6:	2000      	movs	r0, #0
 80105e8:	f7f3 fbea 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
					BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 80105ec:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80105f0:	2000      	movs	r0, #0
 80105f2:	f7f3 fb4b 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 80105f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80105fa:	2000      	movs	r0, #0
 80105fc:	f7f3 fb6e 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
					}

					if (mode_index_prev == mode_2){
 8010600:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8010604:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d178      	bne.n	8010700 <main+0x8f20>
					mode_index = 3;
 801060e:	2303      	movs	r3, #3
 8010610:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					proportional = PRIMARY_PROPORTIONAL_MODE_3;
 8010614:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8010618:	4a96      	ldr	r2, [pc, #600]	; (8010874 <main+0x9094>)
 801061a:	601a      	str	r2, [r3, #0]
					integral = PRIMARY_INTEGRAL_MODE_3;
 801061c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8010620:	f04f 0200 	mov.w	r2, #0
 8010624:	601a      	str	r2, [r3, #0]
					derivative = PRIMARY_DERIVATIVE_MODE_3;
 8010626:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801062a:	4a93      	ldr	r2, [pc, #588]	; (8010878 <main+0x9098>)
 801062c:	601a      	str	r2, [r3, #0]
					rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_3;
 801062e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010632:	4a8d      	ldr	r2, [pc, #564]	; (8010868 <main+0x9088>)
 8010634:	601a      	str	r2, [r3, #0]
					rotor_i_gain = SECONDARY_INTEGRAL_MODE_3;
 8010636:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801063a:	f04f 0200 	mov.w	r2, #0
 801063e:	601a      	str	r2, [r3, #0]
					rotor_d_gain = SECONDARY_DERIVATIVE_MODE_3;
 8010640:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010644:	4a8d      	ldr	r2, [pc, #564]	; (801087c <main+0x909c>)
 8010646:	601a      	str	r2, [r3, #0]
					max_speed = MAX_SPEED_MODE_3;
 8010648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801064c:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = MIN_SPEED_MODE_3;
 8010650:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8010654:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					pid_filter->p_gain = proportional;
 8010658:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = integral;
 8010666:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = derivative;
 8010674:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	611a      	str	r2, [r3, #16]
					rotor_pid->p_gain = rotor_p_gain;
 8010682:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = rotor_i_gain;
 8010690:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = rotor_d_gain;
 801069e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	611a      	str	r2, [r3, #16]
					torq_current_val = 800;
 80106ac:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80106b0:	4a6f      	ldr	r2, [pc, #444]	; (8010870 <main+0x9090>)
 80106b2:	601a      	str	r2, [r3, #0]
					L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80106b4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80106b8:	edd3 7a00 	vldr	s15, [r3]
 80106bc:	eeb0 0a67 	vmov.f32	s0, s15
 80106c0:	2109      	movs	r1, #9
 80106c2:	2000      	movs	r0, #0
 80106c4:	f7f1 fbb2 	bl	8001e2c <L6474_SetAnalogValue>
					BSP_MotorControl_SoftStop(0);
 80106c8:	2000      	movs	r0, #0
 80106ca:	f7f3 fba1 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 80106ce:	2000      	movs	r0, #0
 80106d0:	f7f3 fbe2 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					BSP_MotorControl_SetMaxSpeed(0,max_speed);
 80106d4:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 80106d8:	4619      	mov	r1, r3
 80106da:	2000      	movs	r0, #0
 80106dc:	f7f3 fb48 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
					BSP_MotorControl_SetMinSpeed(0, min_speed);
 80106e0:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 80106e4:	4619      	mov	r1, r3
 80106e6:	2000      	movs	r0, #0
 80106e8:	f7f3 fb6a 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
					BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 80106ec:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80106f0:	2000      	movs	r0, #0
 80106f2:	f7f3 facb 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 80106f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80106fa:	2000      	movs	r0, #0
 80106fc:	f7f3 faee 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

			/*
			* Exit control if cycle count limit set
			*/

			i++;
 8010700:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8010704:	3301      	adds	r3, #1
 8010706:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
			/*
			 * Create chirp signal for Sensitivity Function characterization
			 */


			if (enable_rotor_tracking_comb_signal > 0) {
 801070a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	f340 8152 	ble.w	80109ba <main+0x91da>

				chirp_time = (float)((i - 1)/ROTOR_TRACK_COMB_SIGNAL_SAMPLE_RATE);
 8010716:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 801071a:	3b01      	subs	r3, #1
 801071c:	4618      	mov	r0, r3
 801071e:	f7ef ff19 	bl	8000554 <__aeabi_i2d>
 8010722:	f04f 0200 	mov.w	r2, #0
 8010726:	4b56      	ldr	r3, [pc, #344]	; (8010880 <main+0x90a0>)
 8010728:	f7f0 f8a8 	bl	800087c <__aeabi_ddiv>
 801072c:	4603      	mov	r3, r0
 801072e:	460c      	mov	r4, r1
 8010730:	461a      	mov	r2, r3
 8010732:	4623      	mov	r3, r4
 8010734:	f507 7444 	add.w	r4, r7, #784	; 0x310
 8010738:	4610      	mov	r0, r2
 801073a:	4619      	mov	r1, r3
 801073c:	f7f0 fa6c 	bl	8000c18 <__aeabi_d2f>
 8010740:	4603      	mov	r3, r0
 8010742:	6023      	str	r3, [r4, #0]
				rotor_track_comb_signal_frequency = 0.1;
 8010744:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8010748:	4a4e      	ldr	r2, [pc, #312]	; (8010884 <main+0x90a4>)
 801074a:	601a      	str	r2, [r3, #0]
				rotor_track_comb_command = ((float)(rotor_track_comb_amplitude))*sin(2.0*3.14159*rotor_track_comb_signal_frequency*chirp_time);
 801074c:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8010750:	6818      	ldr	r0, [r3, #0]
 8010752:	f7ef ff11 	bl	8000578 <__aeabi_f2d>
 8010756:	4604      	mov	r4, r0
 8010758:	460d      	mov	r5, r1
 801075a:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801075e:	6818      	ldr	r0, [r3, #0]
 8010760:	f7ef ff0a 	bl	8000578 <__aeabi_f2d>
 8010764:	a33c      	add	r3, pc, #240	; (adr r3, 8010858 <main+0x9078>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	f7ef ff5d 	bl	8000628 <__aeabi_dmul>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4692      	mov	sl, r2
 8010774:	469b      	mov	fp, r3
 8010776:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801077a:	6818      	ldr	r0, [r3, #0]
 801077c:	f7ef fefc 	bl	8000578 <__aeabi_f2d>
 8010780:	4602      	mov	r2, r0
 8010782:	460b      	mov	r3, r1
 8010784:	4650      	mov	r0, sl
 8010786:	4659      	mov	r1, fp
 8010788:	f7ef ff4e 	bl	8000628 <__aeabi_dmul>
 801078c:	4602      	mov	r2, r0
 801078e:	460b      	mov	r3, r1
 8010790:	ec43 2b17 	vmov	d7, r2, r3
 8010794:	eeb0 0a47 	vmov.f32	s0, s14
 8010798:	eef0 0a67 	vmov.f32	s1, s15
 801079c:	f006 fce4 	bl	8017168 <sin>
 80107a0:	ec53 2b10 	vmov	r2, r3, d0
 80107a4:	4620      	mov	r0, r4
 80107a6:	4629      	mov	r1, r5
 80107a8:	f7ef ff3e 	bl	8000628 <__aeabi_dmul>
 80107ac:	4603      	mov	r3, r0
 80107ae:	460c      	mov	r4, r1
 80107b0:	4618      	mov	r0, r3
 80107b2:	4621      	mov	r1, r4
 80107b4:	f7f0 fa30 	bl	8000c18 <__aeabi_d2f>
 80107b8:	4603      	mov	r3, r0
 80107ba:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80107be:	6013      	str	r3, [r2, #0]
				rotor_track_comb_signal_frequency = 0.316;
 80107c0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80107c4:	4a30      	ldr	r2, [pc, #192]	; (8010888 <main+0x90a8>)
 80107c6:	601a      	str	r2, [r3, #0]
				rotor_track_comb_command = rotor_track_comb_command + ((float)(rotor_track_comb_amplitude))*sin(2.0*3.14159*rotor_track_comb_signal_frequency*chirp_time);
 80107c8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80107cc:	6818      	ldr	r0, [r3, #0]
 80107ce:	f7ef fed3 	bl	8000578 <__aeabi_f2d>
 80107d2:	4604      	mov	r4, r0
 80107d4:	460d      	mov	r5, r1
 80107d6:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 80107da:	6818      	ldr	r0, [r3, #0]
 80107dc:	f7ef fecc 	bl	8000578 <__aeabi_f2d>
 80107e0:	4682      	mov	sl, r0
 80107e2:	468b      	mov	fp, r1
 80107e4:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80107e8:	6818      	ldr	r0, [r3, #0]
 80107ea:	f7ef fec5 	bl	8000578 <__aeabi_f2d>
 80107ee:	a31a      	add	r3, pc, #104	; (adr r3, 8010858 <main+0x9078>)
 80107f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f4:	f7ef ff18 	bl	8000628 <__aeabi_dmul>
 80107f8:	4602      	mov	r2, r0
 80107fa:	460b      	mov	r3, r1
 80107fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8010800:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010804:	6818      	ldr	r0, [r3, #0]
 8010806:	f7ef feb7 	bl	8000578 <__aeabi_f2d>
 801080a:	4602      	mov	r2, r0
 801080c:	460b      	mov	r3, r1
 801080e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010812:	f7ef ff09 	bl	8000628 <__aeabi_dmul>
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	ec43 2b17 	vmov	d7, r2, r3
 801081e:	eeb0 0a47 	vmov.f32	s0, s14
 8010822:	eef0 0a67 	vmov.f32	s1, s15
 8010826:	f006 fc9f 	bl	8017168 <sin>
 801082a:	ec53 2b10 	vmov	r2, r3, d0
 801082e:	4650      	mov	r0, sl
 8010830:	4659      	mov	r1, fp
 8010832:	f7ef fef9 	bl	8000628 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fd3d 	bl	80002bc <__adddf3>
 8010842:	4603      	mov	r3, r0
 8010844:	460c      	mov	r4, r1
 8010846:	4618      	mov	r0, r3
 8010848:	4621      	mov	r1, r4
 801084a:	f7f0 f9e5 	bl	8000c18 <__aeabi_d2f>
 801084e:	4603      	mov	r3, r0
 8010850:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8010854:	6013      	str	r3, [r2, #0]
 8010856:	e019      	b.n	801088c <main+0x90ac>
 8010858:	f01b866e 	.word	0xf01b866e
 801085c:	401921f9 	.word	0x401921f9
 8010860:	441d2ccd 	.word	0x441d2ccd
 8010864:	42a83333 	.word	0x42a83333
 8010868:	4087ae14 	.word	0x4087ae14
 801086c:	40cc28f6 	.word	0x40cc28f6
 8010870:	44480000 	.word	0x44480000
 8010874:	4452a000 	.word	0x4452a000
 8010878:	42e16666 	.word	0x42e16666
 801087c:	410d1eb8 	.word	0x410d1eb8
 8010880:	407f4000 	.word	0x407f4000
 8010884:	3dcccccd 	.word	0x3dcccccd
 8010888:	3ea1cac1 	.word	0x3ea1cac1
				rotor_track_comb_signal_frequency = 1.0;
 801088c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8010890:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010894:	601a      	str	r2, [r3, #0]
				rotor_track_comb_command = rotor_track_comb_command + ((float)(rotor_track_comb_amplitude))*sin(2.0*3.14159*rotor_track_comb_signal_frequency*chirp_time);
 8010896:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801089a:	6818      	ldr	r0, [r3, #0]
 801089c:	f7ef fe6c 	bl	8000578 <__aeabi_f2d>
 80108a0:	4604      	mov	r4, r0
 80108a2:	460d      	mov	r5, r1
 80108a4:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 80108a8:	6818      	ldr	r0, [r3, #0]
 80108aa:	f7ef fe65 	bl	8000578 <__aeabi_f2d>
 80108ae:	4682      	mov	sl, r0
 80108b0:	468b      	mov	fp, r1
 80108b2:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80108b6:	6818      	ldr	r0, [r3, #0]
 80108b8:	f7ef fe5e 	bl	8000578 <__aeabi_f2d>
 80108bc:	a3b2      	add	r3, pc, #712	; (adr r3, 8010b88 <main+0x93a8>)
 80108be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c2:	f7ef feb1 	bl	8000628 <__aeabi_dmul>
 80108c6:	4602      	mov	r2, r0
 80108c8:	460b      	mov	r3, r1
 80108ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80108ce:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80108d2:	6818      	ldr	r0, [r3, #0]
 80108d4:	f7ef fe50 	bl	8000578 <__aeabi_f2d>
 80108d8:	4602      	mov	r2, r0
 80108da:	460b      	mov	r3, r1
 80108dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108e0:	f7ef fea2 	bl	8000628 <__aeabi_dmul>
 80108e4:	4602      	mov	r2, r0
 80108e6:	460b      	mov	r3, r1
 80108e8:	ec43 2b17 	vmov	d7, r2, r3
 80108ec:	eeb0 0a47 	vmov.f32	s0, s14
 80108f0:	eef0 0a67 	vmov.f32	s1, s15
 80108f4:	f006 fc38 	bl	8017168 <sin>
 80108f8:	ec53 2b10 	vmov	r2, r3, d0
 80108fc:	4650      	mov	r0, sl
 80108fe:	4659      	mov	r1, fp
 8010900:	f7ef fe92 	bl	8000628 <__aeabi_dmul>
 8010904:	4602      	mov	r2, r0
 8010906:	460b      	mov	r3, r1
 8010908:	4620      	mov	r0, r4
 801090a:	4629      	mov	r1, r5
 801090c:	f7ef fcd6 	bl	80002bc <__adddf3>
 8010910:	4603      	mov	r3, r0
 8010912:	460c      	mov	r4, r1
 8010914:	4618      	mov	r0, r3
 8010916:	4621      	mov	r1, r4
 8010918:	f7f0 f97e 	bl	8000c18 <__aeabi_d2f>
 801091c:	4603      	mov	r3, r0
 801091e:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8010922:	6013      	str	r3, [r2, #0]
				rotor_track_comb_signal_frequency = 3.16;
 8010924:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8010928:	4a9f      	ldr	r2, [pc, #636]	; (8010ba8 <main+0x93c8>)
 801092a:	601a      	str	r2, [r3, #0]
				rotor_track_comb_command = rotor_track_comb_command + ((float)(rotor_track_comb_amplitude))*sin(2.0*3.14159*rotor_track_comb_signal_frequency*chirp_time);
 801092c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8010930:	6818      	ldr	r0, [r3, #0]
 8010932:	f7ef fe21 	bl	8000578 <__aeabi_f2d>
 8010936:	4604      	mov	r4, r0
 8010938:	460d      	mov	r5, r1
 801093a:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801093e:	6818      	ldr	r0, [r3, #0]
 8010940:	f7ef fe1a 	bl	8000578 <__aeabi_f2d>
 8010944:	4682      	mov	sl, r0
 8010946:	468b      	mov	fp, r1
 8010948:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801094c:	6818      	ldr	r0, [r3, #0]
 801094e:	f7ef fe13 	bl	8000578 <__aeabi_f2d>
 8010952:	a38d      	add	r3, pc, #564	; (adr r3, 8010b88 <main+0x93a8>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	f7ef fe66 	bl	8000628 <__aeabi_dmul>
 801095c:	4602      	mov	r2, r0
 801095e:	460b      	mov	r3, r1
 8010960:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8010964:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010968:	6818      	ldr	r0, [r3, #0]
 801096a:	f7ef fe05 	bl	8000578 <__aeabi_f2d>
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010976:	f7ef fe57 	bl	8000628 <__aeabi_dmul>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	ec43 2b17 	vmov	d7, r2, r3
 8010982:	eeb0 0a47 	vmov.f32	s0, s14
 8010986:	eef0 0a67 	vmov.f32	s1, s15
 801098a:	f006 fbed 	bl	8017168 <sin>
 801098e:	ec53 2b10 	vmov	r2, r3, d0
 8010992:	4650      	mov	r0, sl
 8010994:	4659      	mov	r1, fp
 8010996:	f7ef fe47 	bl	8000628 <__aeabi_dmul>
 801099a:	4602      	mov	r2, r0
 801099c:	460b      	mov	r3, r1
 801099e:	4620      	mov	r0, r4
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7ef fc8b 	bl	80002bc <__adddf3>
 80109a6:	4603      	mov	r3, r0
 80109a8:	460c      	mov	r4, r1
 80109aa:	4618      	mov	r0, r3
 80109ac:	4621      	mov	r1, r4
 80109ae:	f7f0 f933 	bl	8000c18 <__aeabi_d2f>
 80109b2:	4603      	mov	r3, r0
 80109b4:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 80109b8:	6013      	str	r3, [r2, #0]
			/*
			* Acquire encoder position and correct for initial angle value of
			* encoder measured at vertical down position at system start
			*/

			ret = encoder_position_read(&encoder_position, &htim3);
 80109ba:	f507 744c 	add.w	r4, r7, #816	; 0x330
 80109be:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80109c2:	497a      	ldr	r1, [pc, #488]	; (8010bac <main+0x93cc>)
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7f6 fcf5 	bl	80073b4 <encoder_position_read>
 80109ca:	6020      	str	r0, [r4, #0]
			if (select_suspended_mode == 0) {
 80109cc:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d122      	bne.n	8010a1c <main+0x923c>
				encoder_position = encoder_position - encoder_position_down - (int) ((round)(180 * angle_scale));
 80109d6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	; 0x5d0
 80109e0:	1ad4      	subs	r4, r2, r3
 80109e2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80109e6:	edd3 7a00 	vldr	s15, [r3]
 80109ea:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8010bb0 <main+0x93d0>
 80109ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109f2:	ee17 0a90 	vmov	r0, s15
 80109f6:	f7ef fdbf 	bl	8000578 <__aeabi_f2d>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	ec43 2b10 	vmov	d0, r2, r3
 8010a02:	f006 fb67 	bl	80170d4 <round>
 8010a06:	ec53 2b10 	vmov	r2, r3, d0
 8010a0a:	4610      	mov	r0, r2
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	f7f0 f8bb 	bl	8000b88 <__aeabi_d2iz>
 8010a12:	4603      	mov	r3, r0
 8010a14:	1ae2      	subs	r2, r4, r3
 8010a16:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010a1a:	601a      	str	r2, [r3, #0]

			/*
			* Detect pendulum position excursion exceeding limits and exit
			*/

			if(select_suspended_mode == 0){
 8010a1c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d15f      	bne.n	8010ae6 <main+0x9306>
				if ((encoder_position / ENCODER_READ_ANGLE_SCALE)
 8010a26:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ef fd91 	bl	8000554 <__aeabi_i2d>
 8010a32:	a357      	add	r3, pc, #348	; (adr r3, 8010b90 <main+0x93b0>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef ff20 	bl	800087c <__aeabi_ddiv>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	460c      	mov	r4, r1
 8010a40:	4618      	mov	r0, r3
 8010a42:	4621      	mov	r1, r4
 8010a44:	f04f 0200 	mov.w	r2, #0
 8010a48:	4b5a      	ldr	r3, [pc, #360]	; (8010bb4 <main+0x93d4>)
 8010a4a:	f7f0 f87d 	bl	8000b48 <__aeabi_dcmpgt>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d018      	beq.n	8010a86 <main+0x92a6>
						> ENCODER_POSITION_POSITIVE_LIMIT) {
					sprintf(msg, "Error Exit Encoder Position Exceeded: %i\r\n",
 8010a54:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010a5e:	4956      	ldr	r1, [pc, #344]	; (8010bb8 <main+0x93d8>)
 8010a60:	4618      	mov	r0, r3
 8010a62:	f002 f875 	bl	8012b50 <sprintf>
						encoder_position);
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8010a66:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ef fbc2 	bl	80001f4 <strlen>
 8010a70:	4603      	mov	r3, r0
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8010a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a7c:	484f      	ldr	r0, [pc, #316]	; (8010bbc <main+0x93dc>)
 8010a7e:	f7f5 ff99 	bl	80069b4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
					break;
 8010a82:	f001 ba91 	b.w	8011fa8 <main+0xa7c8>
				}
				if ((encoder_position / ENCODER_READ_ANGLE_SCALE)
 8010a86:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7ef fd61 	bl	8000554 <__aeabi_i2d>
 8010a92:	a33f      	add	r3, pc, #252	; (adr r3, 8010b90 <main+0x93b0>)
 8010a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a98:	f7ef fef0 	bl	800087c <__aeabi_ddiv>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	f04f 0200 	mov.w	r2, #0
 8010aa8:	4b45      	ldr	r3, [pc, #276]	; (8010bc0 <main+0x93e0>)
 8010aaa:	f7f0 f82f 	bl	8000b0c <__aeabi_dcmplt>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d018      	beq.n	8010ae6 <main+0x9306>
						< ENCODER_POSITION_NEGATIVE_LIMIT) {
					sprintf(msg, "Error Exit Encoder Position Exceeded: %i\r\n",
 8010ab4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010abe:	493e      	ldr	r1, [pc, #248]	; (8010bb8 <main+0x93d8>)
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f002 f845 	bl	8012b50 <sprintf>
						encoder_position);
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8010ac6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7ef fb92 	bl	80001f4 <strlen>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8010ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010adc:	4837      	ldr	r0, [pc, #220]	; (8010bbc <main+0x93dc>)
 8010ade:	f7f5 ff69 	bl	80069b4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
					break;
 8010ae2:	f001 ba61 	b.w	8011fa8 <main+0xa7c8>
			/*
			* Detect rotor position excursion exceeding limits and exit
			*/

			if (rotor_position
					> (ROTOR_POSITION_POSITIVE_LIMIT
 8010ae6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ef fd31 	bl	8000554 <__aeabi_i2d>
			if (rotor_position
 8010af2:	a329      	add	r3, pc, #164	; (adr r3, 8010b98 <main+0x93b8>)
 8010af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af8:	f7f0 f826 	bl	8000b48 <__aeabi_dcmpgt>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d018      	beq.n	8010b34 <main+0x9354>
							* STEPPER_READ_POSITION_STEPS_PER_DEGREE)) {
				sprintf(msg, "Error Exit Motor Position Exceeded: %i\r\n",
 8010b02:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010b0c:	492d      	ldr	r1, [pc, #180]	; (8010bc4 <main+0x93e4>)
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f002 f81e 	bl	8012b50 <sprintf>
						rotor_position);
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8010b14:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ef fb6b 	bl	80001f4 <strlen>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8010b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b2a:	4824      	ldr	r0, [pc, #144]	; (8010bbc <main+0x93dc>)
 8010b2c:	f7f5 ff42 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				break;
 8010b30:	f001 ba3a 	b.w	8011fa8 <main+0xa7c8>
			}

			if (rotor_position
					< (ROTOR_POSITION_NEGATIVE_LIMIT
 8010b34:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7ef fd0a 	bl	8000554 <__aeabi_i2d>
			if (rotor_position
 8010b40:	a317      	add	r3, pc, #92	; (adr r3, 8010ba0 <main+0x93c0>)
 8010b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b46:	f7ef ffe1 	bl	8000b0c <__aeabi_dcmplt>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d03d      	beq.n	8010bcc <main+0x93ec>
							* STEPPER_READ_POSITION_STEPS_PER_DEGREE)) {
				sprintf(msg, "Error Exit Motor Position Exceeded: %i\r\n",
 8010b50:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010b5a:	491a      	ldr	r1, [pc, #104]	; (8010bc4 <main+0x93e4>)
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f001 fff7 	bl	8012b50 <sprintf>
						rotor_position);
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8010b62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ef fb44 	bl	80001f4 <strlen>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8010b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b78:	4810      	ldr	r0, [pc, #64]	; (8010bbc <main+0x93dc>)
 8010b7a:	f7f5 ff1b 	bl	80069b4 <HAL_UART_Transmit>
				HAL_MAX_DELAY);
				break;
 8010b7e:	f001 ba13 	b.w	8011fa8 <main+0xa7c8>
 8010b82:	bf00      	nop
 8010b84:	f3af 8000 	nop.w
 8010b88:	f01b866e 	.word	0xf01b866e
 8010b8c:	401921f9 	.word	0x401921f9
 8010b90:	67a0f909 	.word	0x67a0f909
 8010b94:	401aaab3 	.word	0x401aaab3
 8010b98:	7ae147ae 	.word	0x7ae147ae
 8010b9c:	40a90014 	.word	0x40a90014
 8010ba0:	7ae147ae 	.word	0x7ae147ae
 8010ba4:	c0a90014 	.word	0xc0a90014
 8010ba8:	404a3d71 	.word	0x404a3d71
 8010bac:	20000e1c 	.word	0x20000e1c
 8010bb0:	43340000 	.word	0x43340000
 8010bb4:	40440000 	.word	0x40440000
 8010bb8:	08019a9c 	.word	0x08019a9c
 8010bbc:	20000f20 	.word	0x20000f20
 8010bc0:	c0440000 	.word	0xc0440000
 8010bc4:	08019ac8 	.word	0x08019ac8
 8010bc8:	43480000 	.word	0x43480000

			/*
			* Compute Low Pass Filtered rotor position difference
			*/

			rotor_position_diff_prev = rotor_position_diff;
 8010bcc:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8010bd0:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8010bd4:	6812      	ldr	r2, [r2, #0]
 8010bd6:	601a      	str	r2, [r3, #0]
			if (enable_disturbance_rejection_step == 0){
 8010bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d10d      	bne.n	8010bfe <main+0x941e>
			rotor_position_diff = rotor_position_filter
					- rotor_position_command;
 8010be2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010be6:	edd3 7a00 	vldr	s15, [r3]
			rotor_position_diff = rotor_position_filter
 8010bea:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8010bee:	ed93 7a00 	vldr	s14, [r3]
 8010bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bf6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8010bfa:	edc3 7a00 	vstr	s15, [r3]
			}
			if (enable_disturbance_rejection_step == 1){
 8010bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d105      	bne.n	8010c14 <main+0x9434>
			rotor_position_diff = rotor_position_filter;
 8010c08:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8010c12:	6013      	str	r3, [r2, #0]
			}
			rotor_position_diff_filter_prev = rotor_position_diff_filter;
 8010c14:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8010c18:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 8010c1c:	6812      	ldr	r2, [r2, #0]
 8010c1e:	601a      	str	r2, [r3, #0]
			rotor_position_diff_filter =
					(float) (rotor_position_diff * iir_LT_0)
 8010c20:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010c24:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8010c28:	ed92 7a00 	vldr	s14, [r2]
 8010c2c:	edd3 7a00 	vldr	s15, [r3]
 8010c30:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ rotor_position_diff_prev * iir_LT_1
 8010c34:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8010c38:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8010c3c:	edd2 6a00 	vldr	s13, [r2]
 8010c40:	edd3 7a00 	vldr	s15, [r3]
 8010c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c48:	ee37 7a27 	vadd.f32	s14, s14, s15
							- rotor_position_diff_filter_prev * iir_LT_2;
 8010c4c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8010c50:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8010c54:	edd2 6a00 	vldr	s13, [r2]
 8010c58:	edd3 7a00 	vldr	s15, [r3]
 8010c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			rotor_position_diff_filter =
 8010c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c64:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 8010c68:	edc3 7a00 	vstr	s15, [r3]

			if (ENABLE_ENCODER_ANGLE_SLOPE_CORRECTION == 1 ) {
				if ((i < ENCODER_ANGLE_SLOPE_CORRECTION_CYCLE_LIMIT) || (ENCODER_ANGLE_SLOPE_CORRECTION_CYCLE_LIMIT == 0)) {
					encoder_angle_slope_corr = rotor_position_diff_filter / ENCODER_ANGLE_SLOPE_CORRECTION_SCALE;
 8010c6c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010c70:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 8010c74:	ed92 7a00 	vldr	s14, [r2]
 8010c78:	ed5f 6a2d 	vldr	s13, [pc, #-180]	; 8010bc8 <main+0x93e8>
 8010c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010c80:	edc3 7a00 	vstr	s15, [r3]
			*  An Encoder offset may be introduced.  The Encoder offset may remain at all times if
			*  ENCODER_OFFSET_DELAY == 0 or terminate at a time (in ticks) of ENCODER_OFFSET_DELAY
			*/

			if ((i < ENCODER_START_OFFSET_DELAY) || (ENCODER_START_OFFSET_DELAY == 0)){
				encoder_position = encoder_position - ENCODER_START_OFFSET;
 8010c84:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010c8e:	601a      	str	r2, [r3, #0]
			}

			*current_error = encoder_angle_slope_corr
					+ (float) ((ENCODER_ANGLE_POLARITY)
							* (encoder_position / (ENCODER_READ_ANGLE_SCALE)));
 8010c90:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7ef fc5c 	bl	8000554 <__aeabi_i2d>
 8010c9c:	f20f 5348 	addw	r3, pc, #1352	; 0x548
 8010ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca4:	f7ef fdea 	bl	800087c <__aeabi_ddiv>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	460c      	mov	r4, r1
 8010cac:	4698      	mov	r8, r3
 8010cae:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
					+ (float) ((ENCODER_ANGLE_POLARITY)
 8010cb2:	4640      	mov	r0, r8
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	f7ef ffaf 	bl	8000c18 <__aeabi_d2f>
 8010cba:	ee07 0a10 	vmov	s14, r0
 8010cbe:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8010cc2:	edd3 7a00 	vldr	s15, [r3]
 8010cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
			*current_error = encoder_angle_slope_corr
 8010cca:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	edc3 7a00 	vstr	s15, [r3]
			*
			* Include addition of pendulum position impulse signal
			*
			*/

			*current_error = *current_error + pendulum_position_command;
 8010cd4:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	ed93 7a00 	vldr	s14, [r3]
 8010cde:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8010ce2:	edd3 7a00 	vldr	s15, [r3]
 8010ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cea:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	edc3 7a00 	vstr	s15, [r3]

			pid_filter_control_execute(pid_filter, current_error, sample_period,
 8010cf4:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8010cf8:	f507 7267 	add.w	r2, r7, #924	; 0x39c
 8010cfc:	f507 7169 	add.w	r1, r7, #932	; 0x3a4
 8010d00:	f507 7063 	add.w	r0, r7, #908	; 0x38c
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6812      	ldr	r2, [r2, #0]
 8010d08:	6809      	ldr	r1, [r1, #0]
 8010d0a:	6800      	ldr	r0, [r0, #0]
 8010d0c:	f7f6 fbb4 	bl	8007478 <pid_filter_control_execute>
					deriv_lp_corner_f);
			rotor_position_target = pid_filter->control_output;
 8010d10:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d1e:	ee17 3a90 	vmov	r3, s15
 8010d22:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

		   /*
			* Acquire Motor Position and Compute Low Pass Filtered Motor Position
			*/

			ret = rotor_position_read(&rotor_position);
 8010d26:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8010d2a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f6 fb0d 	bl	800734e <rotor_position_read>
 8010d34:	6020      	str	r0, [r4, #0]

			rotor_position_filter = (float) (rotor_position) * iir_0
 8010d36:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	ee07 3a90 	vmov	s15, r3
 8010d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d44:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8010d48:	edd3 7a00 	vldr	s15, [r3]
 8010d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ rotor_position_prev * iir_1
 8010d50:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8010d54:	f207 52c4 	addw	r2, r7, #1476	; 0x5c4
 8010d58:	edd2 6a00 	vldr	s13, [r2]
 8010d5c:	edd3 7a00 	vldr	s15, [r3]
 8010d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010d64:	ee37 7a27 	vadd.f32	s14, s14, s15
					- rotor_position_filter_prev * iir_2;
 8010d68:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8010d6c:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 8010d70:	edd2 6a00 	vldr	s13, [r2]
 8010d74:	edd3 7a00 	vldr	s15, [r3]
 8010d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
			rotor_position_filter = (float) (rotor_position) * iir_0
 8010d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d80:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8010d84:	edc3 7a00 	vstr	s15, [r3]
			rotor_position_prev = (float) (rotor_position);
 8010d88:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	ee07 3a90 	vmov	s15, r3
 8010d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d96:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 8010d9a:	edc3 7a00 	vstr	s15, [r3]
			rotor_position_filter_prev = rotor_position_filter;
 8010d9e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 8010da8:	6013      	str	r3, [r2, #0]
			/*
			 * 		Chirp cycle count begins with index value of 0 and continues through to
			 * 		ROTOR_CHIRP_PERIOD - 1 to create a number of samples equal to ROTOR_CHIRP_PERIOD
			 */

			if (enable_rotor_chirp == 1 && enable_mod_sin_rotor_tracking == 0
 8010daa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	f040 80b4 	bne.w	8010f1e <main+0x973e>
 8010db6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f040 80ae 	bne.w	8010f1e <main+0x973e>
							&& enable_rotor_tracking_comb_signal == 0) {
 8010dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f040 80a8 	bne.w	8010f1e <main+0x973e>

				if (i < ROTOR_CHIRP_PERIOD - 1){
 8010dce:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8010dd2:	f649 423e 	movw	r2, #39998	; 0x9c3e
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	dc02      	bgt.n	8010de0 <main+0x9600>
					chirp_cycle = 0;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
				}

				if (chirp_cycle > ROTOR_CHIRP_PERIOD - 1) {
 8010de0:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8010de4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8010de8:	4293      	cmp	r3, r2
 8010dea:	dd06      	ble.n	8010dfa <main+0x961a>
					chirp_cycle = 0;
 8010dec:	2300      	movs	r3, #0
 8010dee:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
					chirp_dwell_cycle = ROTOR_CHIRP_SWEEP_DELAY;
 8010df2:	f242 7310 	movw	r3, #10000	; 0x2710
 8010df6:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
				}
				if (chirp_dwell_cycle > 0){
 8010dfa:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	dd07      	ble.n	8010e12 <main+0x9632>
					chirp_dwell_cycle--;
 8010e02:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8010e06:	3b01      	subs	r3, #1
 8010e08:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
					chirp_cycle = 0;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
				}
				if (chirp_dwell_cycle == 0 && i >= ROTOR_CHIRP_PERIOD - 1){
 8010e12:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f040 8081 	bne.w	8010f1e <main+0x973e>
 8010e1c:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8010e20:	f649 423e 	movw	r2, #39998	; 0x9c3e
 8010e24:	4293      	cmp	r3, r2
 8010e26:	dd7a      	ble.n	8010f1e <main+0x973e>
					chirp_cycle = chirp_cycle + 1;
 8010e28:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
					chirp_time = (float)((chirp_cycle - 1)/ROTOR_CHIRP_SAMPLE_RATE);
 8010e32:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8010e36:	3b01      	subs	r3, #1
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ef fb8b 	bl	8000554 <__aeabi_i2d>
 8010e3e:	f04f 0200 	mov.w	r2, #0
 8010e42:	4be3      	ldr	r3, [pc, #908]	; (80111d0 <main+0x99f0>)
 8010e44:	f7ef fd1a 	bl	800087c <__aeabi_ddiv>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4623      	mov	r3, r4
 8010e50:	f507 7444 	add.w	r4, r7, #784	; 0x310
 8010e54:	4610      	mov	r0, r2
 8010e56:	4619      	mov	r1, r3
 8010e58:	f7ef fede 	bl	8000c18 <__aeabi_d2f>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	6023      	str	r3, [r4, #0]
					rotor_chirp_frequency = rotor_chirp_start_freq + (rotor_chirp_end_freq - rotor_chirp_start_freq)*(chirp_cycle/rotor_chirp_period);
 8010e60:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8010e64:	ed93 7a00 	vldr	s14, [r3]
 8010e68:	f207 5344 	addw	r3, r7, #1348	; 0x544
 8010e6c:	edd3 7a00 	vldr	s15, [r3]
 8010e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e74:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8010e78:	ee07 3a90 	vmov	s15, r3
 8010e7c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010e80:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8010e84:	edd3 6a00 	vldr	s13, [r3]
 8010e88:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e90:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8010e94:	f207 5244 	addw	r2, r7, #1348	; 0x544
 8010e98:	ed92 7a00 	vldr	s14, [r2]
 8010e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ea0:	edc3 7a00 	vstr	s15, [r3]
					rotor_position_command = ((float)(ROTOR_CHIRP_STEP_AMPLITUDE*STEPPER_READ_POSITION_STEPS_PER_DEGREE))*sin(2.0*3.14159*rotor_chirp_frequency*chirp_time/10);
 8010ea4:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8010ea8:	6818      	ldr	r0, [r3, #0]
 8010eaa:	f7ef fb65 	bl	8000578 <__aeabi_f2d>
 8010eae:	a3be      	add	r3, pc, #760	; (adr r3, 80111a8 <main+0x99c8>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef fbb8 	bl	8000628 <__aeabi_dmul>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	460c      	mov	r4, r1
 8010ebc:	4625      	mov	r5, r4
 8010ebe:	461c      	mov	r4, r3
 8010ec0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8010ec4:	6818      	ldr	r0, [r3, #0]
 8010ec6:	f7ef fb57 	bl	8000578 <__aeabi_f2d>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	460b      	mov	r3, r1
 8010ece:	4620      	mov	r0, r4
 8010ed0:	4629      	mov	r1, r5
 8010ed2:	f7ef fba9 	bl	8000628 <__aeabi_dmul>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	460c      	mov	r4, r1
 8010eda:	4618      	mov	r0, r3
 8010edc:	4621      	mov	r1, r4
 8010ede:	f04f 0200 	mov.w	r2, #0
 8010ee2:	4bbc      	ldr	r3, [pc, #752]	; (80111d4 <main+0x99f4>)
 8010ee4:	f7ef fcca 	bl	800087c <__aeabi_ddiv>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	460c      	mov	r4, r1
 8010eec:	ec44 3b17 	vmov	d7, r3, r4
 8010ef0:	eeb0 0a47 	vmov.f32	s0, s14
 8010ef4:	eef0 0a67 	vmov.f32	s1, s15
 8010ef8:	f006 f936 	bl	8017168 <sin>
 8010efc:	ec51 0b10 	vmov	r0, r1, d0
 8010f00:	a3ab      	add	r3, pc, #684	; (adr r3, 80111b0 <main+0x99d0>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	f7ef fb8f 	bl	8000628 <__aeabi_dmul>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	4618      	mov	r0, r3
 8010f10:	4621      	mov	r1, r4
 8010f12:	f7ef fe81 	bl	8000c18 <__aeabi_d2f>
 8010f16:	4602      	mov	r2, r0
 8010f18:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010f1c:	601a      	str	r2, [r3, #0]
				}
			}

			if (enable_rotor_chirp == 0 && enable_mod_sin_rotor_tracking == 0
 8010f1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d10f      	bne.n	8010f48 <main+0x9768>
 8010f28:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d10a      	bne.n	8010f48 <main+0x9768>
											&& enable_rotor_tracking_comb_signal == 1) {
 8010f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b01      	cmp	r3, #1
 8010f3a:	d105      	bne.n	8010f48 <main+0x9768>
					rotor_position_command = rotor_track_comb_command;
 8010f3c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8010f40:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8010f44:	6812      	ldr	r2, [r2, #0]
 8010f46:	601a      	str	r2, [r3, #0]
			}

			rotor_sine_drive = 0;
 8010f48:	f04f 0300 	mov.w	r3, #0
 8010f4c:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 8010f50:	6013      	str	r3, [r2, #0]

			if (enable_mod_sin_rotor_tracking == 1 && ENABLE_ROTOR_CHIRP == 0) {
 8010f52:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	f040 810b 	bne.w	8011174 <main+0x9994>

				if (ENABLE_ROTOR_CHIRP == 0){
					mod_sin_carrier_frequency = MOD_SIN_CARRIER_FREQ;
 8010f5e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8010f62:	4a9d      	ldr	r2, [pc, #628]	; (80111d8 <main+0x99f8>)
 8010f64:	601a      	str	r2, [r3, #0]
				}

				if (i > MOD_SIN_START_CYCLES && enable_mod_sin_rotor_tracking == 1) {
 8010f66:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8010f6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	f340 80a0 	ble.w	80110b4 <main+0x98d4>
 8010f74:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	f040 809a 	bne.w	80110b4 <main+0x98d4>
					rotor_sine_drive =
							(float) (mod_sin_amplitude
									* (1 + sin(-1.5707 + ((i - MOD_SIN_START_CYCLES)/MOD_SIN_SAMPLE_RATE) * (MOD_SIN_MODULATION_FREQ * 6.2832))));
 8010f80:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8010f84:	6818      	ldr	r0, [r3, #0]
 8010f86:	f7ef faf7 	bl	8000578 <__aeabi_f2d>
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	460d      	mov	r5, r1
 8010f8e:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8010f92:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8010f96:	3b10      	subs	r3, #16
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7ef fadb 	bl	8000554 <__aeabi_i2d>
 8010f9e:	f04f 0200 	mov.w	r2, #0
 8010fa2:	4b8b      	ldr	r3, [pc, #556]	; (80111d0 <main+0x99f0>)
 8010fa4:	f7ef fc6a 	bl	800087c <__aeabi_ddiv>
 8010fa8:	4602      	mov	r2, r0
 8010faa:	460b      	mov	r3, r1
 8010fac:	4610      	mov	r0, r2
 8010fae:	4619      	mov	r1, r3
 8010fb0:	a381      	add	r3, pc, #516	; (adr r3, 80111b8 <main+0x99d8>)
 8010fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb6:	f7ef fb37 	bl	8000628 <__aeabi_dmul>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4610      	mov	r0, r2
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	a37f      	add	r3, pc, #508	; (adr r3, 80111c0 <main+0x99e0>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	f7ef f976 	bl	80002b8 <__aeabi_dsub>
 8010fcc:	4602      	mov	r2, r0
 8010fce:	460b      	mov	r3, r1
 8010fd0:	ec43 2b17 	vmov	d7, r2, r3
 8010fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8010fd8:	eef0 0a67 	vmov.f32	s1, s15
 8010fdc:	f006 f8c4 	bl	8017168 <sin>
 8010fe0:	ec51 0b10 	vmov	r0, r1, d0
 8010fe4:	f04f 0200 	mov.w	r2, #0
 8010fe8:	4b7c      	ldr	r3, [pc, #496]	; (80111dc <main+0x99fc>)
 8010fea:	f7ef f967 	bl	80002bc <__adddf3>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	4629      	mov	r1, r5
 8010ff6:	f7ef fb17 	bl	8000628 <__aeabi_dmul>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	460c      	mov	r4, r1
					rotor_sine_drive =
 8010ffe:	4618      	mov	r0, r3
 8011000:	4621      	mov	r1, r4
 8011002:	f7ef fe09 	bl	8000c18 <__aeabi_d2f>
 8011006:	4603      	mov	r3, r0
 8011008:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801100c:	6013      	str	r3, [r2, #0]
					rotor_sine_drive_mod = sin(0 + ((i - MOD_SIN_START_CYCLES) /MOD_SIN_SAMPLE_RATE) * (mod_sin_carrier_frequency * 6.2832));
 801100e:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8011012:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8011016:	3b10      	subs	r3, #16
 8011018:	4618      	mov	r0, r3
 801101a:	f7ef fa9b 	bl	8000554 <__aeabi_i2d>
 801101e:	f04f 0200 	mov.w	r2, #0
 8011022:	4b6b      	ldr	r3, [pc, #428]	; (80111d0 <main+0x99f0>)
 8011024:	f7ef fc2a 	bl	800087c <__aeabi_ddiv>
 8011028:	4603      	mov	r3, r0
 801102a:	460c      	mov	r4, r1
 801102c:	4625      	mov	r5, r4
 801102e:	461c      	mov	r4, r3
 8011030:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8011034:	6818      	ldr	r0, [r3, #0]
 8011036:	f7ef fa9f 	bl	8000578 <__aeabi_f2d>
 801103a:	a363      	add	r3, pc, #396	; (adr r3, 80111c8 <main+0x99e8>)
 801103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011040:	f7ef faf2 	bl	8000628 <__aeabi_dmul>
 8011044:	4602      	mov	r2, r0
 8011046:	460b      	mov	r3, r1
 8011048:	4620      	mov	r0, r4
 801104a:	4629      	mov	r1, r5
 801104c:	f7ef faec 	bl	8000628 <__aeabi_dmul>
 8011050:	4603      	mov	r3, r0
 8011052:	460c      	mov	r4, r1
 8011054:	4618      	mov	r0, r3
 8011056:	4621      	mov	r1, r4
 8011058:	f04f 0200 	mov.w	r2, #0
 801105c:	f04f 0300 	mov.w	r3, #0
 8011060:	f7ef f92c 	bl	80002bc <__adddf3>
 8011064:	4603      	mov	r3, r0
 8011066:	460c      	mov	r4, r1
 8011068:	ec44 3b17 	vmov	d7, r3, r4
 801106c:	eeb0 0a47 	vmov.f32	s0, s14
 8011070:	eef0 0a67 	vmov.f32	s1, s15
 8011074:	f006 f878 	bl	8017168 <sin>
 8011078:	ec54 3b10 	vmov	r3, r4, d0
 801107c:	4618      	mov	r0, r3
 801107e:	4621      	mov	r1, r4
 8011080:	f7ef fdca 	bl	8000c18 <__aeabi_d2f>
 8011084:	4603      	mov	r3, r0
 8011086:	f207 5224 	addw	r2, r7, #1316	; 0x524
 801108a:	6013      	str	r3, [r2, #0]
					rotor_sine_drive = rotor_sine_drive * rotor_sine_drive_mod * rotor_mod_control;
 801108c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8011090:	ed93 7a00 	vldr	s14, [r3]
 8011094:	f207 5324 	addw	r3, r7, #1316	; 0x524
 8011098:	edd3 7a00 	vldr	s15, [r3]
 801109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110a0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80110a4:	ed93 7a00 	vldr	s14, [r3]
 80110a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110ac:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80110b0:	edc3 7a00 	vstr	s15, [r3]
					rotor_sine_drive_mod = sin(0 + ((i - MOD_SIN_START_CYCLES) /MOD_SIN_SAMPLE_RATE) * (mod_sin_carrier_frequency * 6.2832));
					rotor_sine_drive = rotor_control_sin_amplitude * rotor_sine_drive_mod * rotor_mod_control;
				}


				rotor_position_command = rotor_sine_drive;
 80110b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80110b8:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 80110bc:	6812      	ldr	r2, [r2, #0]
 80110be:	601a      	str	r2, [r3, #0]

				/*
				* Detect transition between sine drive enable and disable
				*/

				if ( abs(rotor_sine_drive_mod*MOD_SIN_AMPLITUDE) < 2 && disable_mod_sin_rotor_tracking == 1 && sine_drive_transition == 1){
 80110c0:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80110c4:	edd3 7a00 	vldr	s15, [r3]
 80110c8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80111e0 <main+0x9a00>
 80110cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110d4:	ee17 3a90 	vmov	r3, s15
 80110d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110dc:	db1d      	blt.n	801111a <main+0x993a>
 80110de:	f207 5324 	addw	r3, r7, #1316	; 0x524
 80110e2:	edd3 7a00 	vldr	s15, [r3]
 80110e6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80111e0 <main+0x9a00>
 80110ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110f2:	ee17 3a90 	vmov	r3, s15
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	dc0f      	bgt.n	801111a <main+0x993a>
 80110fa:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d10b      	bne.n	801111a <main+0x993a>
 8011102:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8011106:	2b01      	cmp	r3, #1
 8011108:	d107      	bne.n	801111a <main+0x993a>
					rotor_mod_control = 0.0;
 801110a:	f04f 0300 	mov.w	r3, #0
 801110e:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8011112:	6013      	str	r3, [r2, #0]
					sine_drive_transition = 0;
 8011114:	2300      	movs	r3, #0
 8011116:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
				}

				if ( abs(rotor_sine_drive_mod*MOD_SIN_AMPLITUDE) < 2 && disable_mod_sin_rotor_tracking == 0 && sine_drive_transition == 1){
 801111a:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801111e:	edd3 7a00 	vldr	s15, [r3]
 8011122:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80111e0 <main+0x9a00>
 8011126:	ee67 7a87 	vmul.f32	s15, s15, s14
 801112a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801112e:	ee17 3a90 	vmov	r3, s15
 8011132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011136:	db1d      	blt.n	8011174 <main+0x9994>
 8011138:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801113c:	edd3 7a00 	vldr	s15, [r3]
 8011140:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80111e0 <main+0x9a00>
 8011144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801114c:	ee17 3a90 	vmov	r3, s15
 8011150:	2b01      	cmp	r3, #1
 8011152:	dc0f      	bgt.n	8011174 <main+0x9994>
 8011154:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8011158:	2b00      	cmp	r3, #0
 801115a:	d10b      	bne.n	8011174 <main+0x9994>
 801115c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8011160:	2b01      	cmp	r3, #1
 8011162:	d107      	bne.n	8011174 <main+0x9994>
					rotor_mod_control = 1.0;
 8011164:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011168:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 801116c:	6013      	str	r3, [r2, #0]
					sine_drive_transition = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
					rotor_position_command = 0;
				}
				impulse_start_index++;
			}

			if (enable_pendulum_position_impulse_response_cycle == 1 && i != 0) {
 8011174:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d165      	bne.n	801124a <main+0x9a6a>
 801117e:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d061      	beq.n	801124a <main+0x9a6a>

				if ((i % PENDULUM_POSITION_IMPULSE_RESPONSE_CYCLE_INTERVAL) == 0) {
 8011186:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 801118a:	4b16      	ldr	r3, [pc, #88]	; (80111e4 <main+0x9a04>)
 801118c:	fb83 1302 	smull	r1, r3, r3, r2
 8011190:	12d9      	asrs	r1, r3, #11
 8011192:	17d3      	asrs	r3, r2, #31
 8011194:	1acb      	subs	r3, r1, r3
 8011196:	f243 61b0 	movw	r1, #14000	; 0x36b0
 801119a:	fb01 f303 	mul.w	r3, r1, r3
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d131      	bne.n	8011208 <main+0x9a28>
 80111a4:	e024      	b.n	80111f0 <main+0x9a10>
 80111a6:	bf00      	nop
 80111a8:	f01b866e 	.word	0xf01b866e
 80111ac:	401921f9 	.word	0x401921f9
 80111b0:	c0000000 	.word	0xc0000000
 80111b4:	40055566 	.word	0x40055566
 80111b8:	a83a464d 	.word	0xa83a464d
 80111bc:	3f79bc69 	.word	0x3f79bc69
 80111c0:	52bd3c36 	.word	0x52bd3c36
 80111c4:	3ff92196 	.word	0x3ff92196
 80111c8:	2e48e8a7 	.word	0x2e48e8a7
 80111cc:	401921ff 	.word	0x401921ff
 80111d0:	407f4000 	.word	0x407f4000
 80111d4:	40240000 	.word	0x40240000
 80111d8:	3b449ba6 	.word	0x3b449ba6
 80111dc:	3ff00000 	.word	0x3ff00000
 80111e0:	44160000 	.word	0x44160000
 80111e4:	2572fb07 	.word	0x2572fb07
 80111e8:	67a0f909 	.word	0x67a0f909
 80111ec:	401aaab3 	.word	0x401aaab3
					pendulum_position_command =
 80111f0:	4b32      	ldr	r3, [pc, #200]	; (80112bc <main+0x9adc>)
 80111f2:	f207 5234 	addw	r2, r7, #1332	; 0x534
 80111f6:	6013      	str	r3, [r2, #0]
							(float) (PENDULUM_POSITION_IMPULSE_RESPONSE_CYCLE_AMPLITUDE
									* ENCODER_READ_ANGLE_SCALE);
					impulse_start_index = 0;
 80111f8:	f04f 0300 	mov.w	r3, #0
 80111fc:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8011200:	6013      	str	r3, [r2, #0]
					chirp_cycle = 0;
 8011202:	2300      	movs	r3, #0
 8011204:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
				}
				if (impulse_start_index
 8011208:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801120c:	edd3 7a00 	vldr	s15, [r3]
 8011210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121c:	dd04      	ble.n	8011228 <main+0x9a48>
						> PENDULUM_POSITION_IMPULSE_RESPONSE_CYCLE_PERIOD) {
					pendulum_position_command = 0;
 801121e:	f04f 0300 	mov.w	r3, #0
 8011222:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8011226:	6013      	str	r3, [r2, #0]
				}
				impulse_start_index++;
 8011228:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801122c:	edd3 7a00 	vldr	s15, [r3]
 8011230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011234:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011238:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801123c:	edc3 7a00 	vstr	s15, [r3]
				chirp_cycle++;
 8011240:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8011244:	3301      	adds	r3, #1
 8011246:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
			}


			if ((i % ROTOR_POSITION_STEP_RESPONSE_CYCLE_INTERVAL) == 0 && enable_rotor_position_step_response_cycle == 1) {
 801124a:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 801124e:	4b1c      	ldr	r3, [pc, #112]	; (80112c0 <main+0x9ae0>)
 8011250:	fb83 1302 	smull	r1, r3, r3, r2
 8011254:	1259      	asrs	r1, r3, #9
 8011256:	17d3      	asrs	r3, r2, #31
 8011258:	1acb      	subs	r3, r1, r3
 801125a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 801125e:	fb01 f303 	mul.w	r3, r1, r3
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	2b00      	cmp	r3, #0
 8011266:	d110      	bne.n	801128a <main+0x9aaa>
 8011268:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b01      	cmp	r3, #1
 8011270:	d10b      	bne.n	801128a <main+0x9aaa>
				rotor_position_step_polarity = -rotor_position_step_polarity;
 8011272:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8011276:	425b      	negs	r3, r3
 8011278:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
				if (rotor_position_step_polarity == 1){
 801127c:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8011280:	2b01      	cmp	r3, #1
 8011282:	d102      	bne.n	801128a <main+0x9aaa>
					chirp_cycle = 0;
 8011284:	2300      	movs	r3, #0
 8011286:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
				}
			}

			if (enable_rotor_position_step_response_cycle == 1) {
 801128a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d13a      	bne.n	801130a <main+0x9b2a>
					if (STEP_RESPONSE_AMP_LIMIT_ENABLE == 1 && abs(rotor_sine_drive) > STEP_RESPONSE_AMP_LIMIT){
 8011294:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8011298:	edd3 7a00 	vldr	s15, [r3]
 801129c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80112a0:	ee17 3a90 	vmov	r3, s15
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bfb8      	it	lt
 80112a8:	425b      	neglt	r3, r3
 80112aa:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80112ae:	dd09      	ble.n	80112c4 <main+0x9ae4>
						chirp_cycle = chirp_cycle + 1;
 80112b0:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80112b4:	3301      	adds	r3, #1
 80112b6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 80112ba:	e026      	b.n	801130a <main+0x9b2a>
 80112bc:	41a00034 	.word	0x41a00034
 80112c0:	10624dd3 	.word	0x10624dd3
					} else {
						rotor_position_command = rotor_sine_drive + (float) ((rotor_position_step_polarity)
											* ROTOR_POSITION_STEP_RESPONSE_CYCLE_AMPLITUDE
 80112c4:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 80112c8:	00db      	lsls	r3, r3, #3
											* STEPPER_READ_POSITION_STEPS_PER_DEGREE);
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7ef f942 	bl	8000554 <__aeabi_i2d>
 80112d0:	f20f 6308 	addw	r3, pc, #1544	; 0x608
 80112d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d8:	f7ef f9a6 	bl	8000628 <__aeabi_dmul>
 80112dc:	4603      	mov	r3, r0
 80112de:	460c      	mov	r4, r1
						rotor_position_command = rotor_sine_drive + (float) ((rotor_position_step_polarity)
 80112e0:	4618      	mov	r0, r3
 80112e2:	4621      	mov	r1, r4
 80112e4:	f7ef fc98 	bl	8000c18 <__aeabi_d2f>
 80112e8:	ee07 0a10 	vmov	s14, r0
 80112ec:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80112f0:	edd3 7a00 	vldr	s15, [r3]
 80112f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80112fc:	edc3 7a00 	vstr	s15, [r3]
						chirp_cycle = chirp_cycle + 1;
 8011300:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8011304:	3301      	adds	r3, #1
 8011306:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
			if (ENABLE_DUAL_PID == 1) {

			/*
			 * Secondary Controller execution
			 */
				if (enable_disturbance_rejection_step == 0 && enable_plant_rejection_step == 0 && enable_noise_rejection_step == 0){
 801130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d118      	bne.n	8011346 <main+0x9b66>
 8011314:	f107 0320 	add.w	r3, r7, #32
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d113      	bne.n	8011346 <main+0x9b66>
 801131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10e      	bne.n	8011346 <main+0x9b66>
				*current_error_rotor = rotor_position_filter - rotor_position_command;
 8011328:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801132c:	edd3 7a00 	vldr	s15, [r3]
 8011330:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8011334:	ed93 7a00 	vldr	s14, [r3]
 8011338:	ee77 7a67 	vsub.f32	s15, s14, s15
 801133c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	edc3 7a00 	vstr	s15, [r3]
				}
				if (enable_disturbance_rejection_step == 1){
 8011346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d106      	bne.n	801135e <main+0x9b7e>
				*current_error_rotor = rotor_position_filter;
 8011350:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 801135a:	6812      	ldr	r2, [r2, #0]
 801135c:	601a      	str	r2, [r3, #0]
				}
				if (enable_noise_rejection_step == 1){
 801135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d10e      	bne.n	8011386 <main+0x9ba6>
					*current_error_rotor = rotor_position_filter + rotor_position_command;
 8011368:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801136c:	ed93 7a00 	vldr	s14, [r3]
 8011370:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8011374:	edd3 7a00 	vldr	s15, [r3]
 8011378:	ee77 7a27 	vadd.f32	s15, s14, s15
 801137c:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	edc3 7a00 	vstr	s15, [r3]
				}

				pid_filter_control_execute(rotor_pid, current_error_rotor,
 8011386:	f507 7365 	add.w	r3, r7, #916	; 0x394
 801138a:	f507 7264 	add.w	r2, r7, #912	; 0x390
 801138e:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 8011392:	f507 7062 	add.w	r0, r7, #904	; 0x388
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	6812      	ldr	r2, [r2, #0]
 801139a:	6809      	ldr	r1, [r1, #0]
 801139c:	6800      	ldr	r0, [r0, #0]
 801139e:	f7f6 f86b 	bl	8007478 <pid_filter_control_execute>
						sample_period_rotor, deriv_lp_corner_f_rotor);
				rotor_position_target = pid_filter->control_output + rotor_pid->control_output;
 80113a2:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80113ac:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80113b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80113be:	ee17 3a90 	vmov	r3, s15
 80113c2:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8

			/*
			 * Adaptive Control
			 */

            error_sum = *current_error_rotor;
 80113c6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80113ca:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
 80113ce:	6812      	ldr	r2, [r2, #0]
 80113d0:	6812      	ldr	r2, [r2, #0]
 80113d2:	601a      	str	r2, [r3, #0]
            error_sum_filter = (float) (error_sum * iir_LT_0)
 80113d4:	f507 7240 	add.w	r2, r7, #768	; 0x300
 80113d8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80113dc:	ed92 7a00 	vldr	s14, [r2]
 80113e0:	edd3 7a00 	vldr	s15, [r3]
 80113e4:	ee27 7a27 	vmul.f32	s14, s14, s15
                            + error_sum_prev * iir_LT_1
 80113e8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80113ec:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 80113f0:	edd2 6a00 	vldr	s13, [r2]
 80113f4:	edd3 7a00 	vldr	s15, [r3]
 80113f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113fc:	ee37 7a27 	vadd.f32	s14, s14, s15
                            - error_sum_filter_prev * iir_LT_2;
 8011400:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8011404:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8011408:	edd2 6a00 	vldr	s13, [r2]
 801140c:	edd3 7a00 	vldr	s15, [r3]
 8011410:	ee66 7aa7 	vmul.f32	s15, s13, s15
            error_sum_filter = (float) (error_sum * iir_LT_0)
 8011414:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8011418:	ee77 7a67 	vsub.f32	s15, s14, s15
 801141c:	edc3 7a00 	vstr	s15, [r3]
            error_sum_prev = error_sum;
 8011420:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 801142a:	6013      	str	r3, [r2, #0]
            error_sum_filter_prev = error_sum_filter;
 801142c:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	f207 52a4 	addw	r2, r7, #1444	; 0x5a4
 8011436:	6013      	str	r3, [r2, #0]
			adaptive_error = abs(error_sum_filter/ STEPPER_READ_POSITION_STEPS_PER_DEGREE);
 8011438:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f7ef f89b 	bl	8000578 <__aeabi_f2d>
 8011442:	f20f 4398 	addw	r3, pc, #1176	; 0x498
 8011446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144a:	f7ef fa17 	bl	800087c <__aeabi_ddiv>
 801144e:	4603      	mov	r3, r0
 8011450:	460c      	mov	r4, r1
 8011452:	4618      	mov	r0, r3
 8011454:	4621      	mov	r1, r4
 8011456:	f7ef fb97 	bl	8000b88 <__aeabi_d2iz>
 801145a:	4603      	mov	r3, r0
 801145c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011460:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011464:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011468:	ee07 2a90 	vmov	s15, r2
 801146c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011470:	edc3 7a00 	vstr	s15, [r3]



			if (enable_adaptive_mode == 1 && i > 2) {
 8011474:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b01      	cmp	r3, #1
 801147c:	f040 81ee 	bne.w	801185c <main+0xa07c>
 8011480:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8011484:	2b02      	cmp	r3, #2
 8011486:	f340 81e9 	ble.w	801185c <main+0xa07c>

				if (adaptive_error < adaptive_threshold_low
 801148a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801148e:	edd3 7a00 	vldr	s15, [r3]
 8011492:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011496:	ed93 7a00 	vldr	s14, [r3]
 801149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a2:	d50b      	bpl.n	80114bc <main+0x9cdc>
						&& adaptive_state == 1) {
 80114a4:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d107      	bne.n	80114bc <main+0x9cdc>
					adaptive_state = 2;
 80114ac:	2302      	movs	r3, #2
 80114ae:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
					adaptive_entry_tick = HAL_GetTick();
 80114b2:	f7f2 fe69 	bl	8004188 <HAL_GetTick>
 80114b6:	4603      	mov	r3, r0
 80114b8:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
				}
				if (adaptive_error < adaptive_threshold_low
 80114bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80114c0:	edd3 7a00 	vldr	s15, [r3]
 80114c4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80114c8:	ed93 7a00 	vldr	s14, [r3]
 80114cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d4:	d516      	bpl.n	8011504 <main+0x9d24>
						&& adaptive_state == 2) {
 80114d6:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 80114da:	2b02      	cmp	r3, #2
 80114dc:	d112      	bne.n	8011504 <main+0x9d24>
					if (HAL_GetTick() - adaptive_entry_tick > adaptive_dwell_period) {
 80114de:	f7f2 fe53 	bl	8004188 <HAL_GetTick>
 80114e2:	4602      	mov	r2, r0
 80114e4:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80114e8:	1ad2      	subs	r2, r2, r3
 80114ea:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d907      	bls.n	8011504 <main+0x9d24>
						adaptive_state = 3;
 80114f4:	2303      	movs	r3, #3
 80114f6:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						adaptive_entry_tick = HAL_GetTick();
 80114fa:	f7f2 fe45 	bl	8004188 <HAL_GetTick>
 80114fe:	4603      	mov	r3, r0
 8011500:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
					}
				}

				if (adaptive_error < adaptive_threshold_low
 8011504:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8011508:	edd3 7a00 	vldr	s15, [r3]
 801150c:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8011510:	ed93 7a00 	vldr	s14, [r3]
 8011514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151c:	d517      	bpl.n	801154e <main+0x9d6e>
						&& adaptive_state == 3) {
 801151e:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011522:	2b03      	cmp	r3, #3
 8011524:	d113      	bne.n	801154e <main+0x9d6e>
					if (HAL_GetTick() - adaptive_entry_tick > 2*adaptive_dwell_period) {
 8011526:	f7f2 fe2f 	bl	8004188 <HAL_GetTick>
 801152a:	4602      	mov	r2, r0
 801152c:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8011536:	6812      	ldr	r2, [r2, #0]
 8011538:	0052      	lsls	r2, r2, #1
 801153a:	4293      	cmp	r3, r2
 801153c:	d907      	bls.n	801154e <main+0x9d6e>
						adaptive_state = 4;
 801153e:	2304      	movs	r3, #4
 8011540:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
						adaptive_entry_tick = HAL_GetTick();
 8011544:	f7f2 fe20 	bl	8004188 <HAL_GetTick>
 8011548:	4603      	mov	r3, r0
 801154a:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
					}
				}

				if (fabs(rotor_position_command_prev - rotor_position_command) > adaptive_threshold_high) {
 801154e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011552:	edd3 7a00 	vldr	s15, [r3]
 8011556:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801155a:	ed93 7a00 	vldr	s14, [r3]
 801155e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011562:	eeb0 7ae7 	vabs.f32	s14, s15
 8011566:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801156a:	edd3 7a00 	vldr	s15, [r3]
 801156e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011576:	dd02      	ble.n	801157e <main+0x9d9e>
					adaptive_state = 1;
 8011578:	2301      	movs	r3, #1
 801157a:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c

				/*
				 * Final state of adaptive mode may be set to mode 1 or mode 3
				 */

				if (adaptive_state == 4 && (adaptive_state_change != adaptive_state)) {
 801157e:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011582:	2b04      	cmp	r3, #4
 8011584:	d174      	bne.n	8011670 <main+0x9e90>
 8011586:	f8d7 2598 	ldr.w	r2, [r7, #1432]	; 0x598
 801158a:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 801158e:	429a      	cmp	r2, r3
 8011590:	d06e      	beq.n	8011670 <main+0x9e90>
					select_suspended_mode = 0;
 8011592:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8011596:	2200      	movs	r2, #0
 8011598:	601a      	str	r2, [r3, #0]
					mode_index = 1;
 801159a:	2301      	movs	r3, #1
 801159c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					proportional = PRIMARY_PROPORTIONAL_MODE_3;
 80115a0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80115a4:	4ac2      	ldr	r2, [pc, #776]	; (80118b0 <main+0xa0d0>)
 80115a6:	601a      	str	r2, [r3, #0]
					integral = PRIMARY_INTEGRAL_MODE_3;
 80115a8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80115ac:	f04f 0200 	mov.w	r2, #0
 80115b0:	601a      	str	r2, [r3, #0]
					derivative = PRIMARY_DERIVATIVE_MODE_3;
 80115b2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80115b6:	4abf      	ldr	r2, [pc, #764]	; (80118b4 <main+0xa0d4>)
 80115b8:	601a      	str	r2, [r3, #0]
					rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_3;
 80115ba:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80115be:	4abe      	ldr	r2, [pc, #760]	; (80118b8 <main+0xa0d8>)
 80115c0:	601a      	str	r2, [r3, #0]
					rotor_i_gain = SECONDARY_INTEGRAL_MODE_3;
 80115c2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80115c6:	f04f 0200 	mov.w	r2, #0
 80115ca:	601a      	str	r2, [r3, #0]
					rotor_d_gain = SECONDARY_DERIVATIVE_MODE_3;
 80115cc:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80115d0:	4aba      	ldr	r2, [pc, #744]	; (80118bc <main+0xa0dc>)
 80115d2:	601a      	str	r2, [r3, #0]
					max_speed = MAX_SPEED_MODE_3;
 80115d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80115d8:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = MIN_SPEED_MODE_3;
 80115dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80115e0:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					pid_filter->p_gain = proportional;
 80115e4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80115e8:	681a      	ldr	r2, [r3, #0]
 80115ea:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = integral;
 80115f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = derivative;
 8011600:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	611a      	str	r2, [r3, #16]

					rotor_pid->p_gain = rotor_p_gain;
 801160e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = rotor_i_gain;
 801161c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = rotor_d_gain;
 801162a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	611a      	str	r2, [r3, #16]
					BSP_MotorControl_SoftStop(0);
 8011638:	2000      	movs	r0, #0
 801163a:	f7f2 fbe9 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 801163e:	2000      	movs	r0, #0
 8011640:	f7f2 fc2a 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8011644:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 8011648:	4619      	mov	r1, r3
 801164a:	2000      	movs	r0, #0
 801164c:	f7f2 fb90 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
					BSP_MotorControl_SetMinSpeed(0, min_speed);
 8011650:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 8011654:	4619      	mov	r1, r3
 8011656:	2000      	movs	r0, #0
 8011658:	f7f2 fbb2 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
					BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 801165c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8011660:	2000      	movs	r0, #0
 8011662:	f7f2 fb13 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 8011666:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801166a:	2000      	movs	r0, #0
 801166c:	f7f2 fb36 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
				}

				if (adaptive_state == 3 && (adaptive_state_change != adaptive_state)) {
 8011670:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011674:	2b03      	cmp	r3, #3
 8011676:	d174      	bne.n	8011762 <main+0x9f82>
 8011678:	f8d7 2598 	ldr.w	r2, [r7, #1432]	; 0x598
 801167c:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011680:	429a      	cmp	r2, r3
 8011682:	d06e      	beq.n	8011762 <main+0x9f82>
					select_suspended_mode = 0;
 8011684:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8011688:	2200      	movs	r2, #0
 801168a:	601a      	str	r2, [r3, #0]
					mode_index = 1;
 801168c:	2301      	movs	r3, #1
 801168e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					proportional = PRIMARY_PROPORTIONAL_MODE_1;
 8011692:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8011696:	4a8a      	ldr	r2, [pc, #552]	; (80118c0 <main+0xa0e0>)
 8011698:	601a      	str	r2, [r3, #0]
					integral = PRIMARY_INTEGRAL_MODE_1;
 801169a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801169e:	f04f 0200 	mov.w	r2, #0
 80116a2:	601a      	str	r2, [r3, #0]
					derivative = PRIMARY_DERIVATIVE_MODE_1;
 80116a4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80116a8:	4a86      	ldr	r2, [pc, #536]	; (80118c4 <main+0xa0e4>)
 80116aa:	601a      	str	r2, [r3, #0]
					rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_1;
 80116ac:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80116b0:	4a81      	ldr	r2, [pc, #516]	; (80118b8 <main+0xa0d8>)
 80116b2:	601a      	str	r2, [r3, #0]
					rotor_i_gain = SECONDARY_INTEGRAL_MODE_1;
 80116b4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80116b8:	f04f 0200 	mov.w	r2, #0
 80116bc:	601a      	str	r2, [r3, #0]
					rotor_d_gain = SECONDARY_DERIVATIVE_MODE_1;
 80116be:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80116c2:	4a81      	ldr	r2, [pc, #516]	; (80118c8 <main+0xa0e8>)
 80116c4:	601a      	str	r2, [r3, #0]
					max_speed = MAX_SPEED_MODE_1;
 80116c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116ca:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = MIN_SPEED_MODE_1;
 80116ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80116d2:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					pid_filter->p_gain = proportional;
 80116d6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = integral;
 80116e4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = derivative;
 80116f2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	611a      	str	r2, [r3, #16]

					rotor_pid->p_gain = rotor_p_gain;
 8011700:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = rotor_i_gain;
 801170e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = rotor_d_gain;
 801171c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	611a      	str	r2, [r3, #16]
					BSP_MotorControl_SoftStop(0);
 801172a:	2000      	movs	r0, #0
 801172c:	f7f2 fb70 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 8011730:	2000      	movs	r0, #0
 8011732:	f7f2 fbb1 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8011736:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 801173a:	4619      	mov	r1, r3
 801173c:	2000      	movs	r0, #0
 801173e:	f7f2 fb17 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
					BSP_MotorControl_SetMinSpeed(0, min_speed);
 8011742:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 8011746:	4619      	mov	r1, r3
 8011748:	2000      	movs	r0, #0
 801174a:	f7f2 fb39 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
					BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 801174e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8011752:	2000      	movs	r0, #0
 8011754:	f7f2 fa9a 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 8011758:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801175c:	2000      	movs	r0, #0
 801175e:	f7f2 fabd 	bl	8003cdc <BSP_MotorControl_SetDeceleration>

				}
				if (adaptive_state == 1 && (adaptive_state_change != adaptive_state)) {
 8011762:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011766:	2b01      	cmp	r3, #1
 8011768:	d174      	bne.n	8011854 <main+0xa074>
 801176a:	f8d7 2598 	ldr.w	r2, [r7, #1432]	; 0x598
 801176e:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011772:	429a      	cmp	r2, r3
 8011774:	d06e      	beq.n	8011854 <main+0xa074>
					select_suspended_mode = 0;
 8011776:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801177a:	2200      	movs	r2, #0
 801177c:	601a      	str	r2, [r3, #0]
					mode_index = 2;
 801177e:	2302      	movs	r3, #2
 8011780:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					proportional = PRIMARY_PROPORTIONAL_MODE_2;
 8011784:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8011788:	4a50      	ldr	r2, [pc, #320]	; (80118cc <main+0xa0ec>)
 801178a:	601a      	str	r2, [r3, #0]
					integral = PRIMARY_INTEGRAL_MODE_2;
 801178c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8011790:	f04f 0200 	mov.w	r2, #0
 8011794:	601a      	str	r2, [r3, #0]
					derivative = PRIMARY_DERIVATIVE_MODE_2;
 8011796:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801179a:	4a4d      	ldr	r2, [pc, #308]	; (80118d0 <main+0xa0f0>)
 801179c:	601a      	str	r2, [r3, #0]
					rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_2;
 801179e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80117a2:	4a45      	ldr	r2, [pc, #276]	; (80118b8 <main+0xa0d8>)
 80117a4:	601a      	str	r2, [r3, #0]
					rotor_i_gain = SECONDARY_INTEGRAL_MODE_2;
 80117a6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80117aa:	f04f 0200 	mov.w	r2, #0
 80117ae:	601a      	str	r2, [r3, #0]
					rotor_d_gain = SECONDARY_DERIVATIVE_MODE_2;
 80117b0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80117b4:	4a47      	ldr	r2, [pc, #284]	; (80118d4 <main+0xa0f4>)
 80117b6:	601a      	str	r2, [r3, #0]
					max_speed = MAX_SPEED_MODE_2;
 80117b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117bc:	f8a7 35f6 	strh.w	r3, [r7, #1526]	; 0x5f6
					min_speed = MIN_SPEED_MODE_2;
 80117c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80117c4:	f8a7 3606 	strh.w	r3, [r7, #1542]	; 0x606
					pid_filter->p_gain = proportional;
 80117c8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	601a      	str	r2, [r3, #0]
					pid_filter->i_gain = integral;
 80117d6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	605a      	str	r2, [r3, #4]
					pid_filter->d_gain = derivative;
 80117e4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	611a      	str	r2, [r3, #16]

					rotor_pid->p_gain = rotor_p_gain;
 80117f2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	601a      	str	r2, [r3, #0]
					rotor_pid->i_gain = rotor_i_gain;
 8011800:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	605a      	str	r2, [r3, #4]
					rotor_pid->d_gain = rotor_d_gain;
 801180e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	611a      	str	r2, [r3, #16]
					BSP_MotorControl_SoftStop(0);
 801181c:	2000      	movs	r0, #0
 801181e:	f7f2 faf7 	bl	8003e10 <BSP_MotorControl_SoftStop>
					BSP_MotorControl_WaitWhileActive(0);
 8011822:	2000      	movs	r0, #0
 8011824:	f7f2 fb38 	bl	8003e98 <BSP_MotorControl_WaitWhileActive>
					BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8011828:	f8b7 35f6 	ldrh.w	r3, [r7, #1526]	; 0x5f6
 801182c:	4619      	mov	r1, r3
 801182e:	2000      	movs	r0, #0
 8011830:	f7f2 fa9e 	bl	8003d70 <BSP_MotorControl_SetMaxSpeed>
					BSP_MotorControl_SetMinSpeed(0, min_speed);
 8011834:	f8b7 3606 	ldrh.w	r3, [r7, #1542]	; 0x606
 8011838:	4619      	mov	r1, r3
 801183a:	2000      	movs	r0, #0
 801183c:	f7f2 fac0 	bl	8003dc0 <BSP_MotorControl_SetMinSpeed>
					BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8011840:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8011844:	2000      	movs	r0, #0
 8011846:	f7f2 fa21 	bl	8003c8c <BSP_MotorControl_SetAcceleration>
					BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 801184a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 801184e:	2000      	movs	r0, #0
 8011850:	f7f2 fa44 	bl	8003cdc <BSP_MotorControl_SetDeceleration>
				}

				adaptive_state_change = adaptive_state;
 8011854:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 8011858:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
			}

			if(i == 0){
 801185c:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	; 0x5e0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d107      	bne.n	8011874 <main+0xa094>
				cycle_period_start = HAL_GetTick();
 8011864:	f7f2 fc90 	bl	8004188 <HAL_GetTick>
 8011868:	4603      	mov	r3, r0
 801186a:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
				cycle_period_sum = 100*T_SAMPLE*1000 - 1;
 801186e:	23c7      	movs	r3, #199	; 0xc7
 8011870:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
			}
			if(i % 100 == 0){
 8011874:	f8d7 25e0 	ldr.w	r2, [r7, #1504]	; 0x5e0
 8011878:	4b17      	ldr	r3, [pc, #92]	; (80118d8 <main+0xa0f8>)
 801187a:	fb83 1302 	smull	r1, r3, r3, r2
 801187e:	1159      	asrs	r1, r3, #5
 8011880:	17d3      	asrs	r3, r2, #31
 8011882:	1acb      	subs	r3, r1, r3
 8011884:	2164      	movs	r1, #100	; 0x64
 8011886:	fb01 f303 	mul.w	r3, r1, r3
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	2b00      	cmp	r3, #0
 801188e:	d129      	bne.n	80118e4 <main+0xa104>
				cycle_period_sum = HAL_GetTick() - cycle_period_start;
 8011890:	f7f2 fc7a 	bl	8004188 <HAL_GetTick>
 8011894:	4602      	mov	r2, r0
 8011896:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
				cycle_period_start = HAL_GetTick();
 80118a0:	f7f2 fc72 	bl	8004188 <HAL_GetTick>
 80118a4:	4603      	mov	r3, r0
 80118a6:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 80118aa:	e01b      	b.n	80118e4 <main+0xa104>
 80118ac:	f3af 8000 	nop.w
 80118b0:	4452a000 	.word	0x4452a000
 80118b4:	42e16666 	.word	0x42e16666
 80118b8:	4087ae14 	.word	0x4087ae14
 80118bc:	410d1eb8 	.word	0x410d1eb8
 80118c0:	44305333 	.word	0x44305333
 80118c4:	42bccccd 	.word	0x42bccccd
 80118c8:	41047ae1 	.word	0x41047ae1
 80118cc:	441d2ccd 	.word	0x441d2ccd
 80118d0:	42a83333 	.word	0x42a83333
 80118d4:	40cc28f6 	.word	0x40cc28f6
 80118d8:	51eb851f 	.word	0x51eb851f
 80118dc:	020c49ba 	.word	0x020c49ba
 80118e0:	4021c72b 	.word	0x4021c72b
			}
			tick = HAL_GetTick();
 80118e4:	f7f2 fc50 	bl	8004188 <HAL_GetTick>
 80118e8:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
			tick_cycle_previous = tick_cycle_current;
 80118ec:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80118f0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80118f4:	601a      	str	r2, [r3, #0]
			tick_cycle_current = tick;
 80118f6:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80118fa:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
			 * Load Disturbance Sensitivity Function signal introduction
			 *
			 * If Load Disturbance Sensitivity Function enabled
			 */

			if (enable_disturbance_rejection_step == 1){
 80118fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b01      	cmp	r3, #1
 8011906:	d111      	bne.n	801192c <main+0xa14c>
				rotor_position_target = rotor_position_target + rotor_position_command;
 8011908:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 801190c:	ee07 3a90 	vmov	s15, r3
 8011910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011914:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011918:	edd3 7a00 	vldr	s15, [r3]
 801191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011924:	ee17 3a90 	vmov	r3, s15
 8011928:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
			/*
			 * Output rate limiter
			 */


			rotor_target_in = rotor_position_target;
 801192c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8011930:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011934:	601a      	str	r2, [r3, #0]

			if(ENABLE_LIMITER == 1){

				if ((rotor_position_target - rotor_position_target_prev) >= LIMITER_THRESHOLD) {
 8011936:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 801193a:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 801193e:	1ad3      	subs	r3, r2, r3
 8011940:	2b01      	cmp	r3, #1
 8011942:	dd15      	ble.n	8011970 <main+0xa190>
					rotor_position_target = rotor_position_target_prev
							+ (rotor_position_target - rotor_position_target_prev) / (LIMITER_SLOPE*LIMITER_THRESHOLD);
 8011944:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011948:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	2b00      	cmp	r3, #0
 8011950:	da00      	bge.n	8011954 <main+0xa174>
 8011952:	330f      	adds	r3, #15
 8011954:	111b      	asrs	r3, r3, #4
 8011956:	461a      	mov	r2, r3
					rotor_position_target = rotor_position_target_prev
 8011958:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 801195c:	4413      	add	r3, r2
 801195e:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
					slope = rotor_position_target - rotor_position_target_prev;
 8011962:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011966:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 801196a:	1ad3      	subs	r3, r2, r3
 801196c:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
				}

				if ((rotor_position_target - rotor_position_target_prev) <= -LIMITER_THRESHOLD) {
 8011970:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011974:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801197e:	da15      	bge.n	80119ac <main+0xa1cc>
					rotor_position_target = rotor_position_target_prev
							+ (rotor_position_target - rotor_position_target_prev) /  (LIMITER_SLOPE*LIMITER_THRESHOLD);
 8011980:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011984:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	da00      	bge.n	8011990 <main+0xa1b0>
 801198e:	330f      	adds	r3, #15
 8011990:	111b      	asrs	r3, r3, #4
 8011992:	461a      	mov	r2, r3
					rotor_position_target = rotor_position_target_prev
 8011994:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011998:	4413      	add	r3, r2
 801199a:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
					slope = rotor_position_target - rotor_position_target_prev;
 801199e:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 80119a2:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
				}


				if (slope_prev < 0 && slope == 0) {
 80119ac:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	da14      	bge.n	80119de <main+0xa1fe>
 80119b4:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d110      	bne.n	80119de <main+0xa1fe>
					rotor_position_target = rotor_position_target_prev
							- 2 * (rotor_position_target - rotor_position_target_prev) /  (LIMITER_SLOPE*LIMITER_THRESHOLD);
 80119bc:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 80119c0:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	da00      	bge.n	80119ce <main+0xa1ee>
 80119cc:	330f      	adds	r3, #15
 80119ce:	111b      	asrs	r3, r3, #4
 80119d0:	425b      	negs	r3, r3
 80119d2:	461a      	mov	r2, r3
					rotor_position_target = rotor_position_target_prev
 80119d4:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80119d8:	4413      	add	r3, r2
 80119da:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
				}
				if (slope_prev > 0 && slope == 0) {
 80119de:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	dd14      	ble.n	8011a10 <main+0xa230>
 80119e6:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d110      	bne.n	8011a10 <main+0xa230>
					rotor_position_target = rotor_position_target_prev
							- 2 * (rotor_position_target - rotor_position_target_prev) /  (LIMITER_SLOPE*LIMITER_THRESHOLD);
 80119ee:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 80119f2:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	005b      	lsls	r3, r3, #1
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	da00      	bge.n	8011a00 <main+0xa220>
 80119fe:	330f      	adds	r3, #15
 8011a00:	111b      	asrs	r3, r3, #4
 8011a02:	425b      	negs	r3, r3
 8011a04:	461a      	mov	r2, r3
					rotor_position_target = rotor_position_target_prev
 8011a06:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011a0a:	4413      	add	r3, r2
 8011a0c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
				}
				slope_prev = slope;
 8011a10:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	; 0x5b0
 8011a14:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
			}

			if (enable_high_speed_sampling == 1 && enable_rotor_chirp == 1){
 8011a18:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d124      	bne.n	8011a6a <main+0xa28a>
 8011a20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b01      	cmp	r3, #1
 8011a28:	d11f      	bne.n	8011a6a <main+0xa28a>
			sprintf(msg, "%i\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011a2a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8011a34:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8011a38:	9301      	str	r3, [sp, #4]
 8011a3a:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	4613      	mov	r3, r2
 8011a44:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	; 0x5d4
 8011a48:	494a      	ldr	r1, [pc, #296]	; (8011b74 <main+0xa394>)
 8011a4a:	f001 f881 	bl	8012b50 <sprintf>
					rotor_position, rotor_target_in,chirp_cycle);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8011a4e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ee fbce 	bl	80001f4 <strlen>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8011a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a64:	4844      	ldr	r0, [pc, #272]	; (8011b78 <main+0xa398>)
 8011a66:	f7f4 ffa5 	bl	80069b4 <HAL_UART_Transmit>
			}

			if (enable_high_speed_sampling == 1 && enable_rotor_chirp == 0){
 8011a6a:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d12d      	bne.n	8011ace <main+0xa2ee>
 8011a72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d128      	bne.n	8011ace <main+0xa2ee>
			sprintf(msg, "%i\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011a7c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011a80:	681a      	ldr	r2, [r3, #0]
					rotor_position, rotor_target_in,100*(int)(rotor_track_comb_command));
 8011a82:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8011a86:	edd3 7a00 	vldr	s15, [r3]
 8011a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a8e:	ee17 1a90 	vmov	r1, s15
			sprintf(msg, "%i\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011a92:	2364      	movs	r3, #100	; 0x64
 8011a94:	fb03 f301 	mul.w	r3, r3, r1
 8011a98:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	; 0x5d4
 8011aac:	4931      	ldr	r1, [pc, #196]	; (8011b74 <main+0xa394>)
 8011aae:	f001 f84f 	bl	8012b50 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8011ab2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ee fb9c 	bl	80001f4 <strlen>
 8011abc:	4603      	mov	r3, r0
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ac8:	482b      	ldr	r0, [pc, #172]	; (8011b78 <main+0xa398>)
 8011aca:	f7f4 ff73 	bl	80069b4 <HAL_UART_Transmit>
			}

			if (i % 10 != 0 && enable_high_speed_sampling == 0){
 8011ace:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8011ad2:	4b2a      	ldr	r3, [pc, #168]	; (8011b7c <main+0xa39c>)
 8011ad4:	fb83 2301 	smull	r2, r3, r3, r1
 8011ad8:	109a      	asrs	r2, r3, #2
 8011ada:	17cb      	asrs	r3, r1, #31
 8011adc:	1ad2      	subs	r2, r2, r3
 8011ade:	4613      	mov	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	1aca      	subs	r2, r1, r3
 8011ae8:	2a00      	cmp	r2, #0
 8011aea:	d006      	beq.n	8011afa <main+0xa31a>
 8011aec:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d102      	bne.n	8011afa <main+0xa31a>
				HAL_Delay(CYCLE_DELAY);
 8011af4:	2001      	movs	r0, #1
 8011af6:	f7f2 fb53 	bl	80041a0 <HAL_Delay>
			}

			if (enable_disturbance_rejection_step == 1) { display_parameter = rotor_position; }
 8011afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d106      	bne.n	8011b12 <main+0xa332>
 8011b04:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8011b08:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8011b0c:	6812      	ldr	r2, [r2, #0]
 8011b0e:	601a      	str	r2, [r3, #0]
 8011b10:	e03c      	b.n	8011b8c <main+0xa3ac>
			else if (enable_noise_rejection_step == 1) { noise_rej_signal = rotor_position_target/10; }
 8011b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	d110      	bne.n	8011b3e <main+0xa35e>
 8011b1c:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8011b20:	4a16      	ldr	r2, [pc, #88]	; (8011b7c <main+0xa39c>)
 8011b22:	fb82 1203 	smull	r1, r2, r2, r3
 8011b26:	1092      	asrs	r2, r2, #2
 8011b28:	17db      	asrs	r3, r3, #31
 8011b2a:	1ad2      	subs	r2, r2, r3
 8011b2c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 8011b30:	ee07 2a90 	vmov	s15, r2
 8011b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b38:	edc3 7a00 	vstr	s15, [r3]
 8011b3c:	e026      	b.n	8011b8c <main+0xa3ac>
			else if (enable_sensitivity_fnc_step == 1)  { display_parameter = rotor_position_command - rotor_position; }
 8011b3e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d11b      	bne.n	8011b80 <main+0xa3a0>
 8011b48:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011b4c:	ed93 7a00 	vldr	s14, [r3]
 8011b50:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	ee07 3a90 	vmov	s15, r3
 8011b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b62:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8011b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b6a:	ee17 2a90 	vmov	r2, s15
 8011b6e:	601a      	str	r2, [r3, #0]
 8011b70:	e00c      	b.n	8011b8c <main+0xa3ac>
 8011b72:	bf00      	nop
 8011b74:	08019af4 	.word	0x08019af4
 8011b78:	20000f20 	.word	0x20000f20
 8011b7c:	66666667 	.word	0x66666667
			else { display_parameter = rotor_position; }
 8011b80:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8011b84:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8011b88:	6812      	ldr	r2, [r2, #0]
 8011b8a:	601a      	str	r2, [r3, #0]


			if (enable_noise_rejection_step == 1){
 8011b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d13c      	bne.n	8011c10 <main+0xa430>
				noise_rej_signal_filter =  noise_rej_signal*iir_0 + noise_rej_signal_prev*iir_1 - noise_rej_signal_filter_prev*iir_2;
 8011b96:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8011b9a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8011b9e:	ed92 7a00 	vldr	s14, [r2]
 8011ba2:	edd3 7a00 	vldr	s15, [r3]
 8011ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011baa:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8011bae:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8011bb2:	edd2 6a00 	vldr	s13, [r2]
 8011bb6:	edd3 7a00 	vldr	s15, [r3]
 8011bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bc2:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 8011bc6:	f507 7358 	add.w	r3, r7, #864	; 0x360
 8011bca:	edd2 6a00 	vldr	s13, [r2]
 8011bce:	edd3 7a00 	vldr	s15, [r3]
 8011bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bd6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8011bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bde:	edc3 7a00 	vstr	s15, [r3]
				noise_rej_signal_filter_prev = noise_rej_signal_filter;
 8011be2:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8011be6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8011bea:	6812      	ldr	r2, [r2, #0]
 8011bec:	601a      	str	r2, [r3, #0]
				noise_rej_signal_prev = noise_rej_signal;
 8011bee:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8011bf2:	f207 5204 	addw	r2, r7, #1284	; 0x504
 8011bf6:	6812      	ldr	r2, [r2, #0]
 8011bf8:	601a      	str	r2, [r3, #0]
				display_parameter = noise_rej_signal_filter;
 8011bfa:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8011bfe:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8011c02:	edd2 7a00 	vldr	s15, [r2]
 8011c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c0a:	ee17 2a90 	vmov	r2, s15
 8011c0e:	601a      	str	r2, [r3, #0]
			}


			if (i % 10 == 0 && enable_high_speed_sampling == 0){
 8011c10:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8011c14:	4bc5      	ldr	r3, [pc, #788]	; (8011f2c <main+0xa74c>)
 8011c16:	fb83 2301 	smull	r2, r3, r3, r1
 8011c1a:	109a      	asrs	r2, r3, #2
 8011c1c:	17cb      	asrs	r3, r1, #31
 8011c1e:	1ad2      	subs	r2, r2, r3
 8011c20:	4613      	mov	r3, r2
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	4413      	add	r3, r2
 8011c26:	005b      	lsls	r3, r3, #1
 8011c28:	1aca      	subs	r2, r1, r3
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	f040 815e 	bne.w	8011eec <main+0xa70c>
 8011c30:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f040 8159 	bne.w	8011eec <main+0xa70c>
				report_mode++;
 8011c3a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8011c3e:	3301      	adds	r3, #1
 8011c40:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
				/*
				 * Provide report each 10th control cycle
				 */
				if (enable_rotor_tracking_comb_signal == 0 && report_mode != 0){
 8011c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d152      	bne.n	8011cf4 <main+0xa514>
 8011c4e:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d04e      	beq.n	8011cf4 <main+0xa514>
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
						(int) (tick_cycle_current - tick_cycle_previous),
 8011c56:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011c5a:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	1ad3      	subs	r3, r2, r3
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011c62:	469a      	mov	sl, r3
 8011c64:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8011c68:	681c      	ldr	r4, [r3, #0]
						encoder_position, display_parameter, (int)(pid_filter->control_output)/10,
 8011c6a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c78:	ee17 1a90 	vmov	r1, s15
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011c7c:	4bab      	ldr	r3, [pc, #684]	; (8011f2c <main+0xa74c>)
 8011c7e:	fb83 2301 	smull	r2, r3, r3, r1
 8011c82:	109a      	asrs	r2, r3, #2
 8011c84:	17cb      	asrs	r3, r1, #31
 8011c86:	1ad5      	subs	r5, r2, r3
 8011c88:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ee fc72 	bl	8000578 <__aeabi_f2d>
 8011c94:	460a      	mov	r2, r1
 8011c96:	4601      	mov	r1, r0
 8011c98:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8011c9c:	48a3      	ldr	r0, [pc, #652]	; (8011f2c <main+0xa74c>)
 8011c9e:	fb80 6003 	smull	r6, r0, r0, r3
 8011ca2:	1080      	asrs	r0, r0, #2
 8011ca4:	17db      	asrs	r3, r3, #31
 8011ca6:	1ac3      	subs	r3, r0, r3
						rotor_position_command, chirp_cycle, rotor_position_target/10,
						(int)(rotor_pid->control_output)/10);
 8011ca8:	f507 7062 	add.w	r0, r7, #904	; 0x388
 8011cac:	6800      	ldr	r0, [r0, #0]
 8011cae:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8011cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011cb6:	ee17 ca90 	vmov	ip, s15
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011cba:	489c      	ldr	r0, [pc, #624]	; (8011f2c <main+0xa74c>)
 8011cbc:	fb80 600c 	smull	r6, r0, r0, ip
 8011cc0:	1086      	asrs	r6, r0, #2
 8011cc2:	ea4f 70ec 	mov.w	r0, ip, asr #31
 8011cc6:	1a30      	subs	r0, r6, r0
 8011cc8:	f507 7607 	add.w	r6, r7, #540	; 0x21c
 8011ccc:	9008      	str	r0, [sp, #32]
 8011cce:	9307      	str	r3, [sp, #28]
 8011cd0:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8011cd4:	9306      	str	r3, [sp, #24]
 8011cd6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011cda:	9502      	str	r5, [sp, #8]
 8011cdc:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	9301      	str	r3, [sp, #4]
 8011ce4:	9400      	str	r4, [sp, #0]
 8011ce6:	4653      	mov	r3, sl
 8011ce8:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	; 0x5d4
 8011cec:	4990      	ldr	r1, [pc, #576]	; (8011f30 <main+0xa750>)
 8011cee:	4630      	mov	r0, r6
 8011cf0:	f000 ff2e 	bl	8012b50 <sprintf>

				/*
				 * Provide report each 200th cycle of system parameters
				 */

				if (enable_rotor_tracking_comb_signal == 0 && report_mode == 20){
 8011cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d150      	bne.n	8011da0 <main+0xa5c0>
 8011cfe:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8011d02:	2b14      	cmp	r3, #20
 8011d04:	d14c      	bne.n	8011da0 <main+0xa5c0>
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
						(int)pid_filter->p_gain, (int)pid_filter->i_gain, (int)pid_filter->d_gain,
 8011d06:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d10:	eebd 8ae7 	vcvt.s32.f32	s16, s15
						(int)pid_filter->p_gain, (int)pid_filter->i_gain, (int)pid_filter->d_gain,
 8011d14:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	edd3 7a01 	vldr	s15, [r3, #4]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d22:	edc7 7a02 	vstr	s15, [r7, #8]
						(int)pid_filter->p_gain, (int)pid_filter->i_gain, (int)pid_filter->d_gain,
 8011d26:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	edd3 7a04 	vldr	s15, [r3, #16]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d34:	edc7 7a01 	vstr	s15, [r7, #4]
						rotor_pid->p_gain, rotor_pid->i_gain, rotor_pid->d_gain,
 8011d38:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	681b      	ldr	r3, [r3, #0]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ee fc19 	bl	8000578 <__aeabi_f2d>
 8011d46:	4604      	mov	r4, r0
 8011d48:	460d      	mov	r5, r1
						rotor_pid->p_gain, rotor_pid->i_gain, rotor_pid->d_gain,
 8011d4a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	685b      	ldr	r3, [r3, #4]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7ee fc10 	bl	8000578 <__aeabi_f2d>
 8011d58:	4682      	mov	sl, r0
 8011d5a:	468b      	mov	fp, r1
						rotor_pid->p_gain, rotor_pid->i_gain, rotor_pid->d_gain,
 8011d5c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	691b      	ldr	r3, [r3, #16]
				sprintf(msg, "%i\t%i\t%i\t%i\t%.1f\t%.1f\t%.1f\t%i\t%i\r\n", 0,
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ee fc07 	bl	8000578 <__aeabi_f2d>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	f8b7 15f6 	ldrh.w	r1, [r7, #1526]	; 0x5f6
 8011d72:	f8b7 0606 	ldrh.w	r0, [r7, #1542]	; 0x606
 8011d76:	f507 7607 	add.w	r6, r7, #540	; 0x21c
 8011d7a:	9009      	str	r0, [sp, #36]	; 0x24
 8011d7c:	9108      	str	r1, [sp, #32]
 8011d7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011d82:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8011d86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	ee18 3a10 	vmov	r3, s16
 8011d96:	2200      	movs	r2, #0
 8011d98:	4966      	ldr	r1, [pc, #408]	; (8011f34 <main+0xa754>)
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f000 fed8 	bl	8012b50 <sprintf>

				/*
				 * Provide report each 400th cycle of system parameters
				 */

				if (enable_rotor_tracking_comb_signal == 0 && report_mode == 40){
 8011da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d139      	bne.n	8011e1e <main+0xa63e>
 8011daa:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8011dae:	2b28      	cmp	r3, #40	; 0x28
 8011db0:	d135      	bne.n	8011e1e <main+0xa63e>
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\r\n", 1,
 8011db2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8011db6:	edd3 7a00 	vldr	s15, [r3]
 8011dba:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8011dbe:	f8b7 35f4 	ldrh.w	r3, [r7, #1524]	; 0x5f4
 8011dc2:	f8b7 25f2 	ldrh.w	r2, [r7, #1522]	; 0x5f2
 8011dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011dca:	6809      	ldr	r1, [r1, #0]
 8011dcc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011dd0:	6800      	ldr	r0, [r0, #0]
 8011dd2:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8011dd6:	6824      	ldr	r4, [r4, #0]
						(int)torq_current_val, max_accel, max_decel, enable_disturbance_rejection_step,
						enable_noise_rejection_step, enable_rotor_position_step_response_cycle,
						(int)(adjust_increment*10), enable_sensitivity_fnc_step);
 8011dd8:	f207 45ec 	addw	r5, r7, #1260	; 0x4ec
 8011ddc:	edd5 7a00 	vldr	s15, [r5]
 8011de0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011de4:	ee67 7a87 	vmul.f32	s15, s15, s14
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\r\n", 1,
 8011de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dec:	edc7 7a02 	vstr	s15, [r7, #8]
 8011df0:	f507 7607 	add.w	r6, r7, #540	; 0x21c
 8011df4:	f507 65a1 	add.w	r5, r7, #1288	; 0x508
 8011df8:	682d      	ldr	r5, [r5, #0]
 8011dfa:	9506      	str	r5, [sp, #24]
 8011dfc:	68bd      	ldr	r5, [r7, #8]
 8011dfe:	9505      	str	r5, [sp, #20]
 8011e00:	9404      	str	r4, [sp, #16]
 8011e02:	9003      	str	r0, [sp, #12]
 8011e04:	9102      	str	r1, [sp, #8]
 8011e06:	9201      	str	r2, [sp, #4]
 8011e08:	9300      	str	r3, [sp, #0]
 8011e0a:	ee16 3a90 	vmov	r3, s13
 8011e0e:	2201      	movs	r2, #1
 8011e10:	4949      	ldr	r1, [pc, #292]	; (8011f38 <main+0xa758>)
 8011e12:	4630      	mov	r0, r6
 8011e14:	f000 fe9c 	bl	8012b50 <sprintf>
						report_mode = 0;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
				/*
				 * If Rotor Tracking Comb Signal enabled, report at rotor_position_command
				 * is replaced with rotor_track_comb_command
				 */

				if (enable_rotor_tracking_comb_signal == 1 && enable_high_speed_sampling == 0){
 8011e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d153      	bne.n	8011ed0 <main+0xa6f0>
 8011e28:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d14f      	bne.n	8011ed0 <main+0xa6f0>
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
						(int) (tick_cycle_current - tick_cycle_previous),
 8011e30:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8011e34:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	1ad3      	subs	r3, r2, r3
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011e3c:	469a      	mov	sl, r3
 8011e3e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8011e42:	681c      	ldr	r4, [r3, #0]
 8011e44:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011e48:	681d      	ldr	r5, [r3, #0]
						encoder_position, rotor_position, (int)(pid_filter->control_output)/10,
 8011e4a:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8011e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e58:	ee17 1a90 	vmov	r1, s15
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011e5c:	4b33      	ldr	r3, [pc, #204]	; (8011f2c <main+0xa74c>)
 8011e5e:	fb83 2301 	smull	r2, r3, r3, r1
 8011e62:	109a      	asrs	r2, r3, #2
 8011e64:	17cb      	asrs	r3, r1, #31
 8011e66:	1ad6      	subs	r6, r2, r3
 8011e68:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8011e6c:	6818      	ldr	r0, [r3, #0]
 8011e6e:	f7ee fb83 	bl	8000578 <__aeabi_f2d>
 8011e72:	460a      	mov	r2, r1
 8011e74:	4601      	mov	r1, r0
 8011e76:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8011e7a:	482c      	ldr	r0, [pc, #176]	; (8011f2c <main+0xa74c>)
 8011e7c:	fb80 c003 	smull	ip, r0, r0, r3
 8011e80:	1080      	asrs	r0, r0, #2
 8011e82:	17db      	asrs	r3, r3, #31
 8011e84:	1ac3      	subs	r3, r0, r3
						rotor_track_comb_command, chirp_cycle, rotor_position_target/10,
						(int)(rotor_pid->control_output)/10);
 8011e86:	f507 7062 	add.w	r0, r7, #904	; 0x388
 8011e8a:	6800      	ldr	r0, [r0, #0]
 8011e8c:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 8011e90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e94:	ee17 ea90 	vmov	lr, s15
				sprintf(msg, "%i\t%i\t%i\t%i\t%i\t%.1f\t%i\t%i\t%i\r\n", cycle_period_sum,
 8011e98:	4824      	ldr	r0, [pc, #144]	; (8011f2c <main+0xa74c>)
 8011e9a:	fb80 c00e 	smull	ip, r0, r0, lr
 8011e9e:	ea4f 0ca0 	mov.w	ip, r0, asr #2
 8011ea2:	ea4f 70ee 	mov.w	r0, lr, asr #31
 8011ea6:	ebac 0000 	sub.w	r0, ip, r0
 8011eaa:	f507 7c07 	add.w	ip, r7, #540	; 0x21c
 8011eae:	9008      	str	r0, [sp, #32]
 8011eb0:	9307      	str	r3, [sp, #28]
 8011eb2:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8011eb6:	9306      	str	r3, [sp, #24]
 8011eb8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011ebc:	9602      	str	r6, [sp, #8]
 8011ebe:	9501      	str	r5, [sp, #4]
 8011ec0:	9400      	str	r4, [sp, #0]
 8011ec2:	4653      	mov	r3, sl
 8011ec4:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	; 0x5d4
 8011ec8:	4919      	ldr	r1, [pc, #100]	; (8011f30 <main+0xa750>)
 8011eca:	4660      	mov	r0, ip
 8011ecc:	f000 fe40 	bl	8012b50 <sprintf>
				}

			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8011ed0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ee f98d 	bl	80001f4 <strlen>
 8011eda:	4603      	mov	r3, r0
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8011ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee6:	4815      	ldr	r0, [pc, #84]	; (8011f3c <main+0xa75c>)
 8011ee8:	f7f4 fd64 	bl	80069b4 <HAL_UART_Transmit>
			}
			/*
			 * Limit maximum excursion in rotor angle at each cycle step
			 */

			rotor_position_delta = ROTOR_POSITION_MAX_DIFF;
 8011eec:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011ef0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011ef4:	601a      	str	r2, [r3, #0]
			rotor_position_target_curr = rotor_position_target;
 8011ef6:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8011efa:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011efe:	601a      	str	r2, [r3, #0]
			if ((rotor_position_target_curr - rotor_position_target_prev)
 8011f00:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011f0a:	1ad2      	subs	r2, r2, r3
					< -rotor_position_delta) {
 8011f0c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	425b      	negs	r3, r3
			if ((rotor_position_target_curr - rotor_position_target_prev)
 8011f14:	429a      	cmp	r2, r3
 8011f16:	da13      	bge.n	8011f40 <main+0xa760>
				rotor_position_target = rotor_position_target_prev
 8011f18:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011f1c:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	1ad3      	subs	r3, r2, r3
 8011f24:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 8011f28:	e01d      	b.n	8011f66 <main+0xa786>
 8011f2a:	bf00      	nop
 8011f2c:	66666667 	.word	0x66666667
 8011f30:	08019b04 	.word	0x08019b04
 8011f34:	08019b24 	.word	0x08019b24
 8011f38:	08019b48 	.word	0x08019b48
 8011f3c:	20000f20 	.word	0x20000f20
						- rotor_position_delta;
			} else if ((rotor_position_target_curr - rotor_position_target_prev)
 8011f40:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 8011f44:	681a      	ldr	r2, [r3, #0]
 8011f46:	f8d7 35e4 	ldr.w	r3, [r7, #1508]	; 0x5e4
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8011f50:	6812      	ldr	r2, [r2, #0]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	da07      	bge.n	8011f66 <main+0xa786>
					> rotor_position_delta) {
				rotor_position_target = rotor_position_target_prev
 8011f56:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8011f5a:	f8d7 25e4 	ldr.w	r2, [r7, #1508]	; 0x5e4
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
						+ rotor_position_delta;
			}

			rotor_position_target_prev = rotor_position_target;
 8011f66:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8011f6a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
			rotor_position_command_prev = rotor_position_command;
 8011f6e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	f207 5294 	addw	r2, r7, #1428	; 0x594
 8011f78:	6013      	str	r3, [r2, #0]

			ret = rotor_position_read(&rotor_position_initial);
 8011f7a:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8011f7e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f5 f9e3 	bl	800734e <rotor_position_read>
 8011f88:	6020      	str	r0, [r4, #0]
			BSP_MotorControl_GoTo(0, -rotor_position_initial + rotor_position_target);
 8011f8a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f8d7 25e8 	ldr.w	r2, [r7, #1512]	; 0x5e8
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	4619      	mov	r1, r3
 8011f98:	2000      	movs	r0, #0
 8011f9a:	f7f1 fe55 	bl	8003c48 <BSP_MotorControl_GoTo>
		while (enable_pid == 1) {
 8011f9e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	f43d a8e0 	beq.w	800f168 <main+0x7988>

		/*
		 * Restore rotor position at low speed profile
		 */

		ret = rotor_position_read(&rotor_position);
 8011fa8:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8011fac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7f5 f9cc 	bl	800734e <rotor_position_read>
 8011fb6:	6020      	str	r0, [r4, #0]
		BSP_MotorControl_GoTo(0, 0);
 8011fb8:	2100      	movs	r1, #0
 8011fba:	2000      	movs	r0, #0
 8011fbc:	f7f1 fe44 	bl	8003c48 <BSP_MotorControl_GoTo>
		BSP_MotorControl_SoftStop(0);
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	f7f1 ff25 	bl	8003e10 <BSP_MotorControl_SoftStop>

		/*
		 * Terminate motor control
		 */

		ret = rotor_position_read(&rotor_position);
 8011fc6:	f507 744c 	add.w	r4, r7, #816	; 0x330
 8011fca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f5 f9bd 	bl	800734e <rotor_position_read>
 8011fd4:	6020      	str	r0, [r4, #0]
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
				(float) ((rotor_position)
						/ STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 8011fd6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7ee fab9 	bl	8000554 <__aeabi_i2d>
 8011fe2:	a317      	add	r3, pc, #92	; (adr r3, 8012040 <main+0xa860>)
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	f7ee fc48 	bl	800087c <__aeabi_ddiv>
 8011fec:	4603      	mov	r3, r0
 8011fee:	460c      	mov	r4, r1
				(float) ((rotor_position)
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	4621      	mov	r1, r4
 8011ff4:	f7ee fe10 	bl	8000c18 <__aeabi_d2f>
 8011ff8:	4603      	mov	r3, r0
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ee fabc 	bl	8000578 <__aeabi_f2d>
 8012000:	4603      	mov	r3, r0
 8012002:	460c      	mov	r4, r1
 8012004:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8012008:	461a      	mov	r2, r3
 801200a:	4623      	mov	r3, r4
 801200c:	490a      	ldr	r1, [pc, #40]	; (8012038 <main+0xa858>)
 801200e:	f000 fd9f 	bl	8012b50 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8012012:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8012016:	4618      	mov	r0, r3
 8012018:	f7ee f8ec 	bl	80001f4 <strlen>
 801201c:	4603      	mov	r3, r0
 801201e:	b29a      	uxth	r2, r3
 8012020:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8012024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012028:	4804      	ldr	r0, [pc, #16]	; (801203c <main+0xa85c>)
 801202a:	f7f4 fcc3 	bl	80069b4 <HAL_UART_Transmit>
	mode_interactive = 0;
 801202e:	f7f6 bdf4 	b.w	8008c1a <main+0x143a>
 8012032:	bf00      	nop
 8012034:	f3af 8000 	nop.w
 8012038:	08019b68 	.word	0x08019b68
 801203c:	20000f20 	.word	0x20000f20
 8012040:	020c49ba 	.word	0x020c49ba
 8012044:	4021c72b 	.word	0x4021c72b

08012048 <Extract_Msg>:
 * @param  BufMaxLen buffer length
 * @param  Msg pointer to the protocol message
 * @retval Number of bytes read if the msg is finished
 */
uint16_t Extract_Msg(uint8_t *CircularBuff, uint16_t StartPos, uint16_t LastPos,
		uint16_t BufMaxLen, T_Serial_Msg *Msg) {
 8012048:	b480      	push	{r7}
 801204a:	b087      	sub	sp, #28
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	4608      	mov	r0, r1
 8012052:	4611      	mov	r1, r2
 8012054:	461a      	mov	r2, r3
 8012056:	4603      	mov	r3, r0
 8012058:	817b      	strh	r3, [r7, #10]
 801205a:	460b      	mov	r3, r1
 801205c:	813b      	strh	r3, [r7, #8]
 801205e:	4613      	mov	r3, r2
 8012060:	80fb      	strh	r3, [r7, #6]
	/* Number of bytes to be analyzed */
	uint16_t NumNewByte = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	82fb      	strh	r3, [r7, #22]
	/* Circular buffer index */
	uint16_t MsgIdx;
	/* Two index for ByteStuffing process  */
	uint16_t BuffIdx;

	if (LastPos >= StartPos) {
 8012066:	893a      	ldrh	r2, [r7, #8]
 8012068:	897b      	ldrh	r3, [r7, #10]
 801206a:	429a      	cmp	r2, r3
 801206c:	d304      	bcc.n	8012078 <Extract_Msg+0x30>
		NumNewByte = LastPos - StartPos;
 801206e:	893a      	ldrh	r2, [r7, #8]
 8012070:	897b      	ldrh	r3, [r7, #10]
 8012072:	1ad3      	subs	r3, r2, r3
 8012074:	82fb      	strh	r3, [r7, #22]
 8012076:	e006      	b.n	8012086 <Extract_Msg+0x3e>
	} else {
		NumNewByte = BufMaxLen + LastPos - StartPos;
 8012078:	88fa      	ldrh	r2, [r7, #6]
 801207a:	893b      	ldrh	r3, [r7, #8]
 801207c:	4413      	add	r3, r2
 801207e:	b29a      	uxth	r2, r3
 8012080:	897b      	ldrh	r3, [r7, #10]
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	82fb      	strh	r3, [r7, #22]
	}
	BuffIdx = StartPos;
 8012086:	897b      	ldrh	r3, [r7, #10]
 8012088:	827b      	strh	r3, [r7, #18]

	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 801208a:	2300      	movs	r3, #0
 801208c:	82bb      	strh	r3, [r7, #20]
 801208e:	e01f      	b.n	80120d0 <Extract_Msg+0x88>
		Data = CircularBuff[BuffIdx];
 8012090:	8a7b      	ldrh	r3, [r7, #18]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	4413      	add	r3, r2
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	747b      	strb	r3, [r7, #17]
		BuffIdx++;
 801209a:	8a7b      	ldrh	r3, [r7, #18]
 801209c:	3301      	adds	r3, #1
 801209e:	827b      	strh	r3, [r7, #18]
		if (BuffIdx >= BufMaxLen) {
 80120a0:	8a7a      	ldrh	r2, [r7, #18]
 80120a2:	88fb      	ldrh	r3, [r7, #6]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d301      	bcc.n	80120ac <Extract_Msg+0x64>
			BuffIdx = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	827b      	strh	r3, [r7, #18]
		}

		/* If End of message is found, start to recompose the message */
		if (Data == SERIAL_MSG_EOF) {
 80120ac:	7c7b      	ldrb	r3, [r7, #17]
 80120ae:	2b0d      	cmp	r3, #13
 80120b0:	d106      	bne.n	80120c0 <Extract_Msg+0x78>
			Msg->Len = MsgIdx;
 80120b2:	8aba      	ldrh	r2, [r7, #20]
 80120b4:	6a3b      	ldr	r3, [r7, #32]
 80120b6:	601a      	str	r2, [r3, #0]
			return MsgIdx + 1;
 80120b8:	8abb      	ldrh	r3, [r7, #20]
 80120ba:	3301      	adds	r3, #1
 80120bc:	b29b      	uxth	r3, r3
 80120be:	e00c      	b.n	80120da <Extract_Msg+0x92>
		} else {
			Msg->Data[MsgIdx] = Data;
 80120c0:	8abb      	ldrh	r3, [r7, #20]
 80120c2:	6a3a      	ldr	r2, [r7, #32]
 80120c4:	4413      	add	r3, r2
 80120c6:	7c7a      	ldrb	r2, [r7, #17]
 80120c8:	711a      	strb	r2, [r3, #4]
	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 80120ca:	8abb      	ldrh	r3, [r7, #20]
 80120cc:	3301      	adds	r3, #1
 80120ce:	82bb      	strh	r3, [r7, #20]
 80120d0:	8aba      	ldrh	r2, [r7, #20]
 80120d2:	8afb      	ldrh	r3, [r7, #22]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d3db      	bcc.n	8012090 <Extract_Msg+0x48>
		}
	}
	return 0;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	371c      	adds	r7, #28
 80120de:	46bd      	mov	sp, r7
 80120e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e4:	4770      	bx	lr
	...

080120e8 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void) {
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b08c      	sub	sp, #48	; 0x30
 80120ec:	af00      	add	r7, sp, #0

	TIM_Encoder_InitTypeDef sConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim3.Instance = TIM3;
 80120ee:	4b20      	ldr	r3, [pc, #128]	; (8012170 <MX_TIM3_Init+0x88>)
 80120f0:	4a20      	ldr	r2, [pc, #128]	; (8012174 <MX_TIM3_Init+0x8c>)
 80120f2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80120f4:	4b1e      	ldr	r3, [pc, #120]	; (8012170 <MX_TIM3_Init+0x88>)
 80120f6:	2200      	movs	r2, #0
 80120f8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120fa:	4b1d      	ldr	r3, [pc, #116]	; (8012170 <MX_TIM3_Init+0x88>)
 80120fc:	2200      	movs	r2, #0
 80120fe:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8012100:	4b1b      	ldr	r3, [pc, #108]	; (8012170 <MX_TIM3_Init+0x88>)
 8012102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012106:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012108:	4b19      	ldr	r3, [pc, #100]	; (8012170 <MX_TIM3_Init+0x88>)
 801210a:	2200      	movs	r2, #0
 801210c:	611a      	str	r2, [r3, #16]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 801210e:	2303      	movs	r3, #3
 8012110:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8012112:	2300      	movs	r3, #0
 8012114:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8012116:	2301      	movs	r3, #1
 8012118:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 801211a:	2300      	movs	r3, #0
 801211c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8012122:	2300      	movs	r3, #0
 8012124:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8012126:	2301      	movs	r3, #1
 8012128:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 801212a:	2300      	movs	r3, #0
 801212c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8012132:	f107 030c 	add.w	r3, r7, #12
 8012136:	4619      	mov	r1, r3
 8012138:	480d      	ldr	r0, [pc, #52]	; (8012170 <MX_TIM3_Init+0x88>)
 801213a:	f7f3 fe91 	bl	8005e60 <HAL_TIM_Encoder_Init>
 801213e:	4603      	mov	r3, r0
 8012140:	2b00      	cmp	r3, #0
 8012142:	d002      	beq.n	801214a <MX_TIM3_Init+0x62>
		Error_Handler(0);
 8012144:	2000      	movs	r0, #0
 8012146:	f000 f895 	bl	8012274 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801214a:	2300      	movs	r3, #0
 801214c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801214e:	2300      	movs	r3, #0
 8012150:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8012152:	1d3b      	adds	r3, r7, #4
 8012154:	4619      	mov	r1, r3
 8012156:	4806      	ldr	r0, [pc, #24]	; (8012170 <MX_TIM3_Init+0x88>)
 8012158:	f7f4 fb86 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d002      	beq.n	8012168 <MX_TIM3_Init+0x80>
			!= HAL_OK) {
		Error_Handler(0);
 8012162:	2000      	movs	r0, #0
 8012164:	f000 f886 	bl	8012274 <Error_Handler>
	}

}
 8012168:	bf00      	nop
 801216a:	3730      	adds	r7, #48	; 0x30
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	20000e1c 	.word	0x20000e1c
 8012174:	40000400 	.word	0x40000400

08012178 <MX_USART2_UART_Init>:

/* USART2 init function */

static void MX_USART2_UART_Init(void) {
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 801217e:	2300      	movs	r3, #0
 8012180:	607b      	str	r3, [r7, #4]
 8012182:	4b31      	ldr	r3, [pc, #196]	; (8012248 <MX_USART2_UART_Init+0xd0>)
 8012184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012186:	4a30      	ldr	r2, [pc, #192]	; (8012248 <MX_USART2_UART_Init+0xd0>)
 8012188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801218c:	6313      	str	r3, [r2, #48]	; 0x30
 801218e:	4b2e      	ldr	r3, [pc, #184]	; (8012248 <MX_USART2_UART_Init+0xd0>)
 8012190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012196:	607b      	str	r3, [r7, #4]
 8012198:	687b      	ldr	r3, [r7, #4]
	;

	huart2.Instance = USART2;
 801219a:	4b2c      	ldr	r3, [pc, #176]	; (801224c <MX_USART2_UART_Init+0xd4>)
 801219c:	4a2c      	ldr	r2, [pc, #176]	; (8012250 <MX_USART2_UART_Init+0xd8>)
 801219e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80121a0:	4b2a      	ldr	r3, [pc, #168]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80121a6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80121a8:	4b28      	ldr	r3, [pc, #160]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80121ae:	4b27      	ldr	r3, [pc, #156]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121b0:	2200      	movs	r2, #0
 80121b2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80121b4:	4b25      	ldr	r3, [pc, #148]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121b6:	2200      	movs	r2, #0
 80121b8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80121ba:	4b24      	ldr	r3, [pc, #144]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121bc:	220c      	movs	r2, #12
 80121be:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80121c0:	4b22      	ldr	r3, [pc, #136]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121c2:	2200      	movs	r2, #0
 80121c4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80121c6:	4b21      	ldr	r3, [pc, #132]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121c8:	2200      	movs	r2, #0
 80121ca:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80121cc:	481f      	ldr	r0, [pc, #124]	; (801224c <MX_USART2_UART_Init+0xd4>)
 80121ce:	f7f4 fba4 	bl	800691a <HAL_UART_Init>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d002      	beq.n	80121de <MX_USART2_UART_Init+0x66>
		Error_Handler(0);
 80121d8:	2000      	movs	r0, #0
 80121da:	f000 f84b 	bl	8012274 <Error_Handler>
	}

	/* USART2 RX DMA Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 80121de:	4b1d      	ldr	r3, [pc, #116]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 80121e0:	4a1d      	ldr	r2, [pc, #116]	; (8012258 <MX_USART2_UART_Init+0xe0>)
 80121e2:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80121e4:	4b1b      	ldr	r3, [pc, #108]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 80121e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80121ea:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80121ec:	4b19      	ldr	r3, [pc, #100]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 80121ee:	2200      	movs	r2, #0
 80121f0:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80121f2:	4b18      	ldr	r3, [pc, #96]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80121f8:	4b16      	ldr	r3, [pc, #88]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 80121fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80121fe:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012200:	4b14      	ldr	r3, [pc, #80]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 8012202:	2200      	movs	r2, #0
 8012204:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012206:	4b13      	ldr	r3, [pc, #76]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 8012208:	2200      	movs	r2, #0
 801220a:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 801220c:	4b11      	ldr	r3, [pc, #68]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 801220e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012212:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012214:	4b0f      	ldr	r3, [pc, #60]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 8012216:	2200      	movs	r2, #0
 8012218:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801221a:	4b0e      	ldr	r3, [pc, #56]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 801221c:	2200      	movs	r2, #0
 801221e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8012220:	480c      	ldr	r0, [pc, #48]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 8012222:	f7f2 f8ed 	bl	8004400 <HAL_DMA_Init>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d002      	beq.n	8012232 <MX_USART2_UART_Init+0xba>
		Error_Handler(0);
 801222c:	2000      	movs	r0, #0
 801222e:	f000 f821 	bl	8012274 <Error_Handler>
	}
	__HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 8012232:	4b06      	ldr	r3, [pc, #24]	; (801224c <MX_USART2_UART_Init+0xd4>)
 8012234:	4a07      	ldr	r2, [pc, #28]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 8012236:	635a      	str	r2, [r3, #52]	; 0x34
 8012238:	4b06      	ldr	r3, [pc, #24]	; (8012254 <MX_USART2_UART_Init+0xdc>)
 801223a:	4a04      	ldr	r2, [pc, #16]	; (801224c <MX_USART2_UART_Init+0xd4>)
 801223c:	639a      	str	r2, [r3, #56]	; 0x38
}
 801223e:	bf00      	nop
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	40023800 	.word	0x40023800
 801224c:	20000f20 	.word	0x20000f20
 8012250:	40004400 	.word	0x40004400
 8012254:	20000d54 	.word	0x20000d54
 8012258:	40026088 	.word	0x40026088

0801225c <MyFlagInterruptHandler>:
/**
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void) {
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af00      	add	r7, sp, #0
	/* Get the value of the status register via the L6474 command GET_STATUS */
	uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8012262:	2000      	movs	r0, #0
 8012264:	f7f1 fe38 	bl	8003ed8 <BSP_MotorControl_CmdGetStatus>
 8012268:	4603      	mov	r3, r0
 801226a:	80fb      	strh	r3, [r7, #6]
	if ((statusRegister & L6474_STATUS_OCD) == 0) {
		//overcurrent detection
		// Action to be customized
	}

}
 801226c:	bf00      	nop
 801226e:	3708      	adds	r7, #8
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <Error_Handler>:
/**
 * @brief  This function is executed in event of error occurrence.
 * @param  error number of the error event
 * @retval None
 */
void Error_Handler(uint16_t error) {
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	80fb      	strh	r3, [r7, #6]
	/* Backup error number */
	gLastError = error;
 801227e:	4a02      	ldr	r2, [pc, #8]	; (8012288 <Error_Handler+0x14>)
 8012280:	88fb      	ldrh	r3, [r7, #6]
 8012282:	8013      	strh	r3, [r2, #0]

	/* Infinite loop */
	while (1) {
 8012284:	e7fe      	b.n	8012284 <Error_Handler+0x10>
 8012286:	bf00      	nop
 8012288:	20000be2 	.word	0x20000be2

0801228c <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08c      	sub	sp, #48	; 0x30
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a31      	ldr	r2, [pc, #196]	; (8012360 <HAL_SPI_MspInit+0xd4>)
 801229a:	4293      	cmp	r3, r2
 801229c:	d15b      	bne.n	8012356 <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 801229e:	2300      	movs	r3, #0
 80122a0:	61bb      	str	r3, [r7, #24]
 80122a2:	4b30      	ldr	r3, [pc, #192]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a6:	4a2f      	ldr	r2, [pc, #188]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122a8:	f043 0301 	orr.w	r3, r3, #1
 80122ac:	6313      	str	r3, [r2, #48]	; 0x30
 80122ae:	4b2d      	ldr	r3, [pc, #180]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122b2:	f003 0301 	and.w	r3, r3, #1
 80122b6:	61bb      	str	r3, [r7, #24]
 80122b8:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 80122ba:	2300      	movs	r3, #0
 80122bc:	617b      	str	r3, [r7, #20]
 80122be:	4b29      	ldr	r3, [pc, #164]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122c2:	4a28      	ldr	r2, [pc, #160]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122c4:	f043 0301 	orr.w	r3, r3, #1
 80122c8:	6313      	str	r3, [r2, #48]	; 0x30
 80122ca:	4b26      	ldr	r3, [pc, #152]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ce:	f003 0301 	and.w	r3, r3, #1
 80122d2:	617b      	str	r3, [r7, #20]
 80122d4:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 80122d6:	2300      	movs	r3, #0
 80122d8:	613b      	str	r3, [r7, #16]
 80122da:	4b22      	ldr	r3, [pc, #136]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122de:	4a21      	ldr	r2, [pc, #132]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122e0:	f043 0301 	orr.w	r3, r3, #1
 80122e4:	6313      	str	r3, [r2, #48]	; 0x30
 80122e6:	4b1f      	ldr	r3, [pc, #124]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122ea:	f003 0301 	and.w	r3, r3, #1
 80122ee:	613b      	str	r3, [r7, #16]
 80122f0:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
 80122f6:	4b1b      	ldr	r3, [pc, #108]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122fa:	4a1a      	ldr	r2, [pc, #104]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 80122fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012300:	6453      	str	r3, [r2, #68]	; 0x44
 8012302:	4b18      	ldr	r3, [pc, #96]	; (8012364 <HAL_SPI_MspInit+0xd8>)
 8012304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801230a:	60fb      	str	r3, [r7, #12]
 801230c:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 801230e:	2320      	movs	r3, #32
 8012310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8012312:	2302      	movs	r3, #2
 8012314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8012316:	2300      	movs	r3, #0
 8012318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 801231a:	2301      	movs	r3, #1
 801231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 801231e:	2305      	movs	r3, #5
 8012320:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8012322:	f107 031c 	add.w	r3, r7, #28
 8012326:	4619      	mov	r1, r3
 8012328:	480f      	ldr	r0, [pc, #60]	; (8012368 <HAL_SPI_MspInit+0xdc>)
 801232a:	f7f2 fbdf 	bl	8004aec <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 801232e:	2340      	movs	r3, #64	; 0x40
 8012330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8012332:	2305      	movs	r3, #5
 8012334:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8012336:	f107 031c 	add.w	r3, r7, #28
 801233a:	4619      	mov	r1, r3
 801233c:	480a      	ldr	r0, [pc, #40]	; (8012368 <HAL_SPI_MspInit+0xdc>)
 801233e:	f7f2 fbd5 	bl	8004aec <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8012342:	2380      	movs	r3, #128	; 0x80
 8012344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8012346:	2305      	movs	r3, #5
 8012348:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 801234a:	f107 031c 	add.w	r3, r7, #28
 801234e:	4619      	mov	r1, r3
 8012350:	4805      	ldr	r0, [pc, #20]	; (8012368 <HAL_SPI_MspInit+0xdc>)
 8012352:	f7f2 fbcb 	bl	8004aec <HAL_GPIO_Init>
  }
}
 8012356:	bf00      	nop
 8012358:	3730      	adds	r7, #48	; 0x30
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	40013000 	.word	0x40013000
 8012364:	40023800 	.word	0x40023800
 8012368:	40020000 	.word	0x40020000

0801236c <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b088      	sub	sp, #32
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801237c:	d123      	bne.n	80123c6 <HAL_TIM_PWM_MspInit+0x5a>
	  {
			GPIO_InitTypeDef GPIO_InitStruct;
			/* Peripheral clock enable */
			__BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 801237e:	2300      	movs	r3, #0
 8012380:	60bb      	str	r3, [r7, #8]
 8012382:	4b13      	ldr	r3, [pc, #76]	; (80123d0 <HAL_TIM_PWM_MspInit+0x64>)
 8012384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012386:	4a12      	ldr	r2, [pc, #72]	; (80123d0 <HAL_TIM_PWM_MspInit+0x64>)
 8012388:	f043 0301 	orr.w	r3, r3, #1
 801238c:	6413      	str	r3, [r2, #64]	; 0x40
 801238e:	4b10      	ldr	r3, [pc, #64]	; (80123d0 <HAL_TIM_PWM_MspInit+0x64>)
 8012390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	60bb      	str	r3, [r7, #8]
 8012398:	68bb      	ldr	r3, [r7, #8]

			/* GPIO configuration */
			GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 801239a:	2380      	movs	r3, #128	; 0x80
 801239c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_AF_PP;
 801239e:	2301      	movs	r3, #1
 80123a0:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 80123a2:	2300      	movs	r3, #0
 80123a4:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80123a6:	2300      	movs	r3, #0
 80123a8:	61bb      	str	r3, [r7, #24]
			//GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
			HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 80123aa:	f107 030c 	add.w	r3, r7, #12
 80123ae:	4619      	mov	r1, r3
 80123b0:	4808      	ldr	r0, [pc, #32]	; (80123d4 <HAL_TIM_PWM_MspInit+0x68>)
 80123b2:	f7f2 fb9b 	bl	8004aec <HAL_GPIO_Init>

			/* Set Interrupt Group Priority of Timer Interrupt*/
			HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 80123b6:	2200      	movs	r2, #0
 80123b8:	2104      	movs	r1, #4
 80123ba:	201c      	movs	r0, #28
 80123bc:	f7f1 ffe9 	bl	8004392 <HAL_NVIC_SetPriority>

			/* Enable the timer global Interrupt */
			HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);
 80123c0:	201c      	movs	r0, #28
 80123c2:	f7f2 f802 	bl	80043ca <HAL_NVIC_EnableIRQ>
	  }
}
 80123c6:	bf00      	nop
 80123c8:	3720      	adds	r7, #32
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	40023800 	.word	0x40023800
 80123d4:	40020800 	.word	0x40020800

080123d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123e8:	d110      	bne.n	801240c <HAL_TIM_PWM_PulseFinishedCallback+0x34>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	7e1b      	ldrb	r3, [r3, #24]
 80123ee:	2b02      	cmp	r3, #2
 80123f0:	d10c      	bne.n	801240c <HAL_TIM_PWM_PulseFinishedCallback+0x34>
  {
	HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 80123f2:	2180      	movs	r1, #128	; 0x80
 80123f4:	4807      	ldr	r0, [pc, #28]	; (8012414 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 80123f6:	f7f2 fd14 	bl	8004e22 <HAL_GPIO_TogglePin>
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 80123fa:	2000      	movs	r0, #0
 80123fc:	f7f1 fbdc 	bl	8003bb8 <BSP_MotorControl_GetDeviceState>
 8012400:	4603      	mov	r3, r0
 8012402:	2b08      	cmp	r3, #8
 8012404:	d002      	beq.n	801240c <HAL_TIM_PWM_PulseFinishedCallback+0x34>
    {
      BSP_MotorControl_StepClockHandler(0);
 8012406:	2000      	movs	r0, #0
 8012408:	f7f1 fd26 	bl	8003e58 <BSP_MotorControl_StepClockHandler>
    }
  }
}
 801240c:	bf00      	nop
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	40020800 	.word	0x40020800

08012418 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b088      	sub	sp, #32
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4a12      	ldr	r2, [pc, #72]	; (8012470 <HAL_TIM_Encoder_MspInit+0x58>)
 8012426:	4293      	cmp	r3, r2
 8012428:	d11d      	bne.n	8012466 <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801242a:	2300      	movs	r3, #0
 801242c:	60bb      	str	r3, [r7, #8]
 801242e:	4b11      	ldr	r3, [pc, #68]	; (8012474 <HAL_TIM_Encoder_MspInit+0x5c>)
 8012430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012432:	4a10      	ldr	r2, [pc, #64]	; (8012474 <HAL_TIM_Encoder_MspInit+0x5c>)
 8012434:	f043 0302 	orr.w	r3, r3, #2
 8012438:	6413      	str	r3, [r2, #64]	; 0x40
 801243a:	4b0e      	ldr	r3, [pc, #56]	; (8012474 <HAL_TIM_Encoder_MspInit+0x5c>)
 801243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243e:	f003 0302 	and.w	r3, r3, #2
 8012442:	60bb      	str	r3, [r7, #8]
 8012444:	68bb      	ldr	r3, [r7, #8]

    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8012446:	2330      	movs	r3, #48	; 0x30
 8012448:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801244a:	2302      	movs	r3, #2
 801244c:	613b      	str	r3, [r7, #16]
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
       /*
        * Pull Up Set for Encoder with Open Collector Output
        */
       GPIO_InitStruct.Pull = GPIO_PULLUP;
 801244e:	2301      	movs	r3, #1
 8012450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012452:	2303      	movs	r3, #3
 8012454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012456:	2302      	movs	r3, #2
 8012458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801245a:	f107 030c 	add.w	r3, r7, #12
 801245e:	4619      	mov	r1, r3
 8012460:	4805      	ldr	r0, [pc, #20]	; (8012478 <HAL_TIM_Encoder_MspInit+0x60>)
 8012462:	f7f2 fb43 	bl	8004aec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8012466:	bf00      	nop
 8012468:	3720      	adds	r7, #32
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	40000400 	.word	0x40000400
 8012474:	40023800 	.word	0x40023800
 8012478:	40020400 	.word	0x40020400

0801247c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b088      	sub	sp, #32
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4a16      	ldr	r2, [pc, #88]	; (80124e4 <HAL_UART_MspInit+0x68>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d125      	bne.n	80124da <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801248e:	2300      	movs	r3, #0
 8012490:	60bb      	str	r3, [r7, #8]
 8012492:	4b15      	ldr	r3, [pc, #84]	; (80124e8 <HAL_UART_MspInit+0x6c>)
 8012494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012496:	4a14      	ldr	r2, [pc, #80]	; (80124e8 <HAL_UART_MspInit+0x6c>)
 8012498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801249c:	6413      	str	r3, [r2, #64]	; 0x40
 801249e:	4b12      	ldr	r3, [pc, #72]	; (80124e8 <HAL_UART_MspInit+0x6c>)
 80124a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80124a6:	60bb      	str	r3, [r7, #8]
 80124a8:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80124aa:	230c      	movs	r3, #12
 80124ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124ae:	2302      	movs	r3, #2
 80124b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124b2:	2300      	movs	r3, #0
 80124b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80124b6:	2302      	movs	r3, #2
 80124b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80124ba:	2307      	movs	r3, #7
 80124bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124be:	f107 030c 	add.w	r3, r7, #12
 80124c2:	4619      	mov	r1, r3
 80124c4:	4809      	ldr	r0, [pc, #36]	; (80124ec <HAL_UART_MspInit+0x70>)
 80124c6:	f7f2 fb11 	bl	8004aec <HAL_GPIO_Init>

    /* Configure the NVIC for UART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80124ca:	2201      	movs	r2, #1
 80124cc:	2100      	movs	r1, #0
 80124ce:	2026      	movs	r0, #38	; 0x26
 80124d0:	f7f1 ff5f 	bl	8004392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80124d4:	2026      	movs	r0, #38	; 0x26
 80124d6:	f7f1 ff78 	bl	80043ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80124da:	bf00      	nop
 80124dc:	3720      	adds	r7, #32
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	40004400 	.word	0x40004400
 80124e8:	40023800 	.word	0x40023800
 80124ec:	40020000 	.word	0x40020000

080124f0 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	4603      	mov	r3, r0
 80124f8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 80124fa:	88fb      	ldrh	r3, [r7, #6]
 80124fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012500:	d101      	bne.n	8012506 <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8012502:	f7f1 fad5 	bl	8003ab0 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8012506:	bf00      	nop
 8012508:	3708      	adds	r7, #8
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}

0801250e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 801250e:	b480      	push	{r7}
 8012510:	af00      	add	r7, sp, #0
}
 8012512:	bf00      	nop
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 801251c:	b480      	push	{r7}
 801251e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8012520:	e7fe      	b.n	8012520 <HardFault_Handler+0x4>

08012522 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8012522:	b480      	push	{r7}
 8012524:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8012526:	e7fe      	b.n	8012526 <MemManage_Handler+0x4>

08012528 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8012528:	b480      	push	{r7}
 801252a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 801252c:	e7fe      	b.n	801252c <BusFault_Handler+0x4>

0801252e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801252e:	b480      	push	{r7}
 8012530:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8012532:	e7fe      	b.n	8012532 <UsageFault_Handler+0x4>

08012534 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8012534:	b480      	push	{r7}
 8012536:	af00      	add	r7, sp, #0
}
 8012538:	bf00      	nop
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr

08012542 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8012542:	b480      	push	{r7}
 8012544:	af00      	add	r7, sp, #0
}
 8012546:	bf00      	nop
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8012550:	b480      	push	{r7}
 8012552:	af00      	add	r7, sp, #0
}
 8012554:	bf00      	nop
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr

0801255e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801255e:	b580      	push	{r7, lr}
 8012560:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8012562:	f7f1 fdfd 	bl	8004160 <HAL_IncTick>
}
 8012566:	bf00      	nop
 8012568:	bd80      	pop	{r7, pc}

0801256a <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 801256a:	b580      	push	{r7, lr}
 801256c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 801256e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012572:	f7f2 fc69 	bl	8004e48 <HAL_GPIO_EXTI_IRQHandler>
}
 8012576:	bf00      	nop
 8012578:	bd80      	pop	{r7, pc}
	...

0801257c <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 8012580:	4802      	ldr	r0, [pc, #8]	; (801258c <TIM2_IRQHandler+0x10>)
 8012582:	f7f3 fd3a 	bl	8005ffa <HAL_TIM_IRQHandler>
}
 8012586:	bf00      	nop
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	20000c9c 	.word	0x20000c9c

08012590 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 8012594:	4802      	ldr	r0, [pc, #8]	; (80125a0 <TIM3_IRQHandler+0x10>)
 8012596:	f7f3 fd30 	bl	8005ffa <HAL_TIM_IRQHandler>
}
 801259a:	bf00      	nop
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20000d14 	.word	0x20000d14

080125a4 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 80125a8:	4802      	ldr	r0, [pc, #8]	; (80125b4 <TIM4_IRQHandler+0x10>)
 80125aa:	f7f3 fd26 	bl	8005ffa <HAL_TIM_IRQHandler>
}
 80125ae:	bf00      	nop
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	20000cd8 	.word	0x20000cd8

080125b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80125bc:	4802      	ldr	r0, [pc, #8]	; (80125c8 <DMA1_Stream5_IRQHandler+0x10>)
 80125be:	f7f2 f82d 	bl	800461c <HAL_DMA_IRQHandler>
}
 80125c2:	bf00      	nop
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	20000d54 	.word	0x20000d54

080125cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80125cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80125d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80125d2:	e003      	b.n	80125dc <LoopCopyDataInit>

080125d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80125d4:	4b0c      	ldr	r3, [pc, #48]	; (8012608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80125d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80125d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80125da:	3104      	adds	r1, #4

080125dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80125dc:	480b      	ldr	r0, [pc, #44]	; (801260c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80125de:	4b0c      	ldr	r3, [pc, #48]	; (8012610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80125e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80125e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80125e4:	d3f6      	bcc.n	80125d4 <CopyDataInit>
  ldr  r2, =_sbss
 80125e6:	4a0b      	ldr	r2, [pc, #44]	; (8012614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80125e8:	e002      	b.n	80125f0 <LoopFillZerobss>

080125ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80125ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80125ec:	f842 3b04 	str.w	r3, [r2], #4

080125f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80125f0:	4b09      	ldr	r3, [pc, #36]	; (8012618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80125f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80125f4:	d3f9      	bcc.n	80125ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80125f6:	f7f1 fd23 	bl	8004040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80125fa:	f000 f817 	bl	801262c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80125fe:	f7f5 f8ef 	bl	80077e0 <main>
  bx  lr    
 8012602:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8012604:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8012608:	0801a03c 	.word	0x0801a03c
  ldr  r0, =_sdata
 801260c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012610:	20000b48 	.word	0x20000b48
  ldr  r2, =_sbss
 8012614:	20000b48 	.word	0x20000b48
  ldr  r3, = _ebss
 8012618:	20001070 	.word	0x20001070

0801261c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801261c:	e7fe      	b.n	801261c <ADC_IRQHandler>

0801261e <atof>:
 801261e:	2100      	movs	r1, #0
 8012620:	f001 b8ce 	b.w	80137c0 <strtod>

08012624 <atoi>:
 8012624:	220a      	movs	r2, #10
 8012626:	2100      	movs	r1, #0
 8012628:	f001 b95a 	b.w	80138e0 <strtol>

0801262c <__libc_init_array>:
 801262c:	b570      	push	{r4, r5, r6, lr}
 801262e:	4e0d      	ldr	r6, [pc, #52]	; (8012664 <__libc_init_array+0x38>)
 8012630:	4c0d      	ldr	r4, [pc, #52]	; (8012668 <__libc_init_array+0x3c>)
 8012632:	1ba4      	subs	r4, r4, r6
 8012634:	10a4      	asrs	r4, r4, #2
 8012636:	2500      	movs	r5, #0
 8012638:	42a5      	cmp	r5, r4
 801263a:	d109      	bne.n	8012650 <__libc_init_array+0x24>
 801263c:	4e0b      	ldr	r6, [pc, #44]	; (801266c <__libc_init_array+0x40>)
 801263e:	4c0c      	ldr	r4, [pc, #48]	; (8012670 <__libc_init_array+0x44>)
 8012640:	f005 fdb2 	bl	80181a8 <_init>
 8012644:	1ba4      	subs	r4, r4, r6
 8012646:	10a4      	asrs	r4, r4, #2
 8012648:	2500      	movs	r5, #0
 801264a:	42a5      	cmp	r5, r4
 801264c:	d105      	bne.n	801265a <__libc_init_array+0x2e>
 801264e:	bd70      	pop	{r4, r5, r6, pc}
 8012650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012654:	4798      	blx	r3
 8012656:	3501      	adds	r5, #1
 8012658:	e7ee      	b.n	8012638 <__libc_init_array+0xc>
 801265a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801265e:	4798      	blx	r3
 8012660:	3501      	adds	r5, #1
 8012662:	e7f2      	b.n	801264a <__libc_init_array+0x1e>
 8012664:	0801a030 	.word	0x0801a030
 8012668:	0801a030 	.word	0x0801a030
 801266c:	0801a030 	.word	0x0801a030
 8012670:	0801a038 	.word	0x0801a038

08012674 <malloc>:
 8012674:	4b02      	ldr	r3, [pc, #8]	; (8012680 <malloc+0xc>)
 8012676:	4601      	mov	r1, r0
 8012678:	6818      	ldr	r0, [r3, #0]
 801267a:	f000 b803 	b.w	8012684 <_malloc_r>
 801267e:	bf00      	nop
 8012680:	2000019c 	.word	0x2000019c

08012684 <_malloc_r>:
 8012684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012688:	f101 050b 	add.w	r5, r1, #11
 801268c:	2d16      	cmp	r5, #22
 801268e:	4606      	mov	r6, r0
 8012690:	d906      	bls.n	80126a0 <_malloc_r+0x1c>
 8012692:	f035 0507 	bics.w	r5, r5, #7
 8012696:	d504      	bpl.n	80126a2 <_malloc_r+0x1e>
 8012698:	230c      	movs	r3, #12
 801269a:	6033      	str	r3, [r6, #0]
 801269c:	2400      	movs	r4, #0
 801269e:	e1a8      	b.n	80129f2 <_malloc_r+0x36e>
 80126a0:	2510      	movs	r5, #16
 80126a2:	428d      	cmp	r5, r1
 80126a4:	d3f8      	bcc.n	8012698 <_malloc_r+0x14>
 80126a6:	4630      	mov	r0, r6
 80126a8:	f000 fa36 	bl	8012b18 <__malloc_lock>
 80126ac:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80126b0:	4fc0      	ldr	r7, [pc, #768]	; (80129b4 <_malloc_r+0x330>)
 80126b2:	d238      	bcs.n	8012726 <_malloc_r+0xa2>
 80126b4:	f105 0208 	add.w	r2, r5, #8
 80126b8:	443a      	add	r2, r7
 80126ba:	f1a2 0108 	sub.w	r1, r2, #8
 80126be:	6854      	ldr	r4, [r2, #4]
 80126c0:	428c      	cmp	r4, r1
 80126c2:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80126c6:	d102      	bne.n	80126ce <_malloc_r+0x4a>
 80126c8:	68d4      	ldr	r4, [r2, #12]
 80126ca:	42a2      	cmp	r2, r4
 80126cc:	d010      	beq.n	80126f0 <_malloc_r+0x6c>
 80126ce:	6863      	ldr	r3, [r4, #4]
 80126d0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80126d4:	f023 0303 	bic.w	r3, r3, #3
 80126d8:	60ca      	str	r2, [r1, #12]
 80126da:	4423      	add	r3, r4
 80126dc:	6091      	str	r1, [r2, #8]
 80126de:	685a      	ldr	r2, [r3, #4]
 80126e0:	f042 0201 	orr.w	r2, r2, #1
 80126e4:	605a      	str	r2, [r3, #4]
 80126e6:	4630      	mov	r0, r6
 80126e8:	f000 fa1c 	bl	8012b24 <__malloc_unlock>
 80126ec:	3408      	adds	r4, #8
 80126ee:	e180      	b.n	80129f2 <_malloc_r+0x36e>
 80126f0:	3302      	adds	r3, #2
 80126f2:	4ab1      	ldr	r2, [pc, #708]	; (80129b8 <_malloc_r+0x334>)
 80126f4:	693c      	ldr	r4, [r7, #16]
 80126f6:	4294      	cmp	r4, r2
 80126f8:	4611      	mov	r1, r2
 80126fa:	d075      	beq.n	80127e8 <_malloc_r+0x164>
 80126fc:	6860      	ldr	r0, [r4, #4]
 80126fe:	f020 0c03 	bic.w	ip, r0, #3
 8012702:	ebac 0005 	sub.w	r0, ip, r5
 8012706:	280f      	cmp	r0, #15
 8012708:	dd48      	ble.n	801279c <_malloc_r+0x118>
 801270a:	1963      	adds	r3, r4, r5
 801270c:	f045 0501 	orr.w	r5, r5, #1
 8012710:	6065      	str	r5, [r4, #4]
 8012712:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8012716:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801271a:	f040 0201 	orr.w	r2, r0, #1
 801271e:	605a      	str	r2, [r3, #4]
 8012720:	f844 000c 	str.w	r0, [r4, ip]
 8012724:	e7df      	b.n	80126e6 <_malloc_r+0x62>
 8012726:	0a6b      	lsrs	r3, r5, #9
 8012728:	d02a      	beq.n	8012780 <_malloc_r+0xfc>
 801272a:	2b04      	cmp	r3, #4
 801272c:	d812      	bhi.n	8012754 <_malloc_r+0xd0>
 801272e:	09ab      	lsrs	r3, r5, #6
 8012730:	3338      	adds	r3, #56	; 0x38
 8012732:	1c5a      	adds	r2, r3, #1
 8012734:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8012738:	f1a2 0c08 	sub.w	ip, r2, #8
 801273c:	6854      	ldr	r4, [r2, #4]
 801273e:	4564      	cmp	r4, ip
 8012740:	d006      	beq.n	8012750 <_malloc_r+0xcc>
 8012742:	6862      	ldr	r2, [r4, #4]
 8012744:	f022 0203 	bic.w	r2, r2, #3
 8012748:	1b50      	subs	r0, r2, r5
 801274a:	280f      	cmp	r0, #15
 801274c:	dd1c      	ble.n	8012788 <_malloc_r+0x104>
 801274e:	3b01      	subs	r3, #1
 8012750:	3301      	adds	r3, #1
 8012752:	e7ce      	b.n	80126f2 <_malloc_r+0x6e>
 8012754:	2b14      	cmp	r3, #20
 8012756:	d801      	bhi.n	801275c <_malloc_r+0xd8>
 8012758:	335b      	adds	r3, #91	; 0x5b
 801275a:	e7ea      	b.n	8012732 <_malloc_r+0xae>
 801275c:	2b54      	cmp	r3, #84	; 0x54
 801275e:	d802      	bhi.n	8012766 <_malloc_r+0xe2>
 8012760:	0b2b      	lsrs	r3, r5, #12
 8012762:	336e      	adds	r3, #110	; 0x6e
 8012764:	e7e5      	b.n	8012732 <_malloc_r+0xae>
 8012766:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801276a:	d802      	bhi.n	8012772 <_malloc_r+0xee>
 801276c:	0beb      	lsrs	r3, r5, #15
 801276e:	3377      	adds	r3, #119	; 0x77
 8012770:	e7df      	b.n	8012732 <_malloc_r+0xae>
 8012772:	f240 5254 	movw	r2, #1364	; 0x554
 8012776:	4293      	cmp	r3, r2
 8012778:	d804      	bhi.n	8012784 <_malloc_r+0x100>
 801277a:	0cab      	lsrs	r3, r5, #18
 801277c:	337c      	adds	r3, #124	; 0x7c
 801277e:	e7d8      	b.n	8012732 <_malloc_r+0xae>
 8012780:	233f      	movs	r3, #63	; 0x3f
 8012782:	e7d6      	b.n	8012732 <_malloc_r+0xae>
 8012784:	237e      	movs	r3, #126	; 0x7e
 8012786:	e7d4      	b.n	8012732 <_malloc_r+0xae>
 8012788:	2800      	cmp	r0, #0
 801278a:	68e1      	ldr	r1, [r4, #12]
 801278c:	db04      	blt.n	8012798 <_malloc_r+0x114>
 801278e:	68a3      	ldr	r3, [r4, #8]
 8012790:	60d9      	str	r1, [r3, #12]
 8012792:	608b      	str	r3, [r1, #8]
 8012794:	18a3      	adds	r3, r4, r2
 8012796:	e7a2      	b.n	80126de <_malloc_r+0x5a>
 8012798:	460c      	mov	r4, r1
 801279a:	e7d0      	b.n	801273e <_malloc_r+0xba>
 801279c:	2800      	cmp	r0, #0
 801279e:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80127a2:	db07      	blt.n	80127b4 <_malloc_r+0x130>
 80127a4:	44a4      	add	ip, r4
 80127a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80127aa:	f043 0301 	orr.w	r3, r3, #1
 80127ae:	f8cc 3004 	str.w	r3, [ip, #4]
 80127b2:	e798      	b.n	80126e6 <_malloc_r+0x62>
 80127b4:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80127b8:	6878      	ldr	r0, [r7, #4]
 80127ba:	f080 8099 	bcs.w	80128f0 <_malloc_r+0x26c>
 80127be:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80127c2:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80127c6:	2201      	movs	r2, #1
 80127c8:	f10c 0c01 	add.w	ip, ip, #1
 80127cc:	fa02 f20e 	lsl.w	r2, r2, lr
 80127d0:	4310      	orrs	r0, r2
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80127d8:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80127dc:	3a08      	subs	r2, #8
 80127de:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80127e2:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80127e6:	60c4      	str	r4, [r0, #12]
 80127e8:	2001      	movs	r0, #1
 80127ea:	109a      	asrs	r2, r3, #2
 80127ec:	fa00 f202 	lsl.w	r2, r0, r2
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	4290      	cmp	r0, r2
 80127f4:	d326      	bcc.n	8012844 <_malloc_r+0x1c0>
 80127f6:	4210      	tst	r0, r2
 80127f8:	d106      	bne.n	8012808 <_malloc_r+0x184>
 80127fa:	f023 0303 	bic.w	r3, r3, #3
 80127fe:	0052      	lsls	r2, r2, #1
 8012800:	4210      	tst	r0, r2
 8012802:	f103 0304 	add.w	r3, r3, #4
 8012806:	d0fa      	beq.n	80127fe <_malloc_r+0x17a>
 8012808:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 801280c:	46e1      	mov	r9, ip
 801280e:	4698      	mov	r8, r3
 8012810:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012814:	454c      	cmp	r4, r9
 8012816:	f040 80af 	bne.w	8012978 <_malloc_r+0x2f4>
 801281a:	f108 0801 	add.w	r8, r8, #1
 801281e:	f018 0f03 	tst.w	r8, #3
 8012822:	f109 0908 	add.w	r9, r9, #8
 8012826:	d1f3      	bne.n	8012810 <_malloc_r+0x18c>
 8012828:	0798      	lsls	r0, r3, #30
 801282a:	f040 80e8 	bne.w	80129fe <_malloc_r+0x37a>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	ea23 0302 	bic.w	r3, r3, r2
 8012834:	607b      	str	r3, [r7, #4]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	0052      	lsls	r2, r2, #1
 801283a:	4290      	cmp	r0, r2
 801283c:	d302      	bcc.n	8012844 <_malloc_r+0x1c0>
 801283e:	2a00      	cmp	r2, #0
 8012840:	f040 80ec 	bne.w	8012a1c <_malloc_r+0x398>
 8012844:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012848:	f8da 4004 	ldr.w	r4, [sl, #4]
 801284c:	f024 0203 	bic.w	r2, r4, #3
 8012850:	42aa      	cmp	r2, r5
 8012852:	d303      	bcc.n	801285c <_malloc_r+0x1d8>
 8012854:	1b53      	subs	r3, r2, r5
 8012856:	2b0f      	cmp	r3, #15
 8012858:	f300 8140 	bgt.w	8012adc <_malloc_r+0x458>
 801285c:	4b57      	ldr	r3, [pc, #348]	; (80129bc <_malloc_r+0x338>)
 801285e:	9200      	str	r2, [sp, #0]
 8012860:	2008      	movs	r0, #8
 8012862:	681c      	ldr	r4, [r3, #0]
 8012864:	f002 fa72 	bl	8014d4c <sysconf>
 8012868:	4b55      	ldr	r3, [pc, #340]	; (80129c0 <_malloc_r+0x33c>)
 801286a:	9a00      	ldr	r2, [sp, #0]
 801286c:	6819      	ldr	r1, [r3, #0]
 801286e:	3410      	adds	r4, #16
 8012870:	3101      	adds	r1, #1
 8012872:	442c      	add	r4, r5
 8012874:	bf1f      	itttt	ne
 8012876:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 801287a:	1824      	addne	r4, r4, r0
 801287c:	4241      	negne	r1, r0
 801287e:	400c      	andne	r4, r1
 8012880:	4680      	mov	r8, r0
 8012882:	4621      	mov	r1, r4
 8012884:	4630      	mov	r0, r6
 8012886:	e9cd 2300 	strd	r2, r3, [sp]
 801288a:	f000 f951 	bl	8012b30 <_sbrk_r>
 801288e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012892:	4683      	mov	fp, r0
 8012894:	f000 80fb 	beq.w	8012a8e <_malloc_r+0x40a>
 8012898:	9a00      	ldr	r2, [sp, #0]
 801289a:	9b01      	ldr	r3, [sp, #4]
 801289c:	eb0a 0102 	add.w	r1, sl, r2
 80128a0:	4281      	cmp	r1, r0
 80128a2:	d902      	bls.n	80128aa <_malloc_r+0x226>
 80128a4:	45ba      	cmp	sl, r7
 80128a6:	f040 80f2 	bne.w	8012a8e <_malloc_r+0x40a>
 80128aa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80129cc <_malloc_r+0x348>
 80128ae:	f8d9 0000 	ldr.w	r0, [r9]
 80128b2:	4559      	cmp	r1, fp
 80128b4:	eb00 0e04 	add.w	lr, r0, r4
 80128b8:	f8c9 e000 	str.w	lr, [r9]
 80128bc:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 80128c0:	f040 80ae 	bne.w	8012a20 <_malloc_r+0x39c>
 80128c4:	ea11 0f0c 	tst.w	r1, ip
 80128c8:	f040 80aa 	bne.w	8012a20 <_malloc_r+0x39c>
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	4414      	add	r4, r2
 80128d0:	f044 0401 	orr.w	r4, r4, #1
 80128d4:	605c      	str	r4, [r3, #4]
 80128d6:	4a3b      	ldr	r2, [pc, #236]	; (80129c4 <_malloc_r+0x340>)
 80128d8:	f8d9 3000 	ldr.w	r3, [r9]
 80128dc:	6811      	ldr	r1, [r2, #0]
 80128de:	428b      	cmp	r3, r1
 80128e0:	bf88      	it	hi
 80128e2:	6013      	strhi	r3, [r2, #0]
 80128e4:	4a38      	ldr	r2, [pc, #224]	; (80129c8 <_malloc_r+0x344>)
 80128e6:	6811      	ldr	r1, [r2, #0]
 80128e8:	428b      	cmp	r3, r1
 80128ea:	bf88      	it	hi
 80128ec:	6013      	strhi	r3, [r2, #0]
 80128ee:	e0ce      	b.n	8012a8e <_malloc_r+0x40a>
 80128f0:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80128f4:	2a04      	cmp	r2, #4
 80128f6:	d818      	bhi.n	801292a <_malloc_r+0x2a6>
 80128f8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80128fc:	3238      	adds	r2, #56	; 0x38
 80128fe:	f102 0e01 	add.w	lr, r2, #1
 8012902:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8012906:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 801290a:	45f0      	cmp	r8, lr
 801290c:	d12b      	bne.n	8012966 <_malloc_r+0x2e2>
 801290e:	1092      	asrs	r2, r2, #2
 8012910:	f04f 0c01 	mov.w	ip, #1
 8012914:	fa0c f202 	lsl.w	r2, ip, r2
 8012918:	4310      	orrs	r0, r2
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012920:	f8c8 4008 	str.w	r4, [r8, #8]
 8012924:	f8ce 400c 	str.w	r4, [lr, #12]
 8012928:	e75e      	b.n	80127e8 <_malloc_r+0x164>
 801292a:	2a14      	cmp	r2, #20
 801292c:	d801      	bhi.n	8012932 <_malloc_r+0x2ae>
 801292e:	325b      	adds	r2, #91	; 0x5b
 8012930:	e7e5      	b.n	80128fe <_malloc_r+0x27a>
 8012932:	2a54      	cmp	r2, #84	; 0x54
 8012934:	d803      	bhi.n	801293e <_malloc_r+0x2ba>
 8012936:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801293a:	326e      	adds	r2, #110	; 0x6e
 801293c:	e7df      	b.n	80128fe <_malloc_r+0x27a>
 801293e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8012942:	d803      	bhi.n	801294c <_malloc_r+0x2c8>
 8012944:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8012948:	3277      	adds	r2, #119	; 0x77
 801294a:	e7d8      	b.n	80128fe <_malloc_r+0x27a>
 801294c:	f240 5e54 	movw	lr, #1364	; 0x554
 8012950:	4572      	cmp	r2, lr
 8012952:	bf9a      	itte	ls
 8012954:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8012958:	327c      	addls	r2, #124	; 0x7c
 801295a:	227e      	movhi	r2, #126	; 0x7e
 801295c:	e7cf      	b.n	80128fe <_malloc_r+0x27a>
 801295e:	f8de e008 	ldr.w	lr, [lr, #8]
 8012962:	45f0      	cmp	r8, lr
 8012964:	d005      	beq.n	8012972 <_malloc_r+0x2ee>
 8012966:	f8de 2004 	ldr.w	r2, [lr, #4]
 801296a:	f022 0203 	bic.w	r2, r2, #3
 801296e:	4562      	cmp	r2, ip
 8012970:	d8f5      	bhi.n	801295e <_malloc_r+0x2da>
 8012972:	f8de 800c 	ldr.w	r8, [lr, #12]
 8012976:	e7d1      	b.n	801291c <_malloc_r+0x298>
 8012978:	6860      	ldr	r0, [r4, #4]
 801297a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801297e:	f020 0003 	bic.w	r0, r0, #3
 8012982:	eba0 0a05 	sub.w	sl, r0, r5
 8012986:	f1ba 0f0f 	cmp.w	sl, #15
 801298a:	dd21      	ble.n	80129d0 <_malloc_r+0x34c>
 801298c:	68a2      	ldr	r2, [r4, #8]
 801298e:	1963      	adds	r3, r4, r5
 8012990:	f045 0501 	orr.w	r5, r5, #1
 8012994:	6065      	str	r5, [r4, #4]
 8012996:	f8c2 e00c 	str.w	lr, [r2, #12]
 801299a:	f8ce 2008 	str.w	r2, [lr, #8]
 801299e:	f04a 0201 	orr.w	r2, sl, #1
 80129a2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80129a6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80129aa:	605a      	str	r2, [r3, #4]
 80129ac:	f844 a000 	str.w	sl, [r4, r0]
 80129b0:	e699      	b.n	80126e6 <_malloc_r+0x62>
 80129b2:	bf00      	nop
 80129b4:	200005c8 	.word	0x200005c8
 80129b8:	200005d0 	.word	0x200005d0
 80129bc:	20000c14 	.word	0x20000c14
 80129c0:	200009d0 	.word	0x200009d0
 80129c4:	20000c0c 	.word	0x20000c0c
 80129c8:	20000c10 	.word	0x20000c10
 80129cc:	20000be4 	.word	0x20000be4
 80129d0:	f1ba 0f00 	cmp.w	sl, #0
 80129d4:	db11      	blt.n	80129fa <_malloc_r+0x376>
 80129d6:	4420      	add	r0, r4
 80129d8:	6843      	ldr	r3, [r0, #4]
 80129da:	f043 0301 	orr.w	r3, r3, #1
 80129de:	6043      	str	r3, [r0, #4]
 80129e0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80129e4:	4630      	mov	r0, r6
 80129e6:	f8c3 e00c 	str.w	lr, [r3, #12]
 80129ea:	f8ce 3008 	str.w	r3, [lr, #8]
 80129ee:	f000 f899 	bl	8012b24 <__malloc_unlock>
 80129f2:	4620      	mov	r0, r4
 80129f4:	b003      	add	sp, #12
 80129f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129fa:	4674      	mov	r4, lr
 80129fc:	e70a      	b.n	8012814 <_malloc_r+0x190>
 80129fe:	f1ac 0008 	sub.w	r0, ip, #8
 8012a02:	f8dc c000 	ldr.w	ip, [ip]
 8012a06:	4584      	cmp	ip, r0
 8012a08:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8012a0c:	f43f af0c 	beq.w	8012828 <_malloc_r+0x1a4>
 8012a10:	e711      	b.n	8012836 <_malloc_r+0x1b2>
 8012a12:	3304      	adds	r3, #4
 8012a14:	0052      	lsls	r2, r2, #1
 8012a16:	4210      	tst	r0, r2
 8012a18:	d0fb      	beq.n	8012a12 <_malloc_r+0x38e>
 8012a1a:	e6f5      	b.n	8012808 <_malloc_r+0x184>
 8012a1c:	4643      	mov	r3, r8
 8012a1e:	e7fa      	b.n	8012a16 <_malloc_r+0x392>
 8012a20:	6818      	ldr	r0, [r3, #0]
 8012a22:	9200      	str	r2, [sp, #0]
 8012a24:	3001      	adds	r0, #1
 8012a26:	bf1b      	ittet	ne
 8012a28:	ebab 0101 	subne.w	r1, fp, r1
 8012a2c:	4471      	addne	r1, lr
 8012a2e:	f8c3 b000 	streq.w	fp, [r3]
 8012a32:	f8c9 1000 	strne.w	r1, [r9]
 8012a36:	f01b 0307 	ands.w	r3, fp, #7
 8012a3a:	bf1c      	itt	ne
 8012a3c:	f1c3 0308 	rsbne	r3, r3, #8
 8012a40:	449b      	addne	fp, r3
 8012a42:	445c      	add	r4, fp
 8012a44:	4498      	add	r8, r3
 8012a46:	ea04 030c 	and.w	r3, r4, ip
 8012a4a:	eba8 0803 	sub.w	r8, r8, r3
 8012a4e:	4641      	mov	r1, r8
 8012a50:	4630      	mov	r0, r6
 8012a52:	f000 f86d 	bl	8012b30 <_sbrk_r>
 8012a56:	1c43      	adds	r3, r0, #1
 8012a58:	bf04      	itt	eq
 8012a5a:	4658      	moveq	r0, fp
 8012a5c:	f04f 0800 	moveq.w	r8, #0
 8012a60:	f8d9 3000 	ldr.w	r3, [r9]
 8012a64:	f8c7 b008 	str.w	fp, [r7, #8]
 8012a68:	eba0 000b 	sub.w	r0, r0, fp
 8012a6c:	4440      	add	r0, r8
 8012a6e:	4443      	add	r3, r8
 8012a70:	f040 0001 	orr.w	r0, r0, #1
 8012a74:	45ba      	cmp	sl, r7
 8012a76:	9a00      	ldr	r2, [sp, #0]
 8012a78:	f8c9 3000 	str.w	r3, [r9]
 8012a7c:	f8cb 0004 	str.w	r0, [fp, #4]
 8012a80:	f43f af29 	beq.w	80128d6 <_malloc_r+0x252>
 8012a84:	2a0f      	cmp	r2, #15
 8012a86:	d810      	bhi.n	8012aaa <_malloc_r+0x426>
 8012a88:	2301      	movs	r3, #1
 8012a8a:	f8cb 3004 	str.w	r3, [fp, #4]
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	685a      	ldr	r2, [r3, #4]
 8012a92:	f022 0203 	bic.w	r2, r2, #3
 8012a96:	42aa      	cmp	r2, r5
 8012a98:	eba2 0305 	sub.w	r3, r2, r5
 8012a9c:	d301      	bcc.n	8012aa2 <_malloc_r+0x41e>
 8012a9e:	2b0f      	cmp	r3, #15
 8012aa0:	dc1c      	bgt.n	8012adc <_malloc_r+0x458>
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f000 f83e 	bl	8012b24 <__malloc_unlock>
 8012aa8:	e5f8      	b.n	801269c <_malloc_r+0x18>
 8012aaa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012aae:	f1a2 040c 	sub.w	r4, r2, #12
 8012ab2:	f024 0407 	bic.w	r4, r4, #7
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	4323      	orrs	r3, r4
 8012abc:	f8ca 3004 	str.w	r3, [sl, #4]
 8012ac0:	2205      	movs	r2, #5
 8012ac2:	eb0a 0304 	add.w	r3, sl, r4
 8012ac6:	2c0f      	cmp	r4, #15
 8012ac8:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8012acc:	f67f af03 	bls.w	80128d6 <_malloc_r+0x252>
 8012ad0:	f10a 0108 	add.w	r1, sl, #8
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f002 fff9 	bl	8015acc <_free_r>
 8012ada:	e6fc      	b.n	80128d6 <_malloc_r+0x252>
 8012adc:	68bc      	ldr	r4, [r7, #8]
 8012ade:	f045 0201 	orr.w	r2, r5, #1
 8012ae2:	4425      	add	r5, r4
 8012ae4:	f043 0301 	orr.w	r3, r3, #1
 8012ae8:	6062      	str	r2, [r4, #4]
 8012aea:	60bd      	str	r5, [r7, #8]
 8012aec:	606b      	str	r3, [r5, #4]
 8012aee:	e5fa      	b.n	80126e6 <_malloc_r+0x62>

08012af0 <memcpy>:
 8012af0:	b510      	push	{r4, lr}
 8012af2:	1e43      	subs	r3, r0, #1
 8012af4:	440a      	add	r2, r1
 8012af6:	4291      	cmp	r1, r2
 8012af8:	d100      	bne.n	8012afc <memcpy+0xc>
 8012afa:	bd10      	pop	{r4, pc}
 8012afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b04:	e7f7      	b.n	8012af6 <memcpy+0x6>

08012b06 <memset>:
 8012b06:	4402      	add	r2, r0
 8012b08:	4603      	mov	r3, r0
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d100      	bne.n	8012b10 <memset+0xa>
 8012b0e:	4770      	bx	lr
 8012b10:	f803 1b01 	strb.w	r1, [r3], #1
 8012b14:	e7f9      	b.n	8012b0a <memset+0x4>
	...

08012b18 <__malloc_lock>:
 8012b18:	4801      	ldr	r0, [pc, #4]	; (8012b20 <__malloc_lock+0x8>)
 8012b1a:	f003 bbcd 	b.w	80162b8 <__retarget_lock_acquire_recursive>
 8012b1e:	bf00      	nop
 8012b20:	20001064 	.word	0x20001064

08012b24 <__malloc_unlock>:
 8012b24:	4801      	ldr	r0, [pc, #4]	; (8012b2c <__malloc_unlock+0x8>)
 8012b26:	f003 bbc8 	b.w	80162ba <__retarget_lock_release_recursive>
 8012b2a:	bf00      	nop
 8012b2c:	20001064 	.word	0x20001064

08012b30 <_sbrk_r>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	4c06      	ldr	r4, [pc, #24]	; (8012b4c <_sbrk_r+0x1c>)
 8012b34:	2300      	movs	r3, #0
 8012b36:	4605      	mov	r5, r0
 8012b38:	4608      	mov	r0, r1
 8012b3a:	6023      	str	r3, [r4, #0]
 8012b3c:	f005 fb26 	bl	801818c <_sbrk>
 8012b40:	1c43      	adds	r3, r0, #1
 8012b42:	d102      	bne.n	8012b4a <_sbrk_r+0x1a>
 8012b44:	6823      	ldr	r3, [r4, #0]
 8012b46:	b103      	cbz	r3, 8012b4a <_sbrk_r+0x1a>
 8012b48:	602b      	str	r3, [r5, #0]
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	2000106c 	.word	0x2000106c

08012b50 <sprintf>:
 8012b50:	b40e      	push	{r1, r2, r3}
 8012b52:	b500      	push	{lr}
 8012b54:	b09c      	sub	sp, #112	; 0x70
 8012b56:	ab1d      	add	r3, sp, #116	; 0x74
 8012b58:	9002      	str	r0, [sp, #8]
 8012b5a:	9006      	str	r0, [sp, #24]
 8012b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b60:	4809      	ldr	r0, [pc, #36]	; (8012b88 <sprintf+0x38>)
 8012b62:	9107      	str	r1, [sp, #28]
 8012b64:	9104      	str	r1, [sp, #16]
 8012b66:	4909      	ldr	r1, [pc, #36]	; (8012b8c <sprintf+0x3c>)
 8012b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b6c:	9105      	str	r1, [sp, #20]
 8012b6e:	6800      	ldr	r0, [r0, #0]
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	a902      	add	r1, sp, #8
 8012b74:	f000 fecc 	bl	8013910 <_svfprintf_r>
 8012b78:	9b02      	ldr	r3, [sp, #8]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	701a      	strb	r2, [r3, #0]
 8012b7e:	b01c      	add	sp, #112	; 0x70
 8012b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b84:	b003      	add	sp, #12
 8012b86:	4770      	bx	lr
 8012b88:	2000019c 	.word	0x2000019c
 8012b8c:	ffff0208 	.word	0xffff0208

08012b90 <strcpy>:
 8012b90:	4603      	mov	r3, r0
 8012b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b96:	f803 2b01 	strb.w	r2, [r3], #1
 8012b9a:	2a00      	cmp	r2, #0
 8012b9c:	d1f9      	bne.n	8012b92 <strcpy+0x2>
 8012b9e:	4770      	bx	lr

08012ba0 <sulp>:
 8012ba0:	b570      	push	{r4, r5, r6, lr}
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	460d      	mov	r5, r1
 8012ba6:	ec45 4b10 	vmov	d0, r4, r5
 8012baa:	4616      	mov	r6, r2
 8012bac:	f003 fe38 	bl	8016820 <__ulp>
 8012bb0:	ec51 0b10 	vmov	r0, r1, d0
 8012bb4:	b17e      	cbz	r6, 8012bd6 <sulp+0x36>
 8012bb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012bba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	dd09      	ble.n	8012bd6 <sulp+0x36>
 8012bc2:	051b      	lsls	r3, r3, #20
 8012bc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012bc8:	2400      	movs	r4, #0
 8012bca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012bce:	4622      	mov	r2, r4
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	f7ed fd29 	bl	8000628 <__aeabi_dmul>
 8012bd6:	bd70      	pop	{r4, r5, r6, pc}

08012bd8 <_strtod_l>:
 8012bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bdc:	461f      	mov	r7, r3
 8012bde:	b0a1      	sub	sp, #132	; 0x84
 8012be0:	2300      	movs	r3, #0
 8012be2:	4681      	mov	r9, r0
 8012be4:	4638      	mov	r0, r7
 8012be6:	460e      	mov	r6, r1
 8012be8:	9217      	str	r2, [sp, #92]	; 0x5c
 8012bea:	931c      	str	r3, [sp, #112]	; 0x70
 8012bec:	f003 fb53 	bl	8016296 <__localeconv_l>
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	6800      	ldr	r0, [r0, #0]
 8012bf4:	f7ed fafe 	bl	80001f4 <strlen>
 8012bf8:	f04f 0a00 	mov.w	sl, #0
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	f04f 0b00 	mov.w	fp, #0
 8012c02:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012c06:	781a      	ldrb	r2, [r3, #0]
 8012c08:	2a0d      	cmp	r2, #13
 8012c0a:	d832      	bhi.n	8012c72 <_strtod_l+0x9a>
 8012c0c:	2a09      	cmp	r2, #9
 8012c0e:	d236      	bcs.n	8012c7e <_strtod_l+0xa6>
 8012c10:	2a00      	cmp	r2, #0
 8012c12:	d03e      	beq.n	8012c92 <_strtod_l+0xba>
 8012c14:	2300      	movs	r3, #0
 8012c16:	930d      	str	r3, [sp, #52]	; 0x34
 8012c18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012c1a:	782b      	ldrb	r3, [r5, #0]
 8012c1c:	2b30      	cmp	r3, #48	; 0x30
 8012c1e:	f040 80ac 	bne.w	8012d7a <_strtod_l+0x1a2>
 8012c22:	786b      	ldrb	r3, [r5, #1]
 8012c24:	2b58      	cmp	r3, #88	; 0x58
 8012c26:	d001      	beq.n	8012c2c <_strtod_l+0x54>
 8012c28:	2b78      	cmp	r3, #120	; 0x78
 8012c2a:	d167      	bne.n	8012cfc <_strtod_l+0x124>
 8012c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c2e:	9301      	str	r3, [sp, #4]
 8012c30:	ab1c      	add	r3, sp, #112	; 0x70
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	9702      	str	r7, [sp, #8]
 8012c36:	ab1d      	add	r3, sp, #116	; 0x74
 8012c38:	4a88      	ldr	r2, [pc, #544]	; (8012e5c <_strtod_l+0x284>)
 8012c3a:	a91b      	add	r1, sp, #108	; 0x6c
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	f003 f850 	bl	8015ce2 <__gethex>
 8012c42:	f010 0407 	ands.w	r4, r0, #7
 8012c46:	4606      	mov	r6, r0
 8012c48:	d005      	beq.n	8012c56 <_strtod_l+0x7e>
 8012c4a:	2c06      	cmp	r4, #6
 8012c4c:	d12b      	bne.n	8012ca6 <_strtod_l+0xce>
 8012c4e:	3501      	adds	r5, #1
 8012c50:	2300      	movs	r3, #0
 8012c52:	951b      	str	r5, [sp, #108]	; 0x6c
 8012c54:	930d      	str	r3, [sp, #52]	; 0x34
 8012c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	f040 859a 	bne.w	8013792 <_strtod_l+0xbba>
 8012c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c60:	b1e3      	cbz	r3, 8012c9c <_strtod_l+0xc4>
 8012c62:	4652      	mov	r2, sl
 8012c64:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012c68:	ec43 2b10 	vmov	d0, r2, r3
 8012c6c:	b021      	add	sp, #132	; 0x84
 8012c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c72:	2a2b      	cmp	r2, #43	; 0x2b
 8012c74:	d015      	beq.n	8012ca2 <_strtod_l+0xca>
 8012c76:	2a2d      	cmp	r2, #45	; 0x2d
 8012c78:	d004      	beq.n	8012c84 <_strtod_l+0xac>
 8012c7a:	2a20      	cmp	r2, #32
 8012c7c:	d1ca      	bne.n	8012c14 <_strtod_l+0x3c>
 8012c7e:	3301      	adds	r3, #1
 8012c80:	931b      	str	r3, [sp, #108]	; 0x6c
 8012c82:	e7bf      	b.n	8012c04 <_strtod_l+0x2c>
 8012c84:	2201      	movs	r2, #1
 8012c86:	920d      	str	r2, [sp, #52]	; 0x34
 8012c88:	1c5a      	adds	r2, r3, #1
 8012c8a:	921b      	str	r2, [sp, #108]	; 0x6c
 8012c8c:	785b      	ldrb	r3, [r3, #1]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d1c2      	bne.n	8012c18 <_strtod_l+0x40>
 8012c92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012c94:	961b      	str	r6, [sp, #108]	; 0x6c
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	f040 8579 	bne.w	801378e <_strtod_l+0xbb6>
 8012c9c:	4652      	mov	r2, sl
 8012c9e:	465b      	mov	r3, fp
 8012ca0:	e7e2      	b.n	8012c68 <_strtod_l+0x90>
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	e7ef      	b.n	8012c86 <_strtod_l+0xae>
 8012ca6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012ca8:	b13a      	cbz	r2, 8012cba <_strtod_l+0xe2>
 8012caa:	2135      	movs	r1, #53	; 0x35
 8012cac:	a81e      	add	r0, sp, #120	; 0x78
 8012cae:	f003 feaf 	bl	8016a10 <__copybits>
 8012cb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012cb4:	4648      	mov	r0, r9
 8012cb6:	f003 fb38 	bl	801632a <_Bfree>
 8012cba:	3c01      	subs	r4, #1
 8012cbc:	2c04      	cmp	r4, #4
 8012cbe:	d806      	bhi.n	8012cce <_strtod_l+0xf6>
 8012cc0:	e8df f004 	tbb	[pc, r4]
 8012cc4:	1714030a 	.word	0x1714030a
 8012cc8:	0a          	.byte	0x0a
 8012cc9:	00          	.byte	0x00
 8012cca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012cce:	0730      	lsls	r0, r6, #28
 8012cd0:	d5c1      	bpl.n	8012c56 <_strtod_l+0x7e>
 8012cd2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012cd6:	e7be      	b.n	8012c56 <_strtod_l+0x7e>
 8012cd8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012cdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012cde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012ce2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012ce6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012cea:	e7f0      	b.n	8012cce <_strtod_l+0xf6>
 8012cec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8012e60 <_strtod_l+0x288>
 8012cf0:	e7ed      	b.n	8012cce <_strtod_l+0xf6>
 8012cf2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012cf6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012cfa:	e7e8      	b.n	8012cce <_strtod_l+0xf6>
 8012cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8012d02:	785b      	ldrb	r3, [r3, #1]
 8012d04:	2b30      	cmp	r3, #48	; 0x30
 8012d06:	d0f9      	beq.n	8012cfc <_strtod_l+0x124>
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d0a4      	beq.n	8012c56 <_strtod_l+0x7e>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	2500      	movs	r5, #0
 8012d10:	9306      	str	r3, [sp, #24]
 8012d12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d14:	9308      	str	r3, [sp, #32]
 8012d16:	9507      	str	r5, [sp, #28]
 8012d18:	9505      	str	r5, [sp, #20]
 8012d1a:	220a      	movs	r2, #10
 8012d1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012d1e:	7807      	ldrb	r7, [r0, #0]
 8012d20:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012d24:	b2d9      	uxtb	r1, r3
 8012d26:	2909      	cmp	r1, #9
 8012d28:	d929      	bls.n	8012d7e <_strtod_l+0x1a6>
 8012d2a:	4622      	mov	r2, r4
 8012d2c:	f8d8 1000 	ldr.w	r1, [r8]
 8012d30:	f003 fee0 	bl	8016af4 <strncmp>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d031      	beq.n	8012d9c <_strtod_l+0x1c4>
 8012d38:	2000      	movs	r0, #0
 8012d3a:	9c05      	ldr	r4, [sp, #20]
 8012d3c:	9004      	str	r0, [sp, #16]
 8012d3e:	463b      	mov	r3, r7
 8012d40:	4602      	mov	r2, r0
 8012d42:	2b65      	cmp	r3, #101	; 0x65
 8012d44:	d001      	beq.n	8012d4a <_strtod_l+0x172>
 8012d46:	2b45      	cmp	r3, #69	; 0x45
 8012d48:	d114      	bne.n	8012d74 <_strtod_l+0x19c>
 8012d4a:	b924      	cbnz	r4, 8012d56 <_strtod_l+0x17e>
 8012d4c:	b910      	cbnz	r0, 8012d54 <_strtod_l+0x17c>
 8012d4e:	9b06      	ldr	r3, [sp, #24]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d09e      	beq.n	8012c92 <_strtod_l+0xba>
 8012d54:	2400      	movs	r4, #0
 8012d56:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012d58:	1c73      	adds	r3, r6, #1
 8012d5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8012d5c:	7873      	ldrb	r3, [r6, #1]
 8012d5e:	2b2b      	cmp	r3, #43	; 0x2b
 8012d60:	d078      	beq.n	8012e54 <_strtod_l+0x27c>
 8012d62:	2b2d      	cmp	r3, #45	; 0x2d
 8012d64:	d070      	beq.n	8012e48 <_strtod_l+0x270>
 8012d66:	f04f 0c00 	mov.w	ip, #0
 8012d6a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012d6e:	2f09      	cmp	r7, #9
 8012d70:	d97c      	bls.n	8012e6c <_strtod_l+0x294>
 8012d72:	961b      	str	r6, [sp, #108]	; 0x6c
 8012d74:	f04f 0e00 	mov.w	lr, #0
 8012d78:	e09a      	b.n	8012eb0 <_strtod_l+0x2d8>
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e7c7      	b.n	8012d0e <_strtod_l+0x136>
 8012d7e:	9905      	ldr	r1, [sp, #20]
 8012d80:	2908      	cmp	r1, #8
 8012d82:	bfdd      	ittte	le
 8012d84:	9907      	ldrle	r1, [sp, #28]
 8012d86:	fb02 3301 	mlale	r3, r2, r1, r3
 8012d8a:	9307      	strle	r3, [sp, #28]
 8012d8c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012d90:	9b05      	ldr	r3, [sp, #20]
 8012d92:	3001      	adds	r0, #1
 8012d94:	3301      	adds	r3, #1
 8012d96:	9305      	str	r3, [sp, #20]
 8012d98:	901b      	str	r0, [sp, #108]	; 0x6c
 8012d9a:	e7bf      	b.n	8012d1c <_strtod_l+0x144>
 8012d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012d9e:	191a      	adds	r2, r3, r4
 8012da0:	921b      	str	r2, [sp, #108]	; 0x6c
 8012da2:	9a05      	ldr	r2, [sp, #20]
 8012da4:	5d1b      	ldrb	r3, [r3, r4]
 8012da6:	2a00      	cmp	r2, #0
 8012da8:	d037      	beq.n	8012e1a <_strtod_l+0x242>
 8012daa:	9c05      	ldr	r4, [sp, #20]
 8012dac:	4602      	mov	r2, r0
 8012dae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012db2:	2909      	cmp	r1, #9
 8012db4:	d913      	bls.n	8012dde <_strtod_l+0x206>
 8012db6:	2101      	movs	r1, #1
 8012db8:	9104      	str	r1, [sp, #16]
 8012dba:	e7c2      	b.n	8012d42 <_strtod_l+0x16a>
 8012dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012dbe:	1c5a      	adds	r2, r3, #1
 8012dc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8012dc2:	785b      	ldrb	r3, [r3, #1]
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	2b30      	cmp	r3, #48	; 0x30
 8012dc8:	d0f8      	beq.n	8012dbc <_strtod_l+0x1e4>
 8012dca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012dce:	2a08      	cmp	r2, #8
 8012dd0:	f200 84e4 	bhi.w	801379c <_strtod_l+0xbc4>
 8012dd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012dd6:	9208      	str	r2, [sp, #32]
 8012dd8:	4602      	mov	r2, r0
 8012dda:	2000      	movs	r0, #0
 8012ddc:	4604      	mov	r4, r0
 8012dde:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8012de2:	f100 0101 	add.w	r1, r0, #1
 8012de6:	d012      	beq.n	8012e0e <_strtod_l+0x236>
 8012de8:	440a      	add	r2, r1
 8012dea:	eb00 0c04 	add.w	ip, r0, r4
 8012dee:	4621      	mov	r1, r4
 8012df0:	270a      	movs	r7, #10
 8012df2:	458c      	cmp	ip, r1
 8012df4:	d113      	bne.n	8012e1e <_strtod_l+0x246>
 8012df6:	1821      	adds	r1, r4, r0
 8012df8:	2908      	cmp	r1, #8
 8012dfa:	f104 0401 	add.w	r4, r4, #1
 8012dfe:	4404      	add	r4, r0
 8012e00:	dc19      	bgt.n	8012e36 <_strtod_l+0x25e>
 8012e02:	9b07      	ldr	r3, [sp, #28]
 8012e04:	210a      	movs	r1, #10
 8012e06:	fb01 e303 	mla	r3, r1, r3, lr
 8012e0a:	9307      	str	r3, [sp, #28]
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e10:	1c58      	adds	r0, r3, #1
 8012e12:	901b      	str	r0, [sp, #108]	; 0x6c
 8012e14:	785b      	ldrb	r3, [r3, #1]
 8012e16:	4608      	mov	r0, r1
 8012e18:	e7c9      	b.n	8012dae <_strtod_l+0x1d6>
 8012e1a:	9805      	ldr	r0, [sp, #20]
 8012e1c:	e7d3      	b.n	8012dc6 <_strtod_l+0x1ee>
 8012e1e:	2908      	cmp	r1, #8
 8012e20:	f101 0101 	add.w	r1, r1, #1
 8012e24:	dc03      	bgt.n	8012e2e <_strtod_l+0x256>
 8012e26:	9b07      	ldr	r3, [sp, #28]
 8012e28:	437b      	muls	r3, r7
 8012e2a:	9307      	str	r3, [sp, #28]
 8012e2c:	e7e1      	b.n	8012df2 <_strtod_l+0x21a>
 8012e2e:	2910      	cmp	r1, #16
 8012e30:	bfd8      	it	le
 8012e32:	437d      	mulle	r5, r7
 8012e34:	e7dd      	b.n	8012df2 <_strtod_l+0x21a>
 8012e36:	2c10      	cmp	r4, #16
 8012e38:	bfdc      	itt	le
 8012e3a:	210a      	movle	r1, #10
 8012e3c:	fb01 e505 	mlale	r5, r1, r5, lr
 8012e40:	e7e4      	b.n	8012e0c <_strtod_l+0x234>
 8012e42:	2301      	movs	r3, #1
 8012e44:	9304      	str	r3, [sp, #16]
 8012e46:	e781      	b.n	8012d4c <_strtod_l+0x174>
 8012e48:	f04f 0c01 	mov.w	ip, #1
 8012e4c:	1cb3      	adds	r3, r6, #2
 8012e4e:	931b      	str	r3, [sp, #108]	; 0x6c
 8012e50:	78b3      	ldrb	r3, [r6, #2]
 8012e52:	e78a      	b.n	8012d6a <_strtod_l+0x192>
 8012e54:	f04f 0c00 	mov.w	ip, #0
 8012e58:	e7f8      	b.n	8012e4c <_strtod_l+0x274>
 8012e5a:	bf00      	nop
 8012e5c:	08019b90 	.word	0x08019b90
 8012e60:	7ff00000 	.word	0x7ff00000
 8012e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e66:	1c5f      	adds	r7, r3, #1
 8012e68:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e6a:	785b      	ldrb	r3, [r3, #1]
 8012e6c:	2b30      	cmp	r3, #48	; 0x30
 8012e6e:	d0f9      	beq.n	8012e64 <_strtod_l+0x28c>
 8012e70:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8012e74:	2f08      	cmp	r7, #8
 8012e76:	f63f af7d 	bhi.w	8012d74 <_strtod_l+0x19c>
 8012e7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8012e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e80:	930a      	str	r3, [sp, #40]	; 0x28
 8012e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e84:	1c5f      	adds	r7, r3, #1
 8012e86:	971b      	str	r7, [sp, #108]	; 0x6c
 8012e88:	785b      	ldrb	r3, [r3, #1]
 8012e8a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8012e8e:	f1b8 0f09 	cmp.w	r8, #9
 8012e92:	d937      	bls.n	8012f04 <_strtod_l+0x32c>
 8012e94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012e96:	1a7f      	subs	r7, r7, r1
 8012e98:	2f08      	cmp	r7, #8
 8012e9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012e9e:	dc37      	bgt.n	8012f10 <_strtod_l+0x338>
 8012ea0:	45be      	cmp	lr, r7
 8012ea2:	bfa8      	it	ge
 8012ea4:	46be      	movge	lr, r7
 8012ea6:	f1bc 0f00 	cmp.w	ip, #0
 8012eaa:	d001      	beq.n	8012eb0 <_strtod_l+0x2d8>
 8012eac:	f1ce 0e00 	rsb	lr, lr, #0
 8012eb0:	2c00      	cmp	r4, #0
 8012eb2:	d151      	bne.n	8012f58 <_strtod_l+0x380>
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	f47f aece 	bne.w	8012c56 <_strtod_l+0x7e>
 8012eba:	9a06      	ldr	r2, [sp, #24]
 8012ebc:	2a00      	cmp	r2, #0
 8012ebe:	f47f aeca 	bne.w	8012c56 <_strtod_l+0x7e>
 8012ec2:	9a04      	ldr	r2, [sp, #16]
 8012ec4:	2a00      	cmp	r2, #0
 8012ec6:	f47f aee4 	bne.w	8012c92 <_strtod_l+0xba>
 8012eca:	2b4e      	cmp	r3, #78	; 0x4e
 8012ecc:	d027      	beq.n	8012f1e <_strtod_l+0x346>
 8012ece:	dc21      	bgt.n	8012f14 <_strtod_l+0x33c>
 8012ed0:	2b49      	cmp	r3, #73	; 0x49
 8012ed2:	f47f aede 	bne.w	8012c92 <_strtod_l+0xba>
 8012ed6:	49a0      	ldr	r1, [pc, #640]	; (8013158 <_strtod_l+0x580>)
 8012ed8:	a81b      	add	r0, sp, #108	; 0x6c
 8012eda:	f003 f935 	bl	8016148 <__match>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	f43f aed7 	beq.w	8012c92 <_strtod_l+0xba>
 8012ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ee6:	499d      	ldr	r1, [pc, #628]	; (801315c <_strtod_l+0x584>)
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	a81b      	add	r0, sp, #108	; 0x6c
 8012eec:	931b      	str	r3, [sp, #108]	; 0x6c
 8012eee:	f003 f92b 	bl	8016148 <__match>
 8012ef2:	b910      	cbnz	r0, 8012efa <_strtod_l+0x322>
 8012ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	931b      	str	r3, [sp, #108]	; 0x6c
 8012efa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013170 <_strtod_l+0x598>
 8012efe:	f04f 0a00 	mov.w	sl, #0
 8012f02:	e6a8      	b.n	8012c56 <_strtod_l+0x7e>
 8012f04:	210a      	movs	r1, #10
 8012f06:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012f0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8012f0e:	e7b8      	b.n	8012e82 <_strtod_l+0x2aa>
 8012f10:	46be      	mov	lr, r7
 8012f12:	e7c8      	b.n	8012ea6 <_strtod_l+0x2ce>
 8012f14:	2b69      	cmp	r3, #105	; 0x69
 8012f16:	d0de      	beq.n	8012ed6 <_strtod_l+0x2fe>
 8012f18:	2b6e      	cmp	r3, #110	; 0x6e
 8012f1a:	f47f aeba 	bne.w	8012c92 <_strtod_l+0xba>
 8012f1e:	4990      	ldr	r1, [pc, #576]	; (8013160 <_strtod_l+0x588>)
 8012f20:	a81b      	add	r0, sp, #108	; 0x6c
 8012f22:	f003 f911 	bl	8016148 <__match>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	f43f aeb3 	beq.w	8012c92 <_strtod_l+0xba>
 8012f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	2b28      	cmp	r3, #40	; 0x28
 8012f32:	d10e      	bne.n	8012f52 <_strtod_l+0x37a>
 8012f34:	aa1e      	add	r2, sp, #120	; 0x78
 8012f36:	498b      	ldr	r1, [pc, #556]	; (8013164 <_strtod_l+0x58c>)
 8012f38:	a81b      	add	r0, sp, #108	; 0x6c
 8012f3a:	f003 f919 	bl	8016170 <__hexnan>
 8012f3e:	2805      	cmp	r0, #5
 8012f40:	d107      	bne.n	8012f52 <_strtod_l+0x37a>
 8012f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f44:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8012f48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8012f4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012f50:	e681      	b.n	8012c56 <_strtod_l+0x7e>
 8012f52:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013178 <_strtod_l+0x5a0>
 8012f56:	e7d2      	b.n	8012efe <_strtod_l+0x326>
 8012f58:	ebae 0302 	sub.w	r3, lr, r2
 8012f5c:	9306      	str	r3, [sp, #24]
 8012f5e:	9b05      	ldr	r3, [sp, #20]
 8012f60:	9807      	ldr	r0, [sp, #28]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	bf08      	it	eq
 8012f66:	4623      	moveq	r3, r4
 8012f68:	2c10      	cmp	r4, #16
 8012f6a:	9305      	str	r3, [sp, #20]
 8012f6c:	46a0      	mov	r8, r4
 8012f6e:	bfa8      	it	ge
 8012f70:	f04f 0810 	movge.w	r8, #16
 8012f74:	f7ed fade 	bl	8000534 <__aeabi_ui2d>
 8012f78:	2c09      	cmp	r4, #9
 8012f7a:	4682      	mov	sl, r0
 8012f7c:	468b      	mov	fp, r1
 8012f7e:	dc13      	bgt.n	8012fa8 <_strtod_l+0x3d0>
 8012f80:	9b06      	ldr	r3, [sp, #24]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f43f ae67 	beq.w	8012c56 <_strtod_l+0x7e>
 8012f88:	9b06      	ldr	r3, [sp, #24]
 8012f8a:	dd7a      	ble.n	8013082 <_strtod_l+0x4aa>
 8012f8c:	2b16      	cmp	r3, #22
 8012f8e:	dc61      	bgt.n	8013054 <_strtod_l+0x47c>
 8012f90:	4a75      	ldr	r2, [pc, #468]	; (8013168 <_strtod_l+0x590>)
 8012f92:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8012f96:	e9de 0100 	ldrd	r0, r1, [lr]
 8012f9a:	4652      	mov	r2, sl
 8012f9c:	465b      	mov	r3, fp
 8012f9e:	f7ed fb43 	bl	8000628 <__aeabi_dmul>
 8012fa2:	4682      	mov	sl, r0
 8012fa4:	468b      	mov	fp, r1
 8012fa6:	e656      	b.n	8012c56 <_strtod_l+0x7e>
 8012fa8:	4b6f      	ldr	r3, [pc, #444]	; (8013168 <_strtod_l+0x590>)
 8012faa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012fae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012fb2:	f7ed fb39 	bl	8000628 <__aeabi_dmul>
 8012fb6:	4606      	mov	r6, r0
 8012fb8:	4628      	mov	r0, r5
 8012fba:	460f      	mov	r7, r1
 8012fbc:	f7ed faba 	bl	8000534 <__aeabi_ui2d>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f7ed f978 	bl	80002bc <__adddf3>
 8012fcc:	2c0f      	cmp	r4, #15
 8012fce:	4682      	mov	sl, r0
 8012fd0:	468b      	mov	fp, r1
 8012fd2:	ddd5      	ble.n	8012f80 <_strtod_l+0x3a8>
 8012fd4:	9b06      	ldr	r3, [sp, #24]
 8012fd6:	eba4 0808 	sub.w	r8, r4, r8
 8012fda:	4498      	add	r8, r3
 8012fdc:	f1b8 0f00 	cmp.w	r8, #0
 8012fe0:	f340 8096 	ble.w	8013110 <_strtod_l+0x538>
 8012fe4:	f018 030f 	ands.w	r3, r8, #15
 8012fe8:	d00a      	beq.n	8013000 <_strtod_l+0x428>
 8012fea:	495f      	ldr	r1, [pc, #380]	; (8013168 <_strtod_l+0x590>)
 8012fec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012ff0:	4652      	mov	r2, sl
 8012ff2:	465b      	mov	r3, fp
 8012ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ff8:	f7ed fb16 	bl	8000628 <__aeabi_dmul>
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	468b      	mov	fp, r1
 8013000:	f038 080f 	bics.w	r8, r8, #15
 8013004:	d073      	beq.n	80130ee <_strtod_l+0x516>
 8013006:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801300a:	dd47      	ble.n	801309c <_strtod_l+0x4c4>
 801300c:	2400      	movs	r4, #0
 801300e:	46a0      	mov	r8, r4
 8013010:	9407      	str	r4, [sp, #28]
 8013012:	9405      	str	r4, [sp, #20]
 8013014:	2322      	movs	r3, #34	; 0x22
 8013016:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013170 <_strtod_l+0x598>
 801301a:	f8c9 3000 	str.w	r3, [r9]
 801301e:	f04f 0a00 	mov.w	sl, #0
 8013022:	9b07      	ldr	r3, [sp, #28]
 8013024:	2b00      	cmp	r3, #0
 8013026:	f43f ae16 	beq.w	8012c56 <_strtod_l+0x7e>
 801302a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801302c:	4648      	mov	r0, r9
 801302e:	f003 f97c 	bl	801632a <_Bfree>
 8013032:	9905      	ldr	r1, [sp, #20]
 8013034:	4648      	mov	r0, r9
 8013036:	f003 f978 	bl	801632a <_Bfree>
 801303a:	4641      	mov	r1, r8
 801303c:	4648      	mov	r0, r9
 801303e:	f003 f974 	bl	801632a <_Bfree>
 8013042:	9907      	ldr	r1, [sp, #28]
 8013044:	4648      	mov	r0, r9
 8013046:	f003 f970 	bl	801632a <_Bfree>
 801304a:	4621      	mov	r1, r4
 801304c:	4648      	mov	r0, r9
 801304e:	f003 f96c 	bl	801632a <_Bfree>
 8013052:	e600      	b.n	8012c56 <_strtod_l+0x7e>
 8013054:	9a06      	ldr	r2, [sp, #24]
 8013056:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801305a:	4293      	cmp	r3, r2
 801305c:	dbba      	blt.n	8012fd4 <_strtod_l+0x3fc>
 801305e:	4d42      	ldr	r5, [pc, #264]	; (8013168 <_strtod_l+0x590>)
 8013060:	f1c4 040f 	rsb	r4, r4, #15
 8013064:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013068:	4652      	mov	r2, sl
 801306a:	465b      	mov	r3, fp
 801306c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013070:	f7ed fada 	bl	8000628 <__aeabi_dmul>
 8013074:	9b06      	ldr	r3, [sp, #24]
 8013076:	1b1c      	subs	r4, r3, r4
 8013078:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801307c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013080:	e78d      	b.n	8012f9e <_strtod_l+0x3c6>
 8013082:	f113 0f16 	cmn.w	r3, #22
 8013086:	dba5      	blt.n	8012fd4 <_strtod_l+0x3fc>
 8013088:	4a37      	ldr	r2, [pc, #220]	; (8013168 <_strtod_l+0x590>)
 801308a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801308e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013092:	4650      	mov	r0, sl
 8013094:	4659      	mov	r1, fp
 8013096:	f7ed fbf1 	bl	800087c <__aeabi_ddiv>
 801309a:	e782      	b.n	8012fa2 <_strtod_l+0x3ca>
 801309c:	2300      	movs	r3, #0
 801309e:	4e33      	ldr	r6, [pc, #204]	; (801316c <_strtod_l+0x594>)
 80130a0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80130a4:	4650      	mov	r0, sl
 80130a6:	4659      	mov	r1, fp
 80130a8:	461d      	mov	r5, r3
 80130aa:	f1b8 0f01 	cmp.w	r8, #1
 80130ae:	dc21      	bgt.n	80130f4 <_strtod_l+0x51c>
 80130b0:	b10b      	cbz	r3, 80130b6 <_strtod_l+0x4de>
 80130b2:	4682      	mov	sl, r0
 80130b4:	468b      	mov	fp, r1
 80130b6:	4b2d      	ldr	r3, [pc, #180]	; (801316c <_strtod_l+0x594>)
 80130b8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80130bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80130c0:	4652      	mov	r2, sl
 80130c2:	465b      	mov	r3, fp
 80130c4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80130c8:	f7ed faae 	bl	8000628 <__aeabi_dmul>
 80130cc:	4b28      	ldr	r3, [pc, #160]	; (8013170 <_strtod_l+0x598>)
 80130ce:	460a      	mov	r2, r1
 80130d0:	400b      	ands	r3, r1
 80130d2:	4928      	ldr	r1, [pc, #160]	; (8013174 <_strtod_l+0x59c>)
 80130d4:	428b      	cmp	r3, r1
 80130d6:	4682      	mov	sl, r0
 80130d8:	d898      	bhi.n	801300c <_strtod_l+0x434>
 80130da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80130de:	428b      	cmp	r3, r1
 80130e0:	bf86      	itte	hi
 80130e2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801317c <_strtod_l+0x5a4>
 80130e6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80130ea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80130ee:	2300      	movs	r3, #0
 80130f0:	9304      	str	r3, [sp, #16]
 80130f2:	e077      	b.n	80131e4 <_strtod_l+0x60c>
 80130f4:	f018 0f01 	tst.w	r8, #1
 80130f8:	d006      	beq.n	8013108 <_strtod_l+0x530>
 80130fa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	f7ed fa91 	bl	8000628 <__aeabi_dmul>
 8013106:	2301      	movs	r3, #1
 8013108:	3501      	adds	r5, #1
 801310a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801310e:	e7cc      	b.n	80130aa <_strtod_l+0x4d2>
 8013110:	d0ed      	beq.n	80130ee <_strtod_l+0x516>
 8013112:	f1c8 0800 	rsb	r8, r8, #0
 8013116:	f018 020f 	ands.w	r2, r8, #15
 801311a:	d00a      	beq.n	8013132 <_strtod_l+0x55a>
 801311c:	4b12      	ldr	r3, [pc, #72]	; (8013168 <_strtod_l+0x590>)
 801311e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013122:	4650      	mov	r0, sl
 8013124:	4659      	mov	r1, fp
 8013126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312a:	f7ed fba7 	bl	800087c <__aeabi_ddiv>
 801312e:	4682      	mov	sl, r0
 8013130:	468b      	mov	fp, r1
 8013132:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013136:	d0da      	beq.n	80130ee <_strtod_l+0x516>
 8013138:	f1b8 0f1f 	cmp.w	r8, #31
 801313c:	dd20      	ble.n	8013180 <_strtod_l+0x5a8>
 801313e:	2400      	movs	r4, #0
 8013140:	46a0      	mov	r8, r4
 8013142:	9407      	str	r4, [sp, #28]
 8013144:	9405      	str	r4, [sp, #20]
 8013146:	2322      	movs	r3, #34	; 0x22
 8013148:	f04f 0a00 	mov.w	sl, #0
 801314c:	f04f 0b00 	mov.w	fp, #0
 8013150:	f8c9 3000 	str.w	r3, [r9]
 8013154:	e765      	b.n	8013022 <_strtod_l+0x44a>
 8013156:	bf00      	nop
 8013158:	08019be5 	.word	0x08019be5
 801315c:	08019c37 	.word	0x08019c37
 8013160:	08019bed 	.word	0x08019bed
 8013164:	08019ba4 	.word	0x08019ba4
 8013168:	08019c78 	.word	0x08019c78
 801316c:	08019c50 	.word	0x08019c50
 8013170:	7ff00000 	.word	0x7ff00000
 8013174:	7ca00000 	.word	0x7ca00000
 8013178:	fff80000 	.word	0xfff80000
 801317c:	7fefffff 	.word	0x7fefffff
 8013180:	f018 0310 	ands.w	r3, r8, #16
 8013184:	bf18      	it	ne
 8013186:	236a      	movne	r3, #106	; 0x6a
 8013188:	4da0      	ldr	r5, [pc, #640]	; (801340c <_strtod_l+0x834>)
 801318a:	9304      	str	r3, [sp, #16]
 801318c:	4650      	mov	r0, sl
 801318e:	4659      	mov	r1, fp
 8013190:	2300      	movs	r3, #0
 8013192:	f1b8 0f00 	cmp.w	r8, #0
 8013196:	f300 810a 	bgt.w	80133ae <_strtod_l+0x7d6>
 801319a:	b10b      	cbz	r3, 80131a0 <_strtod_l+0x5c8>
 801319c:	4682      	mov	sl, r0
 801319e:	468b      	mov	fp, r1
 80131a0:	9b04      	ldr	r3, [sp, #16]
 80131a2:	b1bb      	cbz	r3, 80131d4 <_strtod_l+0x5fc>
 80131a4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80131a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	4659      	mov	r1, fp
 80131b0:	dd10      	ble.n	80131d4 <_strtod_l+0x5fc>
 80131b2:	2b1f      	cmp	r3, #31
 80131b4:	f340 8107 	ble.w	80133c6 <_strtod_l+0x7ee>
 80131b8:	2b34      	cmp	r3, #52	; 0x34
 80131ba:	bfde      	ittt	le
 80131bc:	3b20      	suble	r3, #32
 80131be:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80131c2:	fa02 f303 	lslle.w	r3, r2, r3
 80131c6:	f04f 0a00 	mov.w	sl, #0
 80131ca:	bfcc      	ite	gt
 80131cc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80131d0:	ea03 0b01 	andle.w	fp, r3, r1
 80131d4:	2200      	movs	r2, #0
 80131d6:	2300      	movs	r3, #0
 80131d8:	4650      	mov	r0, sl
 80131da:	4659      	mov	r1, fp
 80131dc:	f7ed fc8c 	bl	8000af8 <__aeabi_dcmpeq>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d1ac      	bne.n	801313e <_strtod_l+0x566>
 80131e4:	9b07      	ldr	r3, [sp, #28]
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	9a05      	ldr	r2, [sp, #20]
 80131ea:	9908      	ldr	r1, [sp, #32]
 80131ec:	4623      	mov	r3, r4
 80131ee:	4648      	mov	r0, r9
 80131f0:	f003 f8df 	bl	80163b2 <__s2b>
 80131f4:	9007      	str	r0, [sp, #28]
 80131f6:	2800      	cmp	r0, #0
 80131f8:	f43f af08 	beq.w	801300c <_strtod_l+0x434>
 80131fc:	9a06      	ldr	r2, [sp, #24]
 80131fe:	9b06      	ldr	r3, [sp, #24]
 8013200:	2a00      	cmp	r2, #0
 8013202:	f1c3 0300 	rsb	r3, r3, #0
 8013206:	bfa8      	it	ge
 8013208:	2300      	movge	r3, #0
 801320a:	930e      	str	r3, [sp, #56]	; 0x38
 801320c:	2400      	movs	r4, #0
 801320e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013212:	9316      	str	r3, [sp, #88]	; 0x58
 8013214:	46a0      	mov	r8, r4
 8013216:	9b07      	ldr	r3, [sp, #28]
 8013218:	4648      	mov	r0, r9
 801321a:	6859      	ldr	r1, [r3, #4]
 801321c:	f003 f860 	bl	80162e0 <_Balloc>
 8013220:	9005      	str	r0, [sp, #20]
 8013222:	2800      	cmp	r0, #0
 8013224:	f43f aef6 	beq.w	8013014 <_strtod_l+0x43c>
 8013228:	9b07      	ldr	r3, [sp, #28]
 801322a:	691a      	ldr	r2, [r3, #16]
 801322c:	3202      	adds	r2, #2
 801322e:	f103 010c 	add.w	r1, r3, #12
 8013232:	0092      	lsls	r2, r2, #2
 8013234:	300c      	adds	r0, #12
 8013236:	f7ff fc5b 	bl	8012af0 <memcpy>
 801323a:	aa1e      	add	r2, sp, #120	; 0x78
 801323c:	a91d      	add	r1, sp, #116	; 0x74
 801323e:	ec4b ab10 	vmov	d0, sl, fp
 8013242:	4648      	mov	r0, r9
 8013244:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013248:	f003 fb60 	bl	801690c <__d2b>
 801324c:	901c      	str	r0, [sp, #112]	; 0x70
 801324e:	2800      	cmp	r0, #0
 8013250:	f43f aee0 	beq.w	8013014 <_strtod_l+0x43c>
 8013254:	2101      	movs	r1, #1
 8013256:	4648      	mov	r0, r9
 8013258:	f003 f937 	bl	80164ca <__i2b>
 801325c:	4680      	mov	r8, r0
 801325e:	2800      	cmp	r0, #0
 8013260:	f43f aed8 	beq.w	8013014 <_strtod_l+0x43c>
 8013264:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013266:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013268:	2e00      	cmp	r6, #0
 801326a:	bfab      	itete	ge
 801326c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801326e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013270:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013272:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013274:	bfac      	ite	ge
 8013276:	18f7      	addge	r7, r6, r3
 8013278:	1b9d      	sublt	r5, r3, r6
 801327a:	9b04      	ldr	r3, [sp, #16]
 801327c:	1af6      	subs	r6, r6, r3
 801327e:	4416      	add	r6, r2
 8013280:	4b63      	ldr	r3, [pc, #396]	; (8013410 <_strtod_l+0x838>)
 8013282:	3e01      	subs	r6, #1
 8013284:	429e      	cmp	r6, r3
 8013286:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801328a:	f280 80af 	bge.w	80133ec <_strtod_l+0x814>
 801328e:	1b9b      	subs	r3, r3, r6
 8013290:	2b1f      	cmp	r3, #31
 8013292:	eba2 0203 	sub.w	r2, r2, r3
 8013296:	f04f 0101 	mov.w	r1, #1
 801329a:	f300 809b 	bgt.w	80133d4 <_strtod_l+0x7fc>
 801329e:	fa01 f303 	lsl.w	r3, r1, r3
 80132a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80132a4:	2300      	movs	r3, #0
 80132a6:	930a      	str	r3, [sp, #40]	; 0x28
 80132a8:	18be      	adds	r6, r7, r2
 80132aa:	9b04      	ldr	r3, [sp, #16]
 80132ac:	42b7      	cmp	r7, r6
 80132ae:	4415      	add	r5, r2
 80132b0:	441d      	add	r5, r3
 80132b2:	463b      	mov	r3, r7
 80132b4:	bfa8      	it	ge
 80132b6:	4633      	movge	r3, r6
 80132b8:	42ab      	cmp	r3, r5
 80132ba:	bfa8      	it	ge
 80132bc:	462b      	movge	r3, r5
 80132be:	2b00      	cmp	r3, #0
 80132c0:	bfc2      	ittt	gt
 80132c2:	1af6      	subgt	r6, r6, r3
 80132c4:	1aed      	subgt	r5, r5, r3
 80132c6:	1aff      	subgt	r7, r7, r3
 80132c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132ca:	b1bb      	cbz	r3, 80132fc <_strtod_l+0x724>
 80132cc:	4641      	mov	r1, r8
 80132ce:	461a      	mov	r2, r3
 80132d0:	4648      	mov	r0, r9
 80132d2:	f003 f999 	bl	8016608 <__pow5mult>
 80132d6:	4680      	mov	r8, r0
 80132d8:	2800      	cmp	r0, #0
 80132da:	f43f ae9b 	beq.w	8013014 <_strtod_l+0x43c>
 80132de:	4601      	mov	r1, r0
 80132e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80132e2:	4648      	mov	r0, r9
 80132e4:	f003 f8fa 	bl	80164dc <__multiply>
 80132e8:	900c      	str	r0, [sp, #48]	; 0x30
 80132ea:	2800      	cmp	r0, #0
 80132ec:	f43f ae92 	beq.w	8013014 <_strtod_l+0x43c>
 80132f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132f2:	4648      	mov	r0, r9
 80132f4:	f003 f819 	bl	801632a <_Bfree>
 80132f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132fa:	931c      	str	r3, [sp, #112]	; 0x70
 80132fc:	2e00      	cmp	r6, #0
 80132fe:	dc7a      	bgt.n	80133f6 <_strtod_l+0x81e>
 8013300:	9b06      	ldr	r3, [sp, #24]
 8013302:	2b00      	cmp	r3, #0
 8013304:	dd08      	ble.n	8013318 <_strtod_l+0x740>
 8013306:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013308:	9905      	ldr	r1, [sp, #20]
 801330a:	4648      	mov	r0, r9
 801330c:	f003 f97c 	bl	8016608 <__pow5mult>
 8013310:	9005      	str	r0, [sp, #20]
 8013312:	2800      	cmp	r0, #0
 8013314:	f43f ae7e 	beq.w	8013014 <_strtod_l+0x43c>
 8013318:	2d00      	cmp	r5, #0
 801331a:	dd08      	ble.n	801332e <_strtod_l+0x756>
 801331c:	462a      	mov	r2, r5
 801331e:	9905      	ldr	r1, [sp, #20]
 8013320:	4648      	mov	r0, r9
 8013322:	f003 f9b1 	bl	8016688 <__lshift>
 8013326:	9005      	str	r0, [sp, #20]
 8013328:	2800      	cmp	r0, #0
 801332a:	f43f ae73 	beq.w	8013014 <_strtod_l+0x43c>
 801332e:	2f00      	cmp	r7, #0
 8013330:	dd08      	ble.n	8013344 <_strtod_l+0x76c>
 8013332:	4641      	mov	r1, r8
 8013334:	463a      	mov	r2, r7
 8013336:	4648      	mov	r0, r9
 8013338:	f003 f9a6 	bl	8016688 <__lshift>
 801333c:	4680      	mov	r8, r0
 801333e:	2800      	cmp	r0, #0
 8013340:	f43f ae68 	beq.w	8013014 <_strtod_l+0x43c>
 8013344:	9a05      	ldr	r2, [sp, #20]
 8013346:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013348:	4648      	mov	r0, r9
 801334a:	f003 fa0b 	bl	8016764 <__mdiff>
 801334e:	4604      	mov	r4, r0
 8013350:	2800      	cmp	r0, #0
 8013352:	f43f ae5f 	beq.w	8013014 <_strtod_l+0x43c>
 8013356:	68c3      	ldr	r3, [r0, #12]
 8013358:	930c      	str	r3, [sp, #48]	; 0x30
 801335a:	2300      	movs	r3, #0
 801335c:	60c3      	str	r3, [r0, #12]
 801335e:	4641      	mov	r1, r8
 8013360:	f003 f9e6 	bl	8016730 <__mcmp>
 8013364:	2800      	cmp	r0, #0
 8013366:	da55      	bge.n	8013414 <_strtod_l+0x83c>
 8013368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801336a:	b9e3      	cbnz	r3, 80133a6 <_strtod_l+0x7ce>
 801336c:	f1ba 0f00 	cmp.w	sl, #0
 8013370:	d119      	bne.n	80133a6 <_strtod_l+0x7ce>
 8013372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013376:	b9b3      	cbnz	r3, 80133a6 <_strtod_l+0x7ce>
 8013378:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801337c:	0d1b      	lsrs	r3, r3, #20
 801337e:	051b      	lsls	r3, r3, #20
 8013380:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013384:	d90f      	bls.n	80133a6 <_strtod_l+0x7ce>
 8013386:	6963      	ldr	r3, [r4, #20]
 8013388:	b913      	cbnz	r3, 8013390 <_strtod_l+0x7b8>
 801338a:	6923      	ldr	r3, [r4, #16]
 801338c:	2b01      	cmp	r3, #1
 801338e:	dd0a      	ble.n	80133a6 <_strtod_l+0x7ce>
 8013390:	4621      	mov	r1, r4
 8013392:	2201      	movs	r2, #1
 8013394:	4648      	mov	r0, r9
 8013396:	f003 f977 	bl	8016688 <__lshift>
 801339a:	4641      	mov	r1, r8
 801339c:	4604      	mov	r4, r0
 801339e:	f003 f9c7 	bl	8016730 <__mcmp>
 80133a2:	2800      	cmp	r0, #0
 80133a4:	dc67      	bgt.n	8013476 <_strtod_l+0x89e>
 80133a6:	9b04      	ldr	r3, [sp, #16]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d171      	bne.n	8013490 <_strtod_l+0x8b8>
 80133ac:	e63d      	b.n	801302a <_strtod_l+0x452>
 80133ae:	f018 0f01 	tst.w	r8, #1
 80133b2:	d004      	beq.n	80133be <_strtod_l+0x7e6>
 80133b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133b8:	f7ed f936 	bl	8000628 <__aeabi_dmul>
 80133bc:	2301      	movs	r3, #1
 80133be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80133c2:	3508      	adds	r5, #8
 80133c4:	e6e5      	b.n	8013192 <_strtod_l+0x5ba>
 80133c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133ca:	fa02 f303 	lsl.w	r3, r2, r3
 80133ce:	ea03 0a0a 	and.w	sl, r3, sl
 80133d2:	e6ff      	b.n	80131d4 <_strtod_l+0x5fc>
 80133d4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80133d8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80133dc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80133e0:	36e2      	adds	r6, #226	; 0xe2
 80133e2:	fa01 f306 	lsl.w	r3, r1, r6
 80133e6:	930a      	str	r3, [sp, #40]	; 0x28
 80133e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80133ea:	e75d      	b.n	80132a8 <_strtod_l+0x6d0>
 80133ec:	2300      	movs	r3, #0
 80133ee:	930a      	str	r3, [sp, #40]	; 0x28
 80133f0:	2301      	movs	r3, #1
 80133f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80133f4:	e758      	b.n	80132a8 <_strtod_l+0x6d0>
 80133f6:	4632      	mov	r2, r6
 80133f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80133fa:	4648      	mov	r0, r9
 80133fc:	f003 f944 	bl	8016688 <__lshift>
 8013400:	901c      	str	r0, [sp, #112]	; 0x70
 8013402:	2800      	cmp	r0, #0
 8013404:	f47f af7c 	bne.w	8013300 <_strtod_l+0x728>
 8013408:	e604      	b.n	8013014 <_strtod_l+0x43c>
 801340a:	bf00      	nop
 801340c:	08019bb8 	.word	0x08019bb8
 8013410:	fffffc02 	.word	0xfffffc02
 8013414:	465d      	mov	r5, fp
 8013416:	f040 8086 	bne.w	8013526 <_strtod_l+0x94e>
 801341a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801341c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013420:	b32a      	cbz	r2, 801346e <_strtod_l+0x896>
 8013422:	4aaf      	ldr	r2, [pc, #700]	; (80136e0 <_strtod_l+0xb08>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d153      	bne.n	80134d0 <_strtod_l+0x8f8>
 8013428:	9b04      	ldr	r3, [sp, #16]
 801342a:	4650      	mov	r0, sl
 801342c:	b1d3      	cbz	r3, 8013464 <_strtod_l+0x88c>
 801342e:	4aad      	ldr	r2, [pc, #692]	; (80136e4 <_strtod_l+0xb0c>)
 8013430:	402a      	ands	r2, r5
 8013432:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801343a:	d816      	bhi.n	801346a <_strtod_l+0x892>
 801343c:	0d12      	lsrs	r2, r2, #20
 801343e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013442:	fa01 f303 	lsl.w	r3, r1, r3
 8013446:	4298      	cmp	r0, r3
 8013448:	d142      	bne.n	80134d0 <_strtod_l+0x8f8>
 801344a:	4ba7      	ldr	r3, [pc, #668]	; (80136e8 <_strtod_l+0xb10>)
 801344c:	429d      	cmp	r5, r3
 801344e:	d102      	bne.n	8013456 <_strtod_l+0x87e>
 8013450:	3001      	adds	r0, #1
 8013452:	f43f addf 	beq.w	8013014 <_strtod_l+0x43c>
 8013456:	4ba3      	ldr	r3, [pc, #652]	; (80136e4 <_strtod_l+0xb0c>)
 8013458:	402b      	ands	r3, r5
 801345a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801345e:	f04f 0a00 	mov.w	sl, #0
 8013462:	e7a0      	b.n	80133a6 <_strtod_l+0x7ce>
 8013464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013468:	e7ed      	b.n	8013446 <_strtod_l+0x86e>
 801346a:	460b      	mov	r3, r1
 801346c:	e7eb      	b.n	8013446 <_strtod_l+0x86e>
 801346e:	bb7b      	cbnz	r3, 80134d0 <_strtod_l+0x8f8>
 8013470:	f1ba 0f00 	cmp.w	sl, #0
 8013474:	d12c      	bne.n	80134d0 <_strtod_l+0x8f8>
 8013476:	9904      	ldr	r1, [sp, #16]
 8013478:	4a9a      	ldr	r2, [pc, #616]	; (80136e4 <_strtod_l+0xb0c>)
 801347a:	465b      	mov	r3, fp
 801347c:	b1f1      	cbz	r1, 80134bc <_strtod_l+0x8e4>
 801347e:	ea02 010b 	and.w	r1, r2, fp
 8013482:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013486:	dc19      	bgt.n	80134bc <_strtod_l+0x8e4>
 8013488:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801348c:	f77f ae5b 	ble.w	8013146 <_strtod_l+0x56e>
 8013490:	4a96      	ldr	r2, [pc, #600]	; (80136ec <_strtod_l+0xb14>)
 8013492:	2300      	movs	r3, #0
 8013494:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013498:	4650      	mov	r0, sl
 801349a:	4659      	mov	r1, fp
 801349c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80134a0:	f7ed f8c2 	bl	8000628 <__aeabi_dmul>
 80134a4:	4682      	mov	sl, r0
 80134a6:	468b      	mov	fp, r1
 80134a8:	2900      	cmp	r1, #0
 80134aa:	f47f adbe 	bne.w	801302a <_strtod_l+0x452>
 80134ae:	2800      	cmp	r0, #0
 80134b0:	f47f adbb 	bne.w	801302a <_strtod_l+0x452>
 80134b4:	2322      	movs	r3, #34	; 0x22
 80134b6:	f8c9 3000 	str.w	r3, [r9]
 80134ba:	e5b6      	b.n	801302a <_strtod_l+0x452>
 80134bc:	4013      	ands	r3, r2
 80134be:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80134c2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80134c6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80134ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80134ce:	e76a      	b.n	80133a6 <_strtod_l+0x7ce>
 80134d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d2:	b193      	cbz	r3, 80134fa <_strtod_l+0x922>
 80134d4:	422b      	tst	r3, r5
 80134d6:	f43f af66 	beq.w	80133a6 <_strtod_l+0x7ce>
 80134da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134dc:	9a04      	ldr	r2, [sp, #16]
 80134de:	4650      	mov	r0, sl
 80134e0:	4659      	mov	r1, fp
 80134e2:	b173      	cbz	r3, 8013502 <_strtod_l+0x92a>
 80134e4:	f7ff fb5c 	bl	8012ba0 <sulp>
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80134f0:	f7ec fee4 	bl	80002bc <__adddf3>
 80134f4:	4682      	mov	sl, r0
 80134f6:	468b      	mov	fp, r1
 80134f8:	e755      	b.n	80133a6 <_strtod_l+0x7ce>
 80134fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134fc:	ea13 0f0a 	tst.w	r3, sl
 8013500:	e7e9      	b.n	80134d6 <_strtod_l+0x8fe>
 8013502:	f7ff fb4d 	bl	8012ba0 <sulp>
 8013506:	4602      	mov	r2, r0
 8013508:	460b      	mov	r3, r1
 801350a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801350e:	f7ec fed3 	bl	80002b8 <__aeabi_dsub>
 8013512:	2200      	movs	r2, #0
 8013514:	2300      	movs	r3, #0
 8013516:	4682      	mov	sl, r0
 8013518:	468b      	mov	fp, r1
 801351a:	f7ed faed 	bl	8000af8 <__aeabi_dcmpeq>
 801351e:	2800      	cmp	r0, #0
 8013520:	f47f ae11 	bne.w	8013146 <_strtod_l+0x56e>
 8013524:	e73f      	b.n	80133a6 <_strtod_l+0x7ce>
 8013526:	4641      	mov	r1, r8
 8013528:	4620      	mov	r0, r4
 801352a:	f003 fa3e 	bl	80169aa <__ratio>
 801352e:	ec57 6b10 	vmov	r6, r7, d0
 8013532:	2200      	movs	r2, #0
 8013534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013538:	ee10 0a10 	vmov	r0, s0
 801353c:	4639      	mov	r1, r7
 801353e:	f7ed faef 	bl	8000b20 <__aeabi_dcmple>
 8013542:	2800      	cmp	r0, #0
 8013544:	d077      	beq.n	8013636 <_strtod_l+0xa5e>
 8013546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013548:	2b00      	cmp	r3, #0
 801354a:	d04a      	beq.n	80135e2 <_strtod_l+0xa0a>
 801354c:	4b68      	ldr	r3, [pc, #416]	; (80136f0 <_strtod_l+0xb18>)
 801354e:	2200      	movs	r2, #0
 8013550:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013554:	4f66      	ldr	r7, [pc, #408]	; (80136f0 <_strtod_l+0xb18>)
 8013556:	2600      	movs	r6, #0
 8013558:	4b62      	ldr	r3, [pc, #392]	; (80136e4 <_strtod_l+0xb0c>)
 801355a:	402b      	ands	r3, r5
 801355c:	930f      	str	r3, [sp, #60]	; 0x3c
 801355e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013560:	4b64      	ldr	r3, [pc, #400]	; (80136f4 <_strtod_l+0xb1c>)
 8013562:	429a      	cmp	r2, r3
 8013564:	f040 80ce 	bne.w	8013704 <_strtod_l+0xb2c>
 8013568:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801356c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013570:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013574:	ec4b ab10 	vmov	d0, sl, fp
 8013578:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801357c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013580:	f003 f94e 	bl	8016820 <__ulp>
 8013584:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013588:	ec53 2b10 	vmov	r2, r3, d0
 801358c:	f7ed f84c 	bl	8000628 <__aeabi_dmul>
 8013590:	4652      	mov	r2, sl
 8013592:	465b      	mov	r3, fp
 8013594:	f7ec fe92 	bl	80002bc <__adddf3>
 8013598:	460b      	mov	r3, r1
 801359a:	4952      	ldr	r1, [pc, #328]	; (80136e4 <_strtod_l+0xb0c>)
 801359c:	4a56      	ldr	r2, [pc, #344]	; (80136f8 <_strtod_l+0xb20>)
 801359e:	4019      	ands	r1, r3
 80135a0:	4291      	cmp	r1, r2
 80135a2:	4682      	mov	sl, r0
 80135a4:	d95b      	bls.n	801365e <_strtod_l+0xa86>
 80135a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80135ac:	4293      	cmp	r3, r2
 80135ae:	d103      	bne.n	80135b8 <_strtod_l+0x9e0>
 80135b0:	9b08      	ldr	r3, [sp, #32]
 80135b2:	3301      	adds	r3, #1
 80135b4:	f43f ad2e 	beq.w	8013014 <_strtod_l+0x43c>
 80135b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80136e8 <_strtod_l+0xb10>
 80135bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80135c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80135c2:	4648      	mov	r0, r9
 80135c4:	f002 feb1 	bl	801632a <_Bfree>
 80135c8:	9905      	ldr	r1, [sp, #20]
 80135ca:	4648      	mov	r0, r9
 80135cc:	f002 fead 	bl	801632a <_Bfree>
 80135d0:	4641      	mov	r1, r8
 80135d2:	4648      	mov	r0, r9
 80135d4:	f002 fea9 	bl	801632a <_Bfree>
 80135d8:	4621      	mov	r1, r4
 80135da:	4648      	mov	r0, r9
 80135dc:	f002 fea5 	bl	801632a <_Bfree>
 80135e0:	e619      	b.n	8013216 <_strtod_l+0x63e>
 80135e2:	f1ba 0f00 	cmp.w	sl, #0
 80135e6:	d11a      	bne.n	801361e <_strtod_l+0xa46>
 80135e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135ec:	b9eb      	cbnz	r3, 801362a <_strtod_l+0xa52>
 80135ee:	2200      	movs	r2, #0
 80135f0:	4b3f      	ldr	r3, [pc, #252]	; (80136f0 <_strtod_l+0xb18>)
 80135f2:	4630      	mov	r0, r6
 80135f4:	4639      	mov	r1, r7
 80135f6:	f7ed fa89 	bl	8000b0c <__aeabi_dcmplt>
 80135fa:	b9c8      	cbnz	r0, 8013630 <_strtod_l+0xa58>
 80135fc:	4630      	mov	r0, r6
 80135fe:	4639      	mov	r1, r7
 8013600:	2200      	movs	r2, #0
 8013602:	4b3e      	ldr	r3, [pc, #248]	; (80136fc <_strtod_l+0xb24>)
 8013604:	f7ed f810 	bl	8000628 <__aeabi_dmul>
 8013608:	4606      	mov	r6, r0
 801360a:	460f      	mov	r7, r1
 801360c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013610:	9618      	str	r6, [sp, #96]	; 0x60
 8013612:	9319      	str	r3, [sp, #100]	; 0x64
 8013614:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013618:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801361c:	e79c      	b.n	8013558 <_strtod_l+0x980>
 801361e:	f1ba 0f01 	cmp.w	sl, #1
 8013622:	d102      	bne.n	801362a <_strtod_l+0xa52>
 8013624:	2d00      	cmp	r5, #0
 8013626:	f43f ad8e 	beq.w	8013146 <_strtod_l+0x56e>
 801362a:	2200      	movs	r2, #0
 801362c:	4b34      	ldr	r3, [pc, #208]	; (8013700 <_strtod_l+0xb28>)
 801362e:	e78f      	b.n	8013550 <_strtod_l+0x978>
 8013630:	2600      	movs	r6, #0
 8013632:	4f32      	ldr	r7, [pc, #200]	; (80136fc <_strtod_l+0xb24>)
 8013634:	e7ea      	b.n	801360c <_strtod_l+0xa34>
 8013636:	4b31      	ldr	r3, [pc, #196]	; (80136fc <_strtod_l+0xb24>)
 8013638:	4630      	mov	r0, r6
 801363a:	4639      	mov	r1, r7
 801363c:	2200      	movs	r2, #0
 801363e:	f7ec fff3 	bl	8000628 <__aeabi_dmul>
 8013642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013644:	4606      	mov	r6, r0
 8013646:	460f      	mov	r7, r1
 8013648:	b933      	cbnz	r3, 8013658 <_strtod_l+0xa80>
 801364a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801364e:	9010      	str	r0, [sp, #64]	; 0x40
 8013650:	9311      	str	r3, [sp, #68]	; 0x44
 8013652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013656:	e7df      	b.n	8013618 <_strtod_l+0xa40>
 8013658:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801365c:	e7f9      	b.n	8013652 <_strtod_l+0xa7a>
 801365e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013662:	9b04      	ldr	r3, [sp, #16]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1ab      	bne.n	80135c0 <_strtod_l+0x9e8>
 8013668:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801366c:	0d1b      	lsrs	r3, r3, #20
 801366e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013670:	051b      	lsls	r3, r3, #20
 8013672:	429a      	cmp	r2, r3
 8013674:	465d      	mov	r5, fp
 8013676:	d1a3      	bne.n	80135c0 <_strtod_l+0x9e8>
 8013678:	4639      	mov	r1, r7
 801367a:	4630      	mov	r0, r6
 801367c:	f7ed fa84 	bl	8000b88 <__aeabi_d2iz>
 8013680:	f7ec ff68 	bl	8000554 <__aeabi_i2d>
 8013684:	460b      	mov	r3, r1
 8013686:	4602      	mov	r2, r0
 8013688:	4639      	mov	r1, r7
 801368a:	4630      	mov	r0, r6
 801368c:	f7ec fe14 	bl	80002b8 <__aeabi_dsub>
 8013690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013692:	4606      	mov	r6, r0
 8013694:	460f      	mov	r7, r1
 8013696:	b933      	cbnz	r3, 80136a6 <_strtod_l+0xace>
 8013698:	f1ba 0f00 	cmp.w	sl, #0
 801369c:	d103      	bne.n	80136a6 <_strtod_l+0xace>
 801369e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80136a2:	2d00      	cmp	r5, #0
 80136a4:	d06d      	beq.n	8013782 <_strtod_l+0xbaa>
 80136a6:	a30a      	add	r3, pc, #40	; (adr r3, 80136d0 <_strtod_l+0xaf8>)
 80136a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ac:	4630      	mov	r0, r6
 80136ae:	4639      	mov	r1, r7
 80136b0:	f7ed fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	f47f acb8 	bne.w	801302a <_strtod_l+0x452>
 80136ba:	a307      	add	r3, pc, #28	; (adr r3, 80136d8 <_strtod_l+0xb00>)
 80136bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c0:	4630      	mov	r0, r6
 80136c2:	4639      	mov	r1, r7
 80136c4:	f7ed fa40 	bl	8000b48 <__aeabi_dcmpgt>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	f43f af79 	beq.w	80135c0 <_strtod_l+0x9e8>
 80136ce:	e4ac      	b.n	801302a <_strtod_l+0x452>
 80136d0:	94a03595 	.word	0x94a03595
 80136d4:	3fdfffff 	.word	0x3fdfffff
 80136d8:	35afe535 	.word	0x35afe535
 80136dc:	3fe00000 	.word	0x3fe00000
 80136e0:	000fffff 	.word	0x000fffff
 80136e4:	7ff00000 	.word	0x7ff00000
 80136e8:	7fefffff 	.word	0x7fefffff
 80136ec:	39500000 	.word	0x39500000
 80136f0:	3ff00000 	.word	0x3ff00000
 80136f4:	7fe00000 	.word	0x7fe00000
 80136f8:	7c9fffff 	.word	0x7c9fffff
 80136fc:	3fe00000 	.word	0x3fe00000
 8013700:	bff00000 	.word	0xbff00000
 8013704:	9b04      	ldr	r3, [sp, #16]
 8013706:	b333      	cbz	r3, 8013756 <_strtod_l+0xb7e>
 8013708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801370a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801370e:	d822      	bhi.n	8013756 <_strtod_l+0xb7e>
 8013710:	a327      	add	r3, pc, #156	; (adr r3, 80137b0 <_strtod_l+0xbd8>)
 8013712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013716:	4630      	mov	r0, r6
 8013718:	4639      	mov	r1, r7
 801371a:	f7ed fa01 	bl	8000b20 <__aeabi_dcmple>
 801371e:	b1a0      	cbz	r0, 801374a <_strtod_l+0xb72>
 8013720:	4639      	mov	r1, r7
 8013722:	4630      	mov	r0, r6
 8013724:	f7ed fa58 	bl	8000bd8 <__aeabi_d2uiz>
 8013728:	2800      	cmp	r0, #0
 801372a:	bf08      	it	eq
 801372c:	2001      	moveq	r0, #1
 801372e:	f7ec ff01 	bl	8000534 <__aeabi_ui2d>
 8013732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013734:	4606      	mov	r6, r0
 8013736:	460f      	mov	r7, r1
 8013738:	bb03      	cbnz	r3, 801377c <_strtod_l+0xba4>
 801373a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801373e:	9012      	str	r0, [sp, #72]	; 0x48
 8013740:	9313      	str	r3, [sp, #76]	; 0x4c
 8013742:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013746:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801374a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801374c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801374e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013752:	1a9b      	subs	r3, r3, r2
 8013754:	930b      	str	r3, [sp, #44]	; 0x2c
 8013756:	ed9d 0b08 	vldr	d0, [sp, #32]
 801375a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801375e:	f003 f85f 	bl	8016820 <__ulp>
 8013762:	4650      	mov	r0, sl
 8013764:	ec53 2b10 	vmov	r2, r3, d0
 8013768:	4659      	mov	r1, fp
 801376a:	f7ec ff5d 	bl	8000628 <__aeabi_dmul>
 801376e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013772:	f7ec fda3 	bl	80002bc <__adddf3>
 8013776:	4682      	mov	sl, r0
 8013778:	468b      	mov	fp, r1
 801377a:	e772      	b.n	8013662 <_strtod_l+0xa8a>
 801377c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013780:	e7df      	b.n	8013742 <_strtod_l+0xb6a>
 8013782:	a30d      	add	r3, pc, #52	; (adr r3, 80137b8 <_strtod_l+0xbe0>)
 8013784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013788:	f7ed f9c0 	bl	8000b0c <__aeabi_dcmplt>
 801378c:	e79c      	b.n	80136c8 <_strtod_l+0xaf0>
 801378e:	2300      	movs	r3, #0
 8013790:	930d      	str	r3, [sp, #52]	; 0x34
 8013792:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013796:	6013      	str	r3, [r2, #0]
 8013798:	f7ff ba61 	b.w	8012c5e <_strtod_l+0x86>
 801379c:	2b65      	cmp	r3, #101	; 0x65
 801379e:	f04f 0200 	mov.w	r2, #0
 80137a2:	f43f ab4e 	beq.w	8012e42 <_strtod_l+0x26a>
 80137a6:	2101      	movs	r1, #1
 80137a8:	4614      	mov	r4, r2
 80137aa:	9104      	str	r1, [sp, #16]
 80137ac:	f7ff bacb 	b.w	8012d46 <_strtod_l+0x16e>
 80137b0:	ffc00000 	.word	0xffc00000
 80137b4:	41dfffff 	.word	0x41dfffff
 80137b8:	94a03595 	.word	0x94a03595
 80137bc:	3fcfffff 	.word	0x3fcfffff

080137c0 <strtod>:
 80137c0:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <strtod+0x20>)
 80137c2:	4a08      	ldr	r2, [pc, #32]	; (80137e4 <strtod+0x24>)
 80137c4:	b410      	push	{r4}
 80137c6:	681c      	ldr	r4, [r3, #0]
 80137c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	bf08      	it	eq
 80137ce:	4613      	moveq	r3, r2
 80137d0:	460a      	mov	r2, r1
 80137d2:	4601      	mov	r1, r0
 80137d4:	4620      	mov	r0, r4
 80137d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137da:	f7ff b9fd 	b.w	8012bd8 <_strtod_l>
 80137de:	bf00      	nop
 80137e0:	2000019c 	.word	0x2000019c
 80137e4:	200009dc 	.word	0x200009dc

080137e8 <_strtol_l.isra.0>:
 80137e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137ec:	4680      	mov	r8, r0
 80137ee:	4689      	mov	r9, r1
 80137f0:	4692      	mov	sl, r2
 80137f2:	461e      	mov	r6, r3
 80137f4:	460f      	mov	r7, r1
 80137f6:	463d      	mov	r5, r7
 80137f8:	9808      	ldr	r0, [sp, #32]
 80137fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80137fe:	f002 fd47 	bl	8016290 <__locale_ctype_ptr_l>
 8013802:	4420      	add	r0, r4
 8013804:	7843      	ldrb	r3, [r0, #1]
 8013806:	f013 0308 	ands.w	r3, r3, #8
 801380a:	d132      	bne.n	8013872 <_strtol_l.isra.0+0x8a>
 801380c:	2c2d      	cmp	r4, #45	; 0x2d
 801380e:	d132      	bne.n	8013876 <_strtol_l.isra.0+0x8e>
 8013810:	787c      	ldrb	r4, [r7, #1]
 8013812:	1cbd      	adds	r5, r7, #2
 8013814:	2201      	movs	r2, #1
 8013816:	2e00      	cmp	r6, #0
 8013818:	d05d      	beq.n	80138d6 <_strtol_l.isra.0+0xee>
 801381a:	2e10      	cmp	r6, #16
 801381c:	d109      	bne.n	8013832 <_strtol_l.isra.0+0x4a>
 801381e:	2c30      	cmp	r4, #48	; 0x30
 8013820:	d107      	bne.n	8013832 <_strtol_l.isra.0+0x4a>
 8013822:	782b      	ldrb	r3, [r5, #0]
 8013824:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013828:	2b58      	cmp	r3, #88	; 0x58
 801382a:	d14f      	bne.n	80138cc <_strtol_l.isra.0+0xe4>
 801382c:	786c      	ldrb	r4, [r5, #1]
 801382e:	2610      	movs	r6, #16
 8013830:	3502      	adds	r5, #2
 8013832:	2a00      	cmp	r2, #0
 8013834:	bf14      	ite	ne
 8013836:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801383a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801383e:	2700      	movs	r7, #0
 8013840:	fbb1 fcf6 	udiv	ip, r1, r6
 8013844:	4638      	mov	r0, r7
 8013846:	fb06 1e1c 	mls	lr, r6, ip, r1
 801384a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801384e:	2b09      	cmp	r3, #9
 8013850:	d817      	bhi.n	8013882 <_strtol_l.isra.0+0x9a>
 8013852:	461c      	mov	r4, r3
 8013854:	42a6      	cmp	r6, r4
 8013856:	dd23      	ble.n	80138a0 <_strtol_l.isra.0+0xb8>
 8013858:	1c7b      	adds	r3, r7, #1
 801385a:	d007      	beq.n	801386c <_strtol_l.isra.0+0x84>
 801385c:	4584      	cmp	ip, r0
 801385e:	d31c      	bcc.n	801389a <_strtol_l.isra.0+0xb2>
 8013860:	d101      	bne.n	8013866 <_strtol_l.isra.0+0x7e>
 8013862:	45a6      	cmp	lr, r4
 8013864:	db19      	blt.n	801389a <_strtol_l.isra.0+0xb2>
 8013866:	fb00 4006 	mla	r0, r0, r6, r4
 801386a:	2701      	movs	r7, #1
 801386c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013870:	e7eb      	b.n	801384a <_strtol_l.isra.0+0x62>
 8013872:	462f      	mov	r7, r5
 8013874:	e7bf      	b.n	80137f6 <_strtol_l.isra.0+0xe>
 8013876:	2c2b      	cmp	r4, #43	; 0x2b
 8013878:	bf04      	itt	eq
 801387a:	1cbd      	addeq	r5, r7, #2
 801387c:	787c      	ldrbeq	r4, [r7, #1]
 801387e:	461a      	mov	r2, r3
 8013880:	e7c9      	b.n	8013816 <_strtol_l.isra.0+0x2e>
 8013882:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013886:	2b19      	cmp	r3, #25
 8013888:	d801      	bhi.n	801388e <_strtol_l.isra.0+0xa6>
 801388a:	3c37      	subs	r4, #55	; 0x37
 801388c:	e7e2      	b.n	8013854 <_strtol_l.isra.0+0x6c>
 801388e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013892:	2b19      	cmp	r3, #25
 8013894:	d804      	bhi.n	80138a0 <_strtol_l.isra.0+0xb8>
 8013896:	3c57      	subs	r4, #87	; 0x57
 8013898:	e7dc      	b.n	8013854 <_strtol_l.isra.0+0x6c>
 801389a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801389e:	e7e5      	b.n	801386c <_strtol_l.isra.0+0x84>
 80138a0:	1c7b      	adds	r3, r7, #1
 80138a2:	d108      	bne.n	80138b6 <_strtol_l.isra.0+0xce>
 80138a4:	2322      	movs	r3, #34	; 0x22
 80138a6:	f8c8 3000 	str.w	r3, [r8]
 80138aa:	4608      	mov	r0, r1
 80138ac:	f1ba 0f00 	cmp.w	sl, #0
 80138b0:	d107      	bne.n	80138c2 <_strtol_l.isra.0+0xda>
 80138b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b6:	b102      	cbz	r2, 80138ba <_strtol_l.isra.0+0xd2>
 80138b8:	4240      	negs	r0, r0
 80138ba:	f1ba 0f00 	cmp.w	sl, #0
 80138be:	d0f8      	beq.n	80138b2 <_strtol_l.isra.0+0xca>
 80138c0:	b10f      	cbz	r7, 80138c6 <_strtol_l.isra.0+0xde>
 80138c2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80138c6:	f8ca 9000 	str.w	r9, [sl]
 80138ca:	e7f2      	b.n	80138b2 <_strtol_l.isra.0+0xca>
 80138cc:	2430      	movs	r4, #48	; 0x30
 80138ce:	2e00      	cmp	r6, #0
 80138d0:	d1af      	bne.n	8013832 <_strtol_l.isra.0+0x4a>
 80138d2:	2608      	movs	r6, #8
 80138d4:	e7ad      	b.n	8013832 <_strtol_l.isra.0+0x4a>
 80138d6:	2c30      	cmp	r4, #48	; 0x30
 80138d8:	d0a3      	beq.n	8013822 <_strtol_l.isra.0+0x3a>
 80138da:	260a      	movs	r6, #10
 80138dc:	e7a9      	b.n	8013832 <_strtol_l.isra.0+0x4a>
	...

080138e0 <strtol>:
 80138e0:	4b08      	ldr	r3, [pc, #32]	; (8013904 <strtol+0x24>)
 80138e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138e4:	681c      	ldr	r4, [r3, #0]
 80138e6:	4d08      	ldr	r5, [pc, #32]	; (8013908 <strtol+0x28>)
 80138e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	bf08      	it	eq
 80138ee:	462b      	moveq	r3, r5
 80138f0:	9300      	str	r3, [sp, #0]
 80138f2:	4613      	mov	r3, r2
 80138f4:	460a      	mov	r2, r1
 80138f6:	4601      	mov	r1, r0
 80138f8:	4620      	mov	r0, r4
 80138fa:	f7ff ff75 	bl	80137e8 <_strtol_l.isra.0>
 80138fe:	b003      	add	sp, #12
 8013900:	bd30      	pop	{r4, r5, pc}
 8013902:	bf00      	nop
 8013904:	2000019c 	.word	0x2000019c
 8013908:	200009dc 	.word	0x200009dc
 801390c:	00000000 	.word	0x00000000

08013910 <_svfprintf_r>:
 8013910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013914:	b0d3      	sub	sp, #332	; 0x14c
 8013916:	4688      	mov	r8, r1
 8013918:	4693      	mov	fp, r2
 801391a:	461e      	mov	r6, r3
 801391c:	9003      	str	r0, [sp, #12]
 801391e:	f002 fcbd 	bl	801629c <_localeconv_r>
 8013922:	6803      	ldr	r3, [r0, #0]
 8013924:	9316      	str	r3, [sp, #88]	; 0x58
 8013926:	4618      	mov	r0, r3
 8013928:	f7ec fc64 	bl	80001f4 <strlen>
 801392c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013930:	900d      	str	r0, [sp, #52]	; 0x34
 8013932:	0618      	lsls	r0, r3, #24
 8013934:	d518      	bpl.n	8013968 <_svfprintf_r+0x58>
 8013936:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801393a:	b9ab      	cbnz	r3, 8013968 <_svfprintf_r+0x58>
 801393c:	2140      	movs	r1, #64	; 0x40
 801393e:	9803      	ldr	r0, [sp, #12]
 8013940:	f7fe fea0 	bl	8012684 <_malloc_r>
 8013944:	f8c8 0000 	str.w	r0, [r8]
 8013948:	f8c8 0010 	str.w	r0, [r8, #16]
 801394c:	b948      	cbnz	r0, 8013962 <_svfprintf_r+0x52>
 801394e:	9a03      	ldr	r2, [sp, #12]
 8013950:	230c      	movs	r3, #12
 8013952:	6013      	str	r3, [r2, #0]
 8013954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013958:	930e      	str	r3, [sp, #56]	; 0x38
 801395a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801395c:	b053      	add	sp, #332	; 0x14c
 801395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013962:	2340      	movs	r3, #64	; 0x40
 8013964:	f8c8 3014 	str.w	r3, [r8, #20]
 8013968:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 8013c90 <_svfprintf_r+0x380>
 801396c:	2300      	movs	r3, #0
 801396e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8013972:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013976:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 801397a:	ac29      	add	r4, sp, #164	; 0xa4
 801397c:	9426      	str	r4, [sp, #152]	; 0x98
 801397e:	9304      	str	r3, [sp, #16]
 8013980:	9309      	str	r3, [sp, #36]	; 0x24
 8013982:	9312      	str	r3, [sp, #72]	; 0x48
 8013984:	9319      	str	r3, [sp, #100]	; 0x64
 8013986:	930e      	str	r3, [sp, #56]	; 0x38
 8013988:	465d      	mov	r5, fp
 801398a:	462b      	mov	r3, r5
 801398c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013990:	b112      	cbz	r2, 8013998 <_svfprintf_r+0x88>
 8013992:	2a25      	cmp	r2, #37	; 0x25
 8013994:	f040 80e4 	bne.w	8013b60 <_svfprintf_r+0x250>
 8013998:	ebb5 070b 	subs.w	r7, r5, fp
 801399c:	d00e      	beq.n	80139bc <_svfprintf_r+0xac>
 801399e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80139a0:	443b      	add	r3, r7
 80139a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80139a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80139a6:	3301      	adds	r3, #1
 80139a8:	2b07      	cmp	r3, #7
 80139aa:	e9c4 b700 	strd	fp, r7, [r4]
 80139ae:	9327      	str	r3, [sp, #156]	; 0x9c
 80139b0:	f300 80d8 	bgt.w	8013b64 <_svfprintf_r+0x254>
 80139b4:	3408      	adds	r4, #8
 80139b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139b8:	443b      	add	r3, r7
 80139ba:	930e      	str	r3, [sp, #56]	; 0x38
 80139bc:	782b      	ldrb	r3, [r5, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	f001 81b4 	beq.w	8014d2c <_svfprintf_r+0x141c>
 80139c4:	1c6b      	adds	r3, r5, #1
 80139c6:	930c      	str	r3, [sp, #48]	; 0x30
 80139c8:	2300      	movs	r3, #0
 80139ca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80139ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80139d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80139d4:	469a      	mov	sl, r3
 80139d6:	270a      	movs	r7, #10
 80139d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	9306      	str	r3, [sp, #24]
 80139de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139e0:	3301      	adds	r3, #1
 80139e2:	930c      	str	r3, [sp, #48]	; 0x30
 80139e4:	9b06      	ldr	r3, [sp, #24]
 80139e6:	3b20      	subs	r3, #32
 80139e8:	2b5a      	cmp	r3, #90	; 0x5a
 80139ea:	f200 8624 	bhi.w	8014636 <_svfprintf_r+0xd26>
 80139ee:	a201      	add	r2, pc, #4	; (adr r2, 80139f4 <_svfprintf_r+0xe4>)
 80139f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f4:	08013bf7 	.word	0x08013bf7
 80139f8:	08014637 	.word	0x08014637
 80139fc:	08014637 	.word	0x08014637
 8013a00:	08013c09 	.word	0x08013c09
 8013a04:	08014637 	.word	0x08014637
 8013a08:	08014637 	.word	0x08014637
 8013a0c:	08014637 	.word	0x08014637
 8013a10:	08013bbd 	.word	0x08013bbd
 8013a14:	08014637 	.word	0x08014637
 8013a18:	08014637 	.word	0x08014637
 8013a1c:	08013c0f 	.word	0x08013c0f
 8013a20:	08013c27 	.word	0x08013c27
 8013a24:	08014637 	.word	0x08014637
 8013a28:	08013c21 	.word	0x08013c21
 8013a2c:	08013c2b 	.word	0x08013c2b
 8013a30:	08014637 	.word	0x08014637
 8013a34:	08013c5f 	.word	0x08013c5f
 8013a38:	08013c65 	.word	0x08013c65
 8013a3c:	08013c65 	.word	0x08013c65
 8013a40:	08013c65 	.word	0x08013c65
 8013a44:	08013c65 	.word	0x08013c65
 8013a48:	08013c65 	.word	0x08013c65
 8013a4c:	08013c65 	.word	0x08013c65
 8013a50:	08013c65 	.word	0x08013c65
 8013a54:	08013c65 	.word	0x08013c65
 8013a58:	08013c65 	.word	0x08013c65
 8013a5c:	08014637 	.word	0x08014637
 8013a60:	08014637 	.word	0x08014637
 8013a64:	08014637 	.word	0x08014637
 8013a68:	08014637 	.word	0x08014637
 8013a6c:	08014637 	.word	0x08014637
 8013a70:	08014637 	.word	0x08014637
 8013a74:	08014637 	.word	0x08014637
 8013a78:	08013d67 	.word	0x08013d67
 8013a7c:	08014637 	.word	0x08014637
 8013a80:	08013cd1 	.word	0x08013cd1
 8013a84:	08013cf3 	.word	0x08013cf3
 8013a88:	08013d67 	.word	0x08013d67
 8013a8c:	08013d67 	.word	0x08013d67
 8013a90:	08013d67 	.word	0x08013d67
 8013a94:	08014637 	.word	0x08014637
 8013a98:	08014637 	.word	0x08014637
 8013a9c:	08014637 	.word	0x08014637
 8013aa0:	08014637 	.word	0x08014637
 8013aa4:	08013c85 	.word	0x08013c85
 8013aa8:	08014637 	.word	0x08014637
 8013aac:	08014637 	.word	0x08014637
 8013ab0:	08014239 	.word	0x08014239
 8013ab4:	08014637 	.word	0x08014637
 8013ab8:	08014637 	.word	0x08014637
 8013abc:	08014637 	.word	0x08014637
 8013ac0:	080142c5 	.word	0x080142c5
 8013ac4:	08014637 	.word	0x08014637
 8013ac8:	080144a7 	.word	0x080144a7
 8013acc:	08014637 	.word	0x08014637
 8013ad0:	08014637 	.word	0x08014637
 8013ad4:	08013b7d 	.word	0x08013b7d
 8013ad8:	08014637 	.word	0x08014637
 8013adc:	08014637 	.word	0x08014637
 8013ae0:	08014637 	.word	0x08014637
 8013ae4:	08014637 	.word	0x08014637
 8013ae8:	08014637 	.word	0x08014637
 8013aec:	08014637 	.word	0x08014637
 8013af0:	08014637 	.word	0x08014637
 8013af4:	08014637 	.word	0x08014637
 8013af8:	08013d67 	.word	0x08013d67
 8013afc:	08014637 	.word	0x08014637
 8013b00:	08013cd1 	.word	0x08013cd1
 8013b04:	08013cf7 	.word	0x08013cf7
 8013b08:	08013d67 	.word	0x08013d67
 8013b0c:	08013d67 	.word	0x08013d67
 8013b10:	08013d67 	.word	0x08013d67
 8013b14:	08013c9d 	.word	0x08013c9d
 8013b18:	08013cf7 	.word	0x08013cf7
 8013b1c:	08013cc5 	.word	0x08013cc5
 8013b20:	08014637 	.word	0x08014637
 8013b24:	08013cb7 	.word	0x08013cb7
 8013b28:	08014637 	.word	0x08014637
 8013b2c:	080141f3 	.word	0x080141f3
 8013b30:	0801423d 	.word	0x0801423d
 8013b34:	080142a5 	.word	0x080142a5
 8013b38:	08013cc5 	.word	0x08013cc5
 8013b3c:	08014637 	.word	0x08014637
 8013b40:	080142c5 	.word	0x080142c5
 8013b44:	080139d9 	.word	0x080139d9
 8013b48:	080144ab 	.word	0x080144ab
 8013b4c:	08014637 	.word	0x08014637
 8013b50:	08014637 	.word	0x08014637
 8013b54:	080144e9 	.word	0x080144e9
 8013b58:	08014637 	.word	0x08014637
 8013b5c:	080139d9 	.word	0x080139d9
 8013b60:	461d      	mov	r5, r3
 8013b62:	e712      	b.n	801398a <_svfprintf_r+0x7a>
 8013b64:	aa26      	add	r2, sp, #152	; 0x98
 8013b66:	4641      	mov	r1, r8
 8013b68:	9803      	ldr	r0, [sp, #12]
 8013b6a:	f002 ffea 	bl	8016b42 <__ssprint_r>
 8013b6e:	2800      	cmp	r0, #0
 8013b70:	f040 8166 	bne.w	8013e40 <_svfprintf_r+0x530>
 8013b74:	ac29      	add	r4, sp, #164	; 0xa4
 8013b76:	e71e      	b.n	80139b6 <_svfprintf_r+0xa6>
 8013b78:	461e      	mov	r6, r3
 8013b7a:	e72d      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013b7c:	4b46      	ldr	r3, [pc, #280]	; (8013c98 <_svfprintf_r+0x388>)
 8013b7e:	9318      	str	r3, [sp, #96]	; 0x60
 8013b80:	f01a 0f20 	tst.w	sl, #32
 8013b84:	f000 84b3 	beq.w	80144ee <_svfprintf_r+0xbde>
 8013b88:	3607      	adds	r6, #7
 8013b8a:	f026 0607 	bic.w	r6, r6, #7
 8013b8e:	f106 0308 	add.w	r3, r6, #8
 8013b92:	e9d6 6700 	ldrd	r6, r7, [r6]
 8013b96:	9308      	str	r3, [sp, #32]
 8013b98:	f01a 0f01 	tst.w	sl, #1
 8013b9c:	d00a      	beq.n	8013bb4 <_svfprintf_r+0x2a4>
 8013b9e:	ea56 0307 	orrs.w	r3, r6, r7
 8013ba2:	d007      	beq.n	8013bb4 <_svfprintf_r+0x2a4>
 8013ba4:	2330      	movs	r3, #48	; 0x30
 8013ba6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8013baa:	9b06      	ldr	r3, [sp, #24]
 8013bac:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8013bb0:	f04a 0a02 	orr.w	sl, sl, #2
 8013bb4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8013bb8:	2302      	movs	r3, #2
 8013bba:	e34d      	b.n	8014258 <_svfprintf_r+0x948>
 8013bbc:	9803      	ldr	r0, [sp, #12]
 8013bbe:	f002 fb6d 	bl	801629c <_localeconv_r>
 8013bc2:	6843      	ldr	r3, [r0, #4]
 8013bc4:	9319      	str	r3, [sp, #100]	; 0x64
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7ec fb14 	bl	80001f4 <strlen>
 8013bcc:	9012      	str	r0, [sp, #72]	; 0x48
 8013bce:	9803      	ldr	r0, [sp, #12]
 8013bd0:	f002 fb64 	bl	801629c <_localeconv_r>
 8013bd4:	6883      	ldr	r3, [r0, #8]
 8013bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	f43f aefc 	beq.w	80139d8 <_svfprintf_r+0xc8>
 8013be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f43f aef8 	beq.w	80139d8 <_svfprintf_r+0xc8>
 8013be8:	781b      	ldrb	r3, [r3, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	f43f aef4 	beq.w	80139d8 <_svfprintf_r+0xc8>
 8013bf0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8013bf4:	e6f0      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013bf6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f47f aeec 	bne.w	80139d8 <_svfprintf_r+0xc8>
 8013c00:	2320      	movs	r3, #32
 8013c02:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8013c06:	e6e7      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c08:	f04a 0a01 	orr.w	sl, sl, #1
 8013c0c:	e6e4      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c0e:	6832      	ldr	r2, [r6, #0]
 8013c10:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c12:	2a00      	cmp	r2, #0
 8013c14:	f106 0304 	add.w	r3, r6, #4
 8013c18:	daae      	bge.n	8013b78 <_svfprintf_r+0x268>
 8013c1a:	4252      	negs	r2, r2
 8013c1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c1e:	461e      	mov	r6, r3
 8013c20:	f04a 0a04 	orr.w	sl, sl, #4
 8013c24:	e6d8      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c26:	232b      	movs	r3, #43	; 0x2b
 8013c28:	e7eb      	b.n	8013c02 <_svfprintf_r+0x2f2>
 8013c2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c2e:	7812      	ldrb	r2, [r2, #0]
 8013c30:	9206      	str	r2, [sp, #24]
 8013c32:	2a2a      	cmp	r2, #42	; 0x2a
 8013c34:	f103 0301 	add.w	r3, r3, #1
 8013c38:	d10f      	bne.n	8013c5a <_svfprintf_r+0x34a>
 8013c3a:	6835      	ldr	r5, [r6, #0]
 8013c3c:	930c      	str	r3, [sp, #48]	; 0x30
 8013c3e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8013c42:	3604      	adds	r6, #4
 8013c44:	e6c8      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c46:	fb07 2505 	mla	r5, r7, r5, r2
 8013c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c4e:	9206      	str	r2, [sp, #24]
 8013c50:	9a06      	ldr	r2, [sp, #24]
 8013c52:	3a30      	subs	r2, #48	; 0x30
 8013c54:	2a09      	cmp	r2, #9
 8013c56:	d9f6      	bls.n	8013c46 <_svfprintf_r+0x336>
 8013c58:	e6c3      	b.n	80139e2 <_svfprintf_r+0xd2>
 8013c5a:	2500      	movs	r5, #0
 8013c5c:	e7f8      	b.n	8013c50 <_svfprintf_r+0x340>
 8013c5e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8013c62:	e6b9      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c64:	2200      	movs	r2, #0
 8013c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c68:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c6a:	9a06      	ldr	r2, [sp, #24]
 8013c6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013c6e:	3a30      	subs	r2, #48	; 0x30
 8013c70:	fb07 2201 	mla	r2, r7, r1, r2
 8013c74:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c7a:	9206      	str	r2, [sp, #24]
 8013c7c:	3a30      	subs	r2, #48	; 0x30
 8013c7e:	2a09      	cmp	r2, #9
 8013c80:	d9f3      	bls.n	8013c6a <_svfprintf_r+0x35a>
 8013c82:	e6ae      	b.n	80139e2 <_svfprintf_r+0xd2>
 8013c84:	f04a 0a08 	orr.w	sl, sl, #8
 8013c88:	e6a6      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013c8a:	bf00      	nop
 8013c8c:	f3af 8000 	nop.w
	...
 8013c98:	08019c01 	.word	0x08019c01
 8013c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c9e:	781b      	ldrb	r3, [r3, #0]
 8013ca0:	2b68      	cmp	r3, #104	; 0x68
 8013ca2:	bf01      	itttt	eq
 8013ca4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8013ca6:	3301      	addeq	r3, #1
 8013ca8:	930c      	streq	r3, [sp, #48]	; 0x30
 8013caa:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8013cae:	bf18      	it	ne
 8013cb0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8013cb4:	e690      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	2b6c      	cmp	r3, #108	; 0x6c
 8013cbc:	d105      	bne.n	8013cca <_svfprintf_r+0x3ba>
 8013cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8013cc4:	f04a 0a20 	orr.w	sl, sl, #32
 8013cc8:	e686      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013cca:	f04a 0a10 	orr.w	sl, sl, #16
 8013cce:	e683      	b.n	80139d8 <_svfprintf_r+0xc8>
 8013cd0:	1d33      	adds	r3, r6, #4
 8013cd2:	9308      	str	r3, [sp, #32]
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	6833      	ldr	r3, [r6, #0]
 8013cd8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8013cdc:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8013ce0:	4681      	mov	r9, r0
 8013ce2:	2501      	movs	r5, #1
 8013ce4:	9010      	str	r0, [sp, #64]	; 0x40
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	9007      	str	r0, [sp, #28]
 8013cea:	4606      	mov	r6, r0
 8013cec:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8013cf0:	e301      	b.n	80142f6 <_svfprintf_r+0x9e6>
 8013cf2:	f04a 0a10 	orr.w	sl, sl, #16
 8013cf6:	f01a 0f20 	tst.w	sl, #32
 8013cfa:	d021      	beq.n	8013d40 <_svfprintf_r+0x430>
 8013cfc:	3607      	adds	r6, #7
 8013cfe:	f026 0607 	bic.w	r6, r6, #7
 8013d02:	f106 0308 	add.w	r3, r6, #8
 8013d06:	e9d6 6700 	ldrd	r6, r7, [r6]
 8013d0a:	9308      	str	r3, [sp, #32]
 8013d0c:	2e00      	cmp	r6, #0
 8013d0e:	f177 0300 	sbcs.w	r3, r7, #0
 8013d12:	da06      	bge.n	8013d22 <_svfprintf_r+0x412>
 8013d14:	4276      	negs	r6, r6
 8013d16:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013d1a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8013d1e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8013d22:	1c6b      	adds	r3, r5, #1
 8013d24:	f040 83f6 	bne.w	8014514 <_svfprintf_r+0xc04>
 8013d28:	2f00      	cmp	r7, #0
 8013d2a:	bf08      	it	eq
 8013d2c:	2e0a      	cmpeq	r6, #10
 8013d2e:	f080 8427 	bcs.w	8014580 <_svfprintf_r+0xc70>
 8013d32:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8013d36:	3630      	adds	r6, #48	; 0x30
 8013d38:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 8013d3c:	f000 bc0d 	b.w	801455a <_svfprintf_r+0xc4a>
 8013d40:	1d33      	adds	r3, r6, #4
 8013d42:	f01a 0f10 	tst.w	sl, #16
 8013d46:	9308      	str	r3, [sp, #32]
 8013d48:	d002      	beq.n	8013d50 <_svfprintf_r+0x440>
 8013d4a:	6836      	ldr	r6, [r6, #0]
 8013d4c:	17f7      	asrs	r7, r6, #31
 8013d4e:	e7dd      	b.n	8013d0c <_svfprintf_r+0x3fc>
 8013d50:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013d54:	6836      	ldr	r6, [r6, #0]
 8013d56:	d001      	beq.n	8013d5c <_svfprintf_r+0x44c>
 8013d58:	b236      	sxth	r6, r6
 8013d5a:	e7f7      	b.n	8013d4c <_svfprintf_r+0x43c>
 8013d5c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013d60:	bf18      	it	ne
 8013d62:	b276      	sxtbne	r6, r6
 8013d64:	e7f2      	b.n	8013d4c <_svfprintf_r+0x43c>
 8013d66:	3607      	adds	r6, #7
 8013d68:	f026 0607 	bic.w	r6, r6, #7
 8013d6c:	ed96 7b00 	vldr	d7, [r6]
 8013d70:	f106 0308 	add.w	r3, r6, #8
 8013d74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013d78:	9308      	str	r3, [sp, #32]
 8013d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8013d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d8a:	4bb2      	ldr	r3, [pc, #712]	; (8014054 <_svfprintf_r+0x744>)
 8013d8c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8013d90:	f7ec fee4 	bl	8000b5c <__aeabi_dcmpun>
 8013d94:	bb00      	cbnz	r0, 8013dd8 <_svfprintf_r+0x4c8>
 8013d96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d9a:	4bae      	ldr	r3, [pc, #696]	; (8014054 <_svfprintf_r+0x744>)
 8013d9c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8013da0:	f7ec febe 	bl	8000b20 <__aeabi_dcmple>
 8013da4:	b9c0      	cbnz	r0, 8013dd8 <_svfprintf_r+0x4c8>
 8013da6:	2200      	movs	r2, #0
 8013da8:	2300      	movs	r3, #0
 8013daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013dae:	f7ec fead 	bl	8000b0c <__aeabi_dcmplt>
 8013db2:	b110      	cbz	r0, 8013dba <_svfprintf_r+0x4aa>
 8013db4:	232d      	movs	r3, #45	; 0x2d
 8013db6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8013dba:	4aa7      	ldr	r2, [pc, #668]	; (8014058 <_svfprintf_r+0x748>)
 8013dbc:	4ba7      	ldr	r3, [pc, #668]	; (801405c <_svfprintf_r+0x74c>)
 8013dbe:	9906      	ldr	r1, [sp, #24]
 8013dc0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8013dc4:	2947      	cmp	r1, #71	; 0x47
 8013dc6:	bfcc      	ite	gt
 8013dc8:	4693      	movgt	fp, r2
 8013dca:	469b      	movle	fp, r3
 8013dcc:	f04f 0900 	mov.w	r9, #0
 8013dd0:	2503      	movs	r5, #3
 8013dd2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8013dd6:	e3c6      	b.n	8014566 <_svfprintf_r+0xc56>
 8013dd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ddc:	4610      	mov	r0, r2
 8013dde:	4619      	mov	r1, r3
 8013de0:	f7ec febc 	bl	8000b5c <__aeabi_dcmpun>
 8013de4:	4681      	mov	r9, r0
 8013de6:	b140      	cbz	r0, 8013dfa <_svfprintf_r+0x4ea>
 8013de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dea:	4a9d      	ldr	r2, [pc, #628]	; (8014060 <_svfprintf_r+0x750>)
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	bfbc      	itt	lt
 8013df0:	232d      	movlt	r3, #45	; 0x2d
 8013df2:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8013df6:	4b9b      	ldr	r3, [pc, #620]	; (8014064 <_svfprintf_r+0x754>)
 8013df8:	e7e1      	b.n	8013dbe <_svfprintf_r+0x4ae>
 8013dfa:	9b06      	ldr	r3, [sp, #24]
 8013dfc:	f023 0320 	bic.w	r3, r3, #32
 8013e00:	2b41      	cmp	r3, #65	; 0x41
 8013e02:	9307      	str	r3, [sp, #28]
 8013e04:	d125      	bne.n	8013e52 <_svfprintf_r+0x542>
 8013e06:	2330      	movs	r3, #48	; 0x30
 8013e08:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8013e0c:	9b06      	ldr	r3, [sp, #24]
 8013e0e:	2b61      	cmp	r3, #97	; 0x61
 8013e10:	bf14      	ite	ne
 8013e12:	2358      	movne	r3, #88	; 0x58
 8013e14:	2378      	moveq	r3, #120	; 0x78
 8013e16:	2d63      	cmp	r5, #99	; 0x63
 8013e18:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8013e1c:	f04a 0a02 	orr.w	sl, sl, #2
 8013e20:	f340 8108 	ble.w	8014034 <_svfprintf_r+0x724>
 8013e24:	1c69      	adds	r1, r5, #1
 8013e26:	9803      	ldr	r0, [sp, #12]
 8013e28:	f7fe fc2c 	bl	8012684 <_malloc_r>
 8013e2c:	4683      	mov	fp, r0
 8013e2e:	2800      	cmp	r0, #0
 8013e30:	f040 8103 	bne.w	801403a <_svfprintf_r+0x72a>
 8013e34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e3c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8013e40:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8013e44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e4a:	bf18      	it	ne
 8013e4c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8013e50:	e582      	b.n	8013958 <_svfprintf_r+0x48>
 8013e52:	1c69      	adds	r1, r5, #1
 8013e54:	f000 80f3 	beq.w	801403e <_svfprintf_r+0x72e>
 8013e58:	9b07      	ldr	r3, [sp, #28]
 8013e5a:	2b47      	cmp	r3, #71	; 0x47
 8013e5c:	d102      	bne.n	8013e64 <_svfprintf_r+0x554>
 8013e5e:	2d00      	cmp	r5, #0
 8013e60:	f000 80ef 	beq.w	8014042 <_svfprintf_r+0x732>
 8013e64:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8013e68:	9310      	str	r3, [sp, #64]	; 0x40
 8013e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f280 80eb 	bge.w	8014048 <_svfprintf_r+0x738>
 8013e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e74:	9314      	str	r3, [sp, #80]	; 0x50
 8013e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013e7c:	9315      	str	r3, [sp, #84]	; 0x54
 8013e7e:	232d      	movs	r3, #45	; 0x2d
 8013e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8013e82:	9b07      	ldr	r3, [sp, #28]
 8013e84:	2b41      	cmp	r3, #65	; 0x41
 8013e86:	f040 8105 	bne.w	8014094 <_svfprintf_r+0x784>
 8013e8a:	a820      	add	r0, sp, #128	; 0x80
 8013e8c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8013e90:	f002 fdfa 	bl	8016a88 <frexp>
 8013e94:	2200      	movs	r2, #0
 8013e96:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013e9a:	ec51 0b10 	vmov	r0, r1, d0
 8013e9e:	f7ec fbc3 	bl	8000628 <__aeabi_dmul>
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013eaa:	f7ec fe25 	bl	8000af8 <__aeabi_dcmpeq>
 8013eae:	b108      	cbz	r0, 8013eb4 <_svfprintf_r+0x5a4>
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	9320      	str	r3, [sp, #128]	; 0x80
 8013eb4:	4f6c      	ldr	r7, [pc, #432]	; (8014068 <_svfprintf_r+0x758>)
 8013eb6:	4b6d      	ldr	r3, [pc, #436]	; (801406c <_svfprintf_r+0x75c>)
 8013eb8:	9a06      	ldr	r2, [sp, #24]
 8013eba:	2a61      	cmp	r2, #97	; 0x61
 8013ebc:	bf08      	it	eq
 8013ebe:	461f      	moveq	r7, r3
 8013ec0:	9711      	str	r7, [sp, #68]	; 0x44
 8013ec2:	465e      	mov	r6, fp
 8013ec4:	1e6f      	subs	r7, r5, #1
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	4b69      	ldr	r3, [pc, #420]	; (8014070 <_svfprintf_r+0x760>)
 8013eca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ece:	f7ec fbab 	bl	8000628 <__aeabi_dmul>
 8013ed2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ed6:	f7ec fe57 	bl	8000b88 <__aeabi_d2iz>
 8013eda:	901c      	str	r0, [sp, #112]	; 0x70
 8013edc:	f7ec fb3a 	bl	8000554 <__aeabi_i2d>
 8013ee0:	4602      	mov	r2, r0
 8013ee2:	460b      	mov	r3, r1
 8013ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ee8:	f7ec f9e6 	bl	80002b8 <__aeabi_dsub>
 8013eec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ef0:	971d      	str	r7, [sp, #116]	; 0x74
 8013ef2:	5c9b      	ldrb	r3, [r3, r2]
 8013ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8013ef8:	1c7a      	adds	r2, r7, #1
 8013efa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013efe:	d006      	beq.n	8013f0e <_svfprintf_r+0x5fe>
 8013f00:	2200      	movs	r2, #0
 8013f02:	2300      	movs	r3, #0
 8013f04:	3f01      	subs	r7, #1
 8013f06:	f7ec fdf7 	bl	8000af8 <__aeabi_dcmpeq>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	d0db      	beq.n	8013ec6 <_svfprintf_r+0x5b6>
 8013f0e:	2200      	movs	r2, #0
 8013f10:	4b58      	ldr	r3, [pc, #352]	; (8014074 <_svfprintf_r+0x764>)
 8013f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f16:	f7ec fe17 	bl	8000b48 <__aeabi_dcmpgt>
 8013f1a:	b960      	cbnz	r0, 8013f36 <_svfprintf_r+0x626>
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	4b55      	ldr	r3, [pc, #340]	; (8014074 <_svfprintf_r+0x764>)
 8013f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f24:	f7ec fde8 	bl	8000af8 <__aeabi_dcmpeq>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	f000 80ae 	beq.w	801408a <_svfprintf_r+0x77a>
 8013f2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013f30:	07db      	lsls	r3, r3, #31
 8013f32:	f140 80aa 	bpl.w	801408a <_svfprintf_r+0x77a>
 8013f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f38:	9624      	str	r6, [sp, #144]	; 0x90
 8013f3a:	7bd9      	ldrb	r1, [r3, #15]
 8013f3c:	2030      	movs	r0, #48	; 0x30
 8013f3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013f40:	1e53      	subs	r3, r2, #1
 8013f42:	9324      	str	r3, [sp, #144]	; 0x90
 8013f44:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8013f48:	428b      	cmp	r3, r1
 8013f4a:	f000 8095 	beq.w	8014078 <_svfprintf_r+0x768>
 8013f4e:	2b39      	cmp	r3, #57	; 0x39
 8013f50:	bf0b      	itete	eq
 8013f52:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8013f54:	3301      	addne	r3, #1
 8013f56:	7a9b      	ldrbeq	r3, [r3, #10]
 8013f58:	b2db      	uxtbne	r3, r3
 8013f5a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013f5e:	4633      	mov	r3, r6
 8013f60:	eba3 030b 	sub.w	r3, r3, fp
 8013f64:	9304      	str	r3, [sp, #16]
 8013f66:	9b07      	ldr	r3, [sp, #28]
 8013f68:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013f6a:	2b47      	cmp	r3, #71	; 0x47
 8013f6c:	f040 80d7 	bne.w	801411e <_svfprintf_r+0x80e>
 8013f70:	1cf7      	adds	r7, r6, #3
 8013f72:	db02      	blt.n	8013f7a <_svfprintf_r+0x66a>
 8013f74:	42b5      	cmp	r5, r6
 8013f76:	f280 80fd 	bge.w	8014174 <_svfprintf_r+0x864>
 8013f7a:	9b06      	ldr	r3, [sp, #24]
 8013f7c:	3b02      	subs	r3, #2
 8013f7e:	9306      	str	r3, [sp, #24]
 8013f80:	9906      	ldr	r1, [sp, #24]
 8013f82:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8013f86:	f021 0120 	bic.w	r1, r1, #32
 8013f8a:	2941      	cmp	r1, #65	; 0x41
 8013f8c:	bf08      	it	eq
 8013f8e:	320f      	addeq	r2, #15
 8013f90:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 8013f94:	bf06      	itte	eq
 8013f96:	b2d2      	uxtbeq	r2, r2
 8013f98:	2101      	moveq	r1, #1
 8013f9a:	2100      	movne	r1, #0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	9320      	str	r3, [sp, #128]	; 0x80
 8013fa0:	bfb8      	it	lt
 8013fa2:	f1c6 0301 	rsblt	r3, r6, #1
 8013fa6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8013faa:	bfb4      	ite	lt
 8013fac:	222d      	movlt	r2, #45	; 0x2d
 8013fae:	222b      	movge	r2, #43	; 0x2b
 8013fb0:	2b09      	cmp	r3, #9
 8013fb2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8013fb6:	f340 80c9 	ble.w	801414c <_svfprintf_r+0x83c>
 8013fba:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8013fbe:	250a      	movs	r5, #10
 8013fc0:	fb93 f0f5 	sdiv	r0, r3, r5
 8013fc4:	fb05 3310 	mls	r3, r5, r0, r3
 8013fc8:	3330      	adds	r3, #48	; 0x30
 8013fca:	2809      	cmp	r0, #9
 8013fcc:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013fd0:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	f300 80b2 	bgt.w	801413e <_svfprintf_r+0x82e>
 8013fda:	3330      	adds	r3, #48	; 0x30
 8013fdc:	f801 3c01 	strb.w	r3, [r1, #-1]
 8013fe0:	3a02      	subs	r2, #2
 8013fe2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8013fe6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8013fea:	4282      	cmp	r2, r0
 8013fec:	4619      	mov	r1, r3
 8013fee:	f0c0 80a8 	bcc.w	8014142 <_svfprintf_r+0x832>
 8013ff2:	9a04      	ldr	r2, [sp, #16]
 8013ff4:	ab22      	add	r3, sp, #136	; 0x88
 8013ff6:	1acb      	subs	r3, r1, r3
 8013ff8:	2a01      	cmp	r2, #1
 8013ffa:	9317      	str	r3, [sp, #92]	; 0x5c
 8013ffc:	eb03 0502 	add.w	r5, r3, r2
 8014000:	dc02      	bgt.n	8014008 <_svfprintf_r+0x6f8>
 8014002:	f01a 0f01 	tst.w	sl, #1
 8014006:	d001      	beq.n	801400c <_svfprintf_r+0x6fc>
 8014008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801400a:	441d      	add	r5, r3
 801400c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8014010:	2700      	movs	r7, #0
 8014012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014016:	9310      	str	r3, [sp, #64]	; 0x40
 8014018:	9707      	str	r7, [sp, #28]
 801401a:	463e      	mov	r6, r7
 801401c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801401e:	2b00      	cmp	r3, #0
 8014020:	f000 8315 	beq.w	801464e <_svfprintf_r+0xd3e>
 8014024:	232d      	movs	r3, #45	; 0x2d
 8014026:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 801402a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801402e:	2300      	movs	r3, #0
 8014030:	9310      	str	r3, [sp, #64]	; 0x40
 8014032:	e160      	b.n	80142f6 <_svfprintf_r+0x9e6>
 8014034:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8014038:	e714      	b.n	8013e64 <_svfprintf_r+0x554>
 801403a:	4681      	mov	r9, r0
 801403c:	e712      	b.n	8013e64 <_svfprintf_r+0x554>
 801403e:	2506      	movs	r5, #6
 8014040:	e710      	b.n	8013e64 <_svfprintf_r+0x554>
 8014042:	46a9      	mov	r9, r5
 8014044:	2501      	movs	r5, #1
 8014046:	e70d      	b.n	8013e64 <_svfprintf_r+0x554>
 8014048:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801404c:	2300      	movs	r3, #0
 801404e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8014052:	e715      	b.n	8013e80 <_svfprintf_r+0x570>
 8014054:	7fefffff 	.word	0x7fefffff
 8014058:	08019be4 	.word	0x08019be4
 801405c:	08019be0 	.word	0x08019be0
 8014060:	08019bec 	.word	0x08019bec
 8014064:	08019be8 	.word	0x08019be8
 8014068:	08019c01 	.word	0x08019c01
 801406c:	08019bf0 	.word	0x08019bf0
 8014070:	40300000 	.word	0x40300000
 8014074:	3fe00000 	.word	0x3fe00000
 8014078:	f802 0c01 	strb.w	r0, [r2, #-1]
 801407c:	e75f      	b.n	8013f3e <_svfprintf_r+0x62e>
 801407e:	f803 1b01 	strb.w	r1, [r3], #1
 8014082:	1af2      	subs	r2, r6, r3
 8014084:	2a00      	cmp	r2, #0
 8014086:	dafa      	bge.n	801407e <_svfprintf_r+0x76e>
 8014088:	e76a      	b.n	8013f60 <_svfprintf_r+0x650>
 801408a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801408c:	4633      	mov	r3, r6
 801408e:	2130      	movs	r1, #48	; 0x30
 8014090:	4416      	add	r6, r2
 8014092:	e7f6      	b.n	8014082 <_svfprintf_r+0x772>
 8014094:	9b07      	ldr	r3, [sp, #28]
 8014096:	2b46      	cmp	r3, #70	; 0x46
 8014098:	d004      	beq.n	80140a4 <_svfprintf_r+0x794>
 801409a:	2b45      	cmp	r3, #69	; 0x45
 801409c:	d13a      	bne.n	8014114 <_svfprintf_r+0x804>
 801409e:	1c6e      	adds	r6, r5, #1
 80140a0:	2102      	movs	r1, #2
 80140a2:	e001      	b.n	80140a8 <_svfprintf_r+0x798>
 80140a4:	462e      	mov	r6, r5
 80140a6:	2103      	movs	r1, #3
 80140a8:	ab24      	add	r3, sp, #144	; 0x90
 80140aa:	9301      	str	r3, [sp, #4]
 80140ac:	ab21      	add	r3, sp, #132	; 0x84
 80140ae:	9300      	str	r3, [sp, #0]
 80140b0:	4632      	mov	r2, r6
 80140b2:	ab20      	add	r3, sp, #128	; 0x80
 80140b4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80140b8:	9803      	ldr	r0, [sp, #12]
 80140ba:	f000 fef1 	bl	8014ea0 <_dtoa_r>
 80140be:	9b07      	ldr	r3, [sp, #28]
 80140c0:	2b47      	cmp	r3, #71	; 0x47
 80140c2:	4683      	mov	fp, r0
 80140c4:	d102      	bne.n	80140cc <_svfprintf_r+0x7bc>
 80140c6:	f01a 0f01 	tst.w	sl, #1
 80140ca:	d026      	beq.n	801411a <_svfprintf_r+0x80a>
 80140cc:	9b07      	ldr	r3, [sp, #28]
 80140ce:	2b46      	cmp	r3, #70	; 0x46
 80140d0:	eb0b 0706 	add.w	r7, fp, r6
 80140d4:	d10f      	bne.n	80140f6 <_svfprintf_r+0x7e6>
 80140d6:	f89b 3000 	ldrb.w	r3, [fp]
 80140da:	2b30      	cmp	r3, #48	; 0x30
 80140dc:	d109      	bne.n	80140f2 <_svfprintf_r+0x7e2>
 80140de:	2200      	movs	r2, #0
 80140e0:	2300      	movs	r3, #0
 80140e2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80140e6:	f7ec fd07 	bl	8000af8 <__aeabi_dcmpeq>
 80140ea:	b910      	cbnz	r0, 80140f2 <_svfprintf_r+0x7e2>
 80140ec:	f1c6 0601 	rsb	r6, r6, #1
 80140f0:	9620      	str	r6, [sp, #128]	; 0x80
 80140f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80140f4:	441f      	add	r7, r3
 80140f6:	2200      	movs	r2, #0
 80140f8:	2300      	movs	r3, #0
 80140fa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80140fe:	f7ec fcfb 	bl	8000af8 <__aeabi_dcmpeq>
 8014102:	b948      	cbnz	r0, 8014118 <_svfprintf_r+0x808>
 8014104:	2230      	movs	r2, #48	; 0x30
 8014106:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014108:	429f      	cmp	r7, r3
 801410a:	d906      	bls.n	801411a <_svfprintf_r+0x80a>
 801410c:	1c59      	adds	r1, r3, #1
 801410e:	9124      	str	r1, [sp, #144]	; 0x90
 8014110:	701a      	strb	r2, [r3, #0]
 8014112:	e7f8      	b.n	8014106 <_svfprintf_r+0x7f6>
 8014114:	462e      	mov	r6, r5
 8014116:	e7c3      	b.n	80140a0 <_svfprintf_r+0x790>
 8014118:	9724      	str	r7, [sp, #144]	; 0x90
 801411a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801411c:	e720      	b.n	8013f60 <_svfprintf_r+0x650>
 801411e:	9b07      	ldr	r3, [sp, #28]
 8014120:	2b46      	cmp	r3, #70	; 0x46
 8014122:	f47f af2d 	bne.w	8013f80 <_svfprintf_r+0x670>
 8014126:	2e00      	cmp	r6, #0
 8014128:	dd1d      	ble.n	8014166 <_svfprintf_r+0x856>
 801412a:	b915      	cbnz	r5, 8014132 <_svfprintf_r+0x822>
 801412c:	f01a 0f01 	tst.w	sl, #1
 8014130:	d034      	beq.n	801419c <_svfprintf_r+0x88c>
 8014132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014134:	18f3      	adds	r3, r6, r3
 8014136:	441d      	add	r5, r3
 8014138:	2366      	movs	r3, #102	; 0x66
 801413a:	9306      	str	r3, [sp, #24]
 801413c:	e033      	b.n	80141a6 <_svfprintf_r+0x896>
 801413e:	460a      	mov	r2, r1
 8014140:	e73e      	b.n	8013fc0 <_svfprintf_r+0x6b0>
 8014142:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014146:	f803 1b01 	strb.w	r1, [r3], #1
 801414a:	e74e      	b.n	8013fea <_svfprintf_r+0x6da>
 801414c:	b941      	cbnz	r1, 8014160 <_svfprintf_r+0x850>
 801414e:	2230      	movs	r2, #48	; 0x30
 8014150:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8014154:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8014158:	3330      	adds	r3, #48	; 0x30
 801415a:	1c51      	adds	r1, r2, #1
 801415c:	7013      	strb	r3, [r2, #0]
 801415e:	e748      	b.n	8013ff2 <_svfprintf_r+0x6e2>
 8014160:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8014164:	e7f8      	b.n	8014158 <_svfprintf_r+0x848>
 8014166:	b915      	cbnz	r5, 801416e <_svfprintf_r+0x85e>
 8014168:	f01a 0f01 	tst.w	sl, #1
 801416c:	d018      	beq.n	80141a0 <_svfprintf_r+0x890>
 801416e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014170:	3301      	adds	r3, #1
 8014172:	e7e0      	b.n	8014136 <_svfprintf_r+0x826>
 8014174:	9b04      	ldr	r3, [sp, #16]
 8014176:	42b3      	cmp	r3, r6
 8014178:	dc06      	bgt.n	8014188 <_svfprintf_r+0x878>
 801417a:	f01a 0f01 	tst.w	sl, #1
 801417e:	d025      	beq.n	80141cc <_svfprintf_r+0x8bc>
 8014180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014182:	18f5      	adds	r5, r6, r3
 8014184:	2367      	movs	r3, #103	; 0x67
 8014186:	e7d8      	b.n	801413a <_svfprintf_r+0x82a>
 8014188:	9b04      	ldr	r3, [sp, #16]
 801418a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801418c:	2e00      	cmp	r6, #0
 801418e:	eb03 0502 	add.w	r5, r3, r2
 8014192:	dcf7      	bgt.n	8014184 <_svfprintf_r+0x874>
 8014194:	f1c6 0301 	rsb	r3, r6, #1
 8014198:	441d      	add	r5, r3
 801419a:	e7f3      	b.n	8014184 <_svfprintf_r+0x874>
 801419c:	4635      	mov	r5, r6
 801419e:	e7cb      	b.n	8014138 <_svfprintf_r+0x828>
 80141a0:	2366      	movs	r3, #102	; 0x66
 80141a2:	9306      	str	r3, [sp, #24]
 80141a4:	2501      	movs	r5, #1
 80141a6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80141aa:	9307      	str	r3, [sp, #28]
 80141ac:	d01f      	beq.n	80141ee <_svfprintf_r+0x8de>
 80141ae:	2700      	movs	r7, #0
 80141b0:	2e00      	cmp	r6, #0
 80141b2:	9707      	str	r7, [sp, #28]
 80141b4:	f77f af32 	ble.w	801401c <_svfprintf_r+0x70c>
 80141b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	2bff      	cmp	r3, #255	; 0xff
 80141be:	d107      	bne.n	80141d0 <_svfprintf_r+0x8c0>
 80141c0:	9b07      	ldr	r3, [sp, #28]
 80141c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141c4:	443b      	add	r3, r7
 80141c6:	fb02 5503 	mla	r5, r2, r3, r5
 80141ca:	e727      	b.n	801401c <_svfprintf_r+0x70c>
 80141cc:	4635      	mov	r5, r6
 80141ce:	e7d9      	b.n	8014184 <_svfprintf_r+0x874>
 80141d0:	42b3      	cmp	r3, r6
 80141d2:	daf5      	bge.n	80141c0 <_svfprintf_r+0x8b0>
 80141d4:	1af6      	subs	r6, r6, r3
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	785b      	ldrb	r3, [r3, #1]
 80141da:	b133      	cbz	r3, 80141ea <_svfprintf_r+0x8da>
 80141dc:	9b07      	ldr	r3, [sp, #28]
 80141de:	3301      	adds	r3, #1
 80141e0:	9307      	str	r3, [sp, #28]
 80141e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e4:	3301      	adds	r3, #1
 80141e6:	9309      	str	r3, [sp, #36]	; 0x24
 80141e8:	e7e6      	b.n	80141b8 <_svfprintf_r+0x8a8>
 80141ea:	3701      	adds	r7, #1
 80141ec:	e7e4      	b.n	80141b8 <_svfprintf_r+0x8a8>
 80141ee:	9f07      	ldr	r7, [sp, #28]
 80141f0:	e714      	b.n	801401c <_svfprintf_r+0x70c>
 80141f2:	4632      	mov	r2, r6
 80141f4:	f01a 0f20 	tst.w	sl, #32
 80141f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80141fc:	9208      	str	r2, [sp, #32]
 80141fe:	d009      	beq.n	8014214 <_svfprintf_r+0x904>
 8014200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014202:	4610      	mov	r0, r2
 8014204:	17d1      	asrs	r1, r2, #31
 8014206:	e9c3 0100 	strd	r0, r1, [r3]
 801420a:	9e08      	ldr	r6, [sp, #32]
 801420c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8014210:	f7ff bbba 	b.w	8013988 <_svfprintf_r+0x78>
 8014214:	f01a 0f10 	tst.w	sl, #16
 8014218:	d002      	beq.n	8014220 <_svfprintf_r+0x910>
 801421a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	e7f4      	b.n	801420a <_svfprintf_r+0x8fa>
 8014220:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8014224:	d002      	beq.n	801422c <_svfprintf_r+0x91c>
 8014226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014228:	801a      	strh	r2, [r3, #0]
 801422a:	e7ee      	b.n	801420a <_svfprintf_r+0x8fa>
 801422c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8014230:	d0f3      	beq.n	801421a <_svfprintf_r+0x90a>
 8014232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014234:	701a      	strb	r2, [r3, #0]
 8014236:	e7e8      	b.n	801420a <_svfprintf_r+0x8fa>
 8014238:	f04a 0a10 	orr.w	sl, sl, #16
 801423c:	f01a 0f20 	tst.w	sl, #32
 8014240:	d01e      	beq.n	8014280 <_svfprintf_r+0x970>
 8014242:	3607      	adds	r6, #7
 8014244:	f026 0607 	bic.w	r6, r6, #7
 8014248:	f106 0308 	add.w	r3, r6, #8
 801424c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8014250:	9308      	str	r3, [sp, #32]
 8014252:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8014256:	2300      	movs	r3, #0
 8014258:	2200      	movs	r2, #0
 801425a:	1c69      	adds	r1, r5, #1
 801425c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8014260:	f000 815b 	beq.w	801451a <_svfprintf_r+0xc0a>
 8014264:	4652      	mov	r2, sl
 8014266:	ea56 0107 	orrs.w	r1, r6, r7
 801426a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 801426e:	f040 8154 	bne.w	801451a <_svfprintf_r+0xc0a>
 8014272:	2d00      	cmp	r5, #0
 8014274:	f000 81d5 	beq.w	8014622 <_svfprintf_r+0xd12>
 8014278:	2b01      	cmp	r3, #1
 801427a:	f040 8151 	bne.w	8014520 <_svfprintf_r+0xc10>
 801427e:	e558      	b.n	8013d32 <_svfprintf_r+0x422>
 8014280:	1d33      	adds	r3, r6, #4
 8014282:	f01a 0f10 	tst.w	sl, #16
 8014286:	9308      	str	r3, [sp, #32]
 8014288:	d001      	beq.n	801428e <_svfprintf_r+0x97e>
 801428a:	6836      	ldr	r6, [r6, #0]
 801428c:	e003      	b.n	8014296 <_svfprintf_r+0x986>
 801428e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8014292:	d002      	beq.n	801429a <_svfprintf_r+0x98a>
 8014294:	8836      	ldrh	r6, [r6, #0]
 8014296:	2700      	movs	r7, #0
 8014298:	e7db      	b.n	8014252 <_svfprintf_r+0x942>
 801429a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801429e:	d0f4      	beq.n	801428a <_svfprintf_r+0x97a>
 80142a0:	7836      	ldrb	r6, [r6, #0]
 80142a2:	e7f8      	b.n	8014296 <_svfprintf_r+0x986>
 80142a4:	1d33      	adds	r3, r6, #4
 80142a6:	9308      	str	r3, [sp, #32]
 80142a8:	f647 0330 	movw	r3, #30768	; 0x7830
 80142ac:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 80142b0:	2278      	movs	r2, #120	; 0x78
 80142b2:	4bb0      	ldr	r3, [pc, #704]	; (8014574 <_svfprintf_r+0xc64>)
 80142b4:	9318      	str	r3, [sp, #96]	; 0x60
 80142b6:	6836      	ldr	r6, [r6, #0]
 80142b8:	9206      	str	r2, [sp, #24]
 80142ba:	2700      	movs	r7, #0
 80142bc:	f04a 0a02 	orr.w	sl, sl, #2
 80142c0:	2302      	movs	r3, #2
 80142c2:	e7c9      	b.n	8014258 <_svfprintf_r+0x948>
 80142c4:	1d33      	adds	r3, r6, #4
 80142c6:	f8d6 b000 	ldr.w	fp, [r6]
 80142ca:	9308      	str	r3, [sp, #32]
 80142cc:	2600      	movs	r6, #0
 80142ce:	1c68      	adds	r0, r5, #1
 80142d0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 80142d4:	f000 80e1 	beq.w	801449a <_svfprintf_r+0xb8a>
 80142d8:	462a      	mov	r2, r5
 80142da:	4631      	mov	r1, r6
 80142dc:	4658      	mov	r0, fp
 80142de:	f7eb ff97 	bl	8000210 <memchr>
 80142e2:	4681      	mov	r9, r0
 80142e4:	2800      	cmp	r0, #0
 80142e6:	f43f ad74 	beq.w	8013dd2 <_svfprintf_r+0x4c2>
 80142ea:	eba0 050b 	sub.w	r5, r0, fp
 80142ee:	46b1      	mov	r9, r6
 80142f0:	9610      	str	r6, [sp, #64]	; 0x40
 80142f2:	4637      	mov	r7, r6
 80142f4:	9607      	str	r6, [sp, #28]
 80142f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80142f8:	42ab      	cmp	r3, r5
 80142fa:	bfb8      	it	lt
 80142fc:	462b      	movlt	r3, r5
 80142fe:	9311      	str	r3, [sp, #68]	; 0x44
 8014300:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8014304:	b113      	cbz	r3, 801430c <_svfprintf_r+0x9fc>
 8014306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014308:	3301      	adds	r3, #1
 801430a:	9311      	str	r3, [sp, #68]	; 0x44
 801430c:	f01a 0302 	ands.w	r3, sl, #2
 8014310:	931c      	str	r3, [sp, #112]	; 0x70
 8014312:	bf1e      	ittt	ne
 8014314:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8014316:	3302      	addne	r3, #2
 8014318:	9311      	strne	r3, [sp, #68]	; 0x44
 801431a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801431e:	931d      	str	r3, [sp, #116]	; 0x74
 8014320:	d122      	bne.n	8014368 <_svfprintf_r+0xa58>
 8014322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014324:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014326:	1a9b      	subs	r3, r3, r2
 8014328:	2b00      	cmp	r3, #0
 801432a:	9313      	str	r3, [sp, #76]	; 0x4c
 801432c:	dd1c      	ble.n	8014368 <_svfprintf_r+0xa58>
 801432e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014330:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8014334:	2810      	cmp	r0, #16
 8014336:	4890      	ldr	r0, [pc, #576]	; (8014578 <_svfprintf_r+0xc68>)
 8014338:	6020      	str	r0, [r4, #0]
 801433a:	f102 0201 	add.w	r2, r2, #1
 801433e:	f104 0108 	add.w	r1, r4, #8
 8014342:	f300 8188 	bgt.w	8014656 <_svfprintf_r+0xd46>
 8014346:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014348:	6060      	str	r0, [r4, #4]
 801434a:	4403      	add	r3, r0
 801434c:	2a07      	cmp	r2, #7
 801434e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014352:	f340 8195 	ble.w	8014680 <_svfprintf_r+0xd70>
 8014356:	aa26      	add	r2, sp, #152	; 0x98
 8014358:	4641      	mov	r1, r8
 801435a:	9803      	ldr	r0, [sp, #12]
 801435c:	f002 fbf1 	bl	8016b42 <__ssprint_r>
 8014360:	2800      	cmp	r0, #0
 8014362:	f040 84c1 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014366:	ac29      	add	r4, sp, #164	; 0xa4
 8014368:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801436c:	b173      	cbz	r3, 801438c <_svfprintf_r+0xa7c>
 801436e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8014372:	6023      	str	r3, [r4, #0]
 8014374:	2301      	movs	r3, #1
 8014376:	6063      	str	r3, [r4, #4]
 8014378:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801437a:	3301      	adds	r3, #1
 801437c:	9328      	str	r3, [sp, #160]	; 0xa0
 801437e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014380:	3301      	adds	r3, #1
 8014382:	2b07      	cmp	r3, #7
 8014384:	9327      	str	r3, [sp, #156]	; 0x9c
 8014386:	f300 817d 	bgt.w	8014684 <_svfprintf_r+0xd74>
 801438a:	3408      	adds	r4, #8
 801438c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801438e:	b16b      	cbz	r3, 80143ac <_svfprintf_r+0xa9c>
 8014390:	ab1f      	add	r3, sp, #124	; 0x7c
 8014392:	6023      	str	r3, [r4, #0]
 8014394:	2302      	movs	r3, #2
 8014396:	6063      	str	r3, [r4, #4]
 8014398:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801439a:	3302      	adds	r3, #2
 801439c:	9328      	str	r3, [sp, #160]	; 0xa0
 801439e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80143a0:	3301      	adds	r3, #1
 80143a2:	2b07      	cmp	r3, #7
 80143a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80143a6:	f300 8177 	bgt.w	8014698 <_svfprintf_r+0xd88>
 80143aa:	3408      	adds	r4, #8
 80143ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143ae:	2b80      	cmp	r3, #128	; 0x80
 80143b0:	d122      	bne.n	80143f8 <_svfprintf_r+0xae8>
 80143b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143b6:	1a9b      	subs	r3, r3, r2
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80143bc:	dd1c      	ble.n	80143f8 <_svfprintf_r+0xae8>
 80143be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80143c0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80143c4:	2810      	cmp	r0, #16
 80143c6:	486d      	ldr	r0, [pc, #436]	; (801457c <_svfprintf_r+0xc6c>)
 80143c8:	6020      	str	r0, [r4, #0]
 80143ca:	f102 0201 	add.w	r2, r2, #1
 80143ce:	f104 0108 	add.w	r1, r4, #8
 80143d2:	f300 816b 	bgt.w	80146ac <_svfprintf_r+0xd9c>
 80143d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80143d8:	6060      	str	r0, [r4, #4]
 80143da:	4403      	add	r3, r0
 80143dc:	2a07      	cmp	r2, #7
 80143de:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80143e2:	f340 8178 	ble.w	80146d6 <_svfprintf_r+0xdc6>
 80143e6:	aa26      	add	r2, sp, #152	; 0x98
 80143e8:	4641      	mov	r1, r8
 80143ea:	9803      	ldr	r0, [sp, #12]
 80143ec:	f002 fba9 	bl	8016b42 <__ssprint_r>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	f040 8479 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80143f6:	ac29      	add	r4, sp, #164	; 0xa4
 80143f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80143fa:	1b5b      	subs	r3, r3, r5
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	9310      	str	r3, [sp, #64]	; 0x40
 8014400:	dd1c      	ble.n	801443c <_svfprintf_r+0xb2c>
 8014402:	9810      	ldr	r0, [sp, #64]	; 0x40
 8014404:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8014408:	2810      	cmp	r0, #16
 801440a:	485c      	ldr	r0, [pc, #368]	; (801457c <_svfprintf_r+0xc6c>)
 801440c:	6020      	str	r0, [r4, #0]
 801440e:	f102 0201 	add.w	r2, r2, #1
 8014412:	f104 0108 	add.w	r1, r4, #8
 8014416:	f300 8160 	bgt.w	80146da <_svfprintf_r+0xdca>
 801441a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801441c:	6060      	str	r0, [r4, #4]
 801441e:	4403      	add	r3, r0
 8014420:	2a07      	cmp	r2, #7
 8014422:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014426:	f340 816d 	ble.w	8014704 <_svfprintf_r+0xdf4>
 801442a:	aa26      	add	r2, sp, #152	; 0x98
 801442c:	4641      	mov	r1, r8
 801442e:	9803      	ldr	r0, [sp, #12]
 8014430:	f002 fb87 	bl	8016b42 <__ssprint_r>
 8014434:	2800      	cmp	r0, #0
 8014436:	f040 8457 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 801443a:	ac29      	add	r4, sp, #164	; 0xa4
 801443c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801443e:	9310      	str	r3, [sp, #64]	; 0x40
 8014440:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014444:	f040 8160 	bne.w	8014708 <_svfprintf_r+0xdf8>
 8014448:	e9c4 b500 	strd	fp, r5, [r4]
 801444c:	441d      	add	r5, r3
 801444e:	9528      	str	r5, [sp, #160]	; 0xa0
 8014450:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014452:	3301      	adds	r3, #1
 8014454:	2b07      	cmp	r3, #7
 8014456:	9327      	str	r3, [sp, #156]	; 0x9c
 8014458:	f300 819c 	bgt.w	8014794 <_svfprintf_r+0xe84>
 801445c:	3408      	adds	r4, #8
 801445e:	f01a 0f04 	tst.w	sl, #4
 8014462:	f040 8423 	bne.w	8014cac <_svfprintf_r+0x139c>
 8014466:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801446a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801446c:	428a      	cmp	r2, r1
 801446e:	bfac      	ite	ge
 8014470:	189b      	addge	r3, r3, r2
 8014472:	185b      	addlt	r3, r3, r1
 8014474:	930e      	str	r3, [sp, #56]	; 0x38
 8014476:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014478:	b13b      	cbz	r3, 801448a <_svfprintf_r+0xb7a>
 801447a:	aa26      	add	r2, sp, #152	; 0x98
 801447c:	4641      	mov	r1, r8
 801447e:	9803      	ldr	r0, [sp, #12]
 8014480:	f002 fb5f 	bl	8016b42 <__ssprint_r>
 8014484:	2800      	cmp	r0, #0
 8014486:	f040 842f 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 801448a:	2300      	movs	r3, #0
 801448c:	9327      	str	r3, [sp, #156]	; 0x9c
 801448e:	f1b9 0f00 	cmp.w	r9, #0
 8014492:	f040 8445 	bne.w	8014d20 <_svfprintf_r+0x1410>
 8014496:	ac29      	add	r4, sp, #164	; 0xa4
 8014498:	e6b7      	b.n	801420a <_svfprintf_r+0x8fa>
 801449a:	4658      	mov	r0, fp
 801449c:	f7eb feaa 	bl	80001f4 <strlen>
 80144a0:	46b1      	mov	r9, r6
 80144a2:	4605      	mov	r5, r0
 80144a4:	e495      	b.n	8013dd2 <_svfprintf_r+0x4c2>
 80144a6:	f04a 0a10 	orr.w	sl, sl, #16
 80144aa:	f01a 0f20 	tst.w	sl, #32
 80144ae:	d009      	beq.n	80144c4 <_svfprintf_r+0xbb4>
 80144b0:	3607      	adds	r6, #7
 80144b2:	f026 0607 	bic.w	r6, r6, #7
 80144b6:	f106 0308 	add.w	r3, r6, #8
 80144ba:	e9d6 6700 	ldrd	r6, r7, [r6]
 80144be:	9308      	str	r3, [sp, #32]
 80144c0:	2301      	movs	r3, #1
 80144c2:	e6c9      	b.n	8014258 <_svfprintf_r+0x948>
 80144c4:	1d33      	adds	r3, r6, #4
 80144c6:	f01a 0f10 	tst.w	sl, #16
 80144ca:	9308      	str	r3, [sp, #32]
 80144cc:	d001      	beq.n	80144d2 <_svfprintf_r+0xbc2>
 80144ce:	6836      	ldr	r6, [r6, #0]
 80144d0:	e003      	b.n	80144da <_svfprintf_r+0xbca>
 80144d2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80144d6:	d002      	beq.n	80144de <_svfprintf_r+0xbce>
 80144d8:	8836      	ldrh	r6, [r6, #0]
 80144da:	2700      	movs	r7, #0
 80144dc:	e7f0      	b.n	80144c0 <_svfprintf_r+0xbb0>
 80144de:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80144e2:	d0f4      	beq.n	80144ce <_svfprintf_r+0xbbe>
 80144e4:	7836      	ldrb	r6, [r6, #0]
 80144e6:	e7f8      	b.n	80144da <_svfprintf_r+0xbca>
 80144e8:	4b22      	ldr	r3, [pc, #136]	; (8014574 <_svfprintf_r+0xc64>)
 80144ea:	f7ff bb48 	b.w	8013b7e <_svfprintf_r+0x26e>
 80144ee:	1d33      	adds	r3, r6, #4
 80144f0:	f01a 0f10 	tst.w	sl, #16
 80144f4:	9308      	str	r3, [sp, #32]
 80144f6:	d001      	beq.n	80144fc <_svfprintf_r+0xbec>
 80144f8:	6836      	ldr	r6, [r6, #0]
 80144fa:	e003      	b.n	8014504 <_svfprintf_r+0xbf4>
 80144fc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8014500:	d003      	beq.n	801450a <_svfprintf_r+0xbfa>
 8014502:	8836      	ldrh	r6, [r6, #0]
 8014504:	2700      	movs	r7, #0
 8014506:	f7ff bb47 	b.w	8013b98 <_svfprintf_r+0x288>
 801450a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801450e:	d0f3      	beq.n	80144f8 <_svfprintf_r+0xbe8>
 8014510:	7836      	ldrb	r6, [r6, #0]
 8014512:	e7f7      	b.n	8014504 <_svfprintf_r+0xbf4>
 8014514:	4652      	mov	r2, sl
 8014516:	2301      	movs	r3, #1
 8014518:	e6a5      	b.n	8014266 <_svfprintf_r+0x956>
 801451a:	2b01      	cmp	r3, #1
 801451c:	f43f ac04 	beq.w	8013d28 <_svfprintf_r+0x418>
 8014520:	2b02      	cmp	r3, #2
 8014522:	d06c      	beq.n	80145fe <_svfprintf_r+0xcee>
 8014524:	ab52      	add	r3, sp, #328	; 0x148
 8014526:	08f1      	lsrs	r1, r6, #3
 8014528:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 801452c:	08f8      	lsrs	r0, r7, #3
 801452e:	f006 0207 	and.w	r2, r6, #7
 8014532:	4607      	mov	r7, r0
 8014534:	460e      	mov	r6, r1
 8014536:	3230      	adds	r2, #48	; 0x30
 8014538:	ea56 0107 	orrs.w	r1, r6, r7
 801453c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014540:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014544:	d114      	bne.n	8014570 <_svfprintf_r+0xc60>
 8014546:	f01a 0f01 	tst.w	sl, #1
 801454a:	d006      	beq.n	801455a <_svfprintf_r+0xc4a>
 801454c:	2a30      	cmp	r2, #48	; 0x30
 801454e:	d004      	beq.n	801455a <_svfprintf_r+0xc4a>
 8014550:	2230      	movs	r2, #48	; 0x30
 8014552:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8014556:	f1a3 0b02 	sub.w	fp, r3, #2
 801455a:	ab52      	add	r3, sp, #328	; 0x148
 801455c:	9510      	str	r5, [sp, #64]	; 0x40
 801455e:	f04f 0900 	mov.w	r9, #0
 8014562:	eba3 050b 	sub.w	r5, r3, fp
 8014566:	464f      	mov	r7, r9
 8014568:	f8cd 901c 	str.w	r9, [sp, #28]
 801456c:	464e      	mov	r6, r9
 801456e:	e6c2      	b.n	80142f6 <_svfprintf_r+0x9e6>
 8014570:	465b      	mov	r3, fp
 8014572:	e7d8      	b.n	8014526 <_svfprintf_r+0xc16>
 8014574:	08019bf0 	.word	0x08019bf0
 8014578:	08019c14 	.word	0x08019c14
 801457c:	08019c24 	.word	0x08019c24
 8014580:	2300      	movs	r3, #0
 8014582:	9304      	str	r3, [sp, #16]
 8014584:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8014588:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801458c:	9307      	str	r3, [sp, #28]
 801458e:	220a      	movs	r2, #10
 8014590:	2300      	movs	r3, #0
 8014592:	4630      	mov	r0, r6
 8014594:	4639      	mov	r1, r7
 8014596:	f7ec fb8f 	bl	8000cb8 <__aeabi_uldivmod>
 801459a:	9b04      	ldr	r3, [sp, #16]
 801459c:	3301      	adds	r3, #1
 801459e:	9304      	str	r3, [sp, #16]
 80145a0:	9b07      	ldr	r3, [sp, #28]
 80145a2:	3230      	adds	r2, #48	; 0x30
 80145a4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80145a8:	f809 2c01 	strb.w	r2, [r9, #-1]
 80145ac:	b1d3      	cbz	r3, 80145e4 <_svfprintf_r+0xcd4>
 80145ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b0:	9a04      	ldr	r2, [sp, #16]
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d115      	bne.n	80145e4 <_svfprintf_r+0xcd4>
 80145b8:	2aff      	cmp	r2, #255	; 0xff
 80145ba:	d013      	beq.n	80145e4 <_svfprintf_r+0xcd4>
 80145bc:	2f00      	cmp	r7, #0
 80145be:	bf08      	it	eq
 80145c0:	2e0a      	cmpeq	r6, #10
 80145c2:	d30f      	bcc.n	80145e4 <_svfprintf_r+0xcd4>
 80145c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80145c6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80145c8:	ebab 0b03 	sub.w	fp, fp, r3
 80145cc:	461a      	mov	r2, r3
 80145ce:	4658      	mov	r0, fp
 80145d0:	f002 faa2 	bl	8016b18 <strncpy>
 80145d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d6:	785b      	ldrb	r3, [r3, #1]
 80145d8:	b11b      	cbz	r3, 80145e2 <_svfprintf_r+0xcd2>
 80145da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145dc:	3301      	adds	r3, #1
 80145de:	9309      	str	r3, [sp, #36]	; 0x24
 80145e0:	2300      	movs	r3, #0
 80145e2:	9304      	str	r3, [sp, #16]
 80145e4:	2300      	movs	r3, #0
 80145e6:	4630      	mov	r0, r6
 80145e8:	4639      	mov	r1, r7
 80145ea:	220a      	movs	r2, #10
 80145ec:	f7ec fb64 	bl	8000cb8 <__aeabi_uldivmod>
 80145f0:	4606      	mov	r6, r0
 80145f2:	460f      	mov	r7, r1
 80145f4:	ea56 0307 	orrs.w	r3, r6, r7
 80145f8:	d0af      	beq.n	801455a <_svfprintf_r+0xc4a>
 80145fa:	46d9      	mov	r9, fp
 80145fc:	e7c7      	b.n	801458e <_svfprintf_r+0xc7e>
 80145fe:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8014602:	f006 030f 	and.w	r3, r6, #15
 8014606:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014608:	5cd3      	ldrb	r3, [r2, r3]
 801460a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801460e:	0933      	lsrs	r3, r6, #4
 8014610:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8014614:	093a      	lsrs	r2, r7, #4
 8014616:	461e      	mov	r6, r3
 8014618:	4617      	mov	r7, r2
 801461a:	ea56 0307 	orrs.w	r3, r6, r7
 801461e:	d1f0      	bne.n	8014602 <_svfprintf_r+0xcf2>
 8014620:	e79b      	b.n	801455a <_svfprintf_r+0xc4a>
 8014622:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8014626:	2b00      	cmp	r3, #0
 8014628:	d197      	bne.n	801455a <_svfprintf_r+0xc4a>
 801462a:	07d2      	lsls	r2, r2, #31
 801462c:	bf44      	itt	mi
 801462e:	2330      	movmi	r3, #48	; 0x30
 8014630:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8014634:	e791      	b.n	801455a <_svfprintf_r+0xc4a>
 8014636:	9b06      	ldr	r3, [sp, #24]
 8014638:	2b00      	cmp	r3, #0
 801463a:	f000 8377 	beq.w	8014d2c <_svfprintf_r+0x141c>
 801463e:	2000      	movs	r0, #0
 8014640:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8014644:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8014648:	9608      	str	r6, [sp, #32]
 801464a:	f7ff bb49 	b.w	8013ce0 <_svfprintf_r+0x3d0>
 801464e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8014652:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014654:	e4ec      	b.n	8014030 <_svfprintf_r+0x720>
 8014656:	2010      	movs	r0, #16
 8014658:	4403      	add	r3, r0
 801465a:	2a07      	cmp	r2, #7
 801465c:	6060      	str	r0, [r4, #4]
 801465e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014662:	dd08      	ble.n	8014676 <_svfprintf_r+0xd66>
 8014664:	aa26      	add	r2, sp, #152	; 0x98
 8014666:	4641      	mov	r1, r8
 8014668:	9803      	ldr	r0, [sp, #12]
 801466a:	f002 fa6a 	bl	8016b42 <__ssprint_r>
 801466e:	2800      	cmp	r0, #0
 8014670:	f040 833a 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014674:	a929      	add	r1, sp, #164	; 0xa4
 8014676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014678:	3b10      	subs	r3, #16
 801467a:	9313      	str	r3, [sp, #76]	; 0x4c
 801467c:	460c      	mov	r4, r1
 801467e:	e656      	b.n	801432e <_svfprintf_r+0xa1e>
 8014680:	460c      	mov	r4, r1
 8014682:	e671      	b.n	8014368 <_svfprintf_r+0xa58>
 8014684:	aa26      	add	r2, sp, #152	; 0x98
 8014686:	4641      	mov	r1, r8
 8014688:	9803      	ldr	r0, [sp, #12]
 801468a:	f002 fa5a 	bl	8016b42 <__ssprint_r>
 801468e:	2800      	cmp	r0, #0
 8014690:	f040 832a 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014694:	ac29      	add	r4, sp, #164	; 0xa4
 8014696:	e679      	b.n	801438c <_svfprintf_r+0xa7c>
 8014698:	aa26      	add	r2, sp, #152	; 0x98
 801469a:	4641      	mov	r1, r8
 801469c:	9803      	ldr	r0, [sp, #12]
 801469e:	f002 fa50 	bl	8016b42 <__ssprint_r>
 80146a2:	2800      	cmp	r0, #0
 80146a4:	f040 8320 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80146a8:	ac29      	add	r4, sp, #164	; 0xa4
 80146aa:	e67f      	b.n	80143ac <_svfprintf_r+0xa9c>
 80146ac:	2010      	movs	r0, #16
 80146ae:	4403      	add	r3, r0
 80146b0:	2a07      	cmp	r2, #7
 80146b2:	6060      	str	r0, [r4, #4]
 80146b4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80146b8:	dd08      	ble.n	80146cc <_svfprintf_r+0xdbc>
 80146ba:	aa26      	add	r2, sp, #152	; 0x98
 80146bc:	4641      	mov	r1, r8
 80146be:	9803      	ldr	r0, [sp, #12]
 80146c0:	f002 fa3f 	bl	8016b42 <__ssprint_r>
 80146c4:	2800      	cmp	r0, #0
 80146c6:	f040 830f 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80146ca:	a929      	add	r1, sp, #164	; 0xa4
 80146cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80146ce:	3b10      	subs	r3, #16
 80146d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80146d2:	460c      	mov	r4, r1
 80146d4:	e673      	b.n	80143be <_svfprintf_r+0xaae>
 80146d6:	460c      	mov	r4, r1
 80146d8:	e68e      	b.n	80143f8 <_svfprintf_r+0xae8>
 80146da:	2010      	movs	r0, #16
 80146dc:	4403      	add	r3, r0
 80146de:	2a07      	cmp	r2, #7
 80146e0:	6060      	str	r0, [r4, #4]
 80146e2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80146e6:	dd08      	ble.n	80146fa <_svfprintf_r+0xdea>
 80146e8:	aa26      	add	r2, sp, #152	; 0x98
 80146ea:	4641      	mov	r1, r8
 80146ec:	9803      	ldr	r0, [sp, #12]
 80146ee:	f002 fa28 	bl	8016b42 <__ssprint_r>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	f040 82f8 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80146f8:	a929      	add	r1, sp, #164	; 0xa4
 80146fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146fc:	3b10      	subs	r3, #16
 80146fe:	9310      	str	r3, [sp, #64]	; 0x40
 8014700:	460c      	mov	r4, r1
 8014702:	e67e      	b.n	8014402 <_svfprintf_r+0xaf2>
 8014704:	460c      	mov	r4, r1
 8014706:	e699      	b.n	801443c <_svfprintf_r+0xb2c>
 8014708:	9b06      	ldr	r3, [sp, #24]
 801470a:	2b65      	cmp	r3, #101	; 0x65
 801470c:	f340 8234 	ble.w	8014b78 <_svfprintf_r+0x1268>
 8014710:	2200      	movs	r2, #0
 8014712:	2300      	movs	r3, #0
 8014714:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014718:	f7ec f9ee 	bl	8000af8 <__aeabi_dcmpeq>
 801471c:	2800      	cmp	r0, #0
 801471e:	d069      	beq.n	80147f4 <_svfprintf_r+0xee4>
 8014720:	4b6e      	ldr	r3, [pc, #440]	; (80148dc <_svfprintf_r+0xfcc>)
 8014722:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	2301      	movs	r3, #1
 8014728:	441d      	add	r5, r3
 801472a:	6063      	str	r3, [r4, #4]
 801472c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801472e:	9528      	str	r5, [sp, #160]	; 0xa0
 8014730:	3301      	adds	r3, #1
 8014732:	2b07      	cmp	r3, #7
 8014734:	9327      	str	r3, [sp, #156]	; 0x9c
 8014736:	dc37      	bgt.n	80147a8 <_svfprintf_r+0xe98>
 8014738:	3408      	adds	r4, #8
 801473a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801473c:	9a04      	ldr	r2, [sp, #16]
 801473e:	4293      	cmp	r3, r2
 8014740:	db03      	blt.n	801474a <_svfprintf_r+0xe3a>
 8014742:	f01a 0f01 	tst.w	sl, #1
 8014746:	f43f ae8a 	beq.w	801445e <_svfprintf_r+0xb4e>
 801474a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014750:	6063      	str	r3, [r4, #4]
 8014752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014754:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014756:	4413      	add	r3, r2
 8014758:	9328      	str	r3, [sp, #160]	; 0xa0
 801475a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801475c:	3301      	adds	r3, #1
 801475e:	2b07      	cmp	r3, #7
 8014760:	9327      	str	r3, [sp, #156]	; 0x9c
 8014762:	dc2b      	bgt.n	80147bc <_svfprintf_r+0xeac>
 8014764:	3408      	adds	r4, #8
 8014766:	9b04      	ldr	r3, [sp, #16]
 8014768:	1e5d      	subs	r5, r3, #1
 801476a:	2d00      	cmp	r5, #0
 801476c:	f77f ae77 	ble.w	801445e <_svfprintf_r+0xb4e>
 8014770:	4e5b      	ldr	r6, [pc, #364]	; (80148e0 <_svfprintf_r+0xfd0>)
 8014772:	2710      	movs	r7, #16
 8014774:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8014778:	2d10      	cmp	r5, #16
 801477a:	f103 0301 	add.w	r3, r3, #1
 801477e:	f104 0108 	add.w	r1, r4, #8
 8014782:	6026      	str	r6, [r4, #0]
 8014784:	dc24      	bgt.n	80147d0 <_svfprintf_r+0xec0>
 8014786:	6065      	str	r5, [r4, #4]
 8014788:	2b07      	cmp	r3, #7
 801478a:	4415      	add	r5, r2
 801478c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014790:	f340 8289 	ble.w	8014ca6 <_svfprintf_r+0x1396>
 8014794:	aa26      	add	r2, sp, #152	; 0x98
 8014796:	4641      	mov	r1, r8
 8014798:	9803      	ldr	r0, [sp, #12]
 801479a:	f002 f9d2 	bl	8016b42 <__ssprint_r>
 801479e:	2800      	cmp	r0, #0
 80147a0:	f040 82a2 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80147a4:	ac29      	add	r4, sp, #164	; 0xa4
 80147a6:	e65a      	b.n	801445e <_svfprintf_r+0xb4e>
 80147a8:	aa26      	add	r2, sp, #152	; 0x98
 80147aa:	4641      	mov	r1, r8
 80147ac:	9803      	ldr	r0, [sp, #12]
 80147ae:	f002 f9c8 	bl	8016b42 <__ssprint_r>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	f040 8298 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80147b8:	ac29      	add	r4, sp, #164	; 0xa4
 80147ba:	e7be      	b.n	801473a <_svfprintf_r+0xe2a>
 80147bc:	aa26      	add	r2, sp, #152	; 0x98
 80147be:	4641      	mov	r1, r8
 80147c0:	9803      	ldr	r0, [sp, #12]
 80147c2:	f002 f9be 	bl	8016b42 <__ssprint_r>
 80147c6:	2800      	cmp	r0, #0
 80147c8:	f040 828e 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80147cc:	ac29      	add	r4, sp, #164	; 0xa4
 80147ce:	e7ca      	b.n	8014766 <_svfprintf_r+0xe56>
 80147d0:	3210      	adds	r2, #16
 80147d2:	2b07      	cmp	r3, #7
 80147d4:	6067      	str	r7, [r4, #4]
 80147d6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80147da:	dd08      	ble.n	80147ee <_svfprintf_r+0xede>
 80147dc:	aa26      	add	r2, sp, #152	; 0x98
 80147de:	4641      	mov	r1, r8
 80147e0:	9803      	ldr	r0, [sp, #12]
 80147e2:	f002 f9ae 	bl	8016b42 <__ssprint_r>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	f040 827e 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80147ec:	a929      	add	r1, sp, #164	; 0xa4
 80147ee:	3d10      	subs	r5, #16
 80147f0:	460c      	mov	r4, r1
 80147f2:	e7bf      	b.n	8014774 <_svfprintf_r+0xe64>
 80147f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	dc74      	bgt.n	80148e4 <_svfprintf_r+0xfd4>
 80147fa:	4b38      	ldr	r3, [pc, #224]	; (80148dc <_svfprintf_r+0xfcc>)
 80147fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80147fe:	6023      	str	r3, [r4, #0]
 8014800:	2301      	movs	r3, #1
 8014802:	441d      	add	r5, r3
 8014804:	6063      	str	r3, [r4, #4]
 8014806:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014808:	9528      	str	r5, [sp, #160]	; 0xa0
 801480a:	3301      	adds	r3, #1
 801480c:	2b07      	cmp	r3, #7
 801480e:	9327      	str	r3, [sp, #156]	; 0x9c
 8014810:	dc3e      	bgt.n	8014890 <_svfprintf_r+0xf80>
 8014812:	3408      	adds	r4, #8
 8014814:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014816:	b92b      	cbnz	r3, 8014824 <_svfprintf_r+0xf14>
 8014818:	9b04      	ldr	r3, [sp, #16]
 801481a:	b91b      	cbnz	r3, 8014824 <_svfprintf_r+0xf14>
 801481c:	f01a 0f01 	tst.w	sl, #1
 8014820:	f43f ae1d 	beq.w	801445e <_svfprintf_r+0xb4e>
 8014824:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014826:	6023      	str	r3, [r4, #0]
 8014828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801482a:	6063      	str	r3, [r4, #4]
 801482c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801482e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014830:	4413      	add	r3, r2
 8014832:	9328      	str	r3, [sp, #160]	; 0xa0
 8014834:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014836:	3301      	adds	r3, #1
 8014838:	2b07      	cmp	r3, #7
 801483a:	9327      	str	r3, [sp, #156]	; 0x9c
 801483c:	dc32      	bgt.n	80148a4 <_svfprintf_r+0xf94>
 801483e:	3408      	adds	r4, #8
 8014840:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014842:	2d00      	cmp	r5, #0
 8014844:	da1b      	bge.n	801487e <_svfprintf_r+0xf6e>
 8014846:	4e26      	ldr	r6, [pc, #152]	; (80148e0 <_svfprintf_r+0xfd0>)
 8014848:	426d      	negs	r5, r5
 801484a:	4623      	mov	r3, r4
 801484c:	2710      	movs	r7, #16
 801484e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8014852:	2d10      	cmp	r5, #16
 8014854:	f102 0201 	add.w	r2, r2, #1
 8014858:	f104 0408 	add.w	r4, r4, #8
 801485c:	601e      	str	r6, [r3, #0]
 801485e:	dc2b      	bgt.n	80148b8 <_svfprintf_r+0xfa8>
 8014860:	605d      	str	r5, [r3, #4]
 8014862:	2a07      	cmp	r2, #7
 8014864:	440d      	add	r5, r1
 8014866:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801486a:	dd08      	ble.n	801487e <_svfprintf_r+0xf6e>
 801486c:	aa26      	add	r2, sp, #152	; 0x98
 801486e:	4641      	mov	r1, r8
 8014870:	9803      	ldr	r0, [sp, #12]
 8014872:	f002 f966 	bl	8016b42 <__ssprint_r>
 8014876:	2800      	cmp	r0, #0
 8014878:	f040 8236 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 801487c:	ac29      	add	r4, sp, #164	; 0xa4
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	6063      	str	r3, [r4, #4]
 8014882:	9a04      	ldr	r2, [sp, #16]
 8014884:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014886:	f8c4 b000 	str.w	fp, [r4]
 801488a:	4413      	add	r3, r2
 801488c:	9328      	str	r3, [sp, #160]	; 0xa0
 801488e:	e5df      	b.n	8014450 <_svfprintf_r+0xb40>
 8014890:	aa26      	add	r2, sp, #152	; 0x98
 8014892:	4641      	mov	r1, r8
 8014894:	9803      	ldr	r0, [sp, #12]
 8014896:	f002 f954 	bl	8016b42 <__ssprint_r>
 801489a:	2800      	cmp	r0, #0
 801489c:	f040 8224 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80148a0:	ac29      	add	r4, sp, #164	; 0xa4
 80148a2:	e7b7      	b.n	8014814 <_svfprintf_r+0xf04>
 80148a4:	aa26      	add	r2, sp, #152	; 0x98
 80148a6:	4641      	mov	r1, r8
 80148a8:	9803      	ldr	r0, [sp, #12]
 80148aa:	f002 f94a 	bl	8016b42 <__ssprint_r>
 80148ae:	2800      	cmp	r0, #0
 80148b0:	f040 821a 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80148b4:	ac29      	add	r4, sp, #164	; 0xa4
 80148b6:	e7c3      	b.n	8014840 <_svfprintf_r+0xf30>
 80148b8:	3110      	adds	r1, #16
 80148ba:	2a07      	cmp	r2, #7
 80148bc:	605f      	str	r7, [r3, #4]
 80148be:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80148c2:	dd08      	ble.n	80148d6 <_svfprintf_r+0xfc6>
 80148c4:	aa26      	add	r2, sp, #152	; 0x98
 80148c6:	4641      	mov	r1, r8
 80148c8:	9803      	ldr	r0, [sp, #12]
 80148ca:	f002 f93a 	bl	8016b42 <__ssprint_r>
 80148ce:	2800      	cmp	r0, #0
 80148d0:	f040 820a 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 80148d4:	ac29      	add	r4, sp, #164	; 0xa4
 80148d6:	3d10      	subs	r5, #16
 80148d8:	4623      	mov	r3, r4
 80148da:	e7b8      	b.n	801484e <_svfprintf_r+0xf3e>
 80148dc:	08019c12 	.word	0x08019c12
 80148e0:	08019c24 	.word	0x08019c24
 80148e4:	9b04      	ldr	r3, [sp, #16]
 80148e6:	42b3      	cmp	r3, r6
 80148e8:	bfa8      	it	ge
 80148ea:	4633      	movge	r3, r6
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	461d      	mov	r5, r3
 80148f0:	dd0b      	ble.n	801490a <_svfprintf_r+0xffa>
 80148f2:	e9c4 b300 	strd	fp, r3, [r4]
 80148f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148f8:	442b      	add	r3, r5
 80148fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80148fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80148fe:	3301      	adds	r3, #1
 8014900:	2b07      	cmp	r3, #7
 8014902:	9327      	str	r3, [sp, #156]	; 0x9c
 8014904:	f300 8086 	bgt.w	8014a14 <_svfprintf_r+0x1104>
 8014908:	3408      	adds	r4, #8
 801490a:	2d00      	cmp	r5, #0
 801490c:	bfac      	ite	ge
 801490e:	1b75      	subge	r5, r6, r5
 8014910:	4635      	movlt	r5, r6
 8014912:	2d00      	cmp	r5, #0
 8014914:	dd19      	ble.n	801494a <_svfprintf_r+0x103a>
 8014916:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801491a:	4896      	ldr	r0, [pc, #600]	; (8014b74 <_svfprintf_r+0x1264>)
 801491c:	6020      	str	r0, [r4, #0]
 801491e:	2d10      	cmp	r5, #16
 8014920:	f103 0301 	add.w	r3, r3, #1
 8014924:	f104 0108 	add.w	r1, r4, #8
 8014928:	dc7e      	bgt.n	8014a28 <_svfprintf_r+0x1118>
 801492a:	6065      	str	r5, [r4, #4]
 801492c:	2b07      	cmp	r3, #7
 801492e:	4415      	add	r5, r2
 8014930:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014934:	f340 808b 	ble.w	8014a4e <_svfprintf_r+0x113e>
 8014938:	aa26      	add	r2, sp, #152	; 0x98
 801493a:	4641      	mov	r1, r8
 801493c:	9803      	ldr	r0, [sp, #12]
 801493e:	f002 f900 	bl	8016b42 <__ssprint_r>
 8014942:	2800      	cmp	r0, #0
 8014944:	f040 81d0 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014948:	ac29      	add	r4, sp, #164	; 0xa4
 801494a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 801494e:	445e      	add	r6, fp
 8014950:	d009      	beq.n	8014966 <_svfprintf_r+0x1056>
 8014952:	9b07      	ldr	r3, [sp, #28]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d17c      	bne.n	8014a52 <_svfprintf_r+0x1142>
 8014958:	2f00      	cmp	r7, #0
 801495a:	d17c      	bne.n	8014a56 <_svfprintf_r+0x1146>
 801495c:	9b04      	ldr	r3, [sp, #16]
 801495e:	445b      	add	r3, fp
 8014960:	429e      	cmp	r6, r3
 8014962:	bf28      	it	cs
 8014964:	461e      	movcs	r6, r3
 8014966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8014968:	9a04      	ldr	r2, [sp, #16]
 801496a:	4293      	cmp	r3, r2
 801496c:	db02      	blt.n	8014974 <_svfprintf_r+0x1064>
 801496e:	f01a 0f01 	tst.w	sl, #1
 8014972:	d00e      	beq.n	8014992 <_svfprintf_r+0x1082>
 8014974:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014976:	6023      	str	r3, [r4, #0]
 8014978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801497a:	6063      	str	r3, [r4, #4]
 801497c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801497e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014980:	4413      	add	r3, r2
 8014982:	9328      	str	r3, [sp, #160]	; 0xa0
 8014984:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014986:	3301      	adds	r3, #1
 8014988:	2b07      	cmp	r3, #7
 801498a:	9327      	str	r3, [sp, #156]	; 0x9c
 801498c:	f300 80dd 	bgt.w	8014b4a <_svfprintf_r+0x123a>
 8014990:	3408      	adds	r4, #8
 8014992:	9b04      	ldr	r3, [sp, #16]
 8014994:	9a04      	ldr	r2, [sp, #16]
 8014996:	eb0b 0503 	add.w	r5, fp, r3
 801499a:	1bab      	subs	r3, r5, r6
 801499c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801499e:	1b55      	subs	r5, r2, r5
 80149a0:	429d      	cmp	r5, r3
 80149a2:	bfa8      	it	ge
 80149a4:	461d      	movge	r5, r3
 80149a6:	2d00      	cmp	r5, #0
 80149a8:	dd0b      	ble.n	80149c2 <_svfprintf_r+0x10b2>
 80149aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80149ac:	442b      	add	r3, r5
 80149ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80149b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80149b2:	3301      	adds	r3, #1
 80149b4:	2b07      	cmp	r3, #7
 80149b6:	e9c4 6500 	strd	r6, r5, [r4]
 80149ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80149bc:	f300 80cf 	bgt.w	8014b5e <_svfprintf_r+0x124e>
 80149c0:	3408      	adds	r4, #8
 80149c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80149c4:	9a04      	ldr	r2, [sp, #16]
 80149c6:	2d00      	cmp	r5, #0
 80149c8:	eba2 0303 	sub.w	r3, r2, r3
 80149cc:	bfac      	ite	ge
 80149ce:	1b5d      	subge	r5, r3, r5
 80149d0:	461d      	movlt	r5, r3
 80149d2:	2d00      	cmp	r5, #0
 80149d4:	f77f ad43 	ble.w	801445e <_svfprintf_r+0xb4e>
 80149d8:	4e66      	ldr	r6, [pc, #408]	; (8014b74 <_svfprintf_r+0x1264>)
 80149da:	2710      	movs	r7, #16
 80149dc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80149e0:	2d10      	cmp	r5, #16
 80149e2:	f103 0301 	add.w	r3, r3, #1
 80149e6:	f104 0108 	add.w	r1, r4, #8
 80149ea:	6026      	str	r6, [r4, #0]
 80149ec:	f77f aecb 	ble.w	8014786 <_svfprintf_r+0xe76>
 80149f0:	3210      	adds	r2, #16
 80149f2:	2b07      	cmp	r3, #7
 80149f4:	6067      	str	r7, [r4, #4]
 80149f6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80149fa:	dd08      	ble.n	8014a0e <_svfprintf_r+0x10fe>
 80149fc:	aa26      	add	r2, sp, #152	; 0x98
 80149fe:	4641      	mov	r1, r8
 8014a00:	9803      	ldr	r0, [sp, #12]
 8014a02:	f002 f89e 	bl	8016b42 <__ssprint_r>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	f040 816e 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014a0c:	a929      	add	r1, sp, #164	; 0xa4
 8014a0e:	3d10      	subs	r5, #16
 8014a10:	460c      	mov	r4, r1
 8014a12:	e7e3      	b.n	80149dc <_svfprintf_r+0x10cc>
 8014a14:	aa26      	add	r2, sp, #152	; 0x98
 8014a16:	4641      	mov	r1, r8
 8014a18:	9803      	ldr	r0, [sp, #12]
 8014a1a:	f002 f892 	bl	8016b42 <__ssprint_r>
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	f040 8162 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014a24:	ac29      	add	r4, sp, #164	; 0xa4
 8014a26:	e770      	b.n	801490a <_svfprintf_r+0xffa>
 8014a28:	2010      	movs	r0, #16
 8014a2a:	4402      	add	r2, r0
 8014a2c:	2b07      	cmp	r3, #7
 8014a2e:	6060      	str	r0, [r4, #4]
 8014a30:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8014a34:	dd08      	ble.n	8014a48 <_svfprintf_r+0x1138>
 8014a36:	aa26      	add	r2, sp, #152	; 0x98
 8014a38:	4641      	mov	r1, r8
 8014a3a:	9803      	ldr	r0, [sp, #12]
 8014a3c:	f002 f881 	bl	8016b42 <__ssprint_r>
 8014a40:	2800      	cmp	r0, #0
 8014a42:	f040 8151 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014a46:	a929      	add	r1, sp, #164	; 0xa4
 8014a48:	3d10      	subs	r5, #16
 8014a4a:	460c      	mov	r4, r1
 8014a4c:	e763      	b.n	8014916 <_svfprintf_r+0x1006>
 8014a4e:	460c      	mov	r4, r1
 8014a50:	e77b      	b.n	801494a <_svfprintf_r+0x103a>
 8014a52:	2f00      	cmp	r7, #0
 8014a54:	d049      	beq.n	8014aea <_svfprintf_r+0x11da>
 8014a56:	3f01      	subs	r7, #1
 8014a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a5a:	6023      	str	r3, [r4, #0]
 8014a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a5e:	6063      	str	r3, [r4, #4]
 8014a60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a64:	4413      	add	r3, r2
 8014a66:	9328      	str	r3, [sp, #160]	; 0xa0
 8014a68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	2b07      	cmp	r3, #7
 8014a6e:	9327      	str	r3, [sp, #156]	; 0x9c
 8014a70:	dc42      	bgt.n	8014af8 <_svfprintf_r+0x11e8>
 8014a72:	3408      	adds	r4, #8
 8014a74:	9b04      	ldr	r3, [sp, #16]
 8014a76:	445b      	add	r3, fp
 8014a78:	1b9a      	subs	r2, r3, r6
 8014a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	bfa8      	it	ge
 8014a82:	4613      	movge	r3, r2
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	461d      	mov	r5, r3
 8014a88:	dd0a      	ble.n	8014aa0 <_svfprintf_r+0x1190>
 8014a8a:	e9c4 6300 	strd	r6, r3, [r4]
 8014a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014a90:	442b      	add	r3, r5
 8014a92:	9328      	str	r3, [sp, #160]	; 0xa0
 8014a94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014a96:	3301      	adds	r3, #1
 8014a98:	2b07      	cmp	r3, #7
 8014a9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8014a9c:	dc36      	bgt.n	8014b0c <_svfprintf_r+0x11fc>
 8014a9e:	3408      	adds	r4, #8
 8014aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	2d00      	cmp	r5, #0
 8014aa6:	bfac      	ite	ge
 8014aa8:	1b5d      	subge	r5, r3, r5
 8014aaa:	461d      	movlt	r5, r3
 8014aac:	2d00      	cmp	r5, #0
 8014aae:	dd18      	ble.n	8014ae2 <_svfprintf_r+0x11d2>
 8014ab0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8014ab4:	482f      	ldr	r0, [pc, #188]	; (8014b74 <_svfprintf_r+0x1264>)
 8014ab6:	6020      	str	r0, [r4, #0]
 8014ab8:	2d10      	cmp	r5, #16
 8014aba:	f102 0201 	add.w	r2, r2, #1
 8014abe:	f104 0108 	add.w	r1, r4, #8
 8014ac2:	dc2d      	bgt.n	8014b20 <_svfprintf_r+0x1210>
 8014ac4:	442b      	add	r3, r5
 8014ac6:	2a07      	cmp	r2, #7
 8014ac8:	6065      	str	r5, [r4, #4]
 8014aca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014ace:	dd3a      	ble.n	8014b46 <_svfprintf_r+0x1236>
 8014ad0:	aa26      	add	r2, sp, #152	; 0x98
 8014ad2:	4641      	mov	r1, r8
 8014ad4:	9803      	ldr	r0, [sp, #12]
 8014ad6:	f002 f834 	bl	8016b42 <__ssprint_r>
 8014ada:	2800      	cmp	r0, #0
 8014adc:	f040 8104 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014ae0:	ac29      	add	r4, sp, #164	; 0xa4
 8014ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	441e      	add	r6, r3
 8014ae8:	e733      	b.n	8014952 <_svfprintf_r+0x1042>
 8014aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aec:	3b01      	subs	r3, #1
 8014aee:	9309      	str	r3, [sp, #36]	; 0x24
 8014af0:	9b07      	ldr	r3, [sp, #28]
 8014af2:	3b01      	subs	r3, #1
 8014af4:	9307      	str	r3, [sp, #28]
 8014af6:	e7af      	b.n	8014a58 <_svfprintf_r+0x1148>
 8014af8:	aa26      	add	r2, sp, #152	; 0x98
 8014afa:	4641      	mov	r1, r8
 8014afc:	9803      	ldr	r0, [sp, #12]
 8014afe:	f002 f820 	bl	8016b42 <__ssprint_r>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	f040 80f0 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014b08:	ac29      	add	r4, sp, #164	; 0xa4
 8014b0a:	e7b3      	b.n	8014a74 <_svfprintf_r+0x1164>
 8014b0c:	aa26      	add	r2, sp, #152	; 0x98
 8014b0e:	4641      	mov	r1, r8
 8014b10:	9803      	ldr	r0, [sp, #12]
 8014b12:	f002 f816 	bl	8016b42 <__ssprint_r>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f040 80e6 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014b1c:	ac29      	add	r4, sp, #164	; 0xa4
 8014b1e:	e7bf      	b.n	8014aa0 <_svfprintf_r+0x1190>
 8014b20:	2010      	movs	r0, #16
 8014b22:	4403      	add	r3, r0
 8014b24:	2a07      	cmp	r2, #7
 8014b26:	6060      	str	r0, [r4, #4]
 8014b28:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014b2c:	dd08      	ble.n	8014b40 <_svfprintf_r+0x1230>
 8014b2e:	aa26      	add	r2, sp, #152	; 0x98
 8014b30:	4641      	mov	r1, r8
 8014b32:	9803      	ldr	r0, [sp, #12]
 8014b34:	f002 f805 	bl	8016b42 <__ssprint_r>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	f040 80d5 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014b3e:	a929      	add	r1, sp, #164	; 0xa4
 8014b40:	3d10      	subs	r5, #16
 8014b42:	460c      	mov	r4, r1
 8014b44:	e7b4      	b.n	8014ab0 <_svfprintf_r+0x11a0>
 8014b46:	460c      	mov	r4, r1
 8014b48:	e7cb      	b.n	8014ae2 <_svfprintf_r+0x11d2>
 8014b4a:	aa26      	add	r2, sp, #152	; 0x98
 8014b4c:	4641      	mov	r1, r8
 8014b4e:	9803      	ldr	r0, [sp, #12]
 8014b50:	f001 fff7 	bl	8016b42 <__ssprint_r>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	f040 80c7 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014b5a:	ac29      	add	r4, sp, #164	; 0xa4
 8014b5c:	e719      	b.n	8014992 <_svfprintf_r+0x1082>
 8014b5e:	aa26      	add	r2, sp, #152	; 0x98
 8014b60:	4641      	mov	r1, r8
 8014b62:	9803      	ldr	r0, [sp, #12]
 8014b64:	f001 ffed 	bl	8016b42 <__ssprint_r>
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	f040 80bd 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014b6e:	ac29      	add	r4, sp, #164	; 0xa4
 8014b70:	e727      	b.n	80149c2 <_svfprintf_r+0x10b2>
 8014b72:	bf00      	nop
 8014b74:	08019c24 	.word	0x08019c24
 8014b78:	9a04      	ldr	r2, [sp, #16]
 8014b7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014b7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014b7e:	2a01      	cmp	r2, #1
 8014b80:	f105 0501 	add.w	r5, r5, #1
 8014b84:	f103 0301 	add.w	r3, r3, #1
 8014b88:	f104 0608 	add.w	r6, r4, #8
 8014b8c:	dc02      	bgt.n	8014b94 <_svfprintf_r+0x1284>
 8014b8e:	f01a 0f01 	tst.w	sl, #1
 8014b92:	d07d      	beq.n	8014c90 <_svfprintf_r+0x1380>
 8014b94:	2201      	movs	r2, #1
 8014b96:	2b07      	cmp	r3, #7
 8014b98:	f8c4 b000 	str.w	fp, [r4]
 8014b9c:	6062      	str	r2, [r4, #4]
 8014b9e:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014ba2:	dd08      	ble.n	8014bb6 <_svfprintf_r+0x12a6>
 8014ba4:	aa26      	add	r2, sp, #152	; 0x98
 8014ba6:	4641      	mov	r1, r8
 8014ba8:	9803      	ldr	r0, [sp, #12]
 8014baa:	f001 ffca 	bl	8016b42 <__ssprint_r>
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	f040 809a 	bne.w	8014ce8 <_svfprintf_r+0x13d8>
 8014bb4:	ae29      	add	r6, sp, #164	; 0xa4
 8014bb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014bb8:	6033      	str	r3, [r6, #0]
 8014bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bbc:	6073      	str	r3, [r6, #4]
 8014bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014bc0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014bc2:	4413      	add	r3, r2
 8014bc4:	9328      	str	r3, [sp, #160]	; 0xa0
 8014bc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014bc8:	3301      	adds	r3, #1
 8014bca:	2b07      	cmp	r3, #7
 8014bcc:	9327      	str	r3, [sp, #156]	; 0x9c
 8014bce:	dc31      	bgt.n	8014c34 <_svfprintf_r+0x1324>
 8014bd0:	3608      	adds	r6, #8
 8014bd2:	9b04      	ldr	r3, [sp, #16]
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	1e5c      	subs	r4, r3, #1
 8014bd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014bdc:	2300      	movs	r3, #0
 8014bde:	f7eb ff8b 	bl	8000af8 <__aeabi_dcmpeq>
 8014be2:	2800      	cmp	r0, #0
 8014be4:	d12f      	bne.n	8014c46 <_svfprintf_r+0x1336>
 8014be6:	f10b 0301 	add.w	r3, fp, #1
 8014bea:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014bec:	9904      	ldr	r1, [sp, #16]
 8014bee:	e9c6 3400 	strd	r3, r4, [r6]
 8014bf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014bf4:	3201      	adds	r2, #1
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	440b      	add	r3, r1
 8014bfa:	2a07      	cmp	r2, #7
 8014bfc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8014c00:	dd4f      	ble.n	8014ca2 <_svfprintf_r+0x1392>
 8014c02:	aa26      	add	r2, sp, #152	; 0x98
 8014c04:	4641      	mov	r1, r8
 8014c06:	9803      	ldr	r0, [sp, #12]
 8014c08:	f001 ff9b 	bl	8016b42 <__ssprint_r>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	d16b      	bne.n	8014ce8 <_svfprintf_r+0x13d8>
 8014c10:	ae29      	add	r6, sp, #164	; 0xa4
 8014c12:	ab22      	add	r3, sp, #136	; 0x88
 8014c14:	6033      	str	r3, [r6, #0]
 8014c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c18:	6073      	str	r3, [r6, #4]
 8014c1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014c1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014c1e:	4413      	add	r3, r2
 8014c20:	9328      	str	r3, [sp, #160]	; 0xa0
 8014c22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014c24:	3301      	adds	r3, #1
 8014c26:	2b07      	cmp	r3, #7
 8014c28:	9327      	str	r3, [sp, #156]	; 0x9c
 8014c2a:	f73f adb3 	bgt.w	8014794 <_svfprintf_r+0xe84>
 8014c2e:	f106 0408 	add.w	r4, r6, #8
 8014c32:	e414      	b.n	801445e <_svfprintf_r+0xb4e>
 8014c34:	aa26      	add	r2, sp, #152	; 0x98
 8014c36:	4641      	mov	r1, r8
 8014c38:	9803      	ldr	r0, [sp, #12]
 8014c3a:	f001 ff82 	bl	8016b42 <__ssprint_r>
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d152      	bne.n	8014ce8 <_svfprintf_r+0x13d8>
 8014c42:	ae29      	add	r6, sp, #164	; 0xa4
 8014c44:	e7c5      	b.n	8014bd2 <_svfprintf_r+0x12c2>
 8014c46:	2c00      	cmp	r4, #0
 8014c48:	dde3      	ble.n	8014c12 <_svfprintf_r+0x1302>
 8014c4a:	4d3e      	ldr	r5, [pc, #248]	; (8014d44 <_svfprintf_r+0x1434>)
 8014c4c:	2710      	movs	r7, #16
 8014c4e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8014c52:	2c10      	cmp	r4, #16
 8014c54:	f103 0301 	add.w	r3, r3, #1
 8014c58:	f106 0108 	add.w	r1, r6, #8
 8014c5c:	6035      	str	r5, [r6, #0]
 8014c5e:	dc07      	bgt.n	8014c70 <_svfprintf_r+0x1360>
 8014c60:	6074      	str	r4, [r6, #4]
 8014c62:	2b07      	cmp	r3, #7
 8014c64:	4414      	add	r4, r2
 8014c66:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8014c6a:	dcca      	bgt.n	8014c02 <_svfprintf_r+0x12f2>
 8014c6c:	460e      	mov	r6, r1
 8014c6e:	e7d0      	b.n	8014c12 <_svfprintf_r+0x1302>
 8014c70:	3210      	adds	r2, #16
 8014c72:	2b07      	cmp	r3, #7
 8014c74:	6077      	str	r7, [r6, #4]
 8014c76:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8014c7a:	dd06      	ble.n	8014c8a <_svfprintf_r+0x137a>
 8014c7c:	aa26      	add	r2, sp, #152	; 0x98
 8014c7e:	4641      	mov	r1, r8
 8014c80:	9803      	ldr	r0, [sp, #12]
 8014c82:	f001 ff5e 	bl	8016b42 <__ssprint_r>
 8014c86:	bb78      	cbnz	r0, 8014ce8 <_svfprintf_r+0x13d8>
 8014c88:	a929      	add	r1, sp, #164	; 0xa4
 8014c8a:	3c10      	subs	r4, #16
 8014c8c:	460e      	mov	r6, r1
 8014c8e:	e7de      	b.n	8014c4e <_svfprintf_r+0x133e>
 8014c90:	2201      	movs	r2, #1
 8014c92:	2b07      	cmp	r3, #7
 8014c94:	f8c4 b000 	str.w	fp, [r4]
 8014c98:	6062      	str	r2, [r4, #4]
 8014c9a:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014c9e:	ddb8      	ble.n	8014c12 <_svfprintf_r+0x1302>
 8014ca0:	e7af      	b.n	8014c02 <_svfprintf_r+0x12f2>
 8014ca2:	3608      	adds	r6, #8
 8014ca4:	e7b5      	b.n	8014c12 <_svfprintf_r+0x1302>
 8014ca6:	460c      	mov	r4, r1
 8014ca8:	f7ff bbd9 	b.w	801445e <_svfprintf_r+0xb4e>
 8014cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014cb0:	1a9d      	subs	r5, r3, r2
 8014cb2:	2d00      	cmp	r5, #0
 8014cb4:	f77f abd7 	ble.w	8014466 <_svfprintf_r+0xb56>
 8014cb8:	4e23      	ldr	r6, [pc, #140]	; (8014d48 <_svfprintf_r+0x1438>)
 8014cba:	2710      	movs	r7, #16
 8014cbc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8014cc0:	2d10      	cmp	r5, #16
 8014cc2:	f103 0301 	add.w	r3, r3, #1
 8014cc6:	6026      	str	r6, [r4, #0]
 8014cc8:	dc18      	bgt.n	8014cfc <_svfprintf_r+0x13ec>
 8014cca:	6065      	str	r5, [r4, #4]
 8014ccc:	2b07      	cmp	r3, #7
 8014cce:	4415      	add	r5, r2
 8014cd0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8014cd4:	f77f abc7 	ble.w	8014466 <_svfprintf_r+0xb56>
 8014cd8:	aa26      	add	r2, sp, #152	; 0x98
 8014cda:	4641      	mov	r1, r8
 8014cdc:	9803      	ldr	r0, [sp, #12]
 8014cde:	f001 ff30 	bl	8016b42 <__ssprint_r>
 8014ce2:	2800      	cmp	r0, #0
 8014ce4:	f43f abbf 	beq.w	8014466 <_svfprintf_r+0xb56>
 8014ce8:	f1b9 0f00 	cmp.w	r9, #0
 8014cec:	f43f a8a8 	beq.w	8013e40 <_svfprintf_r+0x530>
 8014cf0:	4649      	mov	r1, r9
 8014cf2:	9803      	ldr	r0, [sp, #12]
 8014cf4:	f000 feea 	bl	8015acc <_free_r>
 8014cf8:	f7ff b8a2 	b.w	8013e40 <_svfprintf_r+0x530>
 8014cfc:	3210      	adds	r2, #16
 8014cfe:	2b07      	cmp	r3, #7
 8014d00:	6067      	str	r7, [r4, #4]
 8014d02:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8014d06:	dc02      	bgt.n	8014d0e <_svfprintf_r+0x13fe>
 8014d08:	3408      	adds	r4, #8
 8014d0a:	3d10      	subs	r5, #16
 8014d0c:	e7d6      	b.n	8014cbc <_svfprintf_r+0x13ac>
 8014d0e:	aa26      	add	r2, sp, #152	; 0x98
 8014d10:	4641      	mov	r1, r8
 8014d12:	9803      	ldr	r0, [sp, #12]
 8014d14:	f001 ff15 	bl	8016b42 <__ssprint_r>
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	d1e5      	bne.n	8014ce8 <_svfprintf_r+0x13d8>
 8014d1c:	ac29      	add	r4, sp, #164	; 0xa4
 8014d1e:	e7f4      	b.n	8014d0a <_svfprintf_r+0x13fa>
 8014d20:	4649      	mov	r1, r9
 8014d22:	9803      	ldr	r0, [sp, #12]
 8014d24:	f000 fed2 	bl	8015acc <_free_r>
 8014d28:	f7ff bbb5 	b.w	8014496 <_svfprintf_r+0xb86>
 8014d2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f43f a886 	beq.w	8013e40 <_svfprintf_r+0x530>
 8014d34:	aa26      	add	r2, sp, #152	; 0x98
 8014d36:	4641      	mov	r1, r8
 8014d38:	9803      	ldr	r0, [sp, #12]
 8014d3a:	f001 ff02 	bl	8016b42 <__ssprint_r>
 8014d3e:	f7ff b87f 	b.w	8013e40 <_svfprintf_r+0x530>
 8014d42:	bf00      	nop
 8014d44:	08019c24 	.word	0x08019c24
 8014d48:	08019c14 	.word	0x08019c14

08014d4c <sysconf>:
 8014d4c:	2808      	cmp	r0, #8
 8014d4e:	b508      	push	{r3, lr}
 8014d50:	d006      	beq.n	8014d60 <sysconf+0x14>
 8014d52:	f000 fe4d 	bl	80159f0 <__errno>
 8014d56:	2316      	movs	r3, #22
 8014d58:	6003      	str	r3, [r0, #0]
 8014d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d5e:	bd08      	pop	{r3, pc}
 8014d60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8014d64:	e7fb      	b.n	8014d5e <sysconf+0x12>
	...

08014d68 <register_fini>:
 8014d68:	4b02      	ldr	r3, [pc, #8]	; (8014d74 <register_fini+0xc>)
 8014d6a:	b113      	cbz	r3, 8014d72 <register_fini+0xa>
 8014d6c:	4802      	ldr	r0, [pc, #8]	; (8014d78 <register_fini+0x10>)
 8014d6e:	f000 b805 	b.w	8014d7c <atexit>
 8014d72:	4770      	bx	lr
 8014d74:	00000000 	.word	0x00000000
 8014d78:	080159fd 	.word	0x080159fd

08014d7c <atexit>:
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4601      	mov	r1, r0
 8014d80:	461a      	mov	r2, r3
 8014d82:	4618      	mov	r0, r3
 8014d84:	f001 bf62 	b.w	8016c4c <__register_exitproc>

08014d88 <quorem>:
 8014d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d8c:	6903      	ldr	r3, [r0, #16]
 8014d8e:	690c      	ldr	r4, [r1, #16]
 8014d90:	42a3      	cmp	r3, r4
 8014d92:	4680      	mov	r8, r0
 8014d94:	f2c0 8082 	blt.w	8014e9c <quorem+0x114>
 8014d98:	3c01      	subs	r4, #1
 8014d9a:	f101 0714 	add.w	r7, r1, #20
 8014d9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014da2:	f100 0614 	add.w	r6, r0, #20
 8014da6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014daa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014dae:	eb06 030c 	add.w	r3, r6, ip
 8014db2:	3501      	adds	r5, #1
 8014db4:	eb07 090c 	add.w	r9, r7, ip
 8014db8:	9301      	str	r3, [sp, #4]
 8014dba:	fbb0 f5f5 	udiv	r5, r0, r5
 8014dbe:	b395      	cbz	r5, 8014e26 <quorem+0x9e>
 8014dc0:	f04f 0a00 	mov.w	sl, #0
 8014dc4:	4638      	mov	r0, r7
 8014dc6:	46b6      	mov	lr, r6
 8014dc8:	46d3      	mov	fp, sl
 8014dca:	f850 2b04 	ldr.w	r2, [r0], #4
 8014dce:	b293      	uxth	r3, r2
 8014dd0:	fb05 a303 	mla	r3, r5, r3, sl
 8014dd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	ebab 0303 	sub.w	r3, fp, r3
 8014dde:	0c12      	lsrs	r2, r2, #16
 8014de0:	f8de b000 	ldr.w	fp, [lr]
 8014de4:	fb05 a202 	mla	r2, r5, r2, sl
 8014de8:	fa13 f38b 	uxtah	r3, r3, fp
 8014dec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014df0:	fa1f fb82 	uxth.w	fp, r2
 8014df4:	f8de 2000 	ldr.w	r2, [lr]
 8014df8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e00:	b29b      	uxth	r3, r3
 8014e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e06:	4581      	cmp	r9, r0
 8014e08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014e0c:	f84e 3b04 	str.w	r3, [lr], #4
 8014e10:	d2db      	bcs.n	8014dca <quorem+0x42>
 8014e12:	f856 300c 	ldr.w	r3, [r6, ip]
 8014e16:	b933      	cbnz	r3, 8014e26 <quorem+0x9e>
 8014e18:	9b01      	ldr	r3, [sp, #4]
 8014e1a:	3b04      	subs	r3, #4
 8014e1c:	429e      	cmp	r6, r3
 8014e1e:	461a      	mov	r2, r3
 8014e20:	d330      	bcc.n	8014e84 <quorem+0xfc>
 8014e22:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e26:	4640      	mov	r0, r8
 8014e28:	f001 fc82 	bl	8016730 <__mcmp>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	db25      	blt.n	8014e7c <quorem+0xf4>
 8014e30:	3501      	adds	r5, #1
 8014e32:	4630      	mov	r0, r6
 8014e34:	f04f 0c00 	mov.w	ip, #0
 8014e38:	f857 2b04 	ldr.w	r2, [r7], #4
 8014e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8014e40:	b293      	uxth	r3, r2
 8014e42:	ebac 0303 	sub.w	r3, ip, r3
 8014e46:	0c12      	lsrs	r2, r2, #16
 8014e48:	fa13 f38e 	uxtah	r3, r3, lr
 8014e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e5a:	45b9      	cmp	r9, r7
 8014e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014e60:	f840 3b04 	str.w	r3, [r0], #4
 8014e64:	d2e8      	bcs.n	8014e38 <quorem+0xb0>
 8014e66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014e6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014e6e:	b92a      	cbnz	r2, 8014e7c <quorem+0xf4>
 8014e70:	3b04      	subs	r3, #4
 8014e72:	429e      	cmp	r6, r3
 8014e74:	461a      	mov	r2, r3
 8014e76:	d30b      	bcc.n	8014e90 <quorem+0x108>
 8014e78:	f8c8 4010 	str.w	r4, [r8, #16]
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	b003      	add	sp, #12
 8014e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e84:	6812      	ldr	r2, [r2, #0]
 8014e86:	3b04      	subs	r3, #4
 8014e88:	2a00      	cmp	r2, #0
 8014e8a:	d1ca      	bne.n	8014e22 <quorem+0x9a>
 8014e8c:	3c01      	subs	r4, #1
 8014e8e:	e7c5      	b.n	8014e1c <quorem+0x94>
 8014e90:	6812      	ldr	r2, [r2, #0]
 8014e92:	3b04      	subs	r3, #4
 8014e94:	2a00      	cmp	r2, #0
 8014e96:	d1ef      	bne.n	8014e78 <quorem+0xf0>
 8014e98:	3c01      	subs	r4, #1
 8014e9a:	e7ea      	b.n	8014e72 <quorem+0xea>
 8014e9c:	2000      	movs	r0, #0
 8014e9e:	e7ee      	b.n	8014e7e <quorem+0xf6>

08014ea0 <_dtoa_r>:
 8014ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea4:	b097      	sub	sp, #92	; 0x5c
 8014ea6:	ec57 6b10 	vmov	r6, r7, d0
 8014eaa:	9106      	str	r1, [sp, #24]
 8014eac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8014eae:	920b      	str	r2, [sp, #44]	; 0x2c
 8014eb0:	4604      	mov	r4, r0
 8014eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8014eb4:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014eb6:	e9cd 6700 	strd	r6, r7, [sp]
 8014eba:	b141      	cbz	r1, 8014ece <_dtoa_r+0x2e>
 8014ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014ebe:	604a      	str	r2, [r1, #4]
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	4093      	lsls	r3, r2
 8014ec4:	608b      	str	r3, [r1, #8]
 8014ec6:	f001 fa30 	bl	801632a <_Bfree>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	6423      	str	r3, [r4, #64]	; 0x40
 8014ece:	1e3b      	subs	r3, r7, #0
 8014ed0:	bfb9      	ittee	lt
 8014ed2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ed6:	9301      	strlt	r3, [sp, #4]
 8014ed8:	2300      	movge	r3, #0
 8014eda:	602b      	strge	r3, [r5, #0]
 8014edc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014ee0:	4baf      	ldr	r3, [pc, #700]	; (80151a0 <_dtoa_r+0x300>)
 8014ee2:	bfbc      	itt	lt
 8014ee4:	2201      	movlt	r2, #1
 8014ee6:	602a      	strlt	r2, [r5, #0]
 8014ee8:	ea33 0308 	bics.w	r3, r3, r8
 8014eec:	d116      	bne.n	8014f1c <_dtoa_r+0x7c>
 8014eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ef0:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ef4:	6013      	str	r3, [r2, #0]
 8014ef6:	9b00      	ldr	r3, [sp, #0]
 8014ef8:	b923      	cbnz	r3, 8014f04 <_dtoa_r+0x64>
 8014efa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014efe:	2800      	cmp	r0, #0
 8014f00:	f000 8543 	beq.w	801598a <_dtoa_r+0xaea>
 8014f04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80151b4 <_dtoa_r+0x314>
 8014f0a:	b11b      	cbz	r3, 8014f14 <_dtoa_r+0x74>
 8014f0c:	f10b 0303 	add.w	r3, fp, #3
 8014f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f12:	6013      	str	r3, [r2, #0]
 8014f14:	4658      	mov	r0, fp
 8014f16:	b017      	add	sp, #92	; 0x5c
 8014f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f20:	2200      	movs	r2, #0
 8014f22:	2300      	movs	r3, #0
 8014f24:	4630      	mov	r0, r6
 8014f26:	4639      	mov	r1, r7
 8014f28:	f7eb fde6 	bl	8000af8 <__aeabi_dcmpeq>
 8014f2c:	4681      	mov	r9, r0
 8014f2e:	b160      	cbz	r0, 8014f4a <_dtoa_r+0xaa>
 8014f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014f32:	2301      	movs	r3, #1
 8014f34:	6013      	str	r3, [r2, #0]
 8014f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f000 8522 	beq.w	8015982 <_dtoa_r+0xae2>
 8014f3e:	4b99      	ldr	r3, [pc, #612]	; (80151a4 <_dtoa_r+0x304>)
 8014f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f42:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8014f46:	6013      	str	r3, [r2, #0]
 8014f48:	e7e4      	b.n	8014f14 <_dtoa_r+0x74>
 8014f4a:	aa14      	add	r2, sp, #80	; 0x50
 8014f4c:	a915      	add	r1, sp, #84	; 0x54
 8014f4e:	ec47 6b10 	vmov	d0, r6, r7
 8014f52:	4620      	mov	r0, r4
 8014f54:	f001 fcda 	bl	801690c <__d2b>
 8014f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014f5c:	9004      	str	r0, [sp, #16]
 8014f5e:	2d00      	cmp	r5, #0
 8014f60:	d07c      	beq.n	801505c <_dtoa_r+0x1bc>
 8014f62:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f66:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014f6a:	46b2      	mov	sl, r6
 8014f6c:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014f70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014f74:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014f78:	2200      	movs	r2, #0
 8014f7a:	4b8b      	ldr	r3, [pc, #556]	; (80151a8 <_dtoa_r+0x308>)
 8014f7c:	4650      	mov	r0, sl
 8014f7e:	4659      	mov	r1, fp
 8014f80:	f7eb f99a 	bl	80002b8 <__aeabi_dsub>
 8014f84:	a380      	add	r3, pc, #512	; (adr r3, 8015188 <_dtoa_r+0x2e8>)
 8014f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8a:	f7eb fb4d 	bl	8000628 <__aeabi_dmul>
 8014f8e:	a380      	add	r3, pc, #512	; (adr r3, 8015190 <_dtoa_r+0x2f0>)
 8014f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f94:	f7eb f992 	bl	80002bc <__adddf3>
 8014f98:	4606      	mov	r6, r0
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	460f      	mov	r7, r1
 8014f9e:	f7eb fad9 	bl	8000554 <__aeabi_i2d>
 8014fa2:	a37d      	add	r3, pc, #500	; (adr r3, 8015198 <_dtoa_r+0x2f8>)
 8014fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa8:	f7eb fb3e 	bl	8000628 <__aeabi_dmul>
 8014fac:	4602      	mov	r2, r0
 8014fae:	460b      	mov	r3, r1
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	4639      	mov	r1, r7
 8014fb4:	f7eb f982 	bl	80002bc <__adddf3>
 8014fb8:	4606      	mov	r6, r0
 8014fba:	460f      	mov	r7, r1
 8014fbc:	f7eb fde4 	bl	8000b88 <__aeabi_d2iz>
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	4682      	mov	sl, r0
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	4639      	mov	r1, r7
 8014fca:	f7eb fd9f 	bl	8000b0c <__aeabi_dcmplt>
 8014fce:	b148      	cbz	r0, 8014fe4 <_dtoa_r+0x144>
 8014fd0:	4650      	mov	r0, sl
 8014fd2:	f7eb fabf 	bl	8000554 <__aeabi_i2d>
 8014fd6:	4632      	mov	r2, r6
 8014fd8:	463b      	mov	r3, r7
 8014fda:	f7eb fd8d 	bl	8000af8 <__aeabi_dcmpeq>
 8014fde:	b908      	cbnz	r0, 8014fe4 <_dtoa_r+0x144>
 8014fe0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014fe4:	f1ba 0f16 	cmp.w	sl, #22
 8014fe8:	d859      	bhi.n	801509e <_dtoa_r+0x1fe>
 8014fea:	4970      	ldr	r1, [pc, #448]	; (80151ac <_dtoa_r+0x30c>)
 8014fec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ff8:	f7eb fda6 	bl	8000b48 <__aeabi_dcmpgt>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d050      	beq.n	80150a2 <_dtoa_r+0x202>
 8015000:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015004:	2300      	movs	r3, #0
 8015006:	930f      	str	r3, [sp, #60]	; 0x3c
 8015008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801500a:	1b5d      	subs	r5, r3, r5
 801500c:	f1b5 0801 	subs.w	r8, r5, #1
 8015010:	bf49      	itett	mi
 8015012:	f1c5 0301 	rsbmi	r3, r5, #1
 8015016:	2300      	movpl	r3, #0
 8015018:	9305      	strmi	r3, [sp, #20]
 801501a:	f04f 0800 	movmi.w	r8, #0
 801501e:	bf58      	it	pl
 8015020:	9305      	strpl	r3, [sp, #20]
 8015022:	f1ba 0f00 	cmp.w	sl, #0
 8015026:	db3e      	blt.n	80150a6 <_dtoa_r+0x206>
 8015028:	2300      	movs	r3, #0
 801502a:	44d0      	add	r8, sl
 801502c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015030:	9307      	str	r3, [sp, #28]
 8015032:	9b06      	ldr	r3, [sp, #24]
 8015034:	2b09      	cmp	r3, #9
 8015036:	f200 808d 	bhi.w	8015154 <_dtoa_r+0x2b4>
 801503a:	2b05      	cmp	r3, #5
 801503c:	bfc4      	itt	gt
 801503e:	3b04      	subgt	r3, #4
 8015040:	9306      	strgt	r3, [sp, #24]
 8015042:	9b06      	ldr	r3, [sp, #24]
 8015044:	f1a3 0302 	sub.w	r3, r3, #2
 8015048:	bfcc      	ite	gt
 801504a:	2500      	movgt	r5, #0
 801504c:	2501      	movle	r5, #1
 801504e:	2b03      	cmp	r3, #3
 8015050:	f200 808c 	bhi.w	801516c <_dtoa_r+0x2cc>
 8015054:	e8df f003 	tbb	[pc, r3]
 8015058:	6e317c7a 	.word	0x6e317c7a
 801505c:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015060:	441d      	add	r5, r3
 8015062:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015066:	2820      	cmp	r0, #32
 8015068:	dd13      	ble.n	8015092 <_dtoa_r+0x1f2>
 801506a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801506e:	9b00      	ldr	r3, [sp, #0]
 8015070:	fa08 f800 	lsl.w	r8, r8, r0
 8015074:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015078:	fa23 f000 	lsr.w	r0, r3, r0
 801507c:	ea48 0000 	orr.w	r0, r8, r0
 8015080:	f7eb fa58 	bl	8000534 <__aeabi_ui2d>
 8015084:	2301      	movs	r3, #1
 8015086:	4682      	mov	sl, r0
 8015088:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801508c:	3d01      	subs	r5, #1
 801508e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015090:	e772      	b.n	8014f78 <_dtoa_r+0xd8>
 8015092:	9b00      	ldr	r3, [sp, #0]
 8015094:	f1c0 0020 	rsb	r0, r0, #32
 8015098:	fa03 f000 	lsl.w	r0, r3, r0
 801509c:	e7f0      	b.n	8015080 <_dtoa_r+0x1e0>
 801509e:	2301      	movs	r3, #1
 80150a0:	e7b1      	b.n	8015006 <_dtoa_r+0x166>
 80150a2:	900f      	str	r0, [sp, #60]	; 0x3c
 80150a4:	e7b0      	b.n	8015008 <_dtoa_r+0x168>
 80150a6:	9b05      	ldr	r3, [sp, #20]
 80150a8:	eba3 030a 	sub.w	r3, r3, sl
 80150ac:	9305      	str	r3, [sp, #20]
 80150ae:	f1ca 0300 	rsb	r3, sl, #0
 80150b2:	9307      	str	r3, [sp, #28]
 80150b4:	2300      	movs	r3, #0
 80150b6:	930e      	str	r3, [sp, #56]	; 0x38
 80150b8:	e7bb      	b.n	8015032 <_dtoa_r+0x192>
 80150ba:	2301      	movs	r3, #1
 80150bc:	930a      	str	r3, [sp, #40]	; 0x28
 80150be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	dd56      	ble.n	8015172 <_dtoa_r+0x2d2>
 80150c4:	9302      	str	r3, [sp, #8]
 80150c6:	4699      	mov	r9, r3
 80150c8:	2200      	movs	r2, #0
 80150ca:	6462      	str	r2, [r4, #68]	; 0x44
 80150cc:	2204      	movs	r2, #4
 80150ce:	f102 0014 	add.w	r0, r2, #20
 80150d2:	4298      	cmp	r0, r3
 80150d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80150d6:	d951      	bls.n	801517c <_dtoa_r+0x2dc>
 80150d8:	4620      	mov	r0, r4
 80150da:	f001 f901 	bl	80162e0 <_Balloc>
 80150de:	f1b9 0f0e 	cmp.w	r9, #14
 80150e2:	4683      	mov	fp, r0
 80150e4:	6420      	str	r0, [r4, #64]	; 0x40
 80150e6:	f200 80e8 	bhi.w	80152ba <_dtoa_r+0x41a>
 80150ea:	2d00      	cmp	r5, #0
 80150ec:	f000 80e5 	beq.w	80152ba <_dtoa_r+0x41a>
 80150f0:	ed9d 7b00 	vldr	d7, [sp]
 80150f4:	f1ba 0f00 	cmp.w	sl, #0
 80150f8:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80150fc:	dd76      	ble.n	80151ec <_dtoa_r+0x34c>
 80150fe:	4a2b      	ldr	r2, [pc, #172]	; (80151ac <_dtoa_r+0x30c>)
 8015100:	f00a 030f 	and.w	r3, sl, #15
 8015104:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015108:	ed93 7b00 	vldr	d7, [r3]
 801510c:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015110:	06f0      	lsls	r0, r6, #27
 8015112:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015116:	d567      	bpl.n	80151e8 <_dtoa_r+0x348>
 8015118:	4b25      	ldr	r3, [pc, #148]	; (80151b0 <_dtoa_r+0x310>)
 801511a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801511e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015122:	f7eb fbab 	bl	800087c <__aeabi_ddiv>
 8015126:	e9cd 0100 	strd	r0, r1, [sp]
 801512a:	f006 060f 	and.w	r6, r6, #15
 801512e:	2503      	movs	r5, #3
 8015130:	4f1f      	ldr	r7, [pc, #124]	; (80151b0 <_dtoa_r+0x310>)
 8015132:	e04e      	b.n	80151d2 <_dtoa_r+0x332>
 8015134:	2301      	movs	r3, #1
 8015136:	930a      	str	r3, [sp, #40]	; 0x28
 8015138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801513a:	4453      	add	r3, sl
 801513c:	f103 0901 	add.w	r9, r3, #1
 8015140:	9302      	str	r3, [sp, #8]
 8015142:	464b      	mov	r3, r9
 8015144:	2b01      	cmp	r3, #1
 8015146:	bfb8      	it	lt
 8015148:	2301      	movlt	r3, #1
 801514a:	e7bd      	b.n	80150c8 <_dtoa_r+0x228>
 801514c:	2300      	movs	r3, #0
 801514e:	e7b5      	b.n	80150bc <_dtoa_r+0x21c>
 8015150:	2300      	movs	r3, #0
 8015152:	e7f0      	b.n	8015136 <_dtoa_r+0x296>
 8015154:	2501      	movs	r5, #1
 8015156:	2300      	movs	r3, #0
 8015158:	9306      	str	r3, [sp, #24]
 801515a:	950a      	str	r5, [sp, #40]	; 0x28
 801515c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015160:	9302      	str	r3, [sp, #8]
 8015162:	4699      	mov	r9, r3
 8015164:	2200      	movs	r2, #0
 8015166:	2312      	movs	r3, #18
 8015168:	920b      	str	r2, [sp, #44]	; 0x2c
 801516a:	e7ad      	b.n	80150c8 <_dtoa_r+0x228>
 801516c:	2301      	movs	r3, #1
 801516e:	930a      	str	r3, [sp, #40]	; 0x28
 8015170:	e7f4      	b.n	801515c <_dtoa_r+0x2bc>
 8015172:	2301      	movs	r3, #1
 8015174:	9302      	str	r3, [sp, #8]
 8015176:	4699      	mov	r9, r3
 8015178:	461a      	mov	r2, r3
 801517a:	e7f5      	b.n	8015168 <_dtoa_r+0x2c8>
 801517c:	3101      	adds	r1, #1
 801517e:	6461      	str	r1, [r4, #68]	; 0x44
 8015180:	0052      	lsls	r2, r2, #1
 8015182:	e7a4      	b.n	80150ce <_dtoa_r+0x22e>
 8015184:	f3af 8000 	nop.w
 8015188:	636f4361 	.word	0x636f4361
 801518c:	3fd287a7 	.word	0x3fd287a7
 8015190:	8b60c8b3 	.word	0x8b60c8b3
 8015194:	3fc68a28 	.word	0x3fc68a28
 8015198:	509f79fb 	.word	0x509f79fb
 801519c:	3fd34413 	.word	0x3fd34413
 80151a0:	7ff00000 	.word	0x7ff00000
 80151a4:	08019c13 	.word	0x08019c13
 80151a8:	3ff80000 	.word	0x3ff80000
 80151ac:	08019c78 	.word	0x08019c78
 80151b0:	08019c50 	.word	0x08019c50
 80151b4:	08019c3d 	.word	0x08019c3d
 80151b8:	07f1      	lsls	r1, r6, #31
 80151ba:	d508      	bpl.n	80151ce <_dtoa_r+0x32e>
 80151bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80151c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151c4:	f7eb fa30 	bl	8000628 <__aeabi_dmul>
 80151c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80151cc:	3501      	adds	r5, #1
 80151ce:	1076      	asrs	r6, r6, #1
 80151d0:	3708      	adds	r7, #8
 80151d2:	2e00      	cmp	r6, #0
 80151d4:	d1f0      	bne.n	80151b8 <_dtoa_r+0x318>
 80151d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80151da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151de:	f7eb fb4d 	bl	800087c <__aeabi_ddiv>
 80151e2:	e9cd 0100 	strd	r0, r1, [sp]
 80151e6:	e01a      	b.n	801521e <_dtoa_r+0x37e>
 80151e8:	2502      	movs	r5, #2
 80151ea:	e7a1      	b.n	8015130 <_dtoa_r+0x290>
 80151ec:	f000 80a0 	beq.w	8015330 <_dtoa_r+0x490>
 80151f0:	f1ca 0600 	rsb	r6, sl, #0
 80151f4:	4b9f      	ldr	r3, [pc, #636]	; (8015474 <_dtoa_r+0x5d4>)
 80151f6:	4fa0      	ldr	r7, [pc, #640]	; (8015478 <_dtoa_r+0x5d8>)
 80151f8:	f006 020f 	and.w	r2, r6, #15
 80151fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015208:	f7eb fa0e 	bl	8000628 <__aeabi_dmul>
 801520c:	e9cd 0100 	strd	r0, r1, [sp]
 8015210:	1136      	asrs	r6, r6, #4
 8015212:	2300      	movs	r3, #0
 8015214:	2502      	movs	r5, #2
 8015216:	2e00      	cmp	r6, #0
 8015218:	d17f      	bne.n	801531a <_dtoa_r+0x47a>
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1e1      	bne.n	80151e2 <_dtoa_r+0x342>
 801521e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015220:	2b00      	cmp	r3, #0
 8015222:	f000 8087 	beq.w	8015334 <_dtoa_r+0x494>
 8015226:	e9dd 6700 	ldrd	r6, r7, [sp]
 801522a:	2200      	movs	r2, #0
 801522c:	4b93      	ldr	r3, [pc, #588]	; (801547c <_dtoa_r+0x5dc>)
 801522e:	4630      	mov	r0, r6
 8015230:	4639      	mov	r1, r7
 8015232:	f7eb fc6b 	bl	8000b0c <__aeabi_dcmplt>
 8015236:	2800      	cmp	r0, #0
 8015238:	d07c      	beq.n	8015334 <_dtoa_r+0x494>
 801523a:	f1b9 0f00 	cmp.w	r9, #0
 801523e:	d079      	beq.n	8015334 <_dtoa_r+0x494>
 8015240:	9b02      	ldr	r3, [sp, #8]
 8015242:	2b00      	cmp	r3, #0
 8015244:	dd35      	ble.n	80152b2 <_dtoa_r+0x412>
 8015246:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801524a:	9308      	str	r3, [sp, #32]
 801524c:	4639      	mov	r1, r7
 801524e:	2200      	movs	r2, #0
 8015250:	4b8b      	ldr	r3, [pc, #556]	; (8015480 <_dtoa_r+0x5e0>)
 8015252:	4630      	mov	r0, r6
 8015254:	f7eb f9e8 	bl	8000628 <__aeabi_dmul>
 8015258:	e9cd 0100 	strd	r0, r1, [sp]
 801525c:	9f02      	ldr	r7, [sp, #8]
 801525e:	3501      	adds	r5, #1
 8015260:	4628      	mov	r0, r5
 8015262:	f7eb f977 	bl	8000554 <__aeabi_i2d>
 8015266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801526a:	f7eb f9dd 	bl	8000628 <__aeabi_dmul>
 801526e:	2200      	movs	r2, #0
 8015270:	4b84      	ldr	r3, [pc, #528]	; (8015484 <_dtoa_r+0x5e4>)
 8015272:	f7eb f823 	bl	80002bc <__adddf3>
 8015276:	4605      	mov	r5, r0
 8015278:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801527c:	2f00      	cmp	r7, #0
 801527e:	d15d      	bne.n	801533c <_dtoa_r+0x49c>
 8015280:	2200      	movs	r2, #0
 8015282:	4b81      	ldr	r3, [pc, #516]	; (8015488 <_dtoa_r+0x5e8>)
 8015284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015288:	f7eb f816 	bl	80002b8 <__aeabi_dsub>
 801528c:	462a      	mov	r2, r5
 801528e:	4633      	mov	r3, r6
 8015290:	e9cd 0100 	strd	r0, r1, [sp]
 8015294:	f7eb fc58 	bl	8000b48 <__aeabi_dcmpgt>
 8015298:	2800      	cmp	r0, #0
 801529a:	f040 8288 	bne.w	80157ae <_dtoa_r+0x90e>
 801529e:	462a      	mov	r2, r5
 80152a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80152a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152a8:	f7eb fc30 	bl	8000b0c <__aeabi_dcmplt>
 80152ac:	2800      	cmp	r0, #0
 80152ae:	f040 827c 	bne.w	80157aa <_dtoa_r+0x90a>
 80152b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80152b6:	e9cd 2300 	strd	r2, r3, [sp]
 80152ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f2c0 8150 	blt.w	8015562 <_dtoa_r+0x6c2>
 80152c2:	f1ba 0f0e 	cmp.w	sl, #14
 80152c6:	f300 814c 	bgt.w	8015562 <_dtoa_r+0x6c2>
 80152ca:	4b6a      	ldr	r3, [pc, #424]	; (8015474 <_dtoa_r+0x5d4>)
 80152cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80152d0:	ed93 7b00 	vldr	d7, [r3]
 80152d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152dc:	f280 80d8 	bge.w	8015490 <_dtoa_r+0x5f0>
 80152e0:	f1b9 0f00 	cmp.w	r9, #0
 80152e4:	f300 80d4 	bgt.w	8015490 <_dtoa_r+0x5f0>
 80152e8:	f040 825e 	bne.w	80157a8 <_dtoa_r+0x908>
 80152ec:	2200      	movs	r2, #0
 80152ee:	4b66      	ldr	r3, [pc, #408]	; (8015488 <_dtoa_r+0x5e8>)
 80152f0:	ec51 0b17 	vmov	r0, r1, d7
 80152f4:	f7eb f998 	bl	8000628 <__aeabi_dmul>
 80152f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152fc:	f7eb fc1a 	bl	8000b34 <__aeabi_dcmpge>
 8015300:	464f      	mov	r7, r9
 8015302:	464e      	mov	r6, r9
 8015304:	2800      	cmp	r0, #0
 8015306:	f040 8234 	bne.w	8015772 <_dtoa_r+0x8d2>
 801530a:	2331      	movs	r3, #49	; 0x31
 801530c:	f10b 0501 	add.w	r5, fp, #1
 8015310:	f88b 3000 	strb.w	r3, [fp]
 8015314:	f10a 0a01 	add.w	sl, sl, #1
 8015318:	e22f      	b.n	801577a <_dtoa_r+0x8da>
 801531a:	07f2      	lsls	r2, r6, #31
 801531c:	d505      	bpl.n	801532a <_dtoa_r+0x48a>
 801531e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015322:	f7eb f981 	bl	8000628 <__aeabi_dmul>
 8015326:	3501      	adds	r5, #1
 8015328:	2301      	movs	r3, #1
 801532a:	1076      	asrs	r6, r6, #1
 801532c:	3708      	adds	r7, #8
 801532e:	e772      	b.n	8015216 <_dtoa_r+0x376>
 8015330:	2502      	movs	r5, #2
 8015332:	e774      	b.n	801521e <_dtoa_r+0x37e>
 8015334:	f8cd a020 	str.w	sl, [sp, #32]
 8015338:	464f      	mov	r7, r9
 801533a:	e791      	b.n	8015260 <_dtoa_r+0x3c0>
 801533c:	4b4d      	ldr	r3, [pc, #308]	; (8015474 <_dtoa_r+0x5d4>)
 801533e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015342:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015348:	2b00      	cmp	r3, #0
 801534a:	d047      	beq.n	80153dc <_dtoa_r+0x53c>
 801534c:	4602      	mov	r2, r0
 801534e:	460b      	mov	r3, r1
 8015350:	2000      	movs	r0, #0
 8015352:	494e      	ldr	r1, [pc, #312]	; (801548c <_dtoa_r+0x5ec>)
 8015354:	f7eb fa92 	bl	800087c <__aeabi_ddiv>
 8015358:	462a      	mov	r2, r5
 801535a:	4633      	mov	r3, r6
 801535c:	f7ea ffac 	bl	80002b8 <__aeabi_dsub>
 8015360:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015364:	465d      	mov	r5, fp
 8015366:	e9dd 0100 	ldrd	r0, r1, [sp]
 801536a:	f7eb fc0d 	bl	8000b88 <__aeabi_d2iz>
 801536e:	4606      	mov	r6, r0
 8015370:	f7eb f8f0 	bl	8000554 <__aeabi_i2d>
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	e9dd 0100 	ldrd	r0, r1, [sp]
 801537c:	f7ea ff9c 	bl	80002b8 <__aeabi_dsub>
 8015380:	3630      	adds	r6, #48	; 0x30
 8015382:	f805 6b01 	strb.w	r6, [r5], #1
 8015386:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801538a:	e9cd 0100 	strd	r0, r1, [sp]
 801538e:	f7eb fbbd 	bl	8000b0c <__aeabi_dcmplt>
 8015392:	2800      	cmp	r0, #0
 8015394:	d163      	bne.n	801545e <_dtoa_r+0x5be>
 8015396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801539a:	2000      	movs	r0, #0
 801539c:	4937      	ldr	r1, [pc, #220]	; (801547c <_dtoa_r+0x5dc>)
 801539e:	f7ea ff8b 	bl	80002b8 <__aeabi_dsub>
 80153a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80153a6:	f7eb fbb1 	bl	8000b0c <__aeabi_dcmplt>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	f040 80b7 	bne.w	801551e <_dtoa_r+0x67e>
 80153b0:	eba5 030b 	sub.w	r3, r5, fp
 80153b4:	429f      	cmp	r7, r3
 80153b6:	f77f af7c 	ble.w	80152b2 <_dtoa_r+0x412>
 80153ba:	2200      	movs	r2, #0
 80153bc:	4b30      	ldr	r3, [pc, #192]	; (8015480 <_dtoa_r+0x5e0>)
 80153be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80153c2:	f7eb f931 	bl	8000628 <__aeabi_dmul>
 80153c6:	2200      	movs	r2, #0
 80153c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80153cc:	4b2c      	ldr	r3, [pc, #176]	; (8015480 <_dtoa_r+0x5e0>)
 80153ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153d2:	f7eb f929 	bl	8000628 <__aeabi_dmul>
 80153d6:	e9cd 0100 	strd	r0, r1, [sp]
 80153da:	e7c4      	b.n	8015366 <_dtoa_r+0x4c6>
 80153dc:	462a      	mov	r2, r5
 80153de:	4633      	mov	r3, r6
 80153e0:	f7eb f922 	bl	8000628 <__aeabi_dmul>
 80153e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80153e8:	eb0b 0507 	add.w	r5, fp, r7
 80153ec:	465e      	mov	r6, fp
 80153ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153f2:	f7eb fbc9 	bl	8000b88 <__aeabi_d2iz>
 80153f6:	4607      	mov	r7, r0
 80153f8:	f7eb f8ac 	bl	8000554 <__aeabi_i2d>
 80153fc:	3730      	adds	r7, #48	; 0x30
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015406:	f7ea ff57 	bl	80002b8 <__aeabi_dsub>
 801540a:	f806 7b01 	strb.w	r7, [r6], #1
 801540e:	42ae      	cmp	r6, r5
 8015410:	e9cd 0100 	strd	r0, r1, [sp]
 8015414:	f04f 0200 	mov.w	r2, #0
 8015418:	d126      	bne.n	8015468 <_dtoa_r+0x5c8>
 801541a:	4b1c      	ldr	r3, [pc, #112]	; (801548c <_dtoa_r+0x5ec>)
 801541c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015420:	f7ea ff4c 	bl	80002bc <__adddf3>
 8015424:	4602      	mov	r2, r0
 8015426:	460b      	mov	r3, r1
 8015428:	e9dd 0100 	ldrd	r0, r1, [sp]
 801542c:	f7eb fb8c 	bl	8000b48 <__aeabi_dcmpgt>
 8015430:	2800      	cmp	r0, #0
 8015432:	d174      	bne.n	801551e <_dtoa_r+0x67e>
 8015434:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015438:	2000      	movs	r0, #0
 801543a:	4914      	ldr	r1, [pc, #80]	; (801548c <_dtoa_r+0x5ec>)
 801543c:	f7ea ff3c 	bl	80002b8 <__aeabi_dsub>
 8015440:	4602      	mov	r2, r0
 8015442:	460b      	mov	r3, r1
 8015444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015448:	f7eb fb60 	bl	8000b0c <__aeabi_dcmplt>
 801544c:	2800      	cmp	r0, #0
 801544e:	f43f af30 	beq.w	80152b2 <_dtoa_r+0x412>
 8015452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015456:	2b30      	cmp	r3, #48	; 0x30
 8015458:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801545c:	d002      	beq.n	8015464 <_dtoa_r+0x5c4>
 801545e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015462:	e04a      	b.n	80154fa <_dtoa_r+0x65a>
 8015464:	4615      	mov	r5, r2
 8015466:	e7f4      	b.n	8015452 <_dtoa_r+0x5b2>
 8015468:	4b05      	ldr	r3, [pc, #20]	; (8015480 <_dtoa_r+0x5e0>)
 801546a:	f7eb f8dd 	bl	8000628 <__aeabi_dmul>
 801546e:	e9cd 0100 	strd	r0, r1, [sp]
 8015472:	e7bc      	b.n	80153ee <_dtoa_r+0x54e>
 8015474:	08019c78 	.word	0x08019c78
 8015478:	08019c50 	.word	0x08019c50
 801547c:	3ff00000 	.word	0x3ff00000
 8015480:	40240000 	.word	0x40240000
 8015484:	401c0000 	.word	0x401c0000
 8015488:	40140000 	.word	0x40140000
 801548c:	3fe00000 	.word	0x3fe00000
 8015490:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015494:	465d      	mov	r5, fp
 8015496:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801549a:	4630      	mov	r0, r6
 801549c:	4639      	mov	r1, r7
 801549e:	f7eb f9ed 	bl	800087c <__aeabi_ddiv>
 80154a2:	f7eb fb71 	bl	8000b88 <__aeabi_d2iz>
 80154a6:	4680      	mov	r8, r0
 80154a8:	f7eb f854 	bl	8000554 <__aeabi_i2d>
 80154ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154b0:	f7eb f8ba 	bl	8000628 <__aeabi_dmul>
 80154b4:	4602      	mov	r2, r0
 80154b6:	460b      	mov	r3, r1
 80154b8:	4630      	mov	r0, r6
 80154ba:	4639      	mov	r1, r7
 80154bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80154c0:	f7ea fefa 	bl	80002b8 <__aeabi_dsub>
 80154c4:	f805 6b01 	strb.w	r6, [r5], #1
 80154c8:	eba5 060b 	sub.w	r6, r5, fp
 80154cc:	45b1      	cmp	r9, r6
 80154ce:	4602      	mov	r2, r0
 80154d0:	460b      	mov	r3, r1
 80154d2:	d139      	bne.n	8015548 <_dtoa_r+0x6a8>
 80154d4:	f7ea fef2 	bl	80002bc <__adddf3>
 80154d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154dc:	4606      	mov	r6, r0
 80154de:	460f      	mov	r7, r1
 80154e0:	f7eb fb32 	bl	8000b48 <__aeabi_dcmpgt>
 80154e4:	b9c8      	cbnz	r0, 801551a <_dtoa_r+0x67a>
 80154e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154ea:	4630      	mov	r0, r6
 80154ec:	4639      	mov	r1, r7
 80154ee:	f7eb fb03 	bl	8000af8 <__aeabi_dcmpeq>
 80154f2:	b110      	cbz	r0, 80154fa <_dtoa_r+0x65a>
 80154f4:	f018 0f01 	tst.w	r8, #1
 80154f8:	d10f      	bne.n	801551a <_dtoa_r+0x67a>
 80154fa:	9904      	ldr	r1, [sp, #16]
 80154fc:	4620      	mov	r0, r4
 80154fe:	f000 ff14 	bl	801632a <_Bfree>
 8015502:	2300      	movs	r3, #0
 8015504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015506:	702b      	strb	r3, [r5, #0]
 8015508:	f10a 0301 	add.w	r3, sl, #1
 801550c:	6013      	str	r3, [r2, #0]
 801550e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015510:	2b00      	cmp	r3, #0
 8015512:	f43f acff 	beq.w	8014f14 <_dtoa_r+0x74>
 8015516:	601d      	str	r5, [r3, #0]
 8015518:	e4fc      	b.n	8014f14 <_dtoa_r+0x74>
 801551a:	f8cd a020 	str.w	sl, [sp, #32]
 801551e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015522:	2a39      	cmp	r2, #57	; 0x39
 8015524:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8015528:	d108      	bne.n	801553c <_dtoa_r+0x69c>
 801552a:	459b      	cmp	fp, r3
 801552c:	d10a      	bne.n	8015544 <_dtoa_r+0x6a4>
 801552e:	9b08      	ldr	r3, [sp, #32]
 8015530:	3301      	adds	r3, #1
 8015532:	9308      	str	r3, [sp, #32]
 8015534:	2330      	movs	r3, #48	; 0x30
 8015536:	f88b 3000 	strb.w	r3, [fp]
 801553a:	465b      	mov	r3, fp
 801553c:	781a      	ldrb	r2, [r3, #0]
 801553e:	3201      	adds	r2, #1
 8015540:	701a      	strb	r2, [r3, #0]
 8015542:	e78c      	b.n	801545e <_dtoa_r+0x5be>
 8015544:	461d      	mov	r5, r3
 8015546:	e7ea      	b.n	801551e <_dtoa_r+0x67e>
 8015548:	2200      	movs	r2, #0
 801554a:	4b9b      	ldr	r3, [pc, #620]	; (80157b8 <_dtoa_r+0x918>)
 801554c:	f7eb f86c 	bl	8000628 <__aeabi_dmul>
 8015550:	2200      	movs	r2, #0
 8015552:	2300      	movs	r3, #0
 8015554:	4606      	mov	r6, r0
 8015556:	460f      	mov	r7, r1
 8015558:	f7eb face 	bl	8000af8 <__aeabi_dcmpeq>
 801555c:	2800      	cmp	r0, #0
 801555e:	d09a      	beq.n	8015496 <_dtoa_r+0x5f6>
 8015560:	e7cb      	b.n	80154fa <_dtoa_r+0x65a>
 8015562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015564:	2a00      	cmp	r2, #0
 8015566:	f000 808b 	beq.w	8015680 <_dtoa_r+0x7e0>
 801556a:	9a06      	ldr	r2, [sp, #24]
 801556c:	2a01      	cmp	r2, #1
 801556e:	dc6e      	bgt.n	801564e <_dtoa_r+0x7ae>
 8015570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015572:	2a00      	cmp	r2, #0
 8015574:	d067      	beq.n	8015646 <_dtoa_r+0x7a6>
 8015576:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801557a:	9f07      	ldr	r7, [sp, #28]
 801557c:	9d05      	ldr	r5, [sp, #20]
 801557e:	9a05      	ldr	r2, [sp, #20]
 8015580:	2101      	movs	r1, #1
 8015582:	441a      	add	r2, r3
 8015584:	4620      	mov	r0, r4
 8015586:	9205      	str	r2, [sp, #20]
 8015588:	4498      	add	r8, r3
 801558a:	f000 ff9e 	bl	80164ca <__i2b>
 801558e:	4606      	mov	r6, r0
 8015590:	2d00      	cmp	r5, #0
 8015592:	dd0c      	ble.n	80155ae <_dtoa_r+0x70e>
 8015594:	f1b8 0f00 	cmp.w	r8, #0
 8015598:	dd09      	ble.n	80155ae <_dtoa_r+0x70e>
 801559a:	4545      	cmp	r5, r8
 801559c:	9a05      	ldr	r2, [sp, #20]
 801559e:	462b      	mov	r3, r5
 80155a0:	bfa8      	it	ge
 80155a2:	4643      	movge	r3, r8
 80155a4:	1ad2      	subs	r2, r2, r3
 80155a6:	9205      	str	r2, [sp, #20]
 80155a8:	1aed      	subs	r5, r5, r3
 80155aa:	eba8 0803 	sub.w	r8, r8, r3
 80155ae:	9b07      	ldr	r3, [sp, #28]
 80155b0:	b1eb      	cbz	r3, 80155ee <_dtoa_r+0x74e>
 80155b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d067      	beq.n	8015688 <_dtoa_r+0x7e8>
 80155b8:	b18f      	cbz	r7, 80155de <_dtoa_r+0x73e>
 80155ba:	4631      	mov	r1, r6
 80155bc:	463a      	mov	r2, r7
 80155be:	4620      	mov	r0, r4
 80155c0:	f001 f822 	bl	8016608 <__pow5mult>
 80155c4:	9a04      	ldr	r2, [sp, #16]
 80155c6:	4601      	mov	r1, r0
 80155c8:	4606      	mov	r6, r0
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 ff86 	bl	80164dc <__multiply>
 80155d0:	9904      	ldr	r1, [sp, #16]
 80155d2:	9008      	str	r0, [sp, #32]
 80155d4:	4620      	mov	r0, r4
 80155d6:	f000 fea8 	bl	801632a <_Bfree>
 80155da:	9b08      	ldr	r3, [sp, #32]
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	9b07      	ldr	r3, [sp, #28]
 80155e0:	1bda      	subs	r2, r3, r7
 80155e2:	d004      	beq.n	80155ee <_dtoa_r+0x74e>
 80155e4:	9904      	ldr	r1, [sp, #16]
 80155e6:	4620      	mov	r0, r4
 80155e8:	f001 f80e 	bl	8016608 <__pow5mult>
 80155ec:	9004      	str	r0, [sp, #16]
 80155ee:	2101      	movs	r1, #1
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 ff6a 	bl	80164ca <__i2b>
 80155f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155f8:	4607      	mov	r7, r0
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f000 81cf 	beq.w	801599e <_dtoa_r+0xafe>
 8015600:	461a      	mov	r2, r3
 8015602:	4601      	mov	r1, r0
 8015604:	4620      	mov	r0, r4
 8015606:	f000 ffff 	bl	8016608 <__pow5mult>
 801560a:	9b06      	ldr	r3, [sp, #24]
 801560c:	2b01      	cmp	r3, #1
 801560e:	4607      	mov	r7, r0
 8015610:	dc40      	bgt.n	8015694 <_dtoa_r+0x7f4>
 8015612:	9b00      	ldr	r3, [sp, #0]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d139      	bne.n	801568c <_dtoa_r+0x7ec>
 8015618:	9b01      	ldr	r3, [sp, #4]
 801561a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801561e:	2b00      	cmp	r3, #0
 8015620:	d136      	bne.n	8015690 <_dtoa_r+0x7f0>
 8015622:	9b01      	ldr	r3, [sp, #4]
 8015624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015628:	0d1b      	lsrs	r3, r3, #20
 801562a:	051b      	lsls	r3, r3, #20
 801562c:	b12b      	cbz	r3, 801563a <_dtoa_r+0x79a>
 801562e:	9b05      	ldr	r3, [sp, #20]
 8015630:	3301      	adds	r3, #1
 8015632:	9305      	str	r3, [sp, #20]
 8015634:	f108 0801 	add.w	r8, r8, #1
 8015638:	2301      	movs	r3, #1
 801563a:	9307      	str	r3, [sp, #28]
 801563c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801563e:	2b00      	cmp	r3, #0
 8015640:	d12a      	bne.n	8015698 <_dtoa_r+0x7f8>
 8015642:	2001      	movs	r0, #1
 8015644:	e030      	b.n	80156a8 <_dtoa_r+0x808>
 8015646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015648:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801564c:	e795      	b.n	801557a <_dtoa_r+0x6da>
 801564e:	9b07      	ldr	r3, [sp, #28]
 8015650:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8015654:	42bb      	cmp	r3, r7
 8015656:	bfbf      	itttt	lt
 8015658:	9b07      	ldrlt	r3, [sp, #28]
 801565a:	9707      	strlt	r7, [sp, #28]
 801565c:	1afa      	sublt	r2, r7, r3
 801565e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015660:	bfbb      	ittet	lt
 8015662:	189b      	addlt	r3, r3, r2
 8015664:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015666:	1bdf      	subge	r7, r3, r7
 8015668:	2700      	movlt	r7, #0
 801566a:	f1b9 0f00 	cmp.w	r9, #0
 801566e:	bfb5      	itete	lt
 8015670:	9b05      	ldrlt	r3, [sp, #20]
 8015672:	9d05      	ldrge	r5, [sp, #20]
 8015674:	eba3 0509 	sublt.w	r5, r3, r9
 8015678:	464b      	movge	r3, r9
 801567a:	bfb8      	it	lt
 801567c:	2300      	movlt	r3, #0
 801567e:	e77e      	b.n	801557e <_dtoa_r+0x6de>
 8015680:	9f07      	ldr	r7, [sp, #28]
 8015682:	9d05      	ldr	r5, [sp, #20]
 8015684:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015686:	e783      	b.n	8015590 <_dtoa_r+0x6f0>
 8015688:	9a07      	ldr	r2, [sp, #28]
 801568a:	e7ab      	b.n	80155e4 <_dtoa_r+0x744>
 801568c:	2300      	movs	r3, #0
 801568e:	e7d4      	b.n	801563a <_dtoa_r+0x79a>
 8015690:	9b00      	ldr	r3, [sp, #0]
 8015692:	e7d2      	b.n	801563a <_dtoa_r+0x79a>
 8015694:	2300      	movs	r3, #0
 8015696:	9307      	str	r3, [sp, #28]
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801569e:	6918      	ldr	r0, [r3, #16]
 80156a0:	f000 fec5 	bl	801642e <__hi0bits>
 80156a4:	f1c0 0020 	rsb	r0, r0, #32
 80156a8:	4440      	add	r0, r8
 80156aa:	f010 001f 	ands.w	r0, r0, #31
 80156ae:	d047      	beq.n	8015740 <_dtoa_r+0x8a0>
 80156b0:	f1c0 0320 	rsb	r3, r0, #32
 80156b4:	2b04      	cmp	r3, #4
 80156b6:	dd3b      	ble.n	8015730 <_dtoa_r+0x890>
 80156b8:	9b05      	ldr	r3, [sp, #20]
 80156ba:	f1c0 001c 	rsb	r0, r0, #28
 80156be:	4403      	add	r3, r0
 80156c0:	9305      	str	r3, [sp, #20]
 80156c2:	4405      	add	r5, r0
 80156c4:	4480      	add	r8, r0
 80156c6:	9b05      	ldr	r3, [sp, #20]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	dd05      	ble.n	80156d8 <_dtoa_r+0x838>
 80156cc:	461a      	mov	r2, r3
 80156ce:	9904      	ldr	r1, [sp, #16]
 80156d0:	4620      	mov	r0, r4
 80156d2:	f000 ffd9 	bl	8016688 <__lshift>
 80156d6:	9004      	str	r0, [sp, #16]
 80156d8:	f1b8 0f00 	cmp.w	r8, #0
 80156dc:	dd05      	ble.n	80156ea <_dtoa_r+0x84a>
 80156de:	4639      	mov	r1, r7
 80156e0:	4642      	mov	r2, r8
 80156e2:	4620      	mov	r0, r4
 80156e4:	f000 ffd0 	bl	8016688 <__lshift>
 80156e8:	4607      	mov	r7, r0
 80156ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156ec:	b353      	cbz	r3, 8015744 <_dtoa_r+0x8a4>
 80156ee:	4639      	mov	r1, r7
 80156f0:	9804      	ldr	r0, [sp, #16]
 80156f2:	f001 f81d 	bl	8016730 <__mcmp>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	da24      	bge.n	8015744 <_dtoa_r+0x8a4>
 80156fa:	2300      	movs	r3, #0
 80156fc:	220a      	movs	r2, #10
 80156fe:	9904      	ldr	r1, [sp, #16]
 8015700:	4620      	mov	r0, r4
 8015702:	f000 fe1b 	bl	801633c <__multadd>
 8015706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015708:	9004      	str	r0, [sp, #16]
 801570a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801570e:	2b00      	cmp	r3, #0
 8015710:	f000 814c 	beq.w	80159ac <_dtoa_r+0xb0c>
 8015714:	2300      	movs	r3, #0
 8015716:	4631      	mov	r1, r6
 8015718:	220a      	movs	r2, #10
 801571a:	4620      	mov	r0, r4
 801571c:	f000 fe0e 	bl	801633c <__multadd>
 8015720:	9b02      	ldr	r3, [sp, #8]
 8015722:	2b00      	cmp	r3, #0
 8015724:	4606      	mov	r6, r0
 8015726:	dc4f      	bgt.n	80157c8 <_dtoa_r+0x928>
 8015728:	9b06      	ldr	r3, [sp, #24]
 801572a:	2b02      	cmp	r3, #2
 801572c:	dd4c      	ble.n	80157c8 <_dtoa_r+0x928>
 801572e:	e011      	b.n	8015754 <_dtoa_r+0x8b4>
 8015730:	d0c9      	beq.n	80156c6 <_dtoa_r+0x826>
 8015732:	9a05      	ldr	r2, [sp, #20]
 8015734:	331c      	adds	r3, #28
 8015736:	441a      	add	r2, r3
 8015738:	9205      	str	r2, [sp, #20]
 801573a:	441d      	add	r5, r3
 801573c:	4498      	add	r8, r3
 801573e:	e7c2      	b.n	80156c6 <_dtoa_r+0x826>
 8015740:	4603      	mov	r3, r0
 8015742:	e7f6      	b.n	8015732 <_dtoa_r+0x892>
 8015744:	f1b9 0f00 	cmp.w	r9, #0
 8015748:	dc38      	bgt.n	80157bc <_dtoa_r+0x91c>
 801574a:	9b06      	ldr	r3, [sp, #24]
 801574c:	2b02      	cmp	r3, #2
 801574e:	dd35      	ble.n	80157bc <_dtoa_r+0x91c>
 8015750:	f8cd 9008 	str.w	r9, [sp, #8]
 8015754:	9b02      	ldr	r3, [sp, #8]
 8015756:	b963      	cbnz	r3, 8015772 <_dtoa_r+0x8d2>
 8015758:	4639      	mov	r1, r7
 801575a:	2205      	movs	r2, #5
 801575c:	4620      	mov	r0, r4
 801575e:	f000 fded 	bl	801633c <__multadd>
 8015762:	4601      	mov	r1, r0
 8015764:	4607      	mov	r7, r0
 8015766:	9804      	ldr	r0, [sp, #16]
 8015768:	f000 ffe2 	bl	8016730 <__mcmp>
 801576c:	2800      	cmp	r0, #0
 801576e:	f73f adcc 	bgt.w	801530a <_dtoa_r+0x46a>
 8015772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015774:	465d      	mov	r5, fp
 8015776:	ea6f 0a03 	mvn.w	sl, r3
 801577a:	f04f 0900 	mov.w	r9, #0
 801577e:	4639      	mov	r1, r7
 8015780:	4620      	mov	r0, r4
 8015782:	f000 fdd2 	bl	801632a <_Bfree>
 8015786:	2e00      	cmp	r6, #0
 8015788:	f43f aeb7 	beq.w	80154fa <_dtoa_r+0x65a>
 801578c:	f1b9 0f00 	cmp.w	r9, #0
 8015790:	d005      	beq.n	801579e <_dtoa_r+0x8fe>
 8015792:	45b1      	cmp	r9, r6
 8015794:	d003      	beq.n	801579e <_dtoa_r+0x8fe>
 8015796:	4649      	mov	r1, r9
 8015798:	4620      	mov	r0, r4
 801579a:	f000 fdc6 	bl	801632a <_Bfree>
 801579e:	4631      	mov	r1, r6
 80157a0:	4620      	mov	r0, r4
 80157a2:	f000 fdc2 	bl	801632a <_Bfree>
 80157a6:	e6a8      	b.n	80154fa <_dtoa_r+0x65a>
 80157a8:	2700      	movs	r7, #0
 80157aa:	463e      	mov	r6, r7
 80157ac:	e7e1      	b.n	8015772 <_dtoa_r+0x8d2>
 80157ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80157b2:	463e      	mov	r6, r7
 80157b4:	e5a9      	b.n	801530a <_dtoa_r+0x46a>
 80157b6:	bf00      	nop
 80157b8:	40240000 	.word	0x40240000
 80157bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157be:	f8cd 9008 	str.w	r9, [sp, #8]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	f000 80f9 	beq.w	80159ba <_dtoa_r+0xb1a>
 80157c8:	2d00      	cmp	r5, #0
 80157ca:	dd05      	ble.n	80157d8 <_dtoa_r+0x938>
 80157cc:	4631      	mov	r1, r6
 80157ce:	462a      	mov	r2, r5
 80157d0:	4620      	mov	r0, r4
 80157d2:	f000 ff59 	bl	8016688 <__lshift>
 80157d6:	4606      	mov	r6, r0
 80157d8:	9b07      	ldr	r3, [sp, #28]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d04c      	beq.n	8015878 <_dtoa_r+0x9d8>
 80157de:	6871      	ldr	r1, [r6, #4]
 80157e0:	4620      	mov	r0, r4
 80157e2:	f000 fd7d 	bl	80162e0 <_Balloc>
 80157e6:	6932      	ldr	r2, [r6, #16]
 80157e8:	3202      	adds	r2, #2
 80157ea:	4605      	mov	r5, r0
 80157ec:	0092      	lsls	r2, r2, #2
 80157ee:	f106 010c 	add.w	r1, r6, #12
 80157f2:	300c      	adds	r0, #12
 80157f4:	f7fd f97c 	bl	8012af0 <memcpy>
 80157f8:	2201      	movs	r2, #1
 80157fa:	4629      	mov	r1, r5
 80157fc:	4620      	mov	r0, r4
 80157fe:	f000 ff43 	bl	8016688 <__lshift>
 8015802:	9b00      	ldr	r3, [sp, #0]
 8015804:	f8cd b014 	str.w	fp, [sp, #20]
 8015808:	f003 0301 	and.w	r3, r3, #1
 801580c:	46b1      	mov	r9, r6
 801580e:	9307      	str	r3, [sp, #28]
 8015810:	4606      	mov	r6, r0
 8015812:	4639      	mov	r1, r7
 8015814:	9804      	ldr	r0, [sp, #16]
 8015816:	f7ff fab7 	bl	8014d88 <quorem>
 801581a:	4649      	mov	r1, r9
 801581c:	4605      	mov	r5, r0
 801581e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015822:	9804      	ldr	r0, [sp, #16]
 8015824:	f000 ff84 	bl	8016730 <__mcmp>
 8015828:	4632      	mov	r2, r6
 801582a:	9000      	str	r0, [sp, #0]
 801582c:	4639      	mov	r1, r7
 801582e:	4620      	mov	r0, r4
 8015830:	f000 ff98 	bl	8016764 <__mdiff>
 8015834:	68c3      	ldr	r3, [r0, #12]
 8015836:	4602      	mov	r2, r0
 8015838:	bb03      	cbnz	r3, 801587c <_dtoa_r+0x9dc>
 801583a:	4601      	mov	r1, r0
 801583c:	9008      	str	r0, [sp, #32]
 801583e:	9804      	ldr	r0, [sp, #16]
 8015840:	f000 ff76 	bl	8016730 <__mcmp>
 8015844:	9a08      	ldr	r2, [sp, #32]
 8015846:	4603      	mov	r3, r0
 8015848:	4611      	mov	r1, r2
 801584a:	4620      	mov	r0, r4
 801584c:	9308      	str	r3, [sp, #32]
 801584e:	f000 fd6c 	bl	801632a <_Bfree>
 8015852:	9b08      	ldr	r3, [sp, #32]
 8015854:	b9a3      	cbnz	r3, 8015880 <_dtoa_r+0x9e0>
 8015856:	9a06      	ldr	r2, [sp, #24]
 8015858:	b992      	cbnz	r2, 8015880 <_dtoa_r+0x9e0>
 801585a:	9a07      	ldr	r2, [sp, #28]
 801585c:	b982      	cbnz	r2, 8015880 <_dtoa_r+0x9e0>
 801585e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015862:	d029      	beq.n	80158b8 <_dtoa_r+0xa18>
 8015864:	9b00      	ldr	r3, [sp, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	dd01      	ble.n	801586e <_dtoa_r+0x9ce>
 801586a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801586e:	9b05      	ldr	r3, [sp, #20]
 8015870:	1c5d      	adds	r5, r3, #1
 8015872:	f883 8000 	strb.w	r8, [r3]
 8015876:	e782      	b.n	801577e <_dtoa_r+0x8de>
 8015878:	4630      	mov	r0, r6
 801587a:	e7c2      	b.n	8015802 <_dtoa_r+0x962>
 801587c:	2301      	movs	r3, #1
 801587e:	e7e3      	b.n	8015848 <_dtoa_r+0x9a8>
 8015880:	9a00      	ldr	r2, [sp, #0]
 8015882:	2a00      	cmp	r2, #0
 8015884:	db04      	blt.n	8015890 <_dtoa_r+0x9f0>
 8015886:	d125      	bne.n	80158d4 <_dtoa_r+0xa34>
 8015888:	9a06      	ldr	r2, [sp, #24]
 801588a:	bb1a      	cbnz	r2, 80158d4 <_dtoa_r+0xa34>
 801588c:	9a07      	ldr	r2, [sp, #28]
 801588e:	bb0a      	cbnz	r2, 80158d4 <_dtoa_r+0xa34>
 8015890:	2b00      	cmp	r3, #0
 8015892:	ddec      	ble.n	801586e <_dtoa_r+0x9ce>
 8015894:	2201      	movs	r2, #1
 8015896:	9904      	ldr	r1, [sp, #16]
 8015898:	4620      	mov	r0, r4
 801589a:	f000 fef5 	bl	8016688 <__lshift>
 801589e:	4639      	mov	r1, r7
 80158a0:	9004      	str	r0, [sp, #16]
 80158a2:	f000 ff45 	bl	8016730 <__mcmp>
 80158a6:	2800      	cmp	r0, #0
 80158a8:	dc03      	bgt.n	80158b2 <_dtoa_r+0xa12>
 80158aa:	d1e0      	bne.n	801586e <_dtoa_r+0x9ce>
 80158ac:	f018 0f01 	tst.w	r8, #1
 80158b0:	d0dd      	beq.n	801586e <_dtoa_r+0x9ce>
 80158b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80158b6:	d1d8      	bne.n	801586a <_dtoa_r+0x9ca>
 80158b8:	9b05      	ldr	r3, [sp, #20]
 80158ba:	9a05      	ldr	r2, [sp, #20]
 80158bc:	1c5d      	adds	r5, r3, #1
 80158be:	2339      	movs	r3, #57	; 0x39
 80158c0:	7013      	strb	r3, [r2, #0]
 80158c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80158c6:	2b39      	cmp	r3, #57	; 0x39
 80158c8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80158cc:	d04f      	beq.n	801596e <_dtoa_r+0xace>
 80158ce:	3301      	adds	r3, #1
 80158d0:	7013      	strb	r3, [r2, #0]
 80158d2:	e754      	b.n	801577e <_dtoa_r+0x8de>
 80158d4:	9a05      	ldr	r2, [sp, #20]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	f102 0501 	add.w	r5, r2, #1
 80158dc:	dd06      	ble.n	80158ec <_dtoa_r+0xa4c>
 80158de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80158e2:	d0e9      	beq.n	80158b8 <_dtoa_r+0xa18>
 80158e4:	f108 0801 	add.w	r8, r8, #1
 80158e8:	9b05      	ldr	r3, [sp, #20]
 80158ea:	e7c2      	b.n	8015872 <_dtoa_r+0x9d2>
 80158ec:	9a02      	ldr	r2, [sp, #8]
 80158ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 80158f2:	eba5 030b 	sub.w	r3, r5, fp
 80158f6:	4293      	cmp	r3, r2
 80158f8:	d021      	beq.n	801593e <_dtoa_r+0xa9e>
 80158fa:	2300      	movs	r3, #0
 80158fc:	220a      	movs	r2, #10
 80158fe:	9904      	ldr	r1, [sp, #16]
 8015900:	4620      	mov	r0, r4
 8015902:	f000 fd1b 	bl	801633c <__multadd>
 8015906:	45b1      	cmp	r9, r6
 8015908:	9004      	str	r0, [sp, #16]
 801590a:	f04f 0300 	mov.w	r3, #0
 801590e:	f04f 020a 	mov.w	r2, #10
 8015912:	4649      	mov	r1, r9
 8015914:	4620      	mov	r0, r4
 8015916:	d105      	bne.n	8015924 <_dtoa_r+0xa84>
 8015918:	f000 fd10 	bl	801633c <__multadd>
 801591c:	4681      	mov	r9, r0
 801591e:	4606      	mov	r6, r0
 8015920:	9505      	str	r5, [sp, #20]
 8015922:	e776      	b.n	8015812 <_dtoa_r+0x972>
 8015924:	f000 fd0a 	bl	801633c <__multadd>
 8015928:	4631      	mov	r1, r6
 801592a:	4681      	mov	r9, r0
 801592c:	2300      	movs	r3, #0
 801592e:	220a      	movs	r2, #10
 8015930:	4620      	mov	r0, r4
 8015932:	f000 fd03 	bl	801633c <__multadd>
 8015936:	4606      	mov	r6, r0
 8015938:	e7f2      	b.n	8015920 <_dtoa_r+0xa80>
 801593a:	f04f 0900 	mov.w	r9, #0
 801593e:	2201      	movs	r2, #1
 8015940:	9904      	ldr	r1, [sp, #16]
 8015942:	4620      	mov	r0, r4
 8015944:	f000 fea0 	bl	8016688 <__lshift>
 8015948:	4639      	mov	r1, r7
 801594a:	9004      	str	r0, [sp, #16]
 801594c:	f000 fef0 	bl	8016730 <__mcmp>
 8015950:	2800      	cmp	r0, #0
 8015952:	dcb6      	bgt.n	80158c2 <_dtoa_r+0xa22>
 8015954:	d102      	bne.n	801595c <_dtoa_r+0xabc>
 8015956:	f018 0f01 	tst.w	r8, #1
 801595a:	d1b2      	bne.n	80158c2 <_dtoa_r+0xa22>
 801595c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015960:	2b30      	cmp	r3, #48	; 0x30
 8015962:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8015966:	f47f af0a 	bne.w	801577e <_dtoa_r+0x8de>
 801596a:	4615      	mov	r5, r2
 801596c:	e7f6      	b.n	801595c <_dtoa_r+0xabc>
 801596e:	4593      	cmp	fp, r2
 8015970:	d105      	bne.n	801597e <_dtoa_r+0xade>
 8015972:	2331      	movs	r3, #49	; 0x31
 8015974:	f10a 0a01 	add.w	sl, sl, #1
 8015978:	f88b 3000 	strb.w	r3, [fp]
 801597c:	e6ff      	b.n	801577e <_dtoa_r+0x8de>
 801597e:	4615      	mov	r5, r2
 8015980:	e79f      	b.n	80158c2 <_dtoa_r+0xa22>
 8015982:	f8df b064 	ldr.w	fp, [pc, #100]	; 80159e8 <_dtoa_r+0xb48>
 8015986:	f7ff bac5 	b.w	8014f14 <_dtoa_r+0x74>
 801598a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801598c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80159ec <_dtoa_r+0xb4c>
 8015990:	2b00      	cmp	r3, #0
 8015992:	f43f aabf 	beq.w	8014f14 <_dtoa_r+0x74>
 8015996:	f10b 0308 	add.w	r3, fp, #8
 801599a:	f7ff bab9 	b.w	8014f10 <_dtoa_r+0x70>
 801599e:	9b06      	ldr	r3, [sp, #24]
 80159a0:	2b01      	cmp	r3, #1
 80159a2:	f77f ae36 	ble.w	8015612 <_dtoa_r+0x772>
 80159a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159a8:	9307      	str	r3, [sp, #28]
 80159aa:	e64a      	b.n	8015642 <_dtoa_r+0x7a2>
 80159ac:	9b02      	ldr	r3, [sp, #8]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	dc03      	bgt.n	80159ba <_dtoa_r+0xb1a>
 80159b2:	9b06      	ldr	r3, [sp, #24]
 80159b4:	2b02      	cmp	r3, #2
 80159b6:	f73f aecd 	bgt.w	8015754 <_dtoa_r+0x8b4>
 80159ba:	465d      	mov	r5, fp
 80159bc:	4639      	mov	r1, r7
 80159be:	9804      	ldr	r0, [sp, #16]
 80159c0:	f7ff f9e2 	bl	8014d88 <quorem>
 80159c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80159c8:	f805 8b01 	strb.w	r8, [r5], #1
 80159cc:	9a02      	ldr	r2, [sp, #8]
 80159ce:	eba5 030b 	sub.w	r3, r5, fp
 80159d2:	429a      	cmp	r2, r3
 80159d4:	ddb1      	ble.n	801593a <_dtoa_r+0xa9a>
 80159d6:	2300      	movs	r3, #0
 80159d8:	220a      	movs	r2, #10
 80159da:	9904      	ldr	r1, [sp, #16]
 80159dc:	4620      	mov	r0, r4
 80159de:	f000 fcad 	bl	801633c <__multadd>
 80159e2:	9004      	str	r0, [sp, #16]
 80159e4:	e7ea      	b.n	80159bc <_dtoa_r+0xb1c>
 80159e6:	bf00      	nop
 80159e8:	08019c12 	.word	0x08019c12
 80159ec:	08019c34 	.word	0x08019c34

080159f0 <__errno>:
 80159f0:	4b01      	ldr	r3, [pc, #4]	; (80159f8 <__errno+0x8>)
 80159f2:	6818      	ldr	r0, [r3, #0]
 80159f4:	4770      	bx	lr
 80159f6:	bf00      	nop
 80159f8:	2000019c 	.word	0x2000019c

080159fc <__libc_fini_array>:
 80159fc:	b538      	push	{r3, r4, r5, lr}
 80159fe:	4d07      	ldr	r5, [pc, #28]	; (8015a1c <__libc_fini_array+0x20>)
 8015a00:	4c07      	ldr	r4, [pc, #28]	; (8015a20 <__libc_fini_array+0x24>)
 8015a02:	1b64      	subs	r4, r4, r5
 8015a04:	10a4      	asrs	r4, r4, #2
 8015a06:	b91c      	cbnz	r4, 8015a10 <__libc_fini_array+0x14>
 8015a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a0c:	f002 bbd2 	b.w	80181b4 <_fini>
 8015a10:	3c01      	subs	r4, #1
 8015a12:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8015a16:	4798      	blx	r3
 8015a18:	e7f5      	b.n	8015a06 <__libc_fini_array+0xa>
 8015a1a:	bf00      	nop
 8015a1c:	0801a038 	.word	0x0801a038
 8015a20:	0801a03c 	.word	0x0801a03c

08015a24 <_malloc_trim_r>:
 8015a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a28:	4605      	mov	r5, r0
 8015a2a:	2008      	movs	r0, #8
 8015a2c:	460c      	mov	r4, r1
 8015a2e:	f7ff f98d 	bl	8014d4c <sysconf>
 8015a32:	4f23      	ldr	r7, [pc, #140]	; (8015ac0 <_malloc_trim_r+0x9c>)
 8015a34:	4680      	mov	r8, r0
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7fd f86e 	bl	8012b18 <__malloc_lock>
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	685e      	ldr	r6, [r3, #4]
 8015a40:	f026 0603 	bic.w	r6, r6, #3
 8015a44:	1b34      	subs	r4, r6, r4
 8015a46:	3c11      	subs	r4, #17
 8015a48:	4444      	add	r4, r8
 8015a4a:	fbb4 f4f8 	udiv	r4, r4, r8
 8015a4e:	3c01      	subs	r4, #1
 8015a50:	fb08 f404 	mul.w	r4, r8, r4
 8015a54:	45a0      	cmp	r8, r4
 8015a56:	dd05      	ble.n	8015a64 <_malloc_trim_r+0x40>
 8015a58:	4628      	mov	r0, r5
 8015a5a:	f7fd f863 	bl	8012b24 <__malloc_unlock>
 8015a5e:	2000      	movs	r0, #0
 8015a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a64:	2100      	movs	r1, #0
 8015a66:	4628      	mov	r0, r5
 8015a68:	f7fd f862 	bl	8012b30 <_sbrk_r>
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	4433      	add	r3, r6
 8015a70:	4298      	cmp	r0, r3
 8015a72:	d1f1      	bne.n	8015a58 <_malloc_trim_r+0x34>
 8015a74:	4261      	negs	r1, r4
 8015a76:	4628      	mov	r0, r5
 8015a78:	f7fd f85a 	bl	8012b30 <_sbrk_r>
 8015a7c:	3001      	adds	r0, #1
 8015a7e:	d110      	bne.n	8015aa2 <_malloc_trim_r+0x7e>
 8015a80:	2100      	movs	r1, #0
 8015a82:	4628      	mov	r0, r5
 8015a84:	f7fd f854 	bl	8012b30 <_sbrk_r>
 8015a88:	68ba      	ldr	r2, [r7, #8]
 8015a8a:	1a83      	subs	r3, r0, r2
 8015a8c:	2b0f      	cmp	r3, #15
 8015a8e:	dde3      	ble.n	8015a58 <_malloc_trim_r+0x34>
 8015a90:	490c      	ldr	r1, [pc, #48]	; (8015ac4 <_malloc_trim_r+0xa0>)
 8015a92:	6809      	ldr	r1, [r1, #0]
 8015a94:	1a40      	subs	r0, r0, r1
 8015a96:	490c      	ldr	r1, [pc, #48]	; (8015ac8 <_malloc_trim_r+0xa4>)
 8015a98:	f043 0301 	orr.w	r3, r3, #1
 8015a9c:	6008      	str	r0, [r1, #0]
 8015a9e:	6053      	str	r3, [r2, #4]
 8015aa0:	e7da      	b.n	8015a58 <_malloc_trim_r+0x34>
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	4a08      	ldr	r2, [pc, #32]	; (8015ac8 <_malloc_trim_r+0xa4>)
 8015aa6:	1b36      	subs	r6, r6, r4
 8015aa8:	f046 0601 	orr.w	r6, r6, #1
 8015aac:	605e      	str	r6, [r3, #4]
 8015aae:	6813      	ldr	r3, [r2, #0]
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	1b1c      	subs	r4, r3, r4
 8015ab4:	6014      	str	r4, [r2, #0]
 8015ab6:	f7fd f835 	bl	8012b24 <__malloc_unlock>
 8015aba:	2001      	movs	r0, #1
 8015abc:	e7d0      	b.n	8015a60 <_malloc_trim_r+0x3c>
 8015abe:	bf00      	nop
 8015ac0:	200005c8 	.word	0x200005c8
 8015ac4:	200009d0 	.word	0x200009d0
 8015ac8:	20000be4 	.word	0x20000be4

08015acc <_free_r>:
 8015acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	4688      	mov	r8, r1
 8015ad4:	2900      	cmp	r1, #0
 8015ad6:	f000 80ab 	beq.w	8015c30 <_free_r+0x164>
 8015ada:	f7fd f81d 	bl	8012b18 <__malloc_lock>
 8015ade:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8015ae2:	4d54      	ldr	r5, [pc, #336]	; (8015c34 <_free_r+0x168>)
 8015ae4:	f022 0001 	bic.w	r0, r2, #1
 8015ae8:	f1a8 0308 	sub.w	r3, r8, #8
 8015aec:	181f      	adds	r7, r3, r0
 8015aee:	68a9      	ldr	r1, [r5, #8]
 8015af0:	687e      	ldr	r6, [r7, #4]
 8015af2:	42b9      	cmp	r1, r7
 8015af4:	f026 0603 	bic.w	r6, r6, #3
 8015af8:	f002 0201 	and.w	r2, r2, #1
 8015afc:	d11b      	bne.n	8015b36 <_free_r+0x6a>
 8015afe:	4430      	add	r0, r6
 8015b00:	b93a      	cbnz	r2, 8015b12 <_free_r+0x46>
 8015b02:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8015b06:	1a9b      	subs	r3, r3, r2
 8015b08:	4410      	add	r0, r2
 8015b0a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8015b0e:	60ca      	str	r2, [r1, #12]
 8015b10:	6091      	str	r1, [r2, #8]
 8015b12:	f040 0201 	orr.w	r2, r0, #1
 8015b16:	605a      	str	r2, [r3, #4]
 8015b18:	60ab      	str	r3, [r5, #8]
 8015b1a:	4b47      	ldr	r3, [pc, #284]	; (8015c38 <_free_r+0x16c>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	4283      	cmp	r3, r0
 8015b20:	d804      	bhi.n	8015b2c <_free_r+0x60>
 8015b22:	4b46      	ldr	r3, [pc, #280]	; (8015c3c <_free_r+0x170>)
 8015b24:	4620      	mov	r0, r4
 8015b26:	6819      	ldr	r1, [r3, #0]
 8015b28:	f7ff ff7c 	bl	8015a24 <_malloc_trim_r>
 8015b2c:	4620      	mov	r0, r4
 8015b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b32:	f7fc bff7 	b.w	8012b24 <__malloc_unlock>
 8015b36:	607e      	str	r6, [r7, #4]
 8015b38:	2a00      	cmp	r2, #0
 8015b3a:	d139      	bne.n	8015bb0 <_free_r+0xe4>
 8015b3c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8015b40:	1a5b      	subs	r3, r3, r1
 8015b42:	4408      	add	r0, r1
 8015b44:	6899      	ldr	r1, [r3, #8]
 8015b46:	f105 0c08 	add.w	ip, r5, #8
 8015b4a:	4561      	cmp	r1, ip
 8015b4c:	d032      	beq.n	8015bb4 <_free_r+0xe8>
 8015b4e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8015b52:	f8c1 c00c 	str.w	ip, [r1, #12]
 8015b56:	f8cc 1008 	str.w	r1, [ip, #8]
 8015b5a:	19b9      	adds	r1, r7, r6
 8015b5c:	6849      	ldr	r1, [r1, #4]
 8015b5e:	07c9      	lsls	r1, r1, #31
 8015b60:	d40a      	bmi.n	8015b78 <_free_r+0xac>
 8015b62:	4430      	add	r0, r6
 8015b64:	68b9      	ldr	r1, [r7, #8]
 8015b66:	bb3a      	cbnz	r2, 8015bb8 <_free_r+0xec>
 8015b68:	4e35      	ldr	r6, [pc, #212]	; (8015c40 <_free_r+0x174>)
 8015b6a:	42b1      	cmp	r1, r6
 8015b6c:	d124      	bne.n	8015bb8 <_free_r+0xec>
 8015b6e:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8015b72:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8015b76:	2201      	movs	r2, #1
 8015b78:	f040 0101 	orr.w	r1, r0, #1
 8015b7c:	6059      	str	r1, [r3, #4]
 8015b7e:	5018      	str	r0, [r3, r0]
 8015b80:	2a00      	cmp	r2, #0
 8015b82:	d1d3      	bne.n	8015b2c <_free_r+0x60>
 8015b84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8015b88:	d21a      	bcs.n	8015bc0 <_free_r+0xf4>
 8015b8a:	08c0      	lsrs	r0, r0, #3
 8015b8c:	1081      	asrs	r1, r0, #2
 8015b8e:	2201      	movs	r2, #1
 8015b90:	408a      	lsls	r2, r1
 8015b92:	6869      	ldr	r1, [r5, #4]
 8015b94:	3001      	adds	r0, #1
 8015b96:	430a      	orrs	r2, r1
 8015b98:	606a      	str	r2, [r5, #4]
 8015b9a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8015b9e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8015ba2:	3a08      	subs	r2, #8
 8015ba4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8015ba8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8015bac:	60cb      	str	r3, [r1, #12]
 8015bae:	e7bd      	b.n	8015b2c <_free_r+0x60>
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	e7d2      	b.n	8015b5a <_free_r+0x8e>
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	e7d0      	b.n	8015b5a <_free_r+0x8e>
 8015bb8:	68fe      	ldr	r6, [r7, #12]
 8015bba:	60ce      	str	r6, [r1, #12]
 8015bbc:	60b1      	str	r1, [r6, #8]
 8015bbe:	e7db      	b.n	8015b78 <_free_r+0xac>
 8015bc0:	0a42      	lsrs	r2, r0, #9
 8015bc2:	2a04      	cmp	r2, #4
 8015bc4:	d813      	bhi.n	8015bee <_free_r+0x122>
 8015bc6:	0982      	lsrs	r2, r0, #6
 8015bc8:	3238      	adds	r2, #56	; 0x38
 8015bca:	1c51      	adds	r1, r2, #1
 8015bcc:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8015bd0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8015bd4:	428e      	cmp	r6, r1
 8015bd6:	d124      	bne.n	8015c22 <_free_r+0x156>
 8015bd8:	2001      	movs	r0, #1
 8015bda:	1092      	asrs	r2, r2, #2
 8015bdc:	fa00 f202 	lsl.w	r2, r0, r2
 8015be0:	6868      	ldr	r0, [r5, #4]
 8015be2:	4302      	orrs	r2, r0
 8015be4:	606a      	str	r2, [r5, #4]
 8015be6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8015bea:	60b3      	str	r3, [r6, #8]
 8015bec:	e7de      	b.n	8015bac <_free_r+0xe0>
 8015bee:	2a14      	cmp	r2, #20
 8015bf0:	d801      	bhi.n	8015bf6 <_free_r+0x12a>
 8015bf2:	325b      	adds	r2, #91	; 0x5b
 8015bf4:	e7e9      	b.n	8015bca <_free_r+0xfe>
 8015bf6:	2a54      	cmp	r2, #84	; 0x54
 8015bf8:	d802      	bhi.n	8015c00 <_free_r+0x134>
 8015bfa:	0b02      	lsrs	r2, r0, #12
 8015bfc:	326e      	adds	r2, #110	; 0x6e
 8015bfe:	e7e4      	b.n	8015bca <_free_r+0xfe>
 8015c00:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8015c04:	d802      	bhi.n	8015c0c <_free_r+0x140>
 8015c06:	0bc2      	lsrs	r2, r0, #15
 8015c08:	3277      	adds	r2, #119	; 0x77
 8015c0a:	e7de      	b.n	8015bca <_free_r+0xfe>
 8015c0c:	f240 5154 	movw	r1, #1364	; 0x554
 8015c10:	428a      	cmp	r2, r1
 8015c12:	bf9a      	itte	ls
 8015c14:	0c82      	lsrls	r2, r0, #18
 8015c16:	327c      	addls	r2, #124	; 0x7c
 8015c18:	227e      	movhi	r2, #126	; 0x7e
 8015c1a:	e7d6      	b.n	8015bca <_free_r+0xfe>
 8015c1c:	6889      	ldr	r1, [r1, #8]
 8015c1e:	428e      	cmp	r6, r1
 8015c20:	d004      	beq.n	8015c2c <_free_r+0x160>
 8015c22:	684a      	ldr	r2, [r1, #4]
 8015c24:	f022 0203 	bic.w	r2, r2, #3
 8015c28:	4282      	cmp	r2, r0
 8015c2a:	d8f7      	bhi.n	8015c1c <_free_r+0x150>
 8015c2c:	68ce      	ldr	r6, [r1, #12]
 8015c2e:	e7da      	b.n	8015be6 <_free_r+0x11a>
 8015c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c34:	200005c8 	.word	0x200005c8
 8015c38:	200009d4 	.word	0x200009d4
 8015c3c:	20000c14 	.word	0x20000c14
 8015c40:	200005d0 	.word	0x200005d0

08015c44 <rshift>:
 8015c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c46:	6906      	ldr	r6, [r0, #16]
 8015c48:	114b      	asrs	r3, r1, #5
 8015c4a:	429e      	cmp	r6, r3
 8015c4c:	f100 0414 	add.w	r4, r0, #20
 8015c50:	dd30      	ble.n	8015cb4 <rshift+0x70>
 8015c52:	f011 011f 	ands.w	r1, r1, #31
 8015c56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015c5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015c5e:	d108      	bne.n	8015c72 <rshift+0x2e>
 8015c60:	4621      	mov	r1, r4
 8015c62:	42b2      	cmp	r2, r6
 8015c64:	460b      	mov	r3, r1
 8015c66:	d211      	bcs.n	8015c8c <rshift+0x48>
 8015c68:	f852 3b04 	ldr.w	r3, [r2], #4
 8015c6c:	f841 3b04 	str.w	r3, [r1], #4
 8015c70:	e7f7      	b.n	8015c62 <rshift+0x1e>
 8015c72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015c76:	f1c1 0c20 	rsb	ip, r1, #32
 8015c7a:	40cd      	lsrs	r5, r1
 8015c7c:	3204      	adds	r2, #4
 8015c7e:	4623      	mov	r3, r4
 8015c80:	42b2      	cmp	r2, r6
 8015c82:	4617      	mov	r7, r2
 8015c84:	d30c      	bcc.n	8015ca0 <rshift+0x5c>
 8015c86:	601d      	str	r5, [r3, #0]
 8015c88:	b105      	cbz	r5, 8015c8c <rshift+0x48>
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	1b1a      	subs	r2, r3, r4
 8015c8e:	42a3      	cmp	r3, r4
 8015c90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c94:	bf08      	it	eq
 8015c96:	2300      	moveq	r3, #0
 8015c98:	6102      	str	r2, [r0, #16]
 8015c9a:	bf08      	it	eq
 8015c9c:	6143      	streq	r3, [r0, #20]
 8015c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ca0:	683f      	ldr	r7, [r7, #0]
 8015ca2:	fa07 f70c 	lsl.w	r7, r7, ip
 8015ca6:	433d      	orrs	r5, r7
 8015ca8:	f843 5b04 	str.w	r5, [r3], #4
 8015cac:	f852 5b04 	ldr.w	r5, [r2], #4
 8015cb0:	40cd      	lsrs	r5, r1
 8015cb2:	e7e5      	b.n	8015c80 <rshift+0x3c>
 8015cb4:	4623      	mov	r3, r4
 8015cb6:	e7e9      	b.n	8015c8c <rshift+0x48>

08015cb8 <__hexdig_fun>:
 8015cb8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015cbc:	2b09      	cmp	r3, #9
 8015cbe:	d802      	bhi.n	8015cc6 <__hexdig_fun+0xe>
 8015cc0:	3820      	subs	r0, #32
 8015cc2:	b2c0      	uxtb	r0, r0
 8015cc4:	4770      	bx	lr
 8015cc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015cca:	2b05      	cmp	r3, #5
 8015ccc:	d801      	bhi.n	8015cd2 <__hexdig_fun+0x1a>
 8015cce:	3847      	subs	r0, #71	; 0x47
 8015cd0:	e7f7      	b.n	8015cc2 <__hexdig_fun+0xa>
 8015cd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015cd6:	2b05      	cmp	r3, #5
 8015cd8:	d801      	bhi.n	8015cde <__hexdig_fun+0x26>
 8015cda:	3827      	subs	r0, #39	; 0x27
 8015cdc:	e7f1      	b.n	8015cc2 <__hexdig_fun+0xa>
 8015cde:	2000      	movs	r0, #0
 8015ce0:	4770      	bx	lr

08015ce2 <__gethex>:
 8015ce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce6:	b08b      	sub	sp, #44	; 0x2c
 8015ce8:	468a      	mov	sl, r1
 8015cea:	9002      	str	r0, [sp, #8]
 8015cec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015cee:	9306      	str	r3, [sp, #24]
 8015cf0:	4690      	mov	r8, r2
 8015cf2:	f000 fad0 	bl	8016296 <__localeconv_l>
 8015cf6:	6803      	ldr	r3, [r0, #0]
 8015cf8:	9303      	str	r3, [sp, #12]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ea fa7a 	bl	80001f4 <strlen>
 8015d00:	9b03      	ldr	r3, [sp, #12]
 8015d02:	9001      	str	r0, [sp, #4]
 8015d04:	4403      	add	r3, r0
 8015d06:	f04f 0b00 	mov.w	fp, #0
 8015d0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d0e:	9307      	str	r3, [sp, #28]
 8015d10:	f8da 3000 	ldr.w	r3, [sl]
 8015d14:	3302      	adds	r3, #2
 8015d16:	461f      	mov	r7, r3
 8015d18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d1c:	2830      	cmp	r0, #48	; 0x30
 8015d1e:	d06c      	beq.n	8015dfa <__gethex+0x118>
 8015d20:	f7ff ffca 	bl	8015cb8 <__hexdig_fun>
 8015d24:	4604      	mov	r4, r0
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d16a      	bne.n	8015e00 <__gethex+0x11e>
 8015d2a:	9a01      	ldr	r2, [sp, #4]
 8015d2c:	9903      	ldr	r1, [sp, #12]
 8015d2e:	4638      	mov	r0, r7
 8015d30:	f000 fee0 	bl	8016af4 <strncmp>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d166      	bne.n	8015e06 <__gethex+0x124>
 8015d38:	9b01      	ldr	r3, [sp, #4]
 8015d3a:	5cf8      	ldrb	r0, [r7, r3]
 8015d3c:	18fe      	adds	r6, r7, r3
 8015d3e:	f7ff ffbb 	bl	8015cb8 <__hexdig_fun>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d062      	beq.n	8015e0c <__gethex+0x12a>
 8015d46:	4633      	mov	r3, r6
 8015d48:	7818      	ldrb	r0, [r3, #0]
 8015d4a:	2830      	cmp	r0, #48	; 0x30
 8015d4c:	461f      	mov	r7, r3
 8015d4e:	f103 0301 	add.w	r3, r3, #1
 8015d52:	d0f9      	beq.n	8015d48 <__gethex+0x66>
 8015d54:	f7ff ffb0 	bl	8015cb8 <__hexdig_fun>
 8015d58:	fab0 f580 	clz	r5, r0
 8015d5c:	096d      	lsrs	r5, r5, #5
 8015d5e:	4634      	mov	r4, r6
 8015d60:	f04f 0b01 	mov.w	fp, #1
 8015d64:	463a      	mov	r2, r7
 8015d66:	4616      	mov	r6, r2
 8015d68:	3201      	adds	r2, #1
 8015d6a:	7830      	ldrb	r0, [r6, #0]
 8015d6c:	f7ff ffa4 	bl	8015cb8 <__hexdig_fun>
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d1f8      	bne.n	8015d66 <__gethex+0x84>
 8015d74:	9a01      	ldr	r2, [sp, #4]
 8015d76:	9903      	ldr	r1, [sp, #12]
 8015d78:	4630      	mov	r0, r6
 8015d7a:	f000 febb 	bl	8016af4 <strncmp>
 8015d7e:	b950      	cbnz	r0, 8015d96 <__gethex+0xb4>
 8015d80:	b954      	cbnz	r4, 8015d98 <__gethex+0xb6>
 8015d82:	9b01      	ldr	r3, [sp, #4]
 8015d84:	18f4      	adds	r4, r6, r3
 8015d86:	4622      	mov	r2, r4
 8015d88:	4616      	mov	r6, r2
 8015d8a:	3201      	adds	r2, #1
 8015d8c:	7830      	ldrb	r0, [r6, #0]
 8015d8e:	f7ff ff93 	bl	8015cb8 <__hexdig_fun>
 8015d92:	2800      	cmp	r0, #0
 8015d94:	d1f8      	bne.n	8015d88 <__gethex+0xa6>
 8015d96:	b10c      	cbz	r4, 8015d9c <__gethex+0xba>
 8015d98:	1ba4      	subs	r4, r4, r6
 8015d9a:	00a4      	lsls	r4, r4, #2
 8015d9c:	7833      	ldrb	r3, [r6, #0]
 8015d9e:	2b50      	cmp	r3, #80	; 0x50
 8015da0:	d001      	beq.n	8015da6 <__gethex+0xc4>
 8015da2:	2b70      	cmp	r3, #112	; 0x70
 8015da4:	d140      	bne.n	8015e28 <__gethex+0x146>
 8015da6:	7873      	ldrb	r3, [r6, #1]
 8015da8:	2b2b      	cmp	r3, #43	; 0x2b
 8015daa:	d031      	beq.n	8015e10 <__gethex+0x12e>
 8015dac:	2b2d      	cmp	r3, #45	; 0x2d
 8015dae:	d033      	beq.n	8015e18 <__gethex+0x136>
 8015db0:	1c71      	adds	r1, r6, #1
 8015db2:	f04f 0900 	mov.w	r9, #0
 8015db6:	7808      	ldrb	r0, [r1, #0]
 8015db8:	f7ff ff7e 	bl	8015cb8 <__hexdig_fun>
 8015dbc:	1e43      	subs	r3, r0, #1
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	2b18      	cmp	r3, #24
 8015dc2:	d831      	bhi.n	8015e28 <__gethex+0x146>
 8015dc4:	f1a0 0210 	sub.w	r2, r0, #16
 8015dc8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015dcc:	f7ff ff74 	bl	8015cb8 <__hexdig_fun>
 8015dd0:	1e43      	subs	r3, r0, #1
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b18      	cmp	r3, #24
 8015dd6:	d922      	bls.n	8015e1e <__gethex+0x13c>
 8015dd8:	f1b9 0f00 	cmp.w	r9, #0
 8015ddc:	d000      	beq.n	8015de0 <__gethex+0xfe>
 8015dde:	4252      	negs	r2, r2
 8015de0:	4414      	add	r4, r2
 8015de2:	f8ca 1000 	str.w	r1, [sl]
 8015de6:	b30d      	cbz	r5, 8015e2c <__gethex+0x14a>
 8015de8:	f1bb 0f00 	cmp.w	fp, #0
 8015dec:	bf0c      	ite	eq
 8015dee:	2706      	moveq	r7, #6
 8015df0:	2700      	movne	r7, #0
 8015df2:	4638      	mov	r0, r7
 8015df4:	b00b      	add	sp, #44	; 0x2c
 8015df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfa:	f10b 0b01 	add.w	fp, fp, #1
 8015dfe:	e78a      	b.n	8015d16 <__gethex+0x34>
 8015e00:	2500      	movs	r5, #0
 8015e02:	462c      	mov	r4, r5
 8015e04:	e7ae      	b.n	8015d64 <__gethex+0x82>
 8015e06:	463e      	mov	r6, r7
 8015e08:	2501      	movs	r5, #1
 8015e0a:	e7c7      	b.n	8015d9c <__gethex+0xba>
 8015e0c:	4604      	mov	r4, r0
 8015e0e:	e7fb      	b.n	8015e08 <__gethex+0x126>
 8015e10:	f04f 0900 	mov.w	r9, #0
 8015e14:	1cb1      	adds	r1, r6, #2
 8015e16:	e7ce      	b.n	8015db6 <__gethex+0xd4>
 8015e18:	f04f 0901 	mov.w	r9, #1
 8015e1c:	e7fa      	b.n	8015e14 <__gethex+0x132>
 8015e1e:	230a      	movs	r3, #10
 8015e20:	fb03 0202 	mla	r2, r3, r2, r0
 8015e24:	3a10      	subs	r2, #16
 8015e26:	e7cf      	b.n	8015dc8 <__gethex+0xe6>
 8015e28:	4631      	mov	r1, r6
 8015e2a:	e7da      	b.n	8015de2 <__gethex+0x100>
 8015e2c:	1bf3      	subs	r3, r6, r7
 8015e2e:	3b01      	subs	r3, #1
 8015e30:	4629      	mov	r1, r5
 8015e32:	2b07      	cmp	r3, #7
 8015e34:	dc49      	bgt.n	8015eca <__gethex+0x1e8>
 8015e36:	9802      	ldr	r0, [sp, #8]
 8015e38:	f000 fa52 	bl	80162e0 <_Balloc>
 8015e3c:	9b01      	ldr	r3, [sp, #4]
 8015e3e:	f100 0914 	add.w	r9, r0, #20
 8015e42:	f04f 0b00 	mov.w	fp, #0
 8015e46:	f1c3 0301 	rsb	r3, r3, #1
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8015e50:	46da      	mov	sl, fp
 8015e52:	9308      	str	r3, [sp, #32]
 8015e54:	42b7      	cmp	r7, r6
 8015e56:	d33b      	bcc.n	8015ed0 <__gethex+0x1ee>
 8015e58:	9804      	ldr	r0, [sp, #16]
 8015e5a:	f840 ab04 	str.w	sl, [r0], #4
 8015e5e:	eba0 0009 	sub.w	r0, r0, r9
 8015e62:	1080      	asrs	r0, r0, #2
 8015e64:	6128      	str	r0, [r5, #16]
 8015e66:	0147      	lsls	r7, r0, #5
 8015e68:	4650      	mov	r0, sl
 8015e6a:	f000 fae0 	bl	801642e <__hi0bits>
 8015e6e:	f8d8 6000 	ldr.w	r6, [r8]
 8015e72:	1a3f      	subs	r7, r7, r0
 8015e74:	42b7      	cmp	r7, r6
 8015e76:	dd64      	ble.n	8015f42 <__gethex+0x260>
 8015e78:	1bbf      	subs	r7, r7, r6
 8015e7a:	4639      	mov	r1, r7
 8015e7c:	4628      	mov	r0, r5
 8015e7e:	f000 fde1 	bl	8016a44 <__any_on>
 8015e82:	4682      	mov	sl, r0
 8015e84:	b178      	cbz	r0, 8015ea6 <__gethex+0x1c4>
 8015e86:	1e7b      	subs	r3, r7, #1
 8015e88:	1159      	asrs	r1, r3, #5
 8015e8a:	f003 021f 	and.w	r2, r3, #31
 8015e8e:	f04f 0a01 	mov.w	sl, #1
 8015e92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015e96:	fa0a f202 	lsl.w	r2, sl, r2
 8015e9a:	420a      	tst	r2, r1
 8015e9c:	d003      	beq.n	8015ea6 <__gethex+0x1c4>
 8015e9e:	4553      	cmp	r3, sl
 8015ea0:	dc46      	bgt.n	8015f30 <__gethex+0x24e>
 8015ea2:	f04f 0a02 	mov.w	sl, #2
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	f7ff fecb 	bl	8015c44 <rshift>
 8015eae:	443c      	add	r4, r7
 8015eb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015eb4:	42a3      	cmp	r3, r4
 8015eb6:	da52      	bge.n	8015f5e <__gethex+0x27c>
 8015eb8:	4629      	mov	r1, r5
 8015eba:	9802      	ldr	r0, [sp, #8]
 8015ebc:	f000 fa35 	bl	801632a <_Bfree>
 8015ec0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	6013      	str	r3, [r2, #0]
 8015ec6:	27a3      	movs	r7, #163	; 0xa3
 8015ec8:	e793      	b.n	8015df2 <__gethex+0x110>
 8015eca:	3101      	adds	r1, #1
 8015ecc:	105b      	asrs	r3, r3, #1
 8015ece:	e7b0      	b.n	8015e32 <__gethex+0x150>
 8015ed0:	1e73      	subs	r3, r6, #1
 8015ed2:	9305      	str	r3, [sp, #20]
 8015ed4:	9a07      	ldr	r2, [sp, #28]
 8015ed6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d018      	beq.n	8015f10 <__gethex+0x22e>
 8015ede:	f1bb 0f20 	cmp.w	fp, #32
 8015ee2:	d107      	bne.n	8015ef4 <__gethex+0x212>
 8015ee4:	9b04      	ldr	r3, [sp, #16]
 8015ee6:	f8c3 a000 	str.w	sl, [r3]
 8015eea:	3304      	adds	r3, #4
 8015eec:	f04f 0a00 	mov.w	sl, #0
 8015ef0:	9304      	str	r3, [sp, #16]
 8015ef2:	46d3      	mov	fp, sl
 8015ef4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015ef8:	f7ff fede 	bl	8015cb8 <__hexdig_fun>
 8015efc:	f000 000f 	and.w	r0, r0, #15
 8015f00:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f04:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f08:	f10b 0b04 	add.w	fp, fp, #4
 8015f0c:	9b05      	ldr	r3, [sp, #20]
 8015f0e:	e00d      	b.n	8015f2c <__gethex+0x24a>
 8015f10:	9b05      	ldr	r3, [sp, #20]
 8015f12:	9a08      	ldr	r2, [sp, #32]
 8015f14:	4413      	add	r3, r2
 8015f16:	42bb      	cmp	r3, r7
 8015f18:	d3e1      	bcc.n	8015ede <__gethex+0x1fc>
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	9a01      	ldr	r2, [sp, #4]
 8015f1e:	9903      	ldr	r1, [sp, #12]
 8015f20:	9309      	str	r3, [sp, #36]	; 0x24
 8015f22:	f000 fde7 	bl	8016af4 <strncmp>
 8015f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f28:	2800      	cmp	r0, #0
 8015f2a:	d1d8      	bne.n	8015ede <__gethex+0x1fc>
 8015f2c:	461e      	mov	r6, r3
 8015f2e:	e791      	b.n	8015e54 <__gethex+0x172>
 8015f30:	1eb9      	subs	r1, r7, #2
 8015f32:	4628      	mov	r0, r5
 8015f34:	f000 fd86 	bl	8016a44 <__any_on>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	d0b2      	beq.n	8015ea2 <__gethex+0x1c0>
 8015f3c:	f04f 0a03 	mov.w	sl, #3
 8015f40:	e7b1      	b.n	8015ea6 <__gethex+0x1c4>
 8015f42:	da09      	bge.n	8015f58 <__gethex+0x276>
 8015f44:	1bf7      	subs	r7, r6, r7
 8015f46:	4629      	mov	r1, r5
 8015f48:	463a      	mov	r2, r7
 8015f4a:	9802      	ldr	r0, [sp, #8]
 8015f4c:	f000 fb9c 	bl	8016688 <__lshift>
 8015f50:	1be4      	subs	r4, r4, r7
 8015f52:	4605      	mov	r5, r0
 8015f54:	f100 0914 	add.w	r9, r0, #20
 8015f58:	f04f 0a00 	mov.w	sl, #0
 8015f5c:	e7a8      	b.n	8015eb0 <__gethex+0x1ce>
 8015f5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015f62:	42a0      	cmp	r0, r4
 8015f64:	dd6a      	ble.n	801603c <__gethex+0x35a>
 8015f66:	1b04      	subs	r4, r0, r4
 8015f68:	42a6      	cmp	r6, r4
 8015f6a:	dc2e      	bgt.n	8015fca <__gethex+0x2e8>
 8015f6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d022      	beq.n	8015fba <__gethex+0x2d8>
 8015f74:	2b03      	cmp	r3, #3
 8015f76:	d024      	beq.n	8015fc2 <__gethex+0x2e0>
 8015f78:	2b01      	cmp	r3, #1
 8015f7a:	d115      	bne.n	8015fa8 <__gethex+0x2c6>
 8015f7c:	42a6      	cmp	r6, r4
 8015f7e:	d113      	bne.n	8015fa8 <__gethex+0x2c6>
 8015f80:	2e01      	cmp	r6, #1
 8015f82:	dc0b      	bgt.n	8015f9c <__gethex+0x2ba>
 8015f84:	9a06      	ldr	r2, [sp, #24]
 8015f86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f8a:	6013      	str	r3, [r2, #0]
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	612b      	str	r3, [r5, #16]
 8015f90:	f8c9 3000 	str.w	r3, [r9]
 8015f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f96:	2762      	movs	r7, #98	; 0x62
 8015f98:	601d      	str	r5, [r3, #0]
 8015f9a:	e72a      	b.n	8015df2 <__gethex+0x110>
 8015f9c:	1e71      	subs	r1, r6, #1
 8015f9e:	4628      	mov	r0, r5
 8015fa0:	f000 fd50 	bl	8016a44 <__any_on>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1ed      	bne.n	8015f84 <__gethex+0x2a2>
 8015fa8:	4629      	mov	r1, r5
 8015faa:	9802      	ldr	r0, [sp, #8]
 8015fac:	f000 f9bd 	bl	801632a <_Bfree>
 8015fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	6013      	str	r3, [r2, #0]
 8015fb6:	2750      	movs	r7, #80	; 0x50
 8015fb8:	e71b      	b.n	8015df2 <__gethex+0x110>
 8015fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d0e1      	beq.n	8015f84 <__gethex+0x2a2>
 8015fc0:	e7f2      	b.n	8015fa8 <__gethex+0x2c6>
 8015fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d1dd      	bne.n	8015f84 <__gethex+0x2a2>
 8015fc8:	e7ee      	b.n	8015fa8 <__gethex+0x2c6>
 8015fca:	1e67      	subs	r7, r4, #1
 8015fcc:	f1ba 0f00 	cmp.w	sl, #0
 8015fd0:	d131      	bne.n	8016036 <__gethex+0x354>
 8015fd2:	b127      	cbz	r7, 8015fde <__gethex+0x2fc>
 8015fd4:	4639      	mov	r1, r7
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f000 fd34 	bl	8016a44 <__any_on>
 8015fdc:	4682      	mov	sl, r0
 8015fde:	117a      	asrs	r2, r7, #5
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	f007 071f 	and.w	r7, r7, #31
 8015fe6:	fa03 f707 	lsl.w	r7, r3, r7
 8015fea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015fee:	4621      	mov	r1, r4
 8015ff0:	421f      	tst	r7, r3
 8015ff2:	4628      	mov	r0, r5
 8015ff4:	bf18      	it	ne
 8015ff6:	f04a 0a02 	orrne.w	sl, sl, #2
 8015ffa:	1b36      	subs	r6, r6, r4
 8015ffc:	f7ff fe22 	bl	8015c44 <rshift>
 8016000:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016004:	2702      	movs	r7, #2
 8016006:	f1ba 0f00 	cmp.w	sl, #0
 801600a:	d048      	beq.n	801609e <__gethex+0x3bc>
 801600c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016010:	2b02      	cmp	r3, #2
 8016012:	d015      	beq.n	8016040 <__gethex+0x35e>
 8016014:	2b03      	cmp	r3, #3
 8016016:	d017      	beq.n	8016048 <__gethex+0x366>
 8016018:	2b01      	cmp	r3, #1
 801601a:	d109      	bne.n	8016030 <__gethex+0x34e>
 801601c:	f01a 0f02 	tst.w	sl, #2
 8016020:	d006      	beq.n	8016030 <__gethex+0x34e>
 8016022:	f8d9 3000 	ldr.w	r3, [r9]
 8016026:	ea4a 0a03 	orr.w	sl, sl, r3
 801602a:	f01a 0f01 	tst.w	sl, #1
 801602e:	d10e      	bne.n	801604e <__gethex+0x36c>
 8016030:	f047 0710 	orr.w	r7, r7, #16
 8016034:	e033      	b.n	801609e <__gethex+0x3bc>
 8016036:	f04f 0a01 	mov.w	sl, #1
 801603a:	e7d0      	b.n	8015fde <__gethex+0x2fc>
 801603c:	2701      	movs	r7, #1
 801603e:	e7e2      	b.n	8016006 <__gethex+0x324>
 8016040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016042:	f1c3 0301 	rsb	r3, r3, #1
 8016046:	9315      	str	r3, [sp, #84]	; 0x54
 8016048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801604a:	2b00      	cmp	r3, #0
 801604c:	d0f0      	beq.n	8016030 <__gethex+0x34e>
 801604e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016052:	f105 0314 	add.w	r3, r5, #20
 8016056:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801605a:	eb03 010a 	add.w	r1, r3, sl
 801605e:	f04f 0c00 	mov.w	ip, #0
 8016062:	4618      	mov	r0, r3
 8016064:	f853 2b04 	ldr.w	r2, [r3], #4
 8016068:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801606c:	d01c      	beq.n	80160a8 <__gethex+0x3c6>
 801606e:	3201      	adds	r2, #1
 8016070:	6002      	str	r2, [r0, #0]
 8016072:	2f02      	cmp	r7, #2
 8016074:	f105 0314 	add.w	r3, r5, #20
 8016078:	d138      	bne.n	80160ec <__gethex+0x40a>
 801607a:	f8d8 2000 	ldr.w	r2, [r8]
 801607e:	3a01      	subs	r2, #1
 8016080:	42b2      	cmp	r2, r6
 8016082:	d10a      	bne.n	801609a <__gethex+0x3b8>
 8016084:	1171      	asrs	r1, r6, #5
 8016086:	2201      	movs	r2, #1
 8016088:	f006 061f 	and.w	r6, r6, #31
 801608c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016090:	fa02 f606 	lsl.w	r6, r2, r6
 8016094:	421e      	tst	r6, r3
 8016096:	bf18      	it	ne
 8016098:	4617      	movne	r7, r2
 801609a:	f047 0720 	orr.w	r7, r7, #32
 801609e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160a0:	601d      	str	r5, [r3, #0]
 80160a2:	9b06      	ldr	r3, [sp, #24]
 80160a4:	601c      	str	r4, [r3, #0]
 80160a6:	e6a4      	b.n	8015df2 <__gethex+0x110>
 80160a8:	4299      	cmp	r1, r3
 80160aa:	f843 cc04 	str.w	ip, [r3, #-4]
 80160ae:	d8d8      	bhi.n	8016062 <__gethex+0x380>
 80160b0:	68ab      	ldr	r3, [r5, #8]
 80160b2:	4599      	cmp	r9, r3
 80160b4:	db12      	blt.n	80160dc <__gethex+0x3fa>
 80160b6:	6869      	ldr	r1, [r5, #4]
 80160b8:	9802      	ldr	r0, [sp, #8]
 80160ba:	3101      	adds	r1, #1
 80160bc:	f000 f910 	bl	80162e0 <_Balloc>
 80160c0:	692a      	ldr	r2, [r5, #16]
 80160c2:	3202      	adds	r2, #2
 80160c4:	f105 010c 	add.w	r1, r5, #12
 80160c8:	4683      	mov	fp, r0
 80160ca:	0092      	lsls	r2, r2, #2
 80160cc:	300c      	adds	r0, #12
 80160ce:	f7fc fd0f 	bl	8012af0 <memcpy>
 80160d2:	4629      	mov	r1, r5
 80160d4:	9802      	ldr	r0, [sp, #8]
 80160d6:	f000 f928 	bl	801632a <_Bfree>
 80160da:	465d      	mov	r5, fp
 80160dc:	692b      	ldr	r3, [r5, #16]
 80160de:	1c5a      	adds	r2, r3, #1
 80160e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80160e4:	612a      	str	r2, [r5, #16]
 80160e6:	2201      	movs	r2, #1
 80160e8:	615a      	str	r2, [r3, #20]
 80160ea:	e7c2      	b.n	8016072 <__gethex+0x390>
 80160ec:	692a      	ldr	r2, [r5, #16]
 80160ee:	454a      	cmp	r2, r9
 80160f0:	dd0b      	ble.n	801610a <__gethex+0x428>
 80160f2:	2101      	movs	r1, #1
 80160f4:	4628      	mov	r0, r5
 80160f6:	f7ff fda5 	bl	8015c44 <rshift>
 80160fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80160fe:	3401      	adds	r4, #1
 8016100:	42a3      	cmp	r3, r4
 8016102:	f6ff aed9 	blt.w	8015eb8 <__gethex+0x1d6>
 8016106:	2701      	movs	r7, #1
 8016108:	e7c7      	b.n	801609a <__gethex+0x3b8>
 801610a:	f016 061f 	ands.w	r6, r6, #31
 801610e:	d0fa      	beq.n	8016106 <__gethex+0x424>
 8016110:	449a      	add	sl, r3
 8016112:	f1c6 0620 	rsb	r6, r6, #32
 8016116:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801611a:	f000 f988 	bl	801642e <__hi0bits>
 801611e:	42b0      	cmp	r0, r6
 8016120:	dbe7      	blt.n	80160f2 <__gethex+0x410>
 8016122:	e7f0      	b.n	8016106 <__gethex+0x424>

08016124 <L_shift>:
 8016124:	f1c2 0208 	rsb	r2, r2, #8
 8016128:	0092      	lsls	r2, r2, #2
 801612a:	b570      	push	{r4, r5, r6, lr}
 801612c:	f1c2 0620 	rsb	r6, r2, #32
 8016130:	6843      	ldr	r3, [r0, #4]
 8016132:	6804      	ldr	r4, [r0, #0]
 8016134:	fa03 f506 	lsl.w	r5, r3, r6
 8016138:	432c      	orrs	r4, r5
 801613a:	40d3      	lsrs	r3, r2
 801613c:	6004      	str	r4, [r0, #0]
 801613e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016142:	4288      	cmp	r0, r1
 8016144:	d3f4      	bcc.n	8016130 <L_shift+0xc>
 8016146:	bd70      	pop	{r4, r5, r6, pc}

08016148 <__match>:
 8016148:	b530      	push	{r4, r5, lr}
 801614a:	6803      	ldr	r3, [r0, #0]
 801614c:	3301      	adds	r3, #1
 801614e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016152:	b914      	cbnz	r4, 801615a <__match+0x12>
 8016154:	6003      	str	r3, [r0, #0]
 8016156:	2001      	movs	r0, #1
 8016158:	bd30      	pop	{r4, r5, pc}
 801615a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801615e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016162:	2d19      	cmp	r5, #25
 8016164:	bf98      	it	ls
 8016166:	3220      	addls	r2, #32
 8016168:	42a2      	cmp	r2, r4
 801616a:	d0f0      	beq.n	801614e <__match+0x6>
 801616c:	2000      	movs	r0, #0
 801616e:	e7f3      	b.n	8016158 <__match+0x10>

08016170 <__hexnan>:
 8016170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016174:	680b      	ldr	r3, [r1, #0]
 8016176:	6801      	ldr	r1, [r0, #0]
 8016178:	115f      	asrs	r7, r3, #5
 801617a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801617e:	f013 031f 	ands.w	r3, r3, #31
 8016182:	b087      	sub	sp, #28
 8016184:	bf18      	it	ne
 8016186:	3704      	addne	r7, #4
 8016188:	2500      	movs	r5, #0
 801618a:	1f3e      	subs	r6, r7, #4
 801618c:	4682      	mov	sl, r0
 801618e:	4690      	mov	r8, r2
 8016190:	9301      	str	r3, [sp, #4]
 8016192:	f847 5c04 	str.w	r5, [r7, #-4]
 8016196:	46b1      	mov	r9, r6
 8016198:	4634      	mov	r4, r6
 801619a:	9502      	str	r5, [sp, #8]
 801619c:	46ab      	mov	fp, r5
 801619e:	784a      	ldrb	r2, [r1, #1]
 80161a0:	1c4b      	adds	r3, r1, #1
 80161a2:	9303      	str	r3, [sp, #12]
 80161a4:	b342      	cbz	r2, 80161f8 <__hexnan+0x88>
 80161a6:	4610      	mov	r0, r2
 80161a8:	9105      	str	r1, [sp, #20]
 80161aa:	9204      	str	r2, [sp, #16]
 80161ac:	f7ff fd84 	bl	8015cb8 <__hexdig_fun>
 80161b0:	2800      	cmp	r0, #0
 80161b2:	d143      	bne.n	801623c <__hexnan+0xcc>
 80161b4:	9a04      	ldr	r2, [sp, #16]
 80161b6:	9905      	ldr	r1, [sp, #20]
 80161b8:	2a20      	cmp	r2, #32
 80161ba:	d818      	bhi.n	80161ee <__hexnan+0x7e>
 80161bc:	9b02      	ldr	r3, [sp, #8]
 80161be:	459b      	cmp	fp, r3
 80161c0:	dd13      	ble.n	80161ea <__hexnan+0x7a>
 80161c2:	454c      	cmp	r4, r9
 80161c4:	d206      	bcs.n	80161d4 <__hexnan+0x64>
 80161c6:	2d07      	cmp	r5, #7
 80161c8:	dc04      	bgt.n	80161d4 <__hexnan+0x64>
 80161ca:	462a      	mov	r2, r5
 80161cc:	4649      	mov	r1, r9
 80161ce:	4620      	mov	r0, r4
 80161d0:	f7ff ffa8 	bl	8016124 <L_shift>
 80161d4:	4544      	cmp	r4, r8
 80161d6:	d944      	bls.n	8016262 <__hexnan+0xf2>
 80161d8:	2300      	movs	r3, #0
 80161da:	f1a4 0904 	sub.w	r9, r4, #4
 80161de:	f844 3c04 	str.w	r3, [r4, #-4]
 80161e2:	f8cd b008 	str.w	fp, [sp, #8]
 80161e6:	464c      	mov	r4, r9
 80161e8:	461d      	mov	r5, r3
 80161ea:	9903      	ldr	r1, [sp, #12]
 80161ec:	e7d7      	b.n	801619e <__hexnan+0x2e>
 80161ee:	2a29      	cmp	r2, #41	; 0x29
 80161f0:	d14a      	bne.n	8016288 <__hexnan+0x118>
 80161f2:	3102      	adds	r1, #2
 80161f4:	f8ca 1000 	str.w	r1, [sl]
 80161f8:	f1bb 0f00 	cmp.w	fp, #0
 80161fc:	d044      	beq.n	8016288 <__hexnan+0x118>
 80161fe:	454c      	cmp	r4, r9
 8016200:	d206      	bcs.n	8016210 <__hexnan+0xa0>
 8016202:	2d07      	cmp	r5, #7
 8016204:	dc04      	bgt.n	8016210 <__hexnan+0xa0>
 8016206:	462a      	mov	r2, r5
 8016208:	4649      	mov	r1, r9
 801620a:	4620      	mov	r0, r4
 801620c:	f7ff ff8a 	bl	8016124 <L_shift>
 8016210:	4544      	cmp	r4, r8
 8016212:	d928      	bls.n	8016266 <__hexnan+0xf6>
 8016214:	4643      	mov	r3, r8
 8016216:	f854 2b04 	ldr.w	r2, [r4], #4
 801621a:	f843 2b04 	str.w	r2, [r3], #4
 801621e:	42a6      	cmp	r6, r4
 8016220:	d2f9      	bcs.n	8016216 <__hexnan+0xa6>
 8016222:	2200      	movs	r2, #0
 8016224:	f843 2b04 	str.w	r2, [r3], #4
 8016228:	429e      	cmp	r6, r3
 801622a:	d2fb      	bcs.n	8016224 <__hexnan+0xb4>
 801622c:	6833      	ldr	r3, [r6, #0]
 801622e:	b91b      	cbnz	r3, 8016238 <__hexnan+0xc8>
 8016230:	4546      	cmp	r6, r8
 8016232:	d127      	bne.n	8016284 <__hexnan+0x114>
 8016234:	2301      	movs	r3, #1
 8016236:	6033      	str	r3, [r6, #0]
 8016238:	2005      	movs	r0, #5
 801623a:	e026      	b.n	801628a <__hexnan+0x11a>
 801623c:	3501      	adds	r5, #1
 801623e:	2d08      	cmp	r5, #8
 8016240:	f10b 0b01 	add.w	fp, fp, #1
 8016244:	dd06      	ble.n	8016254 <__hexnan+0xe4>
 8016246:	4544      	cmp	r4, r8
 8016248:	d9cf      	bls.n	80161ea <__hexnan+0x7a>
 801624a:	2300      	movs	r3, #0
 801624c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016250:	2501      	movs	r5, #1
 8016252:	3c04      	subs	r4, #4
 8016254:	6822      	ldr	r2, [r4, #0]
 8016256:	f000 000f 	and.w	r0, r0, #15
 801625a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801625e:	6020      	str	r0, [r4, #0]
 8016260:	e7c3      	b.n	80161ea <__hexnan+0x7a>
 8016262:	2508      	movs	r5, #8
 8016264:	e7c1      	b.n	80161ea <__hexnan+0x7a>
 8016266:	9b01      	ldr	r3, [sp, #4]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d0df      	beq.n	801622c <__hexnan+0xbc>
 801626c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016270:	f1c3 0320 	rsb	r3, r3, #32
 8016274:	fa22 f303 	lsr.w	r3, r2, r3
 8016278:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801627c:	401a      	ands	r2, r3
 801627e:	f847 2c04 	str.w	r2, [r7, #-4]
 8016282:	e7d3      	b.n	801622c <__hexnan+0xbc>
 8016284:	3e04      	subs	r6, #4
 8016286:	e7d1      	b.n	801622c <__hexnan+0xbc>
 8016288:	2004      	movs	r0, #4
 801628a:	b007      	add	sp, #28
 801628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016290 <__locale_ctype_ptr_l>:
 8016290:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016294:	4770      	bx	lr

08016296 <__localeconv_l>:
 8016296:	30f0      	adds	r0, #240	; 0xf0
 8016298:	4770      	bx	lr
	...

0801629c <_localeconv_r>:
 801629c:	4b04      	ldr	r3, [pc, #16]	; (80162b0 <_localeconv_r+0x14>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80162a2:	4b04      	ldr	r3, [pc, #16]	; (80162b4 <_localeconv_r+0x18>)
 80162a4:	2800      	cmp	r0, #0
 80162a6:	bf08      	it	eq
 80162a8:	4618      	moveq	r0, r3
 80162aa:	30f0      	adds	r0, #240	; 0xf0
 80162ac:	4770      	bx	lr
 80162ae:	bf00      	nop
 80162b0:	2000019c 	.word	0x2000019c
 80162b4:	200009dc 	.word	0x200009dc

080162b8 <__retarget_lock_acquire_recursive>:
 80162b8:	4770      	bx	lr

080162ba <__retarget_lock_release_recursive>:
 80162ba:	4770      	bx	lr

080162bc <__ascii_mbtowc>:
 80162bc:	b082      	sub	sp, #8
 80162be:	b901      	cbnz	r1, 80162c2 <__ascii_mbtowc+0x6>
 80162c0:	a901      	add	r1, sp, #4
 80162c2:	b142      	cbz	r2, 80162d6 <__ascii_mbtowc+0x1a>
 80162c4:	b14b      	cbz	r3, 80162da <__ascii_mbtowc+0x1e>
 80162c6:	7813      	ldrb	r3, [r2, #0]
 80162c8:	600b      	str	r3, [r1, #0]
 80162ca:	7812      	ldrb	r2, [r2, #0]
 80162cc:	1c10      	adds	r0, r2, #0
 80162ce:	bf18      	it	ne
 80162d0:	2001      	movne	r0, #1
 80162d2:	b002      	add	sp, #8
 80162d4:	4770      	bx	lr
 80162d6:	4610      	mov	r0, r2
 80162d8:	e7fb      	b.n	80162d2 <__ascii_mbtowc+0x16>
 80162da:	f06f 0001 	mvn.w	r0, #1
 80162de:	e7f8      	b.n	80162d2 <__ascii_mbtowc+0x16>

080162e0 <_Balloc>:
 80162e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80162e2:	b570      	push	{r4, r5, r6, lr}
 80162e4:	4605      	mov	r5, r0
 80162e6:	460c      	mov	r4, r1
 80162e8:	b17b      	cbz	r3, 801630a <_Balloc+0x2a>
 80162ea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80162ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80162f0:	b9a0      	cbnz	r0, 801631c <_Balloc+0x3c>
 80162f2:	2101      	movs	r1, #1
 80162f4:	fa01 f604 	lsl.w	r6, r1, r4
 80162f8:	1d72      	adds	r2, r6, #5
 80162fa:	0092      	lsls	r2, r2, #2
 80162fc:	4628      	mov	r0, r5
 80162fe:	f000 fcfb 	bl	8016cf8 <_calloc_r>
 8016302:	b148      	cbz	r0, 8016318 <_Balloc+0x38>
 8016304:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8016308:	e00b      	b.n	8016322 <_Balloc+0x42>
 801630a:	2221      	movs	r2, #33	; 0x21
 801630c:	2104      	movs	r1, #4
 801630e:	f000 fcf3 	bl	8016cf8 <_calloc_r>
 8016312:	64e8      	str	r0, [r5, #76]	; 0x4c
 8016314:	2800      	cmp	r0, #0
 8016316:	d1e8      	bne.n	80162ea <_Balloc+0xa>
 8016318:	2000      	movs	r0, #0
 801631a:	bd70      	pop	{r4, r5, r6, pc}
 801631c:	6802      	ldr	r2, [r0, #0]
 801631e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8016322:	2300      	movs	r3, #0
 8016324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016328:	e7f7      	b.n	801631a <_Balloc+0x3a>

0801632a <_Bfree>:
 801632a:	b131      	cbz	r1, 801633a <_Bfree+0x10>
 801632c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801632e:	684a      	ldr	r2, [r1, #4]
 8016330:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016334:	6008      	str	r0, [r1, #0]
 8016336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801633a:	4770      	bx	lr

0801633c <__multadd>:
 801633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016340:	690d      	ldr	r5, [r1, #16]
 8016342:	461f      	mov	r7, r3
 8016344:	4606      	mov	r6, r0
 8016346:	460c      	mov	r4, r1
 8016348:	f101 0c14 	add.w	ip, r1, #20
 801634c:	2300      	movs	r3, #0
 801634e:	f8dc 0000 	ldr.w	r0, [ip]
 8016352:	b281      	uxth	r1, r0
 8016354:	fb02 7101 	mla	r1, r2, r1, r7
 8016358:	0c0f      	lsrs	r7, r1, #16
 801635a:	0c00      	lsrs	r0, r0, #16
 801635c:	fb02 7000 	mla	r0, r2, r0, r7
 8016360:	b289      	uxth	r1, r1
 8016362:	3301      	adds	r3, #1
 8016364:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016368:	429d      	cmp	r5, r3
 801636a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801636e:	f84c 1b04 	str.w	r1, [ip], #4
 8016372:	dcec      	bgt.n	801634e <__multadd+0x12>
 8016374:	b1d7      	cbz	r7, 80163ac <__multadd+0x70>
 8016376:	68a3      	ldr	r3, [r4, #8]
 8016378:	42ab      	cmp	r3, r5
 801637a:	dc12      	bgt.n	80163a2 <__multadd+0x66>
 801637c:	6861      	ldr	r1, [r4, #4]
 801637e:	4630      	mov	r0, r6
 8016380:	3101      	adds	r1, #1
 8016382:	f7ff ffad 	bl	80162e0 <_Balloc>
 8016386:	6922      	ldr	r2, [r4, #16]
 8016388:	3202      	adds	r2, #2
 801638a:	f104 010c 	add.w	r1, r4, #12
 801638e:	4680      	mov	r8, r0
 8016390:	0092      	lsls	r2, r2, #2
 8016392:	300c      	adds	r0, #12
 8016394:	f7fc fbac 	bl	8012af0 <memcpy>
 8016398:	4621      	mov	r1, r4
 801639a:	4630      	mov	r0, r6
 801639c:	f7ff ffc5 	bl	801632a <_Bfree>
 80163a0:	4644      	mov	r4, r8
 80163a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80163a6:	3501      	adds	r5, #1
 80163a8:	615f      	str	r7, [r3, #20]
 80163aa:	6125      	str	r5, [r4, #16]
 80163ac:	4620      	mov	r0, r4
 80163ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163b2 <__s2b>:
 80163b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163b6:	460c      	mov	r4, r1
 80163b8:	4615      	mov	r5, r2
 80163ba:	461f      	mov	r7, r3
 80163bc:	2209      	movs	r2, #9
 80163be:	3308      	adds	r3, #8
 80163c0:	4606      	mov	r6, r0
 80163c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80163c6:	2100      	movs	r1, #0
 80163c8:	2201      	movs	r2, #1
 80163ca:	429a      	cmp	r2, r3
 80163cc:	db20      	blt.n	8016410 <__s2b+0x5e>
 80163ce:	4630      	mov	r0, r6
 80163d0:	f7ff ff86 	bl	80162e0 <_Balloc>
 80163d4:	9b08      	ldr	r3, [sp, #32]
 80163d6:	6143      	str	r3, [r0, #20]
 80163d8:	2d09      	cmp	r5, #9
 80163da:	f04f 0301 	mov.w	r3, #1
 80163de:	6103      	str	r3, [r0, #16]
 80163e0:	dd19      	ble.n	8016416 <__s2b+0x64>
 80163e2:	f104 0809 	add.w	r8, r4, #9
 80163e6:	46c1      	mov	r9, r8
 80163e8:	442c      	add	r4, r5
 80163ea:	f819 3b01 	ldrb.w	r3, [r9], #1
 80163ee:	4601      	mov	r1, r0
 80163f0:	3b30      	subs	r3, #48	; 0x30
 80163f2:	220a      	movs	r2, #10
 80163f4:	4630      	mov	r0, r6
 80163f6:	f7ff ffa1 	bl	801633c <__multadd>
 80163fa:	45a1      	cmp	r9, r4
 80163fc:	d1f5      	bne.n	80163ea <__s2b+0x38>
 80163fe:	eb08 0405 	add.w	r4, r8, r5
 8016402:	3c08      	subs	r4, #8
 8016404:	1b2d      	subs	r5, r5, r4
 8016406:	1963      	adds	r3, r4, r5
 8016408:	42bb      	cmp	r3, r7
 801640a:	db07      	blt.n	801641c <__s2b+0x6a>
 801640c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016410:	0052      	lsls	r2, r2, #1
 8016412:	3101      	adds	r1, #1
 8016414:	e7d9      	b.n	80163ca <__s2b+0x18>
 8016416:	340a      	adds	r4, #10
 8016418:	2509      	movs	r5, #9
 801641a:	e7f3      	b.n	8016404 <__s2b+0x52>
 801641c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016420:	4601      	mov	r1, r0
 8016422:	3b30      	subs	r3, #48	; 0x30
 8016424:	220a      	movs	r2, #10
 8016426:	4630      	mov	r0, r6
 8016428:	f7ff ff88 	bl	801633c <__multadd>
 801642c:	e7eb      	b.n	8016406 <__s2b+0x54>

0801642e <__hi0bits>:
 801642e:	0c02      	lsrs	r2, r0, #16
 8016430:	0412      	lsls	r2, r2, #16
 8016432:	4603      	mov	r3, r0
 8016434:	b9b2      	cbnz	r2, 8016464 <__hi0bits+0x36>
 8016436:	0403      	lsls	r3, r0, #16
 8016438:	2010      	movs	r0, #16
 801643a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801643e:	bf04      	itt	eq
 8016440:	021b      	lsleq	r3, r3, #8
 8016442:	3008      	addeq	r0, #8
 8016444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016448:	bf04      	itt	eq
 801644a:	011b      	lsleq	r3, r3, #4
 801644c:	3004      	addeq	r0, #4
 801644e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016452:	bf04      	itt	eq
 8016454:	009b      	lsleq	r3, r3, #2
 8016456:	3002      	addeq	r0, #2
 8016458:	2b00      	cmp	r3, #0
 801645a:	db06      	blt.n	801646a <__hi0bits+0x3c>
 801645c:	005b      	lsls	r3, r3, #1
 801645e:	d503      	bpl.n	8016468 <__hi0bits+0x3a>
 8016460:	3001      	adds	r0, #1
 8016462:	4770      	bx	lr
 8016464:	2000      	movs	r0, #0
 8016466:	e7e8      	b.n	801643a <__hi0bits+0xc>
 8016468:	2020      	movs	r0, #32
 801646a:	4770      	bx	lr

0801646c <__lo0bits>:
 801646c:	6803      	ldr	r3, [r0, #0]
 801646e:	f013 0207 	ands.w	r2, r3, #7
 8016472:	4601      	mov	r1, r0
 8016474:	d00b      	beq.n	801648e <__lo0bits+0x22>
 8016476:	07da      	lsls	r2, r3, #31
 8016478:	d423      	bmi.n	80164c2 <__lo0bits+0x56>
 801647a:	0798      	lsls	r0, r3, #30
 801647c:	bf49      	itett	mi
 801647e:	085b      	lsrmi	r3, r3, #1
 8016480:	089b      	lsrpl	r3, r3, #2
 8016482:	2001      	movmi	r0, #1
 8016484:	600b      	strmi	r3, [r1, #0]
 8016486:	bf5c      	itt	pl
 8016488:	600b      	strpl	r3, [r1, #0]
 801648a:	2002      	movpl	r0, #2
 801648c:	4770      	bx	lr
 801648e:	b298      	uxth	r0, r3
 8016490:	b9a8      	cbnz	r0, 80164be <__lo0bits+0x52>
 8016492:	0c1b      	lsrs	r3, r3, #16
 8016494:	2010      	movs	r0, #16
 8016496:	f013 0fff 	tst.w	r3, #255	; 0xff
 801649a:	bf04      	itt	eq
 801649c:	0a1b      	lsreq	r3, r3, #8
 801649e:	3008      	addeq	r0, #8
 80164a0:	071a      	lsls	r2, r3, #28
 80164a2:	bf04      	itt	eq
 80164a4:	091b      	lsreq	r3, r3, #4
 80164a6:	3004      	addeq	r0, #4
 80164a8:	079a      	lsls	r2, r3, #30
 80164aa:	bf04      	itt	eq
 80164ac:	089b      	lsreq	r3, r3, #2
 80164ae:	3002      	addeq	r0, #2
 80164b0:	07da      	lsls	r2, r3, #31
 80164b2:	d402      	bmi.n	80164ba <__lo0bits+0x4e>
 80164b4:	085b      	lsrs	r3, r3, #1
 80164b6:	d006      	beq.n	80164c6 <__lo0bits+0x5a>
 80164b8:	3001      	adds	r0, #1
 80164ba:	600b      	str	r3, [r1, #0]
 80164bc:	4770      	bx	lr
 80164be:	4610      	mov	r0, r2
 80164c0:	e7e9      	b.n	8016496 <__lo0bits+0x2a>
 80164c2:	2000      	movs	r0, #0
 80164c4:	4770      	bx	lr
 80164c6:	2020      	movs	r0, #32
 80164c8:	4770      	bx	lr

080164ca <__i2b>:
 80164ca:	b510      	push	{r4, lr}
 80164cc:	460c      	mov	r4, r1
 80164ce:	2101      	movs	r1, #1
 80164d0:	f7ff ff06 	bl	80162e0 <_Balloc>
 80164d4:	2201      	movs	r2, #1
 80164d6:	6144      	str	r4, [r0, #20]
 80164d8:	6102      	str	r2, [r0, #16]
 80164da:	bd10      	pop	{r4, pc}

080164dc <__multiply>:
 80164dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e0:	4614      	mov	r4, r2
 80164e2:	690a      	ldr	r2, [r1, #16]
 80164e4:	6923      	ldr	r3, [r4, #16]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	bfb8      	it	lt
 80164ea:	460b      	movlt	r3, r1
 80164ec:	4688      	mov	r8, r1
 80164ee:	bfbc      	itt	lt
 80164f0:	46a0      	movlt	r8, r4
 80164f2:	461c      	movlt	r4, r3
 80164f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80164f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80164fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016504:	eb07 0609 	add.w	r6, r7, r9
 8016508:	42b3      	cmp	r3, r6
 801650a:	bfb8      	it	lt
 801650c:	3101      	addlt	r1, #1
 801650e:	f7ff fee7 	bl	80162e0 <_Balloc>
 8016512:	f100 0514 	add.w	r5, r0, #20
 8016516:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801651a:	462b      	mov	r3, r5
 801651c:	2200      	movs	r2, #0
 801651e:	4573      	cmp	r3, lr
 8016520:	d316      	bcc.n	8016550 <__multiply+0x74>
 8016522:	f104 0214 	add.w	r2, r4, #20
 8016526:	f108 0114 	add.w	r1, r8, #20
 801652a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801652e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	9b00      	ldr	r3, [sp, #0]
 8016536:	9201      	str	r2, [sp, #4]
 8016538:	4293      	cmp	r3, r2
 801653a:	d80c      	bhi.n	8016556 <__multiply+0x7a>
 801653c:	2e00      	cmp	r6, #0
 801653e:	dd03      	ble.n	8016548 <__multiply+0x6c>
 8016540:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016544:	2b00      	cmp	r3, #0
 8016546:	d05d      	beq.n	8016604 <__multiply+0x128>
 8016548:	6106      	str	r6, [r0, #16]
 801654a:	b003      	add	sp, #12
 801654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016550:	f843 2b04 	str.w	r2, [r3], #4
 8016554:	e7e3      	b.n	801651e <__multiply+0x42>
 8016556:	f8b2 b000 	ldrh.w	fp, [r2]
 801655a:	f1bb 0f00 	cmp.w	fp, #0
 801655e:	d023      	beq.n	80165a8 <__multiply+0xcc>
 8016560:	4689      	mov	r9, r1
 8016562:	46ac      	mov	ip, r5
 8016564:	f04f 0800 	mov.w	r8, #0
 8016568:	f859 4b04 	ldr.w	r4, [r9], #4
 801656c:	f8dc a000 	ldr.w	sl, [ip]
 8016570:	b2a3      	uxth	r3, r4
 8016572:	fa1f fa8a 	uxth.w	sl, sl
 8016576:	fb0b a303 	mla	r3, fp, r3, sl
 801657a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801657e:	f8dc 4000 	ldr.w	r4, [ip]
 8016582:	4443      	add	r3, r8
 8016584:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016588:	fb0b 840a 	mla	r4, fp, sl, r8
 801658c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016590:	46e2      	mov	sl, ip
 8016592:	b29b      	uxth	r3, r3
 8016594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016598:	454f      	cmp	r7, r9
 801659a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801659e:	f84a 3b04 	str.w	r3, [sl], #4
 80165a2:	d82b      	bhi.n	80165fc <__multiply+0x120>
 80165a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80165a8:	9b01      	ldr	r3, [sp, #4]
 80165aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80165ae:	3204      	adds	r2, #4
 80165b0:	f1ba 0f00 	cmp.w	sl, #0
 80165b4:	d020      	beq.n	80165f8 <__multiply+0x11c>
 80165b6:	682b      	ldr	r3, [r5, #0]
 80165b8:	4689      	mov	r9, r1
 80165ba:	46a8      	mov	r8, r5
 80165bc:	f04f 0b00 	mov.w	fp, #0
 80165c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80165c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80165c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80165cc:	445c      	add	r4, fp
 80165ce:	46c4      	mov	ip, r8
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80165d6:	f84c 3b04 	str.w	r3, [ip], #4
 80165da:	f859 3b04 	ldr.w	r3, [r9], #4
 80165de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80165e2:	0c1b      	lsrs	r3, r3, #16
 80165e4:	fb0a b303 	mla	r3, sl, r3, fp
 80165e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80165ec:	454f      	cmp	r7, r9
 80165ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80165f2:	d805      	bhi.n	8016600 <__multiply+0x124>
 80165f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80165f8:	3504      	adds	r5, #4
 80165fa:	e79b      	b.n	8016534 <__multiply+0x58>
 80165fc:	46d4      	mov	ip, sl
 80165fe:	e7b3      	b.n	8016568 <__multiply+0x8c>
 8016600:	46e0      	mov	r8, ip
 8016602:	e7dd      	b.n	80165c0 <__multiply+0xe4>
 8016604:	3e01      	subs	r6, #1
 8016606:	e799      	b.n	801653c <__multiply+0x60>

08016608 <__pow5mult>:
 8016608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801660c:	4615      	mov	r5, r2
 801660e:	f012 0203 	ands.w	r2, r2, #3
 8016612:	4606      	mov	r6, r0
 8016614:	460f      	mov	r7, r1
 8016616:	d007      	beq.n	8016628 <__pow5mult+0x20>
 8016618:	3a01      	subs	r2, #1
 801661a:	4c1a      	ldr	r4, [pc, #104]	; (8016684 <__pow5mult+0x7c>)
 801661c:	2300      	movs	r3, #0
 801661e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016622:	f7ff fe8b 	bl	801633c <__multadd>
 8016626:	4607      	mov	r7, r0
 8016628:	10ad      	asrs	r5, r5, #2
 801662a:	d027      	beq.n	801667c <__pow5mult+0x74>
 801662c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801662e:	b944      	cbnz	r4, 8016642 <__pow5mult+0x3a>
 8016630:	f240 2171 	movw	r1, #625	; 0x271
 8016634:	4630      	mov	r0, r6
 8016636:	f7ff ff48 	bl	80164ca <__i2b>
 801663a:	2300      	movs	r3, #0
 801663c:	64b0      	str	r0, [r6, #72]	; 0x48
 801663e:	4604      	mov	r4, r0
 8016640:	6003      	str	r3, [r0, #0]
 8016642:	f04f 0800 	mov.w	r8, #0
 8016646:	07eb      	lsls	r3, r5, #31
 8016648:	d50a      	bpl.n	8016660 <__pow5mult+0x58>
 801664a:	4639      	mov	r1, r7
 801664c:	4622      	mov	r2, r4
 801664e:	4630      	mov	r0, r6
 8016650:	f7ff ff44 	bl	80164dc <__multiply>
 8016654:	4639      	mov	r1, r7
 8016656:	4681      	mov	r9, r0
 8016658:	4630      	mov	r0, r6
 801665a:	f7ff fe66 	bl	801632a <_Bfree>
 801665e:	464f      	mov	r7, r9
 8016660:	106d      	asrs	r5, r5, #1
 8016662:	d00b      	beq.n	801667c <__pow5mult+0x74>
 8016664:	6820      	ldr	r0, [r4, #0]
 8016666:	b938      	cbnz	r0, 8016678 <__pow5mult+0x70>
 8016668:	4622      	mov	r2, r4
 801666a:	4621      	mov	r1, r4
 801666c:	4630      	mov	r0, r6
 801666e:	f7ff ff35 	bl	80164dc <__multiply>
 8016672:	6020      	str	r0, [r4, #0]
 8016674:	f8c0 8000 	str.w	r8, [r0]
 8016678:	4604      	mov	r4, r0
 801667a:	e7e4      	b.n	8016646 <__pow5mult+0x3e>
 801667c:	4638      	mov	r0, r7
 801667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016682:	bf00      	nop
 8016684:	08019d40 	.word	0x08019d40

08016688 <__lshift>:
 8016688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668c:	460c      	mov	r4, r1
 801668e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016692:	6923      	ldr	r3, [r4, #16]
 8016694:	6849      	ldr	r1, [r1, #4]
 8016696:	eb0a 0903 	add.w	r9, sl, r3
 801669a:	68a3      	ldr	r3, [r4, #8]
 801669c:	4607      	mov	r7, r0
 801669e:	4616      	mov	r6, r2
 80166a0:	f109 0501 	add.w	r5, r9, #1
 80166a4:	42ab      	cmp	r3, r5
 80166a6:	db32      	blt.n	801670e <__lshift+0x86>
 80166a8:	4638      	mov	r0, r7
 80166aa:	f7ff fe19 	bl	80162e0 <_Balloc>
 80166ae:	2300      	movs	r3, #0
 80166b0:	4680      	mov	r8, r0
 80166b2:	f100 0114 	add.w	r1, r0, #20
 80166b6:	461a      	mov	r2, r3
 80166b8:	4553      	cmp	r3, sl
 80166ba:	db2b      	blt.n	8016714 <__lshift+0x8c>
 80166bc:	6920      	ldr	r0, [r4, #16]
 80166be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80166c2:	f104 0314 	add.w	r3, r4, #20
 80166c6:	f016 021f 	ands.w	r2, r6, #31
 80166ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80166d2:	d025      	beq.n	8016720 <__lshift+0x98>
 80166d4:	f1c2 0e20 	rsb	lr, r2, #32
 80166d8:	2000      	movs	r0, #0
 80166da:	681e      	ldr	r6, [r3, #0]
 80166dc:	468a      	mov	sl, r1
 80166de:	4096      	lsls	r6, r2
 80166e0:	4330      	orrs	r0, r6
 80166e2:	f84a 0b04 	str.w	r0, [sl], #4
 80166e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80166ea:	459c      	cmp	ip, r3
 80166ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80166f0:	d814      	bhi.n	801671c <__lshift+0x94>
 80166f2:	6048      	str	r0, [r1, #4]
 80166f4:	b108      	cbz	r0, 80166fa <__lshift+0x72>
 80166f6:	f109 0502 	add.w	r5, r9, #2
 80166fa:	3d01      	subs	r5, #1
 80166fc:	4638      	mov	r0, r7
 80166fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8016702:	4621      	mov	r1, r4
 8016704:	f7ff fe11 	bl	801632a <_Bfree>
 8016708:	4640      	mov	r0, r8
 801670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801670e:	3101      	adds	r1, #1
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	e7c7      	b.n	80166a4 <__lshift+0x1c>
 8016714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016718:	3301      	adds	r3, #1
 801671a:	e7cd      	b.n	80166b8 <__lshift+0x30>
 801671c:	4651      	mov	r1, sl
 801671e:	e7dc      	b.n	80166da <__lshift+0x52>
 8016720:	3904      	subs	r1, #4
 8016722:	f853 2b04 	ldr.w	r2, [r3], #4
 8016726:	f841 2f04 	str.w	r2, [r1, #4]!
 801672a:	459c      	cmp	ip, r3
 801672c:	d8f9      	bhi.n	8016722 <__lshift+0x9a>
 801672e:	e7e4      	b.n	80166fa <__lshift+0x72>

08016730 <__mcmp>:
 8016730:	6903      	ldr	r3, [r0, #16]
 8016732:	690a      	ldr	r2, [r1, #16]
 8016734:	1a9b      	subs	r3, r3, r2
 8016736:	b530      	push	{r4, r5, lr}
 8016738:	d10c      	bne.n	8016754 <__mcmp+0x24>
 801673a:	0092      	lsls	r2, r2, #2
 801673c:	3014      	adds	r0, #20
 801673e:	3114      	adds	r1, #20
 8016740:	1884      	adds	r4, r0, r2
 8016742:	4411      	add	r1, r2
 8016744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801674c:	4295      	cmp	r5, r2
 801674e:	d003      	beq.n	8016758 <__mcmp+0x28>
 8016750:	d305      	bcc.n	801675e <__mcmp+0x2e>
 8016752:	2301      	movs	r3, #1
 8016754:	4618      	mov	r0, r3
 8016756:	bd30      	pop	{r4, r5, pc}
 8016758:	42a0      	cmp	r0, r4
 801675a:	d3f3      	bcc.n	8016744 <__mcmp+0x14>
 801675c:	e7fa      	b.n	8016754 <__mcmp+0x24>
 801675e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016762:	e7f7      	b.n	8016754 <__mcmp+0x24>

08016764 <__mdiff>:
 8016764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016768:	460d      	mov	r5, r1
 801676a:	4607      	mov	r7, r0
 801676c:	4611      	mov	r1, r2
 801676e:	4628      	mov	r0, r5
 8016770:	4614      	mov	r4, r2
 8016772:	f7ff ffdd 	bl	8016730 <__mcmp>
 8016776:	1e06      	subs	r6, r0, #0
 8016778:	d108      	bne.n	801678c <__mdiff+0x28>
 801677a:	4631      	mov	r1, r6
 801677c:	4638      	mov	r0, r7
 801677e:	f7ff fdaf 	bl	80162e0 <_Balloc>
 8016782:	2301      	movs	r3, #1
 8016784:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801678c:	bfa4      	itt	ge
 801678e:	4623      	movge	r3, r4
 8016790:	462c      	movge	r4, r5
 8016792:	4638      	mov	r0, r7
 8016794:	6861      	ldr	r1, [r4, #4]
 8016796:	bfa6      	itte	ge
 8016798:	461d      	movge	r5, r3
 801679a:	2600      	movge	r6, #0
 801679c:	2601      	movlt	r6, #1
 801679e:	f7ff fd9f 	bl	80162e0 <_Balloc>
 80167a2:	692b      	ldr	r3, [r5, #16]
 80167a4:	60c6      	str	r6, [r0, #12]
 80167a6:	6926      	ldr	r6, [r4, #16]
 80167a8:	f105 0914 	add.w	r9, r5, #20
 80167ac:	f104 0214 	add.w	r2, r4, #20
 80167b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80167b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80167b8:	f100 0514 	add.w	r5, r0, #20
 80167bc:	f04f 0e00 	mov.w	lr, #0
 80167c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80167c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80167c8:	fa1e f18a 	uxtah	r1, lr, sl
 80167cc:	b2a3      	uxth	r3, r4
 80167ce:	1ac9      	subs	r1, r1, r3
 80167d0:	0c23      	lsrs	r3, r4, #16
 80167d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80167d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80167da:	b289      	uxth	r1, r1
 80167dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80167e0:	45c8      	cmp	r8, r9
 80167e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80167e6:	4694      	mov	ip, r2
 80167e8:	f845 3b04 	str.w	r3, [r5], #4
 80167ec:	d8e8      	bhi.n	80167c0 <__mdiff+0x5c>
 80167ee:	45bc      	cmp	ip, r7
 80167f0:	d304      	bcc.n	80167fc <__mdiff+0x98>
 80167f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80167f6:	b183      	cbz	r3, 801681a <__mdiff+0xb6>
 80167f8:	6106      	str	r6, [r0, #16]
 80167fa:	e7c5      	b.n	8016788 <__mdiff+0x24>
 80167fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016800:	fa1e f381 	uxtah	r3, lr, r1
 8016804:	141a      	asrs	r2, r3, #16
 8016806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801680a:	b29b      	uxth	r3, r3
 801680c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016810:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016814:	f845 3b04 	str.w	r3, [r5], #4
 8016818:	e7e9      	b.n	80167ee <__mdiff+0x8a>
 801681a:	3e01      	subs	r6, #1
 801681c:	e7e9      	b.n	80167f2 <__mdiff+0x8e>
	...

08016820 <__ulp>:
 8016820:	4b12      	ldr	r3, [pc, #72]	; (801686c <__ulp+0x4c>)
 8016822:	ee10 2a90 	vmov	r2, s1
 8016826:	401a      	ands	r2, r3
 8016828:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801682c:	2b00      	cmp	r3, #0
 801682e:	dd04      	ble.n	801683a <__ulp+0x1a>
 8016830:	2000      	movs	r0, #0
 8016832:	4619      	mov	r1, r3
 8016834:	ec41 0b10 	vmov	d0, r0, r1
 8016838:	4770      	bx	lr
 801683a:	425b      	negs	r3, r3
 801683c:	151b      	asrs	r3, r3, #20
 801683e:	2b13      	cmp	r3, #19
 8016840:	f04f 0000 	mov.w	r0, #0
 8016844:	f04f 0100 	mov.w	r1, #0
 8016848:	dc04      	bgt.n	8016854 <__ulp+0x34>
 801684a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801684e:	fa42 f103 	asr.w	r1, r2, r3
 8016852:	e7ef      	b.n	8016834 <__ulp+0x14>
 8016854:	3b14      	subs	r3, #20
 8016856:	2b1e      	cmp	r3, #30
 8016858:	f04f 0201 	mov.w	r2, #1
 801685c:	bfda      	itte	le
 801685e:	f1c3 031f 	rsble	r3, r3, #31
 8016862:	fa02 f303 	lslle.w	r3, r2, r3
 8016866:	4613      	movgt	r3, r2
 8016868:	4618      	mov	r0, r3
 801686a:	e7e3      	b.n	8016834 <__ulp+0x14>
 801686c:	7ff00000 	.word	0x7ff00000

08016870 <__b2d>:
 8016870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016872:	6905      	ldr	r5, [r0, #16]
 8016874:	f100 0714 	add.w	r7, r0, #20
 8016878:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801687c:	1f2e      	subs	r6, r5, #4
 801687e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016882:	4620      	mov	r0, r4
 8016884:	f7ff fdd3 	bl	801642e <__hi0bits>
 8016888:	f1c0 0320 	rsb	r3, r0, #32
 801688c:	280a      	cmp	r0, #10
 801688e:	600b      	str	r3, [r1, #0]
 8016890:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016908 <__b2d+0x98>
 8016894:	dc14      	bgt.n	80168c0 <__b2d+0x50>
 8016896:	f1c0 0e0b 	rsb	lr, r0, #11
 801689a:	fa24 f10e 	lsr.w	r1, r4, lr
 801689e:	42b7      	cmp	r7, r6
 80168a0:	ea41 030c 	orr.w	r3, r1, ip
 80168a4:	bf34      	ite	cc
 80168a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80168aa:	2100      	movcs	r1, #0
 80168ac:	3015      	adds	r0, #21
 80168ae:	fa04 f000 	lsl.w	r0, r4, r0
 80168b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80168b6:	ea40 0201 	orr.w	r2, r0, r1
 80168ba:	ec43 2b10 	vmov	d0, r2, r3
 80168be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168c0:	42b7      	cmp	r7, r6
 80168c2:	bf3a      	itte	cc
 80168c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80168c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80168cc:	2100      	movcs	r1, #0
 80168ce:	380b      	subs	r0, #11
 80168d0:	d015      	beq.n	80168fe <__b2d+0x8e>
 80168d2:	4084      	lsls	r4, r0
 80168d4:	f1c0 0520 	rsb	r5, r0, #32
 80168d8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80168dc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80168e0:	42be      	cmp	r6, r7
 80168e2:	fa21 fc05 	lsr.w	ip, r1, r5
 80168e6:	ea44 030c 	orr.w	r3, r4, ip
 80168ea:	bf8c      	ite	hi
 80168ec:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80168f0:	2400      	movls	r4, #0
 80168f2:	fa01 f000 	lsl.w	r0, r1, r0
 80168f6:	40ec      	lsrs	r4, r5
 80168f8:	ea40 0204 	orr.w	r2, r0, r4
 80168fc:	e7dd      	b.n	80168ba <__b2d+0x4a>
 80168fe:	ea44 030c 	orr.w	r3, r4, ip
 8016902:	460a      	mov	r2, r1
 8016904:	e7d9      	b.n	80168ba <__b2d+0x4a>
 8016906:	bf00      	nop
 8016908:	3ff00000 	.word	0x3ff00000

0801690c <__d2b>:
 801690c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016910:	460e      	mov	r6, r1
 8016912:	2101      	movs	r1, #1
 8016914:	ec59 8b10 	vmov	r8, r9, d0
 8016918:	4615      	mov	r5, r2
 801691a:	f7ff fce1 	bl	80162e0 <_Balloc>
 801691e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016922:	4607      	mov	r7, r0
 8016924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016928:	bb34      	cbnz	r4, 8016978 <__d2b+0x6c>
 801692a:	9301      	str	r3, [sp, #4]
 801692c:	f1b8 0300 	subs.w	r3, r8, #0
 8016930:	d027      	beq.n	8016982 <__d2b+0x76>
 8016932:	a802      	add	r0, sp, #8
 8016934:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016938:	f7ff fd98 	bl	801646c <__lo0bits>
 801693c:	9900      	ldr	r1, [sp, #0]
 801693e:	b1f0      	cbz	r0, 801697e <__d2b+0x72>
 8016940:	9a01      	ldr	r2, [sp, #4]
 8016942:	f1c0 0320 	rsb	r3, r0, #32
 8016946:	fa02 f303 	lsl.w	r3, r2, r3
 801694a:	430b      	orrs	r3, r1
 801694c:	40c2      	lsrs	r2, r0
 801694e:	617b      	str	r3, [r7, #20]
 8016950:	9201      	str	r2, [sp, #4]
 8016952:	9b01      	ldr	r3, [sp, #4]
 8016954:	61bb      	str	r3, [r7, #24]
 8016956:	2b00      	cmp	r3, #0
 8016958:	bf14      	ite	ne
 801695a:	2102      	movne	r1, #2
 801695c:	2101      	moveq	r1, #1
 801695e:	6139      	str	r1, [r7, #16]
 8016960:	b1c4      	cbz	r4, 8016994 <__d2b+0x88>
 8016962:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016966:	4404      	add	r4, r0
 8016968:	6034      	str	r4, [r6, #0]
 801696a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801696e:	6028      	str	r0, [r5, #0]
 8016970:	4638      	mov	r0, r7
 8016972:	b003      	add	sp, #12
 8016974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016978:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801697c:	e7d5      	b.n	801692a <__d2b+0x1e>
 801697e:	6179      	str	r1, [r7, #20]
 8016980:	e7e7      	b.n	8016952 <__d2b+0x46>
 8016982:	a801      	add	r0, sp, #4
 8016984:	f7ff fd72 	bl	801646c <__lo0bits>
 8016988:	9b01      	ldr	r3, [sp, #4]
 801698a:	617b      	str	r3, [r7, #20]
 801698c:	2101      	movs	r1, #1
 801698e:	6139      	str	r1, [r7, #16]
 8016990:	3020      	adds	r0, #32
 8016992:	e7e5      	b.n	8016960 <__d2b+0x54>
 8016994:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801699c:	6030      	str	r0, [r6, #0]
 801699e:	6918      	ldr	r0, [r3, #16]
 80169a0:	f7ff fd45 	bl	801642e <__hi0bits>
 80169a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80169a8:	e7e1      	b.n	801696e <__d2b+0x62>

080169aa <__ratio>:
 80169aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ae:	4688      	mov	r8, r1
 80169b0:	4669      	mov	r1, sp
 80169b2:	4681      	mov	r9, r0
 80169b4:	f7ff ff5c 	bl	8016870 <__b2d>
 80169b8:	a901      	add	r1, sp, #4
 80169ba:	4640      	mov	r0, r8
 80169bc:	ec57 6b10 	vmov	r6, r7, d0
 80169c0:	f7ff ff56 	bl	8016870 <__b2d>
 80169c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80169c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80169cc:	eba3 0c02 	sub.w	ip, r3, r2
 80169d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80169d4:	1a9b      	subs	r3, r3, r2
 80169d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80169da:	ec5b ab10 	vmov	sl, fp, d0
 80169de:	2b00      	cmp	r3, #0
 80169e0:	bfce      	itee	gt
 80169e2:	463a      	movgt	r2, r7
 80169e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80169e8:	465a      	movle	r2, fp
 80169ea:	4659      	mov	r1, fp
 80169ec:	463d      	mov	r5, r7
 80169ee:	bfd4      	ite	le
 80169f0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80169f4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80169f8:	4630      	mov	r0, r6
 80169fa:	ee10 2a10 	vmov	r2, s0
 80169fe:	460b      	mov	r3, r1
 8016a00:	4629      	mov	r1, r5
 8016a02:	f7e9 ff3b 	bl	800087c <__aeabi_ddiv>
 8016a06:	ec41 0b10 	vmov	d0, r0, r1
 8016a0a:	b003      	add	sp, #12
 8016a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a10 <__copybits>:
 8016a10:	3901      	subs	r1, #1
 8016a12:	b510      	push	{r4, lr}
 8016a14:	1149      	asrs	r1, r1, #5
 8016a16:	6914      	ldr	r4, [r2, #16]
 8016a18:	3101      	adds	r1, #1
 8016a1a:	f102 0314 	add.w	r3, r2, #20
 8016a1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016a22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016a26:	42a3      	cmp	r3, r4
 8016a28:	4602      	mov	r2, r0
 8016a2a:	d303      	bcc.n	8016a34 <__copybits+0x24>
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	428a      	cmp	r2, r1
 8016a30:	d305      	bcc.n	8016a3e <__copybits+0x2e>
 8016a32:	bd10      	pop	{r4, pc}
 8016a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a38:	f840 2b04 	str.w	r2, [r0], #4
 8016a3c:	e7f3      	b.n	8016a26 <__copybits+0x16>
 8016a3e:	f842 3b04 	str.w	r3, [r2], #4
 8016a42:	e7f4      	b.n	8016a2e <__copybits+0x1e>

08016a44 <__any_on>:
 8016a44:	f100 0214 	add.w	r2, r0, #20
 8016a48:	6900      	ldr	r0, [r0, #16]
 8016a4a:	114b      	asrs	r3, r1, #5
 8016a4c:	4298      	cmp	r0, r3
 8016a4e:	b510      	push	{r4, lr}
 8016a50:	db11      	blt.n	8016a76 <__any_on+0x32>
 8016a52:	dd0a      	ble.n	8016a6a <__any_on+0x26>
 8016a54:	f011 011f 	ands.w	r1, r1, #31
 8016a58:	d007      	beq.n	8016a6a <__any_on+0x26>
 8016a5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016a5e:	fa24 f001 	lsr.w	r0, r4, r1
 8016a62:	fa00 f101 	lsl.w	r1, r0, r1
 8016a66:	428c      	cmp	r4, r1
 8016a68:	d10b      	bne.n	8016a82 <__any_on+0x3e>
 8016a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a6e:	4293      	cmp	r3, r2
 8016a70:	d803      	bhi.n	8016a7a <__any_on+0x36>
 8016a72:	2000      	movs	r0, #0
 8016a74:	bd10      	pop	{r4, pc}
 8016a76:	4603      	mov	r3, r0
 8016a78:	e7f7      	b.n	8016a6a <__any_on+0x26>
 8016a7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016a7e:	2900      	cmp	r1, #0
 8016a80:	d0f5      	beq.n	8016a6e <__any_on+0x2a>
 8016a82:	2001      	movs	r0, #1
 8016a84:	e7f6      	b.n	8016a74 <__any_on+0x30>
	...

08016a88 <frexp>:
 8016a88:	b570      	push	{r4, r5, r6, lr}
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	ec55 4b10 	vmov	r4, r5, d0
 8016a90:	6001      	str	r1, [r0, #0]
 8016a92:	4916      	ldr	r1, [pc, #88]	; (8016aec <frexp+0x64>)
 8016a94:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016a98:	428b      	cmp	r3, r1
 8016a9a:	4606      	mov	r6, r0
 8016a9c:	462a      	mov	r2, r5
 8016a9e:	dc22      	bgt.n	8016ae6 <frexp+0x5e>
 8016aa0:	ee10 1a10 	vmov	r1, s0
 8016aa4:	4319      	orrs	r1, r3
 8016aa6:	d01e      	beq.n	8016ae6 <frexp+0x5e>
 8016aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016aac:	da0d      	bge.n	8016aca <frexp+0x42>
 8016aae:	2200      	movs	r2, #0
 8016ab0:	4b0f      	ldr	r3, [pc, #60]	; (8016af0 <frexp+0x68>)
 8016ab2:	ee10 0a10 	vmov	r0, s0
 8016ab6:	4629      	mov	r1, r5
 8016ab8:	f7e9 fdb6 	bl	8000628 <__aeabi_dmul>
 8016abc:	460a      	mov	r2, r1
 8016abe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ac2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	6031      	str	r1, [r6, #0]
 8016aca:	6831      	ldr	r1, [r6, #0]
 8016acc:	151b      	asrs	r3, r3, #20
 8016ace:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016ad2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016ad6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8016ada:	440b      	add	r3, r1
 8016adc:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8016ae0:	6033      	str	r3, [r6, #0]
 8016ae2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8016ae6:	ec45 4b10 	vmov	d0, r4, r5
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	7fefffff 	.word	0x7fefffff
 8016af0:	43500000 	.word	0x43500000

08016af4 <strncmp>:
 8016af4:	b510      	push	{r4, lr}
 8016af6:	b16a      	cbz	r2, 8016b14 <strncmp+0x20>
 8016af8:	3901      	subs	r1, #1
 8016afa:	1884      	adds	r4, r0, r2
 8016afc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016b00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016b04:	4293      	cmp	r3, r2
 8016b06:	d103      	bne.n	8016b10 <strncmp+0x1c>
 8016b08:	42a0      	cmp	r0, r4
 8016b0a:	d001      	beq.n	8016b10 <strncmp+0x1c>
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d1f5      	bne.n	8016afc <strncmp+0x8>
 8016b10:	1a98      	subs	r0, r3, r2
 8016b12:	bd10      	pop	{r4, pc}
 8016b14:	4610      	mov	r0, r2
 8016b16:	e7fc      	b.n	8016b12 <strncmp+0x1e>

08016b18 <strncpy>:
 8016b18:	b570      	push	{r4, r5, r6, lr}
 8016b1a:	3901      	subs	r1, #1
 8016b1c:	4604      	mov	r4, r0
 8016b1e:	b902      	cbnz	r2, 8016b22 <strncpy+0xa>
 8016b20:	bd70      	pop	{r4, r5, r6, pc}
 8016b22:	4623      	mov	r3, r4
 8016b24:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016b28:	f803 5b01 	strb.w	r5, [r3], #1
 8016b2c:	1e56      	subs	r6, r2, #1
 8016b2e:	b92d      	cbnz	r5, 8016b3c <strncpy+0x24>
 8016b30:	4414      	add	r4, r2
 8016b32:	42a3      	cmp	r3, r4
 8016b34:	d0f4      	beq.n	8016b20 <strncpy+0x8>
 8016b36:	f803 5b01 	strb.w	r5, [r3], #1
 8016b3a:	e7fa      	b.n	8016b32 <strncpy+0x1a>
 8016b3c:	461c      	mov	r4, r3
 8016b3e:	4632      	mov	r2, r6
 8016b40:	e7ed      	b.n	8016b1e <strncpy+0x6>

08016b42 <__ssprint_r>:
 8016b42:	6893      	ldr	r3, [r2, #8]
 8016b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b48:	4681      	mov	r9, r0
 8016b4a:	460c      	mov	r4, r1
 8016b4c:	4616      	mov	r6, r2
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d05e      	beq.n	8016c10 <__ssprint_r+0xce>
 8016b52:	f04f 0b00 	mov.w	fp, #0
 8016b56:	f8d2 a000 	ldr.w	sl, [r2]
 8016b5a:	465f      	mov	r7, fp
 8016b5c:	b357      	cbz	r7, 8016bb4 <__ssprint_r+0x72>
 8016b5e:	68a3      	ldr	r3, [r4, #8]
 8016b60:	429f      	cmp	r7, r3
 8016b62:	d340      	bcc.n	8016be6 <__ssprint_r+0xa4>
 8016b64:	89a2      	ldrh	r2, [r4, #12]
 8016b66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b6a:	d03c      	beq.n	8016be6 <__ssprint_r+0xa4>
 8016b6c:	6825      	ldr	r5, [r4, #0]
 8016b6e:	6921      	ldr	r1, [r4, #16]
 8016b70:	eba5 0801 	sub.w	r8, r5, r1
 8016b74:	6965      	ldr	r5, [r4, #20]
 8016b76:	2302      	movs	r3, #2
 8016b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b80:	f108 0301 	add.w	r3, r8, #1
 8016b84:	443b      	add	r3, r7
 8016b86:	429d      	cmp	r5, r3
 8016b88:	bf38      	it	cc
 8016b8a:	461d      	movcc	r5, r3
 8016b8c:	0553      	lsls	r3, r2, #21
 8016b8e:	d544      	bpl.n	8016c1a <__ssprint_r+0xd8>
 8016b90:	4629      	mov	r1, r5
 8016b92:	4648      	mov	r0, r9
 8016b94:	f7fb fd76 	bl	8012684 <_malloc_r>
 8016b98:	b988      	cbnz	r0, 8016bbe <__ssprint_r+0x7c>
 8016b9a:	230c      	movs	r3, #12
 8016b9c:	f8c9 3000 	str.w	r3, [r9]
 8016ba0:	89a3      	ldrh	r3, [r4, #12]
 8016ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ba6:	81a3      	strh	r3, [r4, #12]
 8016ba8:	2300      	movs	r3, #0
 8016baa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bb2:	e02f      	b.n	8016c14 <__ssprint_r+0xd2>
 8016bb4:	e9da b700 	ldrd	fp, r7, [sl]
 8016bb8:	f10a 0a08 	add.w	sl, sl, #8
 8016bbc:	e7ce      	b.n	8016b5c <__ssprint_r+0x1a>
 8016bbe:	4642      	mov	r2, r8
 8016bc0:	6921      	ldr	r1, [r4, #16]
 8016bc2:	9001      	str	r0, [sp, #4]
 8016bc4:	f7fb ff94 	bl	8012af0 <memcpy>
 8016bc8:	89a2      	ldrh	r2, [r4, #12]
 8016bca:	9b01      	ldr	r3, [sp, #4]
 8016bcc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8016bd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8016bd4:	81a2      	strh	r2, [r4, #12]
 8016bd6:	6123      	str	r3, [r4, #16]
 8016bd8:	6165      	str	r5, [r4, #20]
 8016bda:	4443      	add	r3, r8
 8016bdc:	eba5 0508 	sub.w	r5, r5, r8
 8016be0:	6023      	str	r3, [r4, #0]
 8016be2:	60a5      	str	r5, [r4, #8]
 8016be4:	463b      	mov	r3, r7
 8016be6:	42bb      	cmp	r3, r7
 8016be8:	bf28      	it	cs
 8016bea:	463b      	movcs	r3, r7
 8016bec:	461a      	mov	r2, r3
 8016bee:	4659      	mov	r1, fp
 8016bf0:	6820      	ldr	r0, [r4, #0]
 8016bf2:	9301      	str	r3, [sp, #4]
 8016bf4:	f000 f8ad 	bl	8016d52 <memmove>
 8016bf8:	68a2      	ldr	r2, [r4, #8]
 8016bfa:	9b01      	ldr	r3, [sp, #4]
 8016bfc:	1ad2      	subs	r2, r2, r3
 8016bfe:	60a2      	str	r2, [r4, #8]
 8016c00:	6822      	ldr	r2, [r4, #0]
 8016c02:	4413      	add	r3, r2
 8016c04:	6023      	str	r3, [r4, #0]
 8016c06:	68b3      	ldr	r3, [r6, #8]
 8016c08:	1bdf      	subs	r7, r3, r7
 8016c0a:	60b7      	str	r7, [r6, #8]
 8016c0c:	2f00      	cmp	r7, #0
 8016c0e:	d1d1      	bne.n	8016bb4 <__ssprint_r+0x72>
 8016c10:	2000      	movs	r0, #0
 8016c12:	6070      	str	r0, [r6, #4]
 8016c14:	b003      	add	sp, #12
 8016c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c1a:	462a      	mov	r2, r5
 8016c1c:	4648      	mov	r0, r9
 8016c1e:	f000 f8b1 	bl	8016d84 <_realloc_r>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d1d6      	bne.n	8016bd6 <__ssprint_r+0x94>
 8016c28:	6921      	ldr	r1, [r4, #16]
 8016c2a:	4648      	mov	r0, r9
 8016c2c:	f7fe ff4e 	bl	8015acc <_free_r>
 8016c30:	e7b3      	b.n	8016b9a <__ssprint_r+0x58>

08016c32 <__ascii_wctomb>:
 8016c32:	b149      	cbz	r1, 8016c48 <__ascii_wctomb+0x16>
 8016c34:	2aff      	cmp	r2, #255	; 0xff
 8016c36:	bf85      	ittet	hi
 8016c38:	238a      	movhi	r3, #138	; 0x8a
 8016c3a:	6003      	strhi	r3, [r0, #0]
 8016c3c:	700a      	strbls	r2, [r1, #0]
 8016c3e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016c42:	bf98      	it	ls
 8016c44:	2001      	movls	r0, #1
 8016c46:	4770      	bx	lr
 8016c48:	4608      	mov	r0, r1
 8016c4a:	4770      	bx	lr

08016c4c <__register_exitproc>:
 8016c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c50:	4c26      	ldr	r4, [pc, #152]	; (8016cec <__register_exitproc+0xa0>)
 8016c52:	4606      	mov	r6, r0
 8016c54:	6820      	ldr	r0, [r4, #0]
 8016c56:	4698      	mov	r8, r3
 8016c58:	460f      	mov	r7, r1
 8016c5a:	4691      	mov	r9, r2
 8016c5c:	f7ff fb2c 	bl	80162b8 <__retarget_lock_acquire_recursive>
 8016c60:	4b23      	ldr	r3, [pc, #140]	; (8016cf0 <__register_exitproc+0xa4>)
 8016c62:	681d      	ldr	r5, [r3, #0]
 8016c64:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8016c68:	b918      	cbnz	r0, 8016c72 <__register_exitproc+0x26>
 8016c6a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8016c6e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8016c72:	6843      	ldr	r3, [r0, #4]
 8016c74:	2b1f      	cmp	r3, #31
 8016c76:	dd19      	ble.n	8016cac <__register_exitproc+0x60>
 8016c78:	4b1e      	ldr	r3, [pc, #120]	; (8016cf4 <__register_exitproc+0xa8>)
 8016c7a:	b933      	cbnz	r3, 8016c8a <__register_exitproc+0x3e>
 8016c7c:	6820      	ldr	r0, [r4, #0]
 8016c7e:	f7ff fb1c 	bl	80162ba <__retarget_lock_release_recursive>
 8016c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c8a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8016c8e:	f7fb fcf1 	bl	8012674 <malloc>
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d0f2      	beq.n	8016c7c <__register_exitproc+0x30>
 8016c96:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8016c9a:	6003      	str	r3, [r0, #0]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	6042      	str	r2, [r0, #4]
 8016ca0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8016ca4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8016ca8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8016cac:	6843      	ldr	r3, [r0, #4]
 8016cae:	b19e      	cbz	r6, 8016cd8 <__register_exitproc+0x8c>
 8016cb0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8016cba:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8016cbe:	409a      	lsls	r2, r3
 8016cc0:	4311      	orrs	r1, r2
 8016cc2:	2e02      	cmp	r6, #2
 8016cc4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8016cc8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8016ccc:	bf02      	ittt	eq
 8016cce:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8016cd2:	430a      	orreq	r2, r1
 8016cd4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8016cd8:	1c5a      	adds	r2, r3, #1
 8016cda:	3302      	adds	r3, #2
 8016cdc:	6042      	str	r2, [r0, #4]
 8016cde:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8016ce2:	6820      	ldr	r0, [r4, #0]
 8016ce4:	f7ff fae9 	bl	80162ba <__retarget_lock_release_recursive>
 8016ce8:	2000      	movs	r0, #0
 8016cea:	e7cc      	b.n	8016c86 <__register_exitproc+0x3a>
 8016cec:	200009d8 	.word	0x200009d8
 8016cf0:	08019b8c 	.word	0x08019b8c
 8016cf4:	08012675 	.word	0x08012675

08016cf8 <_calloc_r>:
 8016cf8:	b510      	push	{r4, lr}
 8016cfa:	4351      	muls	r1, r2
 8016cfc:	f7fb fcc2 	bl	8012684 <_malloc_r>
 8016d00:	4604      	mov	r4, r0
 8016d02:	b198      	cbz	r0, 8016d2c <_calloc_r+0x34>
 8016d04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016d08:	f022 0203 	bic.w	r2, r2, #3
 8016d0c:	3a04      	subs	r2, #4
 8016d0e:	2a24      	cmp	r2, #36	; 0x24
 8016d10:	d81b      	bhi.n	8016d4a <_calloc_r+0x52>
 8016d12:	2a13      	cmp	r2, #19
 8016d14:	d917      	bls.n	8016d46 <_calloc_r+0x4e>
 8016d16:	2100      	movs	r1, #0
 8016d18:	2a1b      	cmp	r2, #27
 8016d1a:	e9c0 1100 	strd	r1, r1, [r0]
 8016d1e:	d807      	bhi.n	8016d30 <_calloc_r+0x38>
 8016d20:	f100 0308 	add.w	r3, r0, #8
 8016d24:	2200      	movs	r2, #0
 8016d26:	e9c3 2200 	strd	r2, r2, [r3]
 8016d2a:	609a      	str	r2, [r3, #8]
 8016d2c:	4620      	mov	r0, r4
 8016d2e:	bd10      	pop	{r4, pc}
 8016d30:	2a24      	cmp	r2, #36	; 0x24
 8016d32:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8016d36:	bf11      	iteee	ne
 8016d38:	f100 0310 	addne.w	r3, r0, #16
 8016d3c:	6101      	streq	r1, [r0, #16]
 8016d3e:	f100 0318 	addeq.w	r3, r0, #24
 8016d42:	6141      	streq	r1, [r0, #20]
 8016d44:	e7ee      	b.n	8016d24 <_calloc_r+0x2c>
 8016d46:	4603      	mov	r3, r0
 8016d48:	e7ec      	b.n	8016d24 <_calloc_r+0x2c>
 8016d4a:	2100      	movs	r1, #0
 8016d4c:	f7fb fedb 	bl	8012b06 <memset>
 8016d50:	e7ec      	b.n	8016d2c <_calloc_r+0x34>

08016d52 <memmove>:
 8016d52:	4288      	cmp	r0, r1
 8016d54:	b510      	push	{r4, lr}
 8016d56:	eb01 0302 	add.w	r3, r1, r2
 8016d5a:	d807      	bhi.n	8016d6c <memmove+0x1a>
 8016d5c:	1e42      	subs	r2, r0, #1
 8016d5e:	4299      	cmp	r1, r3
 8016d60:	d00a      	beq.n	8016d78 <memmove+0x26>
 8016d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d66:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016d6a:	e7f8      	b.n	8016d5e <memmove+0xc>
 8016d6c:	4283      	cmp	r3, r0
 8016d6e:	d9f5      	bls.n	8016d5c <memmove+0xa>
 8016d70:	1881      	adds	r1, r0, r2
 8016d72:	1ad2      	subs	r2, r2, r3
 8016d74:	42d3      	cmn	r3, r2
 8016d76:	d100      	bne.n	8016d7a <memmove+0x28>
 8016d78:	bd10      	pop	{r4, pc}
 8016d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016d82:	e7f7      	b.n	8016d74 <memmove+0x22>

08016d84 <_realloc_r>:
 8016d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d88:	4682      	mov	sl, r0
 8016d8a:	460c      	mov	r4, r1
 8016d8c:	b929      	cbnz	r1, 8016d9a <_realloc_r+0x16>
 8016d8e:	4611      	mov	r1, r2
 8016d90:	b003      	add	sp, #12
 8016d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d96:	f7fb bc75 	b.w	8012684 <_malloc_r>
 8016d9a:	9201      	str	r2, [sp, #4]
 8016d9c:	f7fb febc 	bl	8012b18 <__malloc_lock>
 8016da0:	9a01      	ldr	r2, [sp, #4]
 8016da2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8016da6:	f102 080b 	add.w	r8, r2, #11
 8016daa:	f1b8 0f16 	cmp.w	r8, #22
 8016dae:	f1a4 0908 	sub.w	r9, r4, #8
 8016db2:	f025 0603 	bic.w	r6, r5, #3
 8016db6:	d90b      	bls.n	8016dd0 <_realloc_r+0x4c>
 8016db8:	f038 0807 	bics.w	r8, r8, #7
 8016dbc:	d50a      	bpl.n	8016dd4 <_realloc_r+0x50>
 8016dbe:	230c      	movs	r3, #12
 8016dc0:	f8ca 3000 	str.w	r3, [sl]
 8016dc4:	f04f 0b00 	mov.w	fp, #0
 8016dc8:	4658      	mov	r0, fp
 8016dca:	b003      	add	sp, #12
 8016dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd0:	f04f 0810 	mov.w	r8, #16
 8016dd4:	4590      	cmp	r8, r2
 8016dd6:	d3f2      	bcc.n	8016dbe <_realloc_r+0x3a>
 8016dd8:	45b0      	cmp	r8, r6
 8016dda:	f340 8170 	ble.w	80170be <_realloc_r+0x33a>
 8016dde:	49a9      	ldr	r1, [pc, #676]	; (8017084 <_realloc_r+0x300>)
 8016de0:	9101      	str	r1, [sp, #4]
 8016de2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8016de6:	eb09 0306 	add.w	r3, r9, r6
 8016dea:	459c      	cmp	ip, r3
 8016dec:	6858      	ldr	r0, [r3, #4]
 8016dee:	d005      	beq.n	8016dfc <_realloc_r+0x78>
 8016df0:	f020 0101 	bic.w	r1, r0, #1
 8016df4:	4419      	add	r1, r3
 8016df6:	6849      	ldr	r1, [r1, #4]
 8016df8:	07cf      	lsls	r7, r1, #31
 8016dfa:	d447      	bmi.n	8016e8c <_realloc_r+0x108>
 8016dfc:	f020 0003 	bic.w	r0, r0, #3
 8016e00:	459c      	cmp	ip, r3
 8016e02:	eb06 0700 	add.w	r7, r6, r0
 8016e06:	d119      	bne.n	8016e3c <_realloc_r+0xb8>
 8016e08:	f108 0110 	add.w	r1, r8, #16
 8016e0c:	42b9      	cmp	r1, r7
 8016e0e:	dc3f      	bgt.n	8016e90 <_realloc_r+0x10c>
 8016e10:	eb09 0308 	add.w	r3, r9, r8
 8016e14:	9a01      	ldr	r2, [sp, #4]
 8016e16:	eba7 0708 	sub.w	r7, r7, r8
 8016e1a:	f047 0701 	orr.w	r7, r7, #1
 8016e1e:	6093      	str	r3, [r2, #8]
 8016e20:	605f      	str	r7, [r3, #4]
 8016e22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016e26:	f003 0301 	and.w	r3, r3, #1
 8016e2a:	ea43 0308 	orr.w	r3, r3, r8
 8016e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016e32:	4650      	mov	r0, sl
 8016e34:	f7fb fe76 	bl	8012b24 <__malloc_unlock>
 8016e38:	46a3      	mov	fp, r4
 8016e3a:	e7c5      	b.n	8016dc8 <_realloc_r+0x44>
 8016e3c:	45b8      	cmp	r8, r7
 8016e3e:	dc27      	bgt.n	8016e90 <_realloc_r+0x10c>
 8016e40:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8016e44:	60da      	str	r2, [r3, #12]
 8016e46:	6093      	str	r3, [r2, #8]
 8016e48:	eba7 0008 	sub.w	r0, r7, r8
 8016e4c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016e50:	280f      	cmp	r0, #15
 8016e52:	f002 0201 	and.w	r2, r2, #1
 8016e56:	eb09 0307 	add.w	r3, r9, r7
 8016e5a:	f240 8132 	bls.w	80170c2 <_realloc_r+0x33e>
 8016e5e:	eb09 0108 	add.w	r1, r9, r8
 8016e62:	ea48 0202 	orr.w	r2, r8, r2
 8016e66:	f040 0001 	orr.w	r0, r0, #1
 8016e6a:	f8c9 2004 	str.w	r2, [r9, #4]
 8016e6e:	6048      	str	r0, [r1, #4]
 8016e70:	685a      	ldr	r2, [r3, #4]
 8016e72:	f042 0201 	orr.w	r2, r2, #1
 8016e76:	605a      	str	r2, [r3, #4]
 8016e78:	3108      	adds	r1, #8
 8016e7a:	4650      	mov	r0, sl
 8016e7c:	f7fe fe26 	bl	8015acc <_free_r>
 8016e80:	4650      	mov	r0, sl
 8016e82:	f7fb fe4f 	bl	8012b24 <__malloc_unlock>
 8016e86:	f109 0b08 	add.w	fp, r9, #8
 8016e8a:	e79d      	b.n	8016dc8 <_realloc_r+0x44>
 8016e8c:	2000      	movs	r0, #0
 8016e8e:	4603      	mov	r3, r0
 8016e90:	07e9      	lsls	r1, r5, #31
 8016e92:	f100 80c6 	bmi.w	8017022 <_realloc_r+0x29e>
 8016e96:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8016e9a:	eba9 0505 	sub.w	r5, r9, r5
 8016e9e:	6869      	ldr	r1, [r5, #4]
 8016ea0:	f021 0103 	bic.w	r1, r1, #3
 8016ea4:	eb01 0b06 	add.w	fp, r1, r6
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f000 8086 	beq.w	8016fba <_realloc_r+0x236>
 8016eae:	459c      	cmp	ip, r3
 8016eb0:	eb00 070b 	add.w	r7, r0, fp
 8016eb4:	d149      	bne.n	8016f4a <_realloc_r+0x1c6>
 8016eb6:	f108 0310 	add.w	r3, r8, #16
 8016eba:	42bb      	cmp	r3, r7
 8016ebc:	dc7d      	bgt.n	8016fba <_realloc_r+0x236>
 8016ebe:	46ab      	mov	fp, r5
 8016ec0:	68eb      	ldr	r3, [r5, #12]
 8016ec2:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8016ec6:	60d3      	str	r3, [r2, #12]
 8016ec8:	609a      	str	r2, [r3, #8]
 8016eca:	1f32      	subs	r2, r6, #4
 8016ecc:	2a24      	cmp	r2, #36	; 0x24
 8016ece:	d837      	bhi.n	8016f40 <_realloc_r+0x1bc>
 8016ed0:	2a13      	cmp	r2, #19
 8016ed2:	d933      	bls.n	8016f3c <_realloc_r+0x1b8>
 8016ed4:	6823      	ldr	r3, [r4, #0]
 8016ed6:	60ab      	str	r3, [r5, #8]
 8016ed8:	6863      	ldr	r3, [r4, #4]
 8016eda:	60eb      	str	r3, [r5, #12]
 8016edc:	2a1b      	cmp	r2, #27
 8016ede:	d81b      	bhi.n	8016f18 <_realloc_r+0x194>
 8016ee0:	3408      	adds	r4, #8
 8016ee2:	f105 0310 	add.w	r3, r5, #16
 8016ee6:	6822      	ldr	r2, [r4, #0]
 8016ee8:	601a      	str	r2, [r3, #0]
 8016eea:	6862      	ldr	r2, [r4, #4]
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	68a2      	ldr	r2, [r4, #8]
 8016ef0:	609a      	str	r2, [r3, #8]
 8016ef2:	eb05 0308 	add.w	r3, r5, r8
 8016ef6:	9a01      	ldr	r2, [sp, #4]
 8016ef8:	eba7 0708 	sub.w	r7, r7, r8
 8016efc:	f047 0701 	orr.w	r7, r7, #1
 8016f00:	6093      	str	r3, [r2, #8]
 8016f02:	605f      	str	r7, [r3, #4]
 8016f04:	686b      	ldr	r3, [r5, #4]
 8016f06:	f003 0301 	and.w	r3, r3, #1
 8016f0a:	ea43 0308 	orr.w	r3, r3, r8
 8016f0e:	606b      	str	r3, [r5, #4]
 8016f10:	4650      	mov	r0, sl
 8016f12:	f7fb fe07 	bl	8012b24 <__malloc_unlock>
 8016f16:	e757      	b.n	8016dc8 <_realloc_r+0x44>
 8016f18:	68a3      	ldr	r3, [r4, #8]
 8016f1a:	612b      	str	r3, [r5, #16]
 8016f1c:	68e3      	ldr	r3, [r4, #12]
 8016f1e:	616b      	str	r3, [r5, #20]
 8016f20:	2a24      	cmp	r2, #36	; 0x24
 8016f22:	bf01      	itttt	eq
 8016f24:	6923      	ldreq	r3, [r4, #16]
 8016f26:	61ab      	streq	r3, [r5, #24]
 8016f28:	6962      	ldreq	r2, [r4, #20]
 8016f2a:	61ea      	streq	r2, [r5, #28]
 8016f2c:	bf19      	ittee	ne
 8016f2e:	3410      	addne	r4, #16
 8016f30:	f105 0318 	addne.w	r3, r5, #24
 8016f34:	f105 0320 	addeq.w	r3, r5, #32
 8016f38:	3418      	addeq	r4, #24
 8016f3a:	e7d4      	b.n	8016ee6 <_realloc_r+0x162>
 8016f3c:	465b      	mov	r3, fp
 8016f3e:	e7d2      	b.n	8016ee6 <_realloc_r+0x162>
 8016f40:	4621      	mov	r1, r4
 8016f42:	4658      	mov	r0, fp
 8016f44:	f7ff ff05 	bl	8016d52 <memmove>
 8016f48:	e7d3      	b.n	8016ef2 <_realloc_r+0x16e>
 8016f4a:	45b8      	cmp	r8, r7
 8016f4c:	dc35      	bgt.n	8016fba <_realloc_r+0x236>
 8016f4e:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8016f52:	4628      	mov	r0, r5
 8016f54:	60da      	str	r2, [r3, #12]
 8016f56:	6093      	str	r3, [r2, #8]
 8016f58:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8016f5c:	68eb      	ldr	r3, [r5, #12]
 8016f5e:	60d3      	str	r3, [r2, #12]
 8016f60:	609a      	str	r2, [r3, #8]
 8016f62:	1f32      	subs	r2, r6, #4
 8016f64:	2a24      	cmp	r2, #36	; 0x24
 8016f66:	d824      	bhi.n	8016fb2 <_realloc_r+0x22e>
 8016f68:	2a13      	cmp	r2, #19
 8016f6a:	d908      	bls.n	8016f7e <_realloc_r+0x1fa>
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	60ab      	str	r3, [r5, #8]
 8016f70:	6863      	ldr	r3, [r4, #4]
 8016f72:	60eb      	str	r3, [r5, #12]
 8016f74:	2a1b      	cmp	r2, #27
 8016f76:	d80a      	bhi.n	8016f8e <_realloc_r+0x20a>
 8016f78:	3408      	adds	r4, #8
 8016f7a:	f105 0010 	add.w	r0, r5, #16
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	6003      	str	r3, [r0, #0]
 8016f82:	6863      	ldr	r3, [r4, #4]
 8016f84:	6043      	str	r3, [r0, #4]
 8016f86:	68a3      	ldr	r3, [r4, #8]
 8016f88:	6083      	str	r3, [r0, #8]
 8016f8a:	46a9      	mov	r9, r5
 8016f8c:	e75c      	b.n	8016e48 <_realloc_r+0xc4>
 8016f8e:	68a3      	ldr	r3, [r4, #8]
 8016f90:	612b      	str	r3, [r5, #16]
 8016f92:	68e3      	ldr	r3, [r4, #12]
 8016f94:	616b      	str	r3, [r5, #20]
 8016f96:	2a24      	cmp	r2, #36	; 0x24
 8016f98:	bf01      	itttt	eq
 8016f9a:	6923      	ldreq	r3, [r4, #16]
 8016f9c:	61ab      	streq	r3, [r5, #24]
 8016f9e:	6963      	ldreq	r3, [r4, #20]
 8016fa0:	61eb      	streq	r3, [r5, #28]
 8016fa2:	bf19      	ittee	ne
 8016fa4:	3410      	addne	r4, #16
 8016fa6:	f105 0018 	addne.w	r0, r5, #24
 8016faa:	f105 0020 	addeq.w	r0, r5, #32
 8016fae:	3418      	addeq	r4, #24
 8016fb0:	e7e5      	b.n	8016f7e <_realloc_r+0x1fa>
 8016fb2:	4621      	mov	r1, r4
 8016fb4:	f7ff fecd 	bl	8016d52 <memmove>
 8016fb8:	e7e7      	b.n	8016f8a <_realloc_r+0x206>
 8016fba:	45d8      	cmp	r8, fp
 8016fbc:	dc31      	bgt.n	8017022 <_realloc_r+0x29e>
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	68eb      	ldr	r3, [r5, #12]
 8016fc2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8016fc6:	60d3      	str	r3, [r2, #12]
 8016fc8:	609a      	str	r2, [r3, #8]
 8016fca:	1f32      	subs	r2, r6, #4
 8016fcc:	2a24      	cmp	r2, #36	; 0x24
 8016fce:	d824      	bhi.n	801701a <_realloc_r+0x296>
 8016fd0:	2a13      	cmp	r2, #19
 8016fd2:	d908      	bls.n	8016fe6 <_realloc_r+0x262>
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	60ab      	str	r3, [r5, #8]
 8016fd8:	6863      	ldr	r3, [r4, #4]
 8016fda:	60eb      	str	r3, [r5, #12]
 8016fdc:	2a1b      	cmp	r2, #27
 8016fde:	d80a      	bhi.n	8016ff6 <_realloc_r+0x272>
 8016fe0:	3408      	adds	r4, #8
 8016fe2:	f105 0010 	add.w	r0, r5, #16
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	6003      	str	r3, [r0, #0]
 8016fea:	6863      	ldr	r3, [r4, #4]
 8016fec:	6043      	str	r3, [r0, #4]
 8016fee:	68a3      	ldr	r3, [r4, #8]
 8016ff0:	6083      	str	r3, [r0, #8]
 8016ff2:	465f      	mov	r7, fp
 8016ff4:	e7c9      	b.n	8016f8a <_realloc_r+0x206>
 8016ff6:	68a3      	ldr	r3, [r4, #8]
 8016ff8:	612b      	str	r3, [r5, #16]
 8016ffa:	68e3      	ldr	r3, [r4, #12]
 8016ffc:	616b      	str	r3, [r5, #20]
 8016ffe:	2a24      	cmp	r2, #36	; 0x24
 8017000:	bf01      	itttt	eq
 8017002:	6923      	ldreq	r3, [r4, #16]
 8017004:	61ab      	streq	r3, [r5, #24]
 8017006:	6963      	ldreq	r3, [r4, #20]
 8017008:	61eb      	streq	r3, [r5, #28]
 801700a:	bf19      	ittee	ne
 801700c:	3410      	addne	r4, #16
 801700e:	f105 0018 	addne.w	r0, r5, #24
 8017012:	f105 0020 	addeq.w	r0, r5, #32
 8017016:	3418      	addeq	r4, #24
 8017018:	e7e5      	b.n	8016fe6 <_realloc_r+0x262>
 801701a:	4621      	mov	r1, r4
 801701c:	f7ff fe99 	bl	8016d52 <memmove>
 8017020:	e7e7      	b.n	8016ff2 <_realloc_r+0x26e>
 8017022:	4611      	mov	r1, r2
 8017024:	4650      	mov	r0, sl
 8017026:	f7fb fb2d 	bl	8012684 <_malloc_r>
 801702a:	4683      	mov	fp, r0
 801702c:	2800      	cmp	r0, #0
 801702e:	f43f af6f 	beq.w	8016f10 <_realloc_r+0x18c>
 8017032:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017036:	f023 0301 	bic.w	r3, r3, #1
 801703a:	444b      	add	r3, r9
 801703c:	f1a0 0208 	sub.w	r2, r0, #8
 8017040:	4293      	cmp	r3, r2
 8017042:	d105      	bne.n	8017050 <_realloc_r+0x2cc>
 8017044:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8017048:	f027 0703 	bic.w	r7, r7, #3
 801704c:	4437      	add	r7, r6
 801704e:	e6fb      	b.n	8016e48 <_realloc_r+0xc4>
 8017050:	1f32      	subs	r2, r6, #4
 8017052:	2a24      	cmp	r2, #36	; 0x24
 8017054:	d82f      	bhi.n	80170b6 <_realloc_r+0x332>
 8017056:	2a13      	cmp	r2, #19
 8017058:	d92a      	bls.n	80170b0 <_realloc_r+0x32c>
 801705a:	6823      	ldr	r3, [r4, #0]
 801705c:	6003      	str	r3, [r0, #0]
 801705e:	6863      	ldr	r3, [r4, #4]
 8017060:	6043      	str	r3, [r0, #4]
 8017062:	2a1b      	cmp	r2, #27
 8017064:	d810      	bhi.n	8017088 <_realloc_r+0x304>
 8017066:	f104 0208 	add.w	r2, r4, #8
 801706a:	f100 0308 	add.w	r3, r0, #8
 801706e:	6811      	ldr	r1, [r2, #0]
 8017070:	6019      	str	r1, [r3, #0]
 8017072:	6851      	ldr	r1, [r2, #4]
 8017074:	6059      	str	r1, [r3, #4]
 8017076:	6892      	ldr	r2, [r2, #8]
 8017078:	609a      	str	r2, [r3, #8]
 801707a:	4621      	mov	r1, r4
 801707c:	4650      	mov	r0, sl
 801707e:	f7fe fd25 	bl	8015acc <_free_r>
 8017082:	e745      	b.n	8016f10 <_realloc_r+0x18c>
 8017084:	200005c8 	.word	0x200005c8
 8017088:	68a3      	ldr	r3, [r4, #8]
 801708a:	6083      	str	r3, [r0, #8]
 801708c:	68e3      	ldr	r3, [r4, #12]
 801708e:	60c3      	str	r3, [r0, #12]
 8017090:	2a24      	cmp	r2, #36	; 0x24
 8017092:	bf01      	itttt	eq
 8017094:	6923      	ldreq	r3, [r4, #16]
 8017096:	6103      	streq	r3, [r0, #16]
 8017098:	6961      	ldreq	r1, [r4, #20]
 801709a:	6141      	streq	r1, [r0, #20]
 801709c:	bf19      	ittee	ne
 801709e:	f104 0210 	addne.w	r2, r4, #16
 80170a2:	f100 0310 	addne.w	r3, r0, #16
 80170a6:	f104 0218 	addeq.w	r2, r4, #24
 80170aa:	f100 0318 	addeq.w	r3, r0, #24
 80170ae:	e7de      	b.n	801706e <_realloc_r+0x2ea>
 80170b0:	4603      	mov	r3, r0
 80170b2:	4622      	mov	r2, r4
 80170b4:	e7db      	b.n	801706e <_realloc_r+0x2ea>
 80170b6:	4621      	mov	r1, r4
 80170b8:	f7ff fe4b 	bl	8016d52 <memmove>
 80170bc:	e7dd      	b.n	801707a <_realloc_r+0x2f6>
 80170be:	4637      	mov	r7, r6
 80170c0:	e6c2      	b.n	8016e48 <_realloc_r+0xc4>
 80170c2:	4317      	orrs	r7, r2
 80170c4:	f8c9 7004 	str.w	r7, [r9, #4]
 80170c8:	685a      	ldr	r2, [r3, #4]
 80170ca:	f042 0201 	orr.w	r2, r2, #1
 80170ce:	605a      	str	r2, [r3, #4]
 80170d0:	e6d6      	b.n	8016e80 <_realloc_r+0xfc>
 80170d2:	bf00      	nop

080170d4 <round>:
 80170d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170d6:	ec57 6b10 	vmov	r6, r7, d0
 80170da:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80170de:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80170e2:	2c13      	cmp	r4, #19
 80170e4:	463b      	mov	r3, r7
 80170e6:	463d      	mov	r5, r7
 80170e8:	dc17      	bgt.n	801711a <round+0x46>
 80170ea:	2c00      	cmp	r4, #0
 80170ec:	da09      	bge.n	8017102 <round+0x2e>
 80170ee:	3401      	adds	r4, #1
 80170f0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80170f4:	d103      	bne.n	80170fe <round+0x2a>
 80170f6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80170fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80170fe:	2100      	movs	r1, #0
 8017100:	e02c      	b.n	801715c <round+0x88>
 8017102:	4a18      	ldr	r2, [pc, #96]	; (8017164 <round+0x90>)
 8017104:	4122      	asrs	r2, r4
 8017106:	4217      	tst	r7, r2
 8017108:	d100      	bne.n	801710c <round+0x38>
 801710a:	b19e      	cbz	r6, 8017134 <round+0x60>
 801710c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017110:	4123      	asrs	r3, r4
 8017112:	442b      	add	r3, r5
 8017114:	ea23 0302 	bic.w	r3, r3, r2
 8017118:	e7f1      	b.n	80170fe <round+0x2a>
 801711a:	2c33      	cmp	r4, #51	; 0x33
 801711c:	dd0d      	ble.n	801713a <round+0x66>
 801711e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017122:	d107      	bne.n	8017134 <round+0x60>
 8017124:	4630      	mov	r0, r6
 8017126:	4639      	mov	r1, r7
 8017128:	ee10 2a10 	vmov	r2, s0
 801712c:	f7e9 f8c6 	bl	80002bc <__adddf3>
 8017130:	4606      	mov	r6, r0
 8017132:	460f      	mov	r7, r1
 8017134:	ec47 6b10 	vmov	d0, r6, r7
 8017138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801713a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801713e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017142:	40d0      	lsrs	r0, r2
 8017144:	4206      	tst	r6, r0
 8017146:	d0f5      	beq.n	8017134 <round+0x60>
 8017148:	2201      	movs	r2, #1
 801714a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801714e:	fa02 f404 	lsl.w	r4, r2, r4
 8017152:	1931      	adds	r1, r6, r4
 8017154:	bf28      	it	cs
 8017156:	189b      	addcs	r3, r3, r2
 8017158:	ea21 0100 	bic.w	r1, r1, r0
 801715c:	461f      	mov	r7, r3
 801715e:	460e      	mov	r6, r1
 8017160:	e7e8      	b.n	8017134 <round+0x60>
 8017162:	bf00      	nop
 8017164:	000fffff 	.word	0x000fffff

08017168 <sin>:
 8017168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801716a:	ec51 0b10 	vmov	r0, r1, d0
 801716e:	4a20      	ldr	r2, [pc, #128]	; (80171f0 <sin+0x88>)
 8017170:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017174:	4293      	cmp	r3, r2
 8017176:	dc07      	bgt.n	8017188 <sin+0x20>
 8017178:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80171e8 <sin+0x80>
 801717c:	2000      	movs	r0, #0
 801717e:	f000 fe37 	bl	8017df0 <__kernel_sin>
 8017182:	ec51 0b10 	vmov	r0, r1, d0
 8017186:	e007      	b.n	8017198 <sin+0x30>
 8017188:	4a1a      	ldr	r2, [pc, #104]	; (80171f4 <sin+0x8c>)
 801718a:	4293      	cmp	r3, r2
 801718c:	dd09      	ble.n	80171a2 <sin+0x3a>
 801718e:	ee10 2a10 	vmov	r2, s0
 8017192:	460b      	mov	r3, r1
 8017194:	f7e9 f890 	bl	80002b8 <__aeabi_dsub>
 8017198:	ec41 0b10 	vmov	d0, r0, r1
 801719c:	b005      	add	sp, #20
 801719e:	f85d fb04 	ldr.w	pc, [sp], #4
 80171a2:	4668      	mov	r0, sp
 80171a4:	f000 f828 	bl	80171f8 <__ieee754_rem_pio2>
 80171a8:	f000 0003 	and.w	r0, r0, #3
 80171ac:	2801      	cmp	r0, #1
 80171ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80171b2:	ed9d 0b00 	vldr	d0, [sp]
 80171b6:	d004      	beq.n	80171c2 <sin+0x5a>
 80171b8:	2802      	cmp	r0, #2
 80171ba:	d005      	beq.n	80171c8 <sin+0x60>
 80171bc:	b970      	cbnz	r0, 80171dc <sin+0x74>
 80171be:	2001      	movs	r0, #1
 80171c0:	e7dd      	b.n	801717e <sin+0x16>
 80171c2:	f000 fa0d 	bl	80175e0 <__kernel_cos>
 80171c6:	e7dc      	b.n	8017182 <sin+0x1a>
 80171c8:	2001      	movs	r0, #1
 80171ca:	f000 fe11 	bl	8017df0 <__kernel_sin>
 80171ce:	ec53 2b10 	vmov	r2, r3, d0
 80171d2:	ee10 0a10 	vmov	r0, s0
 80171d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80171da:	e7dd      	b.n	8017198 <sin+0x30>
 80171dc:	f000 fa00 	bl	80175e0 <__kernel_cos>
 80171e0:	e7f5      	b.n	80171ce <sin+0x66>
 80171e2:	bf00      	nop
 80171e4:	f3af 8000 	nop.w
	...
 80171f0:	3fe921fb 	.word	0x3fe921fb
 80171f4:	7fefffff 	.word	0x7fefffff

080171f8 <__ieee754_rem_pio2>:
 80171f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171fc:	ec57 6b10 	vmov	r6, r7, d0
 8017200:	4bc3      	ldr	r3, [pc, #780]	; (8017510 <__ieee754_rem_pio2+0x318>)
 8017202:	b08d      	sub	sp, #52	; 0x34
 8017204:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017208:	4598      	cmp	r8, r3
 801720a:	4604      	mov	r4, r0
 801720c:	9704      	str	r7, [sp, #16]
 801720e:	dc07      	bgt.n	8017220 <__ieee754_rem_pio2+0x28>
 8017210:	2200      	movs	r2, #0
 8017212:	2300      	movs	r3, #0
 8017214:	ed84 0b00 	vstr	d0, [r4]
 8017218:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801721c:	2500      	movs	r5, #0
 801721e:	e027      	b.n	8017270 <__ieee754_rem_pio2+0x78>
 8017220:	4bbc      	ldr	r3, [pc, #752]	; (8017514 <__ieee754_rem_pio2+0x31c>)
 8017222:	4598      	cmp	r8, r3
 8017224:	dc75      	bgt.n	8017312 <__ieee754_rem_pio2+0x11a>
 8017226:	9b04      	ldr	r3, [sp, #16]
 8017228:	4dbb      	ldr	r5, [pc, #748]	; (8017518 <__ieee754_rem_pio2+0x320>)
 801722a:	2b00      	cmp	r3, #0
 801722c:	ee10 0a10 	vmov	r0, s0
 8017230:	a3a9      	add	r3, pc, #676	; (adr r3, 80174d8 <__ieee754_rem_pio2+0x2e0>)
 8017232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017236:	4639      	mov	r1, r7
 8017238:	dd36      	ble.n	80172a8 <__ieee754_rem_pio2+0xb0>
 801723a:	f7e9 f83d 	bl	80002b8 <__aeabi_dsub>
 801723e:	45a8      	cmp	r8, r5
 8017240:	4606      	mov	r6, r0
 8017242:	460f      	mov	r7, r1
 8017244:	d018      	beq.n	8017278 <__ieee754_rem_pio2+0x80>
 8017246:	a3a6      	add	r3, pc, #664	; (adr r3, 80174e0 <__ieee754_rem_pio2+0x2e8>)
 8017248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801724c:	f7e9 f834 	bl	80002b8 <__aeabi_dsub>
 8017250:	4602      	mov	r2, r0
 8017252:	460b      	mov	r3, r1
 8017254:	e9c4 2300 	strd	r2, r3, [r4]
 8017258:	4630      	mov	r0, r6
 801725a:	4639      	mov	r1, r7
 801725c:	f7e9 f82c 	bl	80002b8 <__aeabi_dsub>
 8017260:	a39f      	add	r3, pc, #636	; (adr r3, 80174e0 <__ieee754_rem_pio2+0x2e8>)
 8017262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017266:	f7e9 f827 	bl	80002b8 <__aeabi_dsub>
 801726a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801726e:	2501      	movs	r5, #1
 8017270:	4628      	mov	r0, r5
 8017272:	b00d      	add	sp, #52	; 0x34
 8017274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017278:	a39b      	add	r3, pc, #620	; (adr r3, 80174e8 <__ieee754_rem_pio2+0x2f0>)
 801727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727e:	f7e9 f81b 	bl	80002b8 <__aeabi_dsub>
 8017282:	a39b      	add	r3, pc, #620	; (adr r3, 80174f0 <__ieee754_rem_pio2+0x2f8>)
 8017284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017288:	4606      	mov	r6, r0
 801728a:	460f      	mov	r7, r1
 801728c:	f7e9 f814 	bl	80002b8 <__aeabi_dsub>
 8017290:	4602      	mov	r2, r0
 8017292:	460b      	mov	r3, r1
 8017294:	e9c4 2300 	strd	r2, r3, [r4]
 8017298:	4630      	mov	r0, r6
 801729a:	4639      	mov	r1, r7
 801729c:	f7e9 f80c 	bl	80002b8 <__aeabi_dsub>
 80172a0:	a393      	add	r3, pc, #588	; (adr r3, 80174f0 <__ieee754_rem_pio2+0x2f8>)
 80172a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a6:	e7de      	b.n	8017266 <__ieee754_rem_pio2+0x6e>
 80172a8:	f7e9 f808 	bl	80002bc <__adddf3>
 80172ac:	45a8      	cmp	r8, r5
 80172ae:	4606      	mov	r6, r0
 80172b0:	460f      	mov	r7, r1
 80172b2:	d016      	beq.n	80172e2 <__ieee754_rem_pio2+0xea>
 80172b4:	a38a      	add	r3, pc, #552	; (adr r3, 80174e0 <__ieee754_rem_pio2+0x2e8>)
 80172b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ba:	f7e8 ffff 	bl	80002bc <__adddf3>
 80172be:	4602      	mov	r2, r0
 80172c0:	460b      	mov	r3, r1
 80172c2:	e9c4 2300 	strd	r2, r3, [r4]
 80172c6:	4630      	mov	r0, r6
 80172c8:	4639      	mov	r1, r7
 80172ca:	f7e8 fff5 	bl	80002b8 <__aeabi_dsub>
 80172ce:	a384      	add	r3, pc, #528	; (adr r3, 80174e0 <__ieee754_rem_pio2+0x2e8>)
 80172d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d4:	f7e8 fff2 	bl	80002bc <__adddf3>
 80172d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80172dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80172e0:	e7c6      	b.n	8017270 <__ieee754_rem_pio2+0x78>
 80172e2:	a381      	add	r3, pc, #516	; (adr r3, 80174e8 <__ieee754_rem_pio2+0x2f0>)
 80172e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e8:	f7e8 ffe8 	bl	80002bc <__adddf3>
 80172ec:	a380      	add	r3, pc, #512	; (adr r3, 80174f0 <__ieee754_rem_pio2+0x2f8>)
 80172ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f2:	4606      	mov	r6, r0
 80172f4:	460f      	mov	r7, r1
 80172f6:	f7e8 ffe1 	bl	80002bc <__adddf3>
 80172fa:	4602      	mov	r2, r0
 80172fc:	460b      	mov	r3, r1
 80172fe:	e9c4 2300 	strd	r2, r3, [r4]
 8017302:	4630      	mov	r0, r6
 8017304:	4639      	mov	r1, r7
 8017306:	f7e8 ffd7 	bl	80002b8 <__aeabi_dsub>
 801730a:	a379      	add	r3, pc, #484	; (adr r3, 80174f0 <__ieee754_rem_pio2+0x2f8>)
 801730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017310:	e7e0      	b.n	80172d4 <__ieee754_rem_pio2+0xdc>
 8017312:	4b82      	ldr	r3, [pc, #520]	; (801751c <__ieee754_rem_pio2+0x324>)
 8017314:	4598      	cmp	r8, r3
 8017316:	f300 80d0 	bgt.w	80174ba <__ieee754_rem_pio2+0x2c2>
 801731a:	f000 fe23 	bl	8017f64 <fabs>
 801731e:	ec57 6b10 	vmov	r6, r7, d0
 8017322:	ee10 0a10 	vmov	r0, s0
 8017326:	a374      	add	r3, pc, #464	; (adr r3, 80174f8 <__ieee754_rem_pio2+0x300>)
 8017328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801732c:	4639      	mov	r1, r7
 801732e:	f7e9 f97b 	bl	8000628 <__aeabi_dmul>
 8017332:	2200      	movs	r2, #0
 8017334:	4b7a      	ldr	r3, [pc, #488]	; (8017520 <__ieee754_rem_pio2+0x328>)
 8017336:	f7e8 ffc1 	bl	80002bc <__adddf3>
 801733a:	f7e9 fc25 	bl	8000b88 <__aeabi_d2iz>
 801733e:	4605      	mov	r5, r0
 8017340:	f7e9 f908 	bl	8000554 <__aeabi_i2d>
 8017344:	a364      	add	r3, pc, #400	; (adr r3, 80174d8 <__ieee754_rem_pio2+0x2e0>)
 8017346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801734e:	f7e9 f96b 	bl	8000628 <__aeabi_dmul>
 8017352:	4602      	mov	r2, r0
 8017354:	460b      	mov	r3, r1
 8017356:	4630      	mov	r0, r6
 8017358:	4639      	mov	r1, r7
 801735a:	f7e8 ffad 	bl	80002b8 <__aeabi_dsub>
 801735e:	a360      	add	r3, pc, #384	; (adr r3, 80174e0 <__ieee754_rem_pio2+0x2e8>)
 8017360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017364:	4682      	mov	sl, r0
 8017366:	468b      	mov	fp, r1
 8017368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801736c:	f7e9 f95c 	bl	8000628 <__aeabi_dmul>
 8017370:	2d1f      	cmp	r5, #31
 8017372:	4606      	mov	r6, r0
 8017374:	460f      	mov	r7, r1
 8017376:	dc0c      	bgt.n	8017392 <__ieee754_rem_pio2+0x19a>
 8017378:	1e6a      	subs	r2, r5, #1
 801737a:	4b6a      	ldr	r3, [pc, #424]	; (8017524 <__ieee754_rem_pio2+0x32c>)
 801737c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017380:	4543      	cmp	r3, r8
 8017382:	d006      	beq.n	8017392 <__ieee754_rem_pio2+0x19a>
 8017384:	4632      	mov	r2, r6
 8017386:	463b      	mov	r3, r7
 8017388:	4650      	mov	r0, sl
 801738a:	4659      	mov	r1, fp
 801738c:	f7e8 ff94 	bl	80002b8 <__aeabi_dsub>
 8017390:	e00e      	b.n	80173b0 <__ieee754_rem_pio2+0x1b8>
 8017392:	4632      	mov	r2, r6
 8017394:	463b      	mov	r3, r7
 8017396:	4650      	mov	r0, sl
 8017398:	4659      	mov	r1, fp
 801739a:	f7e8 ff8d 	bl	80002b8 <__aeabi_dsub>
 801739e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80173a2:	9305      	str	r3, [sp, #20]
 80173a4:	9a05      	ldr	r2, [sp, #20]
 80173a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80173aa:	1ad3      	subs	r3, r2, r3
 80173ac:	2b10      	cmp	r3, #16
 80173ae:	dc02      	bgt.n	80173b6 <__ieee754_rem_pio2+0x1be>
 80173b0:	e9c4 0100 	strd	r0, r1, [r4]
 80173b4:	e039      	b.n	801742a <__ieee754_rem_pio2+0x232>
 80173b6:	a34c      	add	r3, pc, #304	; (adr r3, 80174e8 <__ieee754_rem_pio2+0x2f0>)
 80173b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173c0:	f7e9 f932 	bl	8000628 <__aeabi_dmul>
 80173c4:	4606      	mov	r6, r0
 80173c6:	460f      	mov	r7, r1
 80173c8:	4602      	mov	r2, r0
 80173ca:	460b      	mov	r3, r1
 80173cc:	4650      	mov	r0, sl
 80173ce:	4659      	mov	r1, fp
 80173d0:	f7e8 ff72 	bl	80002b8 <__aeabi_dsub>
 80173d4:	4602      	mov	r2, r0
 80173d6:	460b      	mov	r3, r1
 80173d8:	4680      	mov	r8, r0
 80173da:	4689      	mov	r9, r1
 80173dc:	4650      	mov	r0, sl
 80173de:	4659      	mov	r1, fp
 80173e0:	f7e8 ff6a 	bl	80002b8 <__aeabi_dsub>
 80173e4:	4632      	mov	r2, r6
 80173e6:	463b      	mov	r3, r7
 80173e8:	f7e8 ff66 	bl	80002b8 <__aeabi_dsub>
 80173ec:	a340      	add	r3, pc, #256	; (adr r3, 80174f0 <__ieee754_rem_pio2+0x2f8>)
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	4606      	mov	r6, r0
 80173f4:	460f      	mov	r7, r1
 80173f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173fa:	f7e9 f915 	bl	8000628 <__aeabi_dmul>
 80173fe:	4632      	mov	r2, r6
 8017400:	463b      	mov	r3, r7
 8017402:	f7e8 ff59 	bl	80002b8 <__aeabi_dsub>
 8017406:	4602      	mov	r2, r0
 8017408:	460b      	mov	r3, r1
 801740a:	4606      	mov	r6, r0
 801740c:	460f      	mov	r7, r1
 801740e:	4640      	mov	r0, r8
 8017410:	4649      	mov	r1, r9
 8017412:	f7e8 ff51 	bl	80002b8 <__aeabi_dsub>
 8017416:	9a05      	ldr	r2, [sp, #20]
 8017418:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801741c:	1ad3      	subs	r3, r2, r3
 801741e:	2b31      	cmp	r3, #49	; 0x31
 8017420:	dc20      	bgt.n	8017464 <__ieee754_rem_pio2+0x26c>
 8017422:	e9c4 0100 	strd	r0, r1, [r4]
 8017426:	46c2      	mov	sl, r8
 8017428:	46cb      	mov	fp, r9
 801742a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801742e:	4650      	mov	r0, sl
 8017430:	4642      	mov	r2, r8
 8017432:	464b      	mov	r3, r9
 8017434:	4659      	mov	r1, fp
 8017436:	f7e8 ff3f 	bl	80002b8 <__aeabi_dsub>
 801743a:	463b      	mov	r3, r7
 801743c:	4632      	mov	r2, r6
 801743e:	f7e8 ff3b 	bl	80002b8 <__aeabi_dsub>
 8017442:	9b04      	ldr	r3, [sp, #16]
 8017444:	2b00      	cmp	r3, #0
 8017446:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801744a:	f6bf af11 	bge.w	8017270 <__ieee754_rem_pio2+0x78>
 801744e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017452:	6063      	str	r3, [r4, #4]
 8017454:	f8c4 8000 	str.w	r8, [r4]
 8017458:	60a0      	str	r0, [r4, #8]
 801745a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801745e:	60e3      	str	r3, [r4, #12]
 8017460:	426d      	negs	r5, r5
 8017462:	e705      	b.n	8017270 <__ieee754_rem_pio2+0x78>
 8017464:	a326      	add	r3, pc, #152	; (adr r3, 8017500 <__ieee754_rem_pio2+0x308>)
 8017466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801746e:	f7e9 f8db 	bl	8000628 <__aeabi_dmul>
 8017472:	4606      	mov	r6, r0
 8017474:	460f      	mov	r7, r1
 8017476:	4602      	mov	r2, r0
 8017478:	460b      	mov	r3, r1
 801747a:	4640      	mov	r0, r8
 801747c:	4649      	mov	r1, r9
 801747e:	f7e8 ff1b 	bl	80002b8 <__aeabi_dsub>
 8017482:	4602      	mov	r2, r0
 8017484:	460b      	mov	r3, r1
 8017486:	4682      	mov	sl, r0
 8017488:	468b      	mov	fp, r1
 801748a:	4640      	mov	r0, r8
 801748c:	4649      	mov	r1, r9
 801748e:	f7e8 ff13 	bl	80002b8 <__aeabi_dsub>
 8017492:	4632      	mov	r2, r6
 8017494:	463b      	mov	r3, r7
 8017496:	f7e8 ff0f 	bl	80002b8 <__aeabi_dsub>
 801749a:	a31b      	add	r3, pc, #108	; (adr r3, 8017508 <__ieee754_rem_pio2+0x310>)
 801749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a0:	4606      	mov	r6, r0
 80174a2:	460f      	mov	r7, r1
 80174a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80174a8:	f7e9 f8be 	bl	8000628 <__aeabi_dmul>
 80174ac:	4632      	mov	r2, r6
 80174ae:	463b      	mov	r3, r7
 80174b0:	f7e8 ff02 	bl	80002b8 <__aeabi_dsub>
 80174b4:	4606      	mov	r6, r0
 80174b6:	460f      	mov	r7, r1
 80174b8:	e764      	b.n	8017384 <__ieee754_rem_pio2+0x18c>
 80174ba:	4b1b      	ldr	r3, [pc, #108]	; (8017528 <__ieee754_rem_pio2+0x330>)
 80174bc:	4598      	cmp	r8, r3
 80174be:	dd35      	ble.n	801752c <__ieee754_rem_pio2+0x334>
 80174c0:	ee10 2a10 	vmov	r2, s0
 80174c4:	463b      	mov	r3, r7
 80174c6:	4630      	mov	r0, r6
 80174c8:	4639      	mov	r1, r7
 80174ca:	f7e8 fef5 	bl	80002b8 <__aeabi_dsub>
 80174ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80174d2:	e9c4 0100 	strd	r0, r1, [r4]
 80174d6:	e6a1      	b.n	801721c <__ieee754_rem_pio2+0x24>
 80174d8:	54400000 	.word	0x54400000
 80174dc:	3ff921fb 	.word	0x3ff921fb
 80174e0:	1a626331 	.word	0x1a626331
 80174e4:	3dd0b461 	.word	0x3dd0b461
 80174e8:	1a600000 	.word	0x1a600000
 80174ec:	3dd0b461 	.word	0x3dd0b461
 80174f0:	2e037073 	.word	0x2e037073
 80174f4:	3ba3198a 	.word	0x3ba3198a
 80174f8:	6dc9c883 	.word	0x6dc9c883
 80174fc:	3fe45f30 	.word	0x3fe45f30
 8017500:	2e000000 	.word	0x2e000000
 8017504:	3ba3198a 	.word	0x3ba3198a
 8017508:	252049c1 	.word	0x252049c1
 801750c:	397b839a 	.word	0x397b839a
 8017510:	3fe921fb 	.word	0x3fe921fb
 8017514:	4002d97b 	.word	0x4002d97b
 8017518:	3ff921fb 	.word	0x3ff921fb
 801751c:	413921fb 	.word	0x413921fb
 8017520:	3fe00000 	.word	0x3fe00000
 8017524:	08019e50 	.word	0x08019e50
 8017528:	7fefffff 	.word	0x7fefffff
 801752c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017530:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8017534:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017538:	4630      	mov	r0, r6
 801753a:	460f      	mov	r7, r1
 801753c:	f7e9 fb24 	bl	8000b88 <__aeabi_d2iz>
 8017540:	f7e9 f808 	bl	8000554 <__aeabi_i2d>
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	4630      	mov	r0, r6
 801754a:	4639      	mov	r1, r7
 801754c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017550:	f7e8 feb2 	bl	80002b8 <__aeabi_dsub>
 8017554:	2200      	movs	r2, #0
 8017556:	4b1f      	ldr	r3, [pc, #124]	; (80175d4 <__ieee754_rem_pio2+0x3dc>)
 8017558:	f7e9 f866 	bl	8000628 <__aeabi_dmul>
 801755c:	460f      	mov	r7, r1
 801755e:	4606      	mov	r6, r0
 8017560:	f7e9 fb12 	bl	8000b88 <__aeabi_d2iz>
 8017564:	f7e8 fff6 	bl	8000554 <__aeabi_i2d>
 8017568:	4602      	mov	r2, r0
 801756a:	460b      	mov	r3, r1
 801756c:	4630      	mov	r0, r6
 801756e:	4639      	mov	r1, r7
 8017570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017574:	f7e8 fea0 	bl	80002b8 <__aeabi_dsub>
 8017578:	2200      	movs	r2, #0
 801757a:	4b16      	ldr	r3, [pc, #88]	; (80175d4 <__ieee754_rem_pio2+0x3dc>)
 801757c:	f7e9 f854 	bl	8000628 <__aeabi_dmul>
 8017580:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017584:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017588:	f04f 0803 	mov.w	r8, #3
 801758c:	2600      	movs	r6, #0
 801758e:	2700      	movs	r7, #0
 8017590:	4632      	mov	r2, r6
 8017592:	463b      	mov	r3, r7
 8017594:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8017598:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801759c:	f7e9 faac 	bl	8000af8 <__aeabi_dcmpeq>
 80175a0:	b9b0      	cbnz	r0, 80175d0 <__ieee754_rem_pio2+0x3d8>
 80175a2:	4b0d      	ldr	r3, [pc, #52]	; (80175d8 <__ieee754_rem_pio2+0x3e0>)
 80175a4:	9301      	str	r3, [sp, #4]
 80175a6:	2302      	movs	r3, #2
 80175a8:	9300      	str	r3, [sp, #0]
 80175aa:	462a      	mov	r2, r5
 80175ac:	4643      	mov	r3, r8
 80175ae:	4621      	mov	r1, r4
 80175b0:	a806      	add	r0, sp, #24
 80175b2:	f000 f8dd 	bl	8017770 <__kernel_rem_pio2>
 80175b6:	9b04      	ldr	r3, [sp, #16]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	4605      	mov	r5, r0
 80175bc:	f6bf ae58 	bge.w	8017270 <__ieee754_rem_pio2+0x78>
 80175c0:	6863      	ldr	r3, [r4, #4]
 80175c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80175c6:	6063      	str	r3, [r4, #4]
 80175c8:	68e3      	ldr	r3, [r4, #12]
 80175ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80175ce:	e746      	b.n	801745e <__ieee754_rem_pio2+0x266>
 80175d0:	46d0      	mov	r8, sl
 80175d2:	e7dd      	b.n	8017590 <__ieee754_rem_pio2+0x398>
 80175d4:	41700000 	.word	0x41700000
 80175d8:	08019ed0 	.word	0x08019ed0
 80175dc:	00000000 	.word	0x00000000

080175e0 <__kernel_cos>:
 80175e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e4:	ec59 8b10 	vmov	r8, r9, d0
 80175e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80175ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80175f0:	ed2d 8b02 	vpush	{d8}
 80175f4:	eeb0 8a41 	vmov.f32	s16, s2
 80175f8:	eef0 8a61 	vmov.f32	s17, s3
 80175fc:	da07      	bge.n	801760e <__kernel_cos+0x2e>
 80175fe:	ee10 0a10 	vmov	r0, s0
 8017602:	4649      	mov	r1, r9
 8017604:	f7e9 fac0 	bl	8000b88 <__aeabi_d2iz>
 8017608:	2800      	cmp	r0, #0
 801760a:	f000 8089 	beq.w	8017720 <__kernel_cos+0x140>
 801760e:	4642      	mov	r2, r8
 8017610:	464b      	mov	r3, r9
 8017612:	4640      	mov	r0, r8
 8017614:	4649      	mov	r1, r9
 8017616:	f7e9 f807 	bl	8000628 <__aeabi_dmul>
 801761a:	2200      	movs	r2, #0
 801761c:	4b4e      	ldr	r3, [pc, #312]	; (8017758 <__kernel_cos+0x178>)
 801761e:	4604      	mov	r4, r0
 8017620:	460d      	mov	r5, r1
 8017622:	f7e9 f801 	bl	8000628 <__aeabi_dmul>
 8017626:	a340      	add	r3, pc, #256	; (adr r3, 8017728 <__kernel_cos+0x148>)
 8017628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762c:	4682      	mov	sl, r0
 801762e:	468b      	mov	fp, r1
 8017630:	4620      	mov	r0, r4
 8017632:	4629      	mov	r1, r5
 8017634:	f7e8 fff8 	bl	8000628 <__aeabi_dmul>
 8017638:	a33d      	add	r3, pc, #244	; (adr r3, 8017730 <__kernel_cos+0x150>)
 801763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763e:	f7e8 fe3d 	bl	80002bc <__adddf3>
 8017642:	4622      	mov	r2, r4
 8017644:	462b      	mov	r3, r5
 8017646:	f7e8 ffef 	bl	8000628 <__aeabi_dmul>
 801764a:	a33b      	add	r3, pc, #236	; (adr r3, 8017738 <__kernel_cos+0x158>)
 801764c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017650:	f7e8 fe32 	bl	80002b8 <__aeabi_dsub>
 8017654:	4622      	mov	r2, r4
 8017656:	462b      	mov	r3, r5
 8017658:	f7e8 ffe6 	bl	8000628 <__aeabi_dmul>
 801765c:	a338      	add	r3, pc, #224	; (adr r3, 8017740 <__kernel_cos+0x160>)
 801765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017662:	f7e8 fe2b 	bl	80002bc <__adddf3>
 8017666:	4622      	mov	r2, r4
 8017668:	462b      	mov	r3, r5
 801766a:	f7e8 ffdd 	bl	8000628 <__aeabi_dmul>
 801766e:	a336      	add	r3, pc, #216	; (adr r3, 8017748 <__kernel_cos+0x168>)
 8017670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017674:	f7e8 fe20 	bl	80002b8 <__aeabi_dsub>
 8017678:	4622      	mov	r2, r4
 801767a:	462b      	mov	r3, r5
 801767c:	f7e8 ffd4 	bl	8000628 <__aeabi_dmul>
 8017680:	a333      	add	r3, pc, #204	; (adr r3, 8017750 <__kernel_cos+0x170>)
 8017682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017686:	f7e8 fe19 	bl	80002bc <__adddf3>
 801768a:	4622      	mov	r2, r4
 801768c:	462b      	mov	r3, r5
 801768e:	f7e8 ffcb 	bl	8000628 <__aeabi_dmul>
 8017692:	4622      	mov	r2, r4
 8017694:	462b      	mov	r3, r5
 8017696:	f7e8 ffc7 	bl	8000628 <__aeabi_dmul>
 801769a:	ec53 2b18 	vmov	r2, r3, d8
 801769e:	4604      	mov	r4, r0
 80176a0:	460d      	mov	r5, r1
 80176a2:	4640      	mov	r0, r8
 80176a4:	4649      	mov	r1, r9
 80176a6:	f7e8 ffbf 	bl	8000628 <__aeabi_dmul>
 80176aa:	460b      	mov	r3, r1
 80176ac:	4602      	mov	r2, r0
 80176ae:	4629      	mov	r1, r5
 80176b0:	4620      	mov	r0, r4
 80176b2:	f7e8 fe01 	bl	80002b8 <__aeabi_dsub>
 80176b6:	4b29      	ldr	r3, [pc, #164]	; (801775c <__kernel_cos+0x17c>)
 80176b8:	429e      	cmp	r6, r3
 80176ba:	4680      	mov	r8, r0
 80176bc:	4689      	mov	r9, r1
 80176be:	dc11      	bgt.n	80176e4 <__kernel_cos+0x104>
 80176c0:	4602      	mov	r2, r0
 80176c2:	460b      	mov	r3, r1
 80176c4:	4650      	mov	r0, sl
 80176c6:	4659      	mov	r1, fp
 80176c8:	f7e8 fdf6 	bl	80002b8 <__aeabi_dsub>
 80176cc:	460b      	mov	r3, r1
 80176ce:	4924      	ldr	r1, [pc, #144]	; (8017760 <__kernel_cos+0x180>)
 80176d0:	4602      	mov	r2, r0
 80176d2:	2000      	movs	r0, #0
 80176d4:	f7e8 fdf0 	bl	80002b8 <__aeabi_dsub>
 80176d8:	ecbd 8b02 	vpop	{d8}
 80176dc:	ec41 0b10 	vmov	d0, r0, r1
 80176e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176e4:	4b1f      	ldr	r3, [pc, #124]	; (8017764 <__kernel_cos+0x184>)
 80176e6:	491e      	ldr	r1, [pc, #120]	; (8017760 <__kernel_cos+0x180>)
 80176e8:	429e      	cmp	r6, r3
 80176ea:	bfcc      	ite	gt
 80176ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8017768 <__kernel_cos+0x188>)
 80176ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80176f2:	2400      	movs	r4, #0
 80176f4:	4622      	mov	r2, r4
 80176f6:	462b      	mov	r3, r5
 80176f8:	2000      	movs	r0, #0
 80176fa:	f7e8 fddd 	bl	80002b8 <__aeabi_dsub>
 80176fe:	4622      	mov	r2, r4
 8017700:	4606      	mov	r6, r0
 8017702:	460f      	mov	r7, r1
 8017704:	462b      	mov	r3, r5
 8017706:	4650      	mov	r0, sl
 8017708:	4659      	mov	r1, fp
 801770a:	f7e8 fdd5 	bl	80002b8 <__aeabi_dsub>
 801770e:	4642      	mov	r2, r8
 8017710:	464b      	mov	r3, r9
 8017712:	f7e8 fdd1 	bl	80002b8 <__aeabi_dsub>
 8017716:	4602      	mov	r2, r0
 8017718:	460b      	mov	r3, r1
 801771a:	4630      	mov	r0, r6
 801771c:	4639      	mov	r1, r7
 801771e:	e7d9      	b.n	80176d4 <__kernel_cos+0xf4>
 8017720:	2000      	movs	r0, #0
 8017722:	490f      	ldr	r1, [pc, #60]	; (8017760 <__kernel_cos+0x180>)
 8017724:	e7d8      	b.n	80176d8 <__kernel_cos+0xf8>
 8017726:	bf00      	nop
 8017728:	be8838d4 	.word	0xbe8838d4
 801772c:	bda8fae9 	.word	0xbda8fae9
 8017730:	bdb4b1c4 	.word	0xbdb4b1c4
 8017734:	3e21ee9e 	.word	0x3e21ee9e
 8017738:	809c52ad 	.word	0x809c52ad
 801773c:	3e927e4f 	.word	0x3e927e4f
 8017740:	19cb1590 	.word	0x19cb1590
 8017744:	3efa01a0 	.word	0x3efa01a0
 8017748:	16c15177 	.word	0x16c15177
 801774c:	3f56c16c 	.word	0x3f56c16c
 8017750:	5555554c 	.word	0x5555554c
 8017754:	3fa55555 	.word	0x3fa55555
 8017758:	3fe00000 	.word	0x3fe00000
 801775c:	3fd33332 	.word	0x3fd33332
 8017760:	3ff00000 	.word	0x3ff00000
 8017764:	3fe90000 	.word	0x3fe90000
 8017768:	3fd20000 	.word	0x3fd20000
 801776c:	00000000 	.word	0x00000000

08017770 <__kernel_rem_pio2>:
 8017770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017774:	ed2d 8b02 	vpush	{d8}
 8017778:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801777c:	1ed4      	subs	r4, r2, #3
 801777e:	9308      	str	r3, [sp, #32]
 8017780:	9101      	str	r1, [sp, #4]
 8017782:	4bc5      	ldr	r3, [pc, #788]	; (8017a98 <__kernel_rem_pio2+0x328>)
 8017784:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8017786:	9009      	str	r0, [sp, #36]	; 0x24
 8017788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801778c:	9304      	str	r3, [sp, #16]
 801778e:	9b08      	ldr	r3, [sp, #32]
 8017790:	3b01      	subs	r3, #1
 8017792:	9307      	str	r3, [sp, #28]
 8017794:	2318      	movs	r3, #24
 8017796:	fb94 f4f3 	sdiv	r4, r4, r3
 801779a:	f06f 0317 	mvn.w	r3, #23
 801779e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80177a2:	fb04 3303 	mla	r3, r4, r3, r3
 80177a6:	eb03 0a02 	add.w	sl, r3, r2
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	9a07      	ldr	r2, [sp, #28]
 80177ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8017a88 <__kernel_rem_pio2+0x318>
 80177b2:	eb03 0802 	add.w	r8, r3, r2
 80177b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80177b8:	1aa7      	subs	r7, r4, r2
 80177ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80177be:	ae22      	add	r6, sp, #136	; 0x88
 80177c0:	2500      	movs	r5, #0
 80177c2:	4545      	cmp	r5, r8
 80177c4:	dd13      	ble.n	80177ee <__kernel_rem_pio2+0x7e>
 80177c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8017a88 <__kernel_rem_pio2+0x318>
 80177ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80177ce:	2600      	movs	r6, #0
 80177d0:	9b04      	ldr	r3, [sp, #16]
 80177d2:	429e      	cmp	r6, r3
 80177d4:	dc32      	bgt.n	801783c <__kernel_rem_pio2+0xcc>
 80177d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177d8:	9302      	str	r3, [sp, #8]
 80177da:	9b08      	ldr	r3, [sp, #32]
 80177dc:	199d      	adds	r5, r3, r6
 80177de:	ab22      	add	r3, sp, #136	; 0x88
 80177e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80177e4:	9306      	str	r3, [sp, #24]
 80177e6:	ec59 8b18 	vmov	r8, r9, d8
 80177ea:	2700      	movs	r7, #0
 80177ec:	e01f      	b.n	801782e <__kernel_rem_pio2+0xbe>
 80177ee:	42ef      	cmn	r7, r5
 80177f0:	d407      	bmi.n	8017802 <__kernel_rem_pio2+0x92>
 80177f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80177f6:	f7e8 fead 	bl	8000554 <__aeabi_i2d>
 80177fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80177fe:	3501      	adds	r5, #1
 8017800:	e7df      	b.n	80177c2 <__kernel_rem_pio2+0x52>
 8017802:	ec51 0b18 	vmov	r0, r1, d8
 8017806:	e7f8      	b.n	80177fa <__kernel_rem_pio2+0x8a>
 8017808:	9906      	ldr	r1, [sp, #24]
 801780a:	9d02      	ldr	r5, [sp, #8]
 801780c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8017810:	9106      	str	r1, [sp, #24]
 8017812:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8017816:	9502      	str	r5, [sp, #8]
 8017818:	f7e8 ff06 	bl	8000628 <__aeabi_dmul>
 801781c:	4602      	mov	r2, r0
 801781e:	460b      	mov	r3, r1
 8017820:	4640      	mov	r0, r8
 8017822:	4649      	mov	r1, r9
 8017824:	f7e8 fd4a 	bl	80002bc <__adddf3>
 8017828:	3701      	adds	r7, #1
 801782a:	4680      	mov	r8, r0
 801782c:	4689      	mov	r9, r1
 801782e:	9b07      	ldr	r3, [sp, #28]
 8017830:	429f      	cmp	r7, r3
 8017832:	dde9      	ble.n	8017808 <__kernel_rem_pio2+0x98>
 8017834:	e8eb 8902 	strd	r8, r9, [fp], #8
 8017838:	3601      	adds	r6, #1
 801783a:	e7c9      	b.n	80177d0 <__kernel_rem_pio2+0x60>
 801783c:	9b04      	ldr	r3, [sp, #16]
 801783e:	aa0e      	add	r2, sp, #56	; 0x38
 8017840:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017844:	930c      	str	r3, [sp, #48]	; 0x30
 8017846:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8017848:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801784c:	9c04      	ldr	r4, [sp, #16]
 801784e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017850:	ab9a      	add	r3, sp, #616	; 0x268
 8017852:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8017856:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801785a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801785e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8017862:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017866:	ab9a      	add	r3, sp, #616	; 0x268
 8017868:	445b      	add	r3, fp
 801786a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801786e:	2500      	movs	r5, #0
 8017870:	1b63      	subs	r3, r4, r5
 8017872:	2b00      	cmp	r3, #0
 8017874:	dc78      	bgt.n	8017968 <__kernel_rem_pio2+0x1f8>
 8017876:	4650      	mov	r0, sl
 8017878:	ec49 8b10 	vmov	d0, r8, r9
 801787c:	f000 fc00 	bl	8018080 <scalbn>
 8017880:	ec57 6b10 	vmov	r6, r7, d0
 8017884:	2200      	movs	r2, #0
 8017886:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801788a:	ee10 0a10 	vmov	r0, s0
 801788e:	4639      	mov	r1, r7
 8017890:	f7e8 feca 	bl	8000628 <__aeabi_dmul>
 8017894:	ec41 0b10 	vmov	d0, r0, r1
 8017898:	f000 fb6e 	bl	8017f78 <floor>
 801789c:	2200      	movs	r2, #0
 801789e:	ec51 0b10 	vmov	r0, r1, d0
 80178a2:	4b7e      	ldr	r3, [pc, #504]	; (8017a9c <__kernel_rem_pio2+0x32c>)
 80178a4:	f7e8 fec0 	bl	8000628 <__aeabi_dmul>
 80178a8:	4602      	mov	r2, r0
 80178aa:	460b      	mov	r3, r1
 80178ac:	4630      	mov	r0, r6
 80178ae:	4639      	mov	r1, r7
 80178b0:	f7e8 fd02 	bl	80002b8 <__aeabi_dsub>
 80178b4:	460f      	mov	r7, r1
 80178b6:	4606      	mov	r6, r0
 80178b8:	f7e9 f966 	bl	8000b88 <__aeabi_d2iz>
 80178bc:	9006      	str	r0, [sp, #24]
 80178be:	f7e8 fe49 	bl	8000554 <__aeabi_i2d>
 80178c2:	4602      	mov	r2, r0
 80178c4:	460b      	mov	r3, r1
 80178c6:	4630      	mov	r0, r6
 80178c8:	4639      	mov	r1, r7
 80178ca:	f7e8 fcf5 	bl	80002b8 <__aeabi_dsub>
 80178ce:	f1ba 0f00 	cmp.w	sl, #0
 80178d2:	4606      	mov	r6, r0
 80178d4:	460f      	mov	r7, r1
 80178d6:	dd6c      	ble.n	80179b2 <__kernel_rem_pio2+0x242>
 80178d8:	1e62      	subs	r2, r4, #1
 80178da:	ab0e      	add	r3, sp, #56	; 0x38
 80178dc:	f1ca 0118 	rsb	r1, sl, #24
 80178e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80178e4:	9d06      	ldr	r5, [sp, #24]
 80178e6:	fa40 f301 	asr.w	r3, r0, r1
 80178ea:	441d      	add	r5, r3
 80178ec:	408b      	lsls	r3, r1
 80178ee:	1ac0      	subs	r0, r0, r3
 80178f0:	ab0e      	add	r3, sp, #56	; 0x38
 80178f2:	9506      	str	r5, [sp, #24]
 80178f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80178f8:	f1ca 0317 	rsb	r3, sl, #23
 80178fc:	fa40 f303 	asr.w	r3, r0, r3
 8017900:	9302      	str	r3, [sp, #8]
 8017902:	9b02      	ldr	r3, [sp, #8]
 8017904:	2b00      	cmp	r3, #0
 8017906:	dd62      	ble.n	80179ce <__kernel_rem_pio2+0x25e>
 8017908:	9b06      	ldr	r3, [sp, #24]
 801790a:	2200      	movs	r2, #0
 801790c:	3301      	adds	r3, #1
 801790e:	9306      	str	r3, [sp, #24]
 8017910:	4615      	mov	r5, r2
 8017912:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017916:	4294      	cmp	r4, r2
 8017918:	f300 8095 	bgt.w	8017a46 <__kernel_rem_pio2+0x2d6>
 801791c:	f1ba 0f00 	cmp.w	sl, #0
 8017920:	dd07      	ble.n	8017932 <__kernel_rem_pio2+0x1c2>
 8017922:	f1ba 0f01 	cmp.w	sl, #1
 8017926:	f000 80a2 	beq.w	8017a6e <__kernel_rem_pio2+0x2fe>
 801792a:	f1ba 0f02 	cmp.w	sl, #2
 801792e:	f000 80c1 	beq.w	8017ab4 <__kernel_rem_pio2+0x344>
 8017932:	9b02      	ldr	r3, [sp, #8]
 8017934:	2b02      	cmp	r3, #2
 8017936:	d14a      	bne.n	80179ce <__kernel_rem_pio2+0x25e>
 8017938:	4632      	mov	r2, r6
 801793a:	463b      	mov	r3, r7
 801793c:	2000      	movs	r0, #0
 801793e:	4958      	ldr	r1, [pc, #352]	; (8017aa0 <__kernel_rem_pio2+0x330>)
 8017940:	f7e8 fcba 	bl	80002b8 <__aeabi_dsub>
 8017944:	4606      	mov	r6, r0
 8017946:	460f      	mov	r7, r1
 8017948:	2d00      	cmp	r5, #0
 801794a:	d040      	beq.n	80179ce <__kernel_rem_pio2+0x25e>
 801794c:	4650      	mov	r0, sl
 801794e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8017a90 <__kernel_rem_pio2+0x320>
 8017952:	f000 fb95 	bl	8018080 <scalbn>
 8017956:	4630      	mov	r0, r6
 8017958:	4639      	mov	r1, r7
 801795a:	ec53 2b10 	vmov	r2, r3, d0
 801795e:	f7e8 fcab 	bl	80002b8 <__aeabi_dsub>
 8017962:	4606      	mov	r6, r0
 8017964:	460f      	mov	r7, r1
 8017966:	e032      	b.n	80179ce <__kernel_rem_pio2+0x25e>
 8017968:	2200      	movs	r2, #0
 801796a:	4b4e      	ldr	r3, [pc, #312]	; (8017aa4 <__kernel_rem_pio2+0x334>)
 801796c:	4640      	mov	r0, r8
 801796e:	4649      	mov	r1, r9
 8017970:	f7e8 fe5a 	bl	8000628 <__aeabi_dmul>
 8017974:	f7e9 f908 	bl	8000b88 <__aeabi_d2iz>
 8017978:	f7e8 fdec 	bl	8000554 <__aeabi_i2d>
 801797c:	2200      	movs	r2, #0
 801797e:	4b4a      	ldr	r3, [pc, #296]	; (8017aa8 <__kernel_rem_pio2+0x338>)
 8017980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017984:	f7e8 fe50 	bl	8000628 <__aeabi_dmul>
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	4640      	mov	r0, r8
 801798e:	4649      	mov	r1, r9
 8017990:	f7e8 fc92 	bl	80002b8 <__aeabi_dsub>
 8017994:	f7e9 f8f8 	bl	8000b88 <__aeabi_d2iz>
 8017998:	ab0e      	add	r3, sp, #56	; 0x38
 801799a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801799e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80179a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179a6:	f7e8 fc89 	bl	80002bc <__adddf3>
 80179aa:	3501      	adds	r5, #1
 80179ac:	4680      	mov	r8, r0
 80179ae:	4689      	mov	r9, r1
 80179b0:	e75e      	b.n	8017870 <__kernel_rem_pio2+0x100>
 80179b2:	d105      	bne.n	80179c0 <__kernel_rem_pio2+0x250>
 80179b4:	1e63      	subs	r3, r4, #1
 80179b6:	aa0e      	add	r2, sp, #56	; 0x38
 80179b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80179bc:	15c3      	asrs	r3, r0, #23
 80179be:	e79f      	b.n	8017900 <__kernel_rem_pio2+0x190>
 80179c0:	2200      	movs	r2, #0
 80179c2:	4b3a      	ldr	r3, [pc, #232]	; (8017aac <__kernel_rem_pio2+0x33c>)
 80179c4:	f7e9 f8b6 	bl	8000b34 <__aeabi_dcmpge>
 80179c8:	2800      	cmp	r0, #0
 80179ca:	d139      	bne.n	8017a40 <__kernel_rem_pio2+0x2d0>
 80179cc:	9002      	str	r0, [sp, #8]
 80179ce:	2200      	movs	r2, #0
 80179d0:	2300      	movs	r3, #0
 80179d2:	4630      	mov	r0, r6
 80179d4:	4639      	mov	r1, r7
 80179d6:	f7e9 f88f 	bl	8000af8 <__aeabi_dcmpeq>
 80179da:	2800      	cmp	r0, #0
 80179dc:	f000 80c7 	beq.w	8017b6e <__kernel_rem_pio2+0x3fe>
 80179e0:	1e65      	subs	r5, r4, #1
 80179e2:	462b      	mov	r3, r5
 80179e4:	2200      	movs	r2, #0
 80179e6:	9904      	ldr	r1, [sp, #16]
 80179e8:	428b      	cmp	r3, r1
 80179ea:	da6a      	bge.n	8017ac2 <__kernel_rem_pio2+0x352>
 80179ec:	2a00      	cmp	r2, #0
 80179ee:	f000 8088 	beq.w	8017b02 <__kernel_rem_pio2+0x392>
 80179f2:	ab0e      	add	r3, sp, #56	; 0x38
 80179f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80179f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	f000 80b4 	beq.w	8017b6a <__kernel_rem_pio2+0x3fa>
 8017a02:	4650      	mov	r0, sl
 8017a04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8017a90 <__kernel_rem_pio2+0x320>
 8017a08:	f000 fb3a 	bl	8018080 <scalbn>
 8017a0c:	00ec      	lsls	r4, r5, #3
 8017a0e:	ab72      	add	r3, sp, #456	; 0x1c8
 8017a10:	191e      	adds	r6, r3, r4
 8017a12:	ec59 8b10 	vmov	r8, r9, d0
 8017a16:	f106 0a08 	add.w	sl, r6, #8
 8017a1a:	462f      	mov	r7, r5
 8017a1c:	2f00      	cmp	r7, #0
 8017a1e:	f280 80df 	bge.w	8017be0 <__kernel_rem_pio2+0x470>
 8017a22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8017a88 <__kernel_rem_pio2+0x318>
 8017a26:	f04f 0a00 	mov.w	sl, #0
 8017a2a:	eba5 030a 	sub.w	r3, r5, sl
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f2c0 810a 	blt.w	8017c48 <__kernel_rem_pio2+0x4d8>
 8017a34:	f8df b078 	ldr.w	fp, [pc, #120]	; 8017ab0 <__kernel_rem_pio2+0x340>
 8017a38:	ec59 8b18 	vmov	r8, r9, d8
 8017a3c:	2700      	movs	r7, #0
 8017a3e:	e0f5      	b.n	8017c2c <__kernel_rem_pio2+0x4bc>
 8017a40:	2302      	movs	r3, #2
 8017a42:	9302      	str	r3, [sp, #8]
 8017a44:	e760      	b.n	8017908 <__kernel_rem_pio2+0x198>
 8017a46:	ab0e      	add	r3, sp, #56	; 0x38
 8017a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a4c:	b94d      	cbnz	r5, 8017a62 <__kernel_rem_pio2+0x2f2>
 8017a4e:	b12b      	cbz	r3, 8017a5c <__kernel_rem_pio2+0x2ec>
 8017a50:	a80e      	add	r0, sp, #56	; 0x38
 8017a52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8017a56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	3201      	adds	r2, #1
 8017a5e:	461d      	mov	r5, r3
 8017a60:	e759      	b.n	8017916 <__kernel_rem_pio2+0x1a6>
 8017a62:	a80e      	add	r0, sp, #56	; 0x38
 8017a64:	1acb      	subs	r3, r1, r3
 8017a66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8017a6a:	462b      	mov	r3, r5
 8017a6c:	e7f6      	b.n	8017a5c <__kernel_rem_pio2+0x2ec>
 8017a6e:	1e62      	subs	r2, r4, #1
 8017a70:	ab0e      	add	r3, sp, #56	; 0x38
 8017a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017a7a:	a90e      	add	r1, sp, #56	; 0x38
 8017a7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017a80:	e757      	b.n	8017932 <__kernel_rem_pio2+0x1c2>
 8017a82:	bf00      	nop
 8017a84:	f3af 8000 	nop.w
	...
 8017a94:	3ff00000 	.word	0x3ff00000
 8017a98:	0801a018 	.word	0x0801a018
 8017a9c:	40200000 	.word	0x40200000
 8017aa0:	3ff00000 	.word	0x3ff00000
 8017aa4:	3e700000 	.word	0x3e700000
 8017aa8:	41700000 	.word	0x41700000
 8017aac:	3fe00000 	.word	0x3fe00000
 8017ab0:	08019fd8 	.word	0x08019fd8
 8017ab4:	1e62      	subs	r2, r4, #1
 8017ab6:	ab0e      	add	r3, sp, #56	; 0x38
 8017ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017abc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017ac0:	e7db      	b.n	8017a7a <__kernel_rem_pio2+0x30a>
 8017ac2:	a90e      	add	r1, sp, #56	; 0x38
 8017ac4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8017ac8:	3b01      	subs	r3, #1
 8017aca:	430a      	orrs	r2, r1
 8017acc:	e78b      	b.n	80179e6 <__kernel_rem_pio2+0x276>
 8017ace:	3301      	adds	r3, #1
 8017ad0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8017ad4:	2900      	cmp	r1, #0
 8017ad6:	d0fa      	beq.n	8017ace <__kernel_rem_pio2+0x35e>
 8017ad8:	9a08      	ldr	r2, [sp, #32]
 8017ada:	4422      	add	r2, r4
 8017adc:	00d2      	lsls	r2, r2, #3
 8017ade:	a922      	add	r1, sp, #136	; 0x88
 8017ae0:	18e3      	adds	r3, r4, r3
 8017ae2:	9206      	str	r2, [sp, #24]
 8017ae4:	440a      	add	r2, r1
 8017ae6:	9302      	str	r3, [sp, #8]
 8017ae8:	f10b 0108 	add.w	r1, fp, #8
 8017aec:	f102 0308 	add.w	r3, r2, #8
 8017af0:	1c66      	adds	r6, r4, #1
 8017af2:	910a      	str	r1, [sp, #40]	; 0x28
 8017af4:	2500      	movs	r5, #0
 8017af6:	930d      	str	r3, [sp, #52]	; 0x34
 8017af8:	9b02      	ldr	r3, [sp, #8]
 8017afa:	42b3      	cmp	r3, r6
 8017afc:	da04      	bge.n	8017b08 <__kernel_rem_pio2+0x398>
 8017afe:	461c      	mov	r4, r3
 8017b00:	e6a6      	b.n	8017850 <__kernel_rem_pio2+0xe0>
 8017b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b04:	2301      	movs	r3, #1
 8017b06:	e7e3      	b.n	8017ad0 <__kernel_rem_pio2+0x360>
 8017b08:	9b06      	ldr	r3, [sp, #24]
 8017b0a:	18ef      	adds	r7, r5, r3
 8017b0c:	ab22      	add	r3, sp, #136	; 0x88
 8017b0e:	441f      	add	r7, r3
 8017b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017b16:	f7e8 fd1d 	bl	8000554 <__aeabi_i2d>
 8017b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b1c:	461c      	mov	r4, r3
 8017b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b20:	e9c7 0100 	strd	r0, r1, [r7]
 8017b24:	eb03 0b05 	add.w	fp, r3, r5
 8017b28:	2700      	movs	r7, #0
 8017b2a:	f04f 0800 	mov.w	r8, #0
 8017b2e:	f04f 0900 	mov.w	r9, #0
 8017b32:	9b07      	ldr	r3, [sp, #28]
 8017b34:	429f      	cmp	r7, r3
 8017b36:	dd08      	ble.n	8017b4a <__kernel_rem_pio2+0x3da>
 8017b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b3a:	aa72      	add	r2, sp, #456	; 0x1c8
 8017b3c:	18eb      	adds	r3, r5, r3
 8017b3e:	4413      	add	r3, r2
 8017b40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8017b44:	3601      	adds	r6, #1
 8017b46:	3508      	adds	r5, #8
 8017b48:	e7d6      	b.n	8017af8 <__kernel_rem_pio2+0x388>
 8017b4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8017b4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8017b52:	f7e8 fd69 	bl	8000628 <__aeabi_dmul>
 8017b56:	4602      	mov	r2, r0
 8017b58:	460b      	mov	r3, r1
 8017b5a:	4640      	mov	r0, r8
 8017b5c:	4649      	mov	r1, r9
 8017b5e:	f7e8 fbad 	bl	80002bc <__adddf3>
 8017b62:	3701      	adds	r7, #1
 8017b64:	4680      	mov	r8, r0
 8017b66:	4689      	mov	r9, r1
 8017b68:	e7e3      	b.n	8017b32 <__kernel_rem_pio2+0x3c2>
 8017b6a:	3d01      	subs	r5, #1
 8017b6c:	e741      	b.n	80179f2 <__kernel_rem_pio2+0x282>
 8017b6e:	f1ca 0000 	rsb	r0, sl, #0
 8017b72:	ec47 6b10 	vmov	d0, r6, r7
 8017b76:	f000 fa83 	bl	8018080 <scalbn>
 8017b7a:	ec57 6b10 	vmov	r6, r7, d0
 8017b7e:	2200      	movs	r2, #0
 8017b80:	4b99      	ldr	r3, [pc, #612]	; (8017de8 <__kernel_rem_pio2+0x678>)
 8017b82:	ee10 0a10 	vmov	r0, s0
 8017b86:	4639      	mov	r1, r7
 8017b88:	f7e8 ffd4 	bl	8000b34 <__aeabi_dcmpge>
 8017b8c:	b1f8      	cbz	r0, 8017bce <__kernel_rem_pio2+0x45e>
 8017b8e:	2200      	movs	r2, #0
 8017b90:	4b96      	ldr	r3, [pc, #600]	; (8017dec <__kernel_rem_pio2+0x67c>)
 8017b92:	4630      	mov	r0, r6
 8017b94:	4639      	mov	r1, r7
 8017b96:	f7e8 fd47 	bl	8000628 <__aeabi_dmul>
 8017b9a:	f7e8 fff5 	bl	8000b88 <__aeabi_d2iz>
 8017b9e:	4680      	mov	r8, r0
 8017ba0:	f7e8 fcd8 	bl	8000554 <__aeabi_i2d>
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	4b90      	ldr	r3, [pc, #576]	; (8017de8 <__kernel_rem_pio2+0x678>)
 8017ba8:	f7e8 fd3e 	bl	8000628 <__aeabi_dmul>
 8017bac:	460b      	mov	r3, r1
 8017bae:	4602      	mov	r2, r0
 8017bb0:	4639      	mov	r1, r7
 8017bb2:	4630      	mov	r0, r6
 8017bb4:	f7e8 fb80 	bl	80002b8 <__aeabi_dsub>
 8017bb8:	f7e8 ffe6 	bl	8000b88 <__aeabi_d2iz>
 8017bbc:	1c65      	adds	r5, r4, #1
 8017bbe:	ab0e      	add	r3, sp, #56	; 0x38
 8017bc0:	f10a 0a18 	add.w	sl, sl, #24
 8017bc4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017bc8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8017bcc:	e719      	b.n	8017a02 <__kernel_rem_pio2+0x292>
 8017bce:	4630      	mov	r0, r6
 8017bd0:	4639      	mov	r1, r7
 8017bd2:	f7e8 ffd9 	bl	8000b88 <__aeabi_d2iz>
 8017bd6:	ab0e      	add	r3, sp, #56	; 0x38
 8017bd8:	4625      	mov	r5, r4
 8017bda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017bde:	e710      	b.n	8017a02 <__kernel_rem_pio2+0x292>
 8017be0:	ab0e      	add	r3, sp, #56	; 0x38
 8017be2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8017be6:	f7e8 fcb5 	bl	8000554 <__aeabi_i2d>
 8017bea:	4642      	mov	r2, r8
 8017bec:	464b      	mov	r3, r9
 8017bee:	f7e8 fd1b 	bl	8000628 <__aeabi_dmul>
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8017bf8:	4b7c      	ldr	r3, [pc, #496]	; (8017dec <__kernel_rem_pio2+0x67c>)
 8017bfa:	4640      	mov	r0, r8
 8017bfc:	4649      	mov	r1, r9
 8017bfe:	f7e8 fd13 	bl	8000628 <__aeabi_dmul>
 8017c02:	3f01      	subs	r7, #1
 8017c04:	4680      	mov	r8, r0
 8017c06:	4689      	mov	r9, r1
 8017c08:	e708      	b.n	8017a1c <__kernel_rem_pio2+0x2ac>
 8017c0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8017c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8017c16:	f7e8 fd07 	bl	8000628 <__aeabi_dmul>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	4640      	mov	r0, r8
 8017c20:	4649      	mov	r1, r9
 8017c22:	f7e8 fb4b 	bl	80002bc <__adddf3>
 8017c26:	3701      	adds	r7, #1
 8017c28:	4680      	mov	r8, r0
 8017c2a:	4689      	mov	r9, r1
 8017c2c:	9b04      	ldr	r3, [sp, #16]
 8017c2e:	429f      	cmp	r7, r3
 8017c30:	dc01      	bgt.n	8017c36 <__kernel_rem_pio2+0x4c6>
 8017c32:	45ba      	cmp	sl, r7
 8017c34:	dae9      	bge.n	8017c0a <__kernel_rem_pio2+0x49a>
 8017c36:	ab4a      	add	r3, sp, #296	; 0x128
 8017c38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017c3c:	e9c3 8900 	strd	r8, r9, [r3]
 8017c40:	f10a 0a01 	add.w	sl, sl, #1
 8017c44:	3e08      	subs	r6, #8
 8017c46:	e6f0      	b.n	8017a2a <__kernel_rem_pio2+0x2ba>
 8017c48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8017c4a:	2b03      	cmp	r3, #3
 8017c4c:	d85b      	bhi.n	8017d06 <__kernel_rem_pio2+0x596>
 8017c4e:	e8df f003 	tbb	[pc, r3]
 8017c52:	264a      	.short	0x264a
 8017c54:	0226      	.short	0x0226
 8017c56:	ab9a      	add	r3, sp, #616	; 0x268
 8017c58:	441c      	add	r4, r3
 8017c5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017c5e:	46a2      	mov	sl, r4
 8017c60:	46ab      	mov	fp, r5
 8017c62:	f1bb 0f00 	cmp.w	fp, #0
 8017c66:	dc6c      	bgt.n	8017d42 <__kernel_rem_pio2+0x5d2>
 8017c68:	46a2      	mov	sl, r4
 8017c6a:	46ab      	mov	fp, r5
 8017c6c:	f1bb 0f01 	cmp.w	fp, #1
 8017c70:	f300 8086 	bgt.w	8017d80 <__kernel_rem_pio2+0x610>
 8017c74:	2000      	movs	r0, #0
 8017c76:	2100      	movs	r1, #0
 8017c78:	2d01      	cmp	r5, #1
 8017c7a:	f300 80a0 	bgt.w	8017dbe <__kernel_rem_pio2+0x64e>
 8017c7e:	9b02      	ldr	r3, [sp, #8]
 8017c80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8017c84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	f040 809e 	bne.w	8017dca <__kernel_rem_pio2+0x65a>
 8017c8e:	9b01      	ldr	r3, [sp, #4]
 8017c90:	e9c3 7800 	strd	r7, r8, [r3]
 8017c94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017c98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017c9c:	e033      	b.n	8017d06 <__kernel_rem_pio2+0x596>
 8017c9e:	3408      	adds	r4, #8
 8017ca0:	ab4a      	add	r3, sp, #296	; 0x128
 8017ca2:	441c      	add	r4, r3
 8017ca4:	462e      	mov	r6, r5
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	2100      	movs	r1, #0
 8017caa:	2e00      	cmp	r6, #0
 8017cac:	da3a      	bge.n	8017d24 <__kernel_rem_pio2+0x5b4>
 8017cae:	9b02      	ldr	r3, [sp, #8]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d03d      	beq.n	8017d30 <__kernel_rem_pio2+0x5c0>
 8017cb4:	4602      	mov	r2, r0
 8017cb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017cba:	9c01      	ldr	r4, [sp, #4]
 8017cbc:	e9c4 2300 	strd	r2, r3, [r4]
 8017cc0:	4602      	mov	r2, r0
 8017cc2:	460b      	mov	r3, r1
 8017cc4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8017cc8:	f7e8 faf6 	bl	80002b8 <__aeabi_dsub>
 8017ccc:	ae4c      	add	r6, sp, #304	; 0x130
 8017cce:	2401      	movs	r4, #1
 8017cd0:	42a5      	cmp	r5, r4
 8017cd2:	da30      	bge.n	8017d36 <__kernel_rem_pio2+0x5c6>
 8017cd4:	9b02      	ldr	r3, [sp, #8]
 8017cd6:	b113      	cbz	r3, 8017cde <__kernel_rem_pio2+0x56e>
 8017cd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017cdc:	4619      	mov	r1, r3
 8017cde:	9b01      	ldr	r3, [sp, #4]
 8017ce0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017ce4:	e00f      	b.n	8017d06 <__kernel_rem_pio2+0x596>
 8017ce6:	ab9a      	add	r3, sp, #616	; 0x268
 8017ce8:	441c      	add	r4, r3
 8017cea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8017cee:	2000      	movs	r0, #0
 8017cf0:	2100      	movs	r1, #0
 8017cf2:	2d00      	cmp	r5, #0
 8017cf4:	da10      	bge.n	8017d18 <__kernel_rem_pio2+0x5a8>
 8017cf6:	9b02      	ldr	r3, [sp, #8]
 8017cf8:	b113      	cbz	r3, 8017d00 <__kernel_rem_pio2+0x590>
 8017cfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017cfe:	4619      	mov	r1, r3
 8017d00:	9b01      	ldr	r3, [sp, #4]
 8017d02:	e9c3 0100 	strd	r0, r1, [r3]
 8017d06:	9b06      	ldr	r3, [sp, #24]
 8017d08:	f003 0007 	and.w	r0, r3, #7
 8017d0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8017d10:	ecbd 8b02 	vpop	{d8}
 8017d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d18:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017d1c:	f7e8 face 	bl	80002bc <__adddf3>
 8017d20:	3d01      	subs	r5, #1
 8017d22:	e7e6      	b.n	8017cf2 <__kernel_rem_pio2+0x582>
 8017d24:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017d28:	f7e8 fac8 	bl	80002bc <__adddf3>
 8017d2c:	3e01      	subs	r6, #1
 8017d2e:	e7bc      	b.n	8017caa <__kernel_rem_pio2+0x53a>
 8017d30:	4602      	mov	r2, r0
 8017d32:	460b      	mov	r3, r1
 8017d34:	e7c1      	b.n	8017cba <__kernel_rem_pio2+0x54a>
 8017d36:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8017d3a:	f7e8 fabf 	bl	80002bc <__adddf3>
 8017d3e:	3401      	adds	r4, #1
 8017d40:	e7c6      	b.n	8017cd0 <__kernel_rem_pio2+0x560>
 8017d42:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8017d46:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017d4a:	4640      	mov	r0, r8
 8017d4c:	ec53 2b17 	vmov	r2, r3, d7
 8017d50:	4649      	mov	r1, r9
 8017d52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017d56:	f7e8 fab1 	bl	80002bc <__adddf3>
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	460b      	mov	r3, r1
 8017d5e:	4606      	mov	r6, r0
 8017d60:	460f      	mov	r7, r1
 8017d62:	4640      	mov	r0, r8
 8017d64:	4649      	mov	r1, r9
 8017d66:	f7e8 faa7 	bl	80002b8 <__aeabi_dsub>
 8017d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017d6e:	f7e8 faa5 	bl	80002bc <__adddf3>
 8017d72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017d76:	e9ca 0100 	strd	r0, r1, [sl]
 8017d7a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8017d7e:	e770      	b.n	8017c62 <__kernel_rem_pio2+0x4f2>
 8017d80:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8017d84:	ed3a 7b02 	vldmdb	sl!, {d7}
 8017d88:	4630      	mov	r0, r6
 8017d8a:	ec53 2b17 	vmov	r2, r3, d7
 8017d8e:	4639      	mov	r1, r7
 8017d90:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017d94:	f7e8 fa92 	bl	80002bc <__adddf3>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	460b      	mov	r3, r1
 8017d9c:	4680      	mov	r8, r0
 8017d9e:	4689      	mov	r9, r1
 8017da0:	4630      	mov	r0, r6
 8017da2:	4639      	mov	r1, r7
 8017da4:	f7e8 fa88 	bl	80002b8 <__aeabi_dsub>
 8017da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017dac:	f7e8 fa86 	bl	80002bc <__adddf3>
 8017db0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017db4:	e9ca 0100 	strd	r0, r1, [sl]
 8017db8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8017dbc:	e756      	b.n	8017c6c <__kernel_rem_pio2+0x4fc>
 8017dbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017dc2:	f7e8 fa7b 	bl	80002bc <__adddf3>
 8017dc6:	3d01      	subs	r5, #1
 8017dc8:	e756      	b.n	8017c78 <__kernel_rem_pio2+0x508>
 8017dca:	9b01      	ldr	r3, [sp, #4]
 8017dcc:	9a01      	ldr	r2, [sp, #4]
 8017dce:	601f      	str	r7, [r3, #0]
 8017dd0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8017dd4:	605c      	str	r4, [r3, #4]
 8017dd6:	609d      	str	r5, [r3, #8]
 8017dd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017ddc:	60d3      	str	r3, [r2, #12]
 8017dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017de2:	6110      	str	r0, [r2, #16]
 8017de4:	6153      	str	r3, [r2, #20]
 8017de6:	e78e      	b.n	8017d06 <__kernel_rem_pio2+0x596>
 8017de8:	41700000 	.word	0x41700000
 8017dec:	3e700000 	.word	0x3e700000

08017df0 <__kernel_sin>:
 8017df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017df4:	ec55 4b10 	vmov	r4, r5, d0
 8017df8:	b085      	sub	sp, #20
 8017dfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017dfe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017e02:	ed8d 1b00 	vstr	d1, [sp]
 8017e06:	9002      	str	r0, [sp, #8]
 8017e08:	da06      	bge.n	8017e18 <__kernel_sin+0x28>
 8017e0a:	ee10 0a10 	vmov	r0, s0
 8017e0e:	4629      	mov	r1, r5
 8017e10:	f7e8 feba 	bl	8000b88 <__aeabi_d2iz>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d051      	beq.n	8017ebc <__kernel_sin+0xcc>
 8017e18:	4622      	mov	r2, r4
 8017e1a:	462b      	mov	r3, r5
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	4629      	mov	r1, r5
 8017e20:	f7e8 fc02 	bl	8000628 <__aeabi_dmul>
 8017e24:	4682      	mov	sl, r0
 8017e26:	468b      	mov	fp, r1
 8017e28:	4602      	mov	r2, r0
 8017e2a:	460b      	mov	r3, r1
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	4629      	mov	r1, r5
 8017e30:	f7e8 fbfa 	bl	8000628 <__aeabi_dmul>
 8017e34:	a341      	add	r3, pc, #260	; (adr r3, 8017f3c <__kernel_sin+0x14c>)
 8017e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e3a:	4680      	mov	r8, r0
 8017e3c:	4689      	mov	r9, r1
 8017e3e:	4650      	mov	r0, sl
 8017e40:	4659      	mov	r1, fp
 8017e42:	f7e8 fbf1 	bl	8000628 <__aeabi_dmul>
 8017e46:	a33f      	add	r3, pc, #252	; (adr r3, 8017f44 <__kernel_sin+0x154>)
 8017e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e4c:	f7e8 fa34 	bl	80002b8 <__aeabi_dsub>
 8017e50:	4652      	mov	r2, sl
 8017e52:	465b      	mov	r3, fp
 8017e54:	f7e8 fbe8 	bl	8000628 <__aeabi_dmul>
 8017e58:	a33c      	add	r3, pc, #240	; (adr r3, 8017f4c <__kernel_sin+0x15c>)
 8017e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e5e:	f7e8 fa2d 	bl	80002bc <__adddf3>
 8017e62:	4652      	mov	r2, sl
 8017e64:	465b      	mov	r3, fp
 8017e66:	f7e8 fbdf 	bl	8000628 <__aeabi_dmul>
 8017e6a:	a33a      	add	r3, pc, #232	; (adr r3, 8017f54 <__kernel_sin+0x164>)
 8017e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e70:	f7e8 fa22 	bl	80002b8 <__aeabi_dsub>
 8017e74:	4652      	mov	r2, sl
 8017e76:	465b      	mov	r3, fp
 8017e78:	f7e8 fbd6 	bl	8000628 <__aeabi_dmul>
 8017e7c:	a337      	add	r3, pc, #220	; (adr r3, 8017f5c <__kernel_sin+0x16c>)
 8017e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e82:	f7e8 fa1b 	bl	80002bc <__adddf3>
 8017e86:	9b02      	ldr	r3, [sp, #8]
 8017e88:	4606      	mov	r6, r0
 8017e8a:	460f      	mov	r7, r1
 8017e8c:	b9db      	cbnz	r3, 8017ec6 <__kernel_sin+0xd6>
 8017e8e:	4602      	mov	r2, r0
 8017e90:	460b      	mov	r3, r1
 8017e92:	4650      	mov	r0, sl
 8017e94:	4659      	mov	r1, fp
 8017e96:	f7e8 fbc7 	bl	8000628 <__aeabi_dmul>
 8017e9a:	a325      	add	r3, pc, #148	; (adr r3, 8017f30 <__kernel_sin+0x140>)
 8017e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ea0:	f7e8 fa0a 	bl	80002b8 <__aeabi_dsub>
 8017ea4:	4642      	mov	r2, r8
 8017ea6:	464b      	mov	r3, r9
 8017ea8:	f7e8 fbbe 	bl	8000628 <__aeabi_dmul>
 8017eac:	4602      	mov	r2, r0
 8017eae:	460b      	mov	r3, r1
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	4629      	mov	r1, r5
 8017eb4:	f7e8 fa02 	bl	80002bc <__adddf3>
 8017eb8:	4604      	mov	r4, r0
 8017eba:	460d      	mov	r5, r1
 8017ebc:	ec45 4b10 	vmov	d0, r4, r5
 8017ec0:	b005      	add	sp, #20
 8017ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	4b1b      	ldr	r3, [pc, #108]	; (8017f38 <__kernel_sin+0x148>)
 8017eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ece:	f7e8 fbab 	bl	8000628 <__aeabi_dmul>
 8017ed2:	4632      	mov	r2, r6
 8017ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ed8:	463b      	mov	r3, r7
 8017eda:	4640      	mov	r0, r8
 8017edc:	4649      	mov	r1, r9
 8017ede:	f7e8 fba3 	bl	8000628 <__aeabi_dmul>
 8017ee2:	4602      	mov	r2, r0
 8017ee4:	460b      	mov	r3, r1
 8017ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017eea:	f7e8 f9e5 	bl	80002b8 <__aeabi_dsub>
 8017eee:	4652      	mov	r2, sl
 8017ef0:	465b      	mov	r3, fp
 8017ef2:	f7e8 fb99 	bl	8000628 <__aeabi_dmul>
 8017ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017efa:	f7e8 f9dd 	bl	80002b8 <__aeabi_dsub>
 8017efe:	a30c      	add	r3, pc, #48	; (adr r3, 8017f30 <__kernel_sin+0x140>)
 8017f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f04:	4606      	mov	r6, r0
 8017f06:	460f      	mov	r7, r1
 8017f08:	4640      	mov	r0, r8
 8017f0a:	4649      	mov	r1, r9
 8017f0c:	f7e8 fb8c 	bl	8000628 <__aeabi_dmul>
 8017f10:	4602      	mov	r2, r0
 8017f12:	460b      	mov	r3, r1
 8017f14:	4630      	mov	r0, r6
 8017f16:	4639      	mov	r1, r7
 8017f18:	f7e8 f9d0 	bl	80002bc <__adddf3>
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	460b      	mov	r3, r1
 8017f20:	4620      	mov	r0, r4
 8017f22:	4629      	mov	r1, r5
 8017f24:	f7e8 f9c8 	bl	80002b8 <__aeabi_dsub>
 8017f28:	e7c6      	b.n	8017eb8 <__kernel_sin+0xc8>
 8017f2a:	bf00      	nop
 8017f2c:	f3af 8000 	nop.w
 8017f30:	55555549 	.word	0x55555549
 8017f34:	3fc55555 	.word	0x3fc55555
 8017f38:	3fe00000 	.word	0x3fe00000
 8017f3c:	5acfd57c 	.word	0x5acfd57c
 8017f40:	3de5d93a 	.word	0x3de5d93a
 8017f44:	8a2b9ceb 	.word	0x8a2b9ceb
 8017f48:	3e5ae5e6 	.word	0x3e5ae5e6
 8017f4c:	57b1fe7d 	.word	0x57b1fe7d
 8017f50:	3ec71de3 	.word	0x3ec71de3
 8017f54:	19c161d5 	.word	0x19c161d5
 8017f58:	3f2a01a0 	.word	0x3f2a01a0
 8017f5c:	1110f8a6 	.word	0x1110f8a6
 8017f60:	3f811111 	.word	0x3f811111

08017f64 <fabs>:
 8017f64:	ec51 0b10 	vmov	r0, r1, d0
 8017f68:	ee10 2a10 	vmov	r2, s0
 8017f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017f70:	ec43 2b10 	vmov	d0, r2, r3
 8017f74:	4770      	bx	lr
	...

08017f78 <floor>:
 8017f78:	ec51 0b10 	vmov	r0, r1, d0
 8017f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8017f84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017f88:	2e13      	cmp	r6, #19
 8017f8a:	460c      	mov	r4, r1
 8017f8c:	ee10 5a10 	vmov	r5, s0
 8017f90:	4680      	mov	r8, r0
 8017f92:	dc34      	bgt.n	8017ffe <floor+0x86>
 8017f94:	2e00      	cmp	r6, #0
 8017f96:	da16      	bge.n	8017fc6 <floor+0x4e>
 8017f98:	a335      	add	r3, pc, #212	; (adr r3, 8018070 <floor+0xf8>)
 8017f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9e:	f7e8 f98d 	bl	80002bc <__adddf3>
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	f7e8 fdcf 	bl	8000b48 <__aeabi_dcmpgt>
 8017faa:	b148      	cbz	r0, 8017fc0 <floor+0x48>
 8017fac:	2c00      	cmp	r4, #0
 8017fae:	da59      	bge.n	8018064 <floor+0xec>
 8017fb0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8017fb4:	4a30      	ldr	r2, [pc, #192]	; (8018078 <floor+0x100>)
 8017fb6:	432b      	orrs	r3, r5
 8017fb8:	2500      	movs	r5, #0
 8017fba:	42ab      	cmp	r3, r5
 8017fbc:	bf18      	it	ne
 8017fbe:	4614      	movne	r4, r2
 8017fc0:	4621      	mov	r1, r4
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	e025      	b.n	8018012 <floor+0x9a>
 8017fc6:	4f2d      	ldr	r7, [pc, #180]	; (801807c <floor+0x104>)
 8017fc8:	4137      	asrs	r7, r6
 8017fca:	ea01 0307 	and.w	r3, r1, r7
 8017fce:	4303      	orrs	r3, r0
 8017fd0:	d01f      	beq.n	8018012 <floor+0x9a>
 8017fd2:	a327      	add	r3, pc, #156	; (adr r3, 8018070 <floor+0xf8>)
 8017fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fd8:	f7e8 f970 	bl	80002bc <__adddf3>
 8017fdc:	2200      	movs	r2, #0
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f7e8 fdb2 	bl	8000b48 <__aeabi_dcmpgt>
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	d0eb      	beq.n	8017fc0 <floor+0x48>
 8017fe8:	2c00      	cmp	r4, #0
 8017fea:	bfbe      	ittt	lt
 8017fec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8017ff0:	fa43 f606 	asrlt.w	r6, r3, r6
 8017ff4:	19a4      	addlt	r4, r4, r6
 8017ff6:	ea24 0407 	bic.w	r4, r4, r7
 8017ffa:	2500      	movs	r5, #0
 8017ffc:	e7e0      	b.n	8017fc0 <floor+0x48>
 8017ffe:	2e33      	cmp	r6, #51	; 0x33
 8018000:	dd0b      	ble.n	801801a <floor+0xa2>
 8018002:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018006:	d104      	bne.n	8018012 <floor+0x9a>
 8018008:	ee10 2a10 	vmov	r2, s0
 801800c:	460b      	mov	r3, r1
 801800e:	f7e8 f955 	bl	80002bc <__adddf3>
 8018012:	ec41 0b10 	vmov	d0, r0, r1
 8018016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801801a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801801e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018022:	fa23 f707 	lsr.w	r7, r3, r7
 8018026:	4207      	tst	r7, r0
 8018028:	d0f3      	beq.n	8018012 <floor+0x9a>
 801802a:	a311      	add	r3, pc, #68	; (adr r3, 8018070 <floor+0xf8>)
 801802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018030:	f7e8 f944 	bl	80002bc <__adddf3>
 8018034:	2200      	movs	r2, #0
 8018036:	2300      	movs	r3, #0
 8018038:	f7e8 fd86 	bl	8000b48 <__aeabi_dcmpgt>
 801803c:	2800      	cmp	r0, #0
 801803e:	d0bf      	beq.n	8017fc0 <floor+0x48>
 8018040:	2c00      	cmp	r4, #0
 8018042:	da02      	bge.n	801804a <floor+0xd2>
 8018044:	2e14      	cmp	r6, #20
 8018046:	d103      	bne.n	8018050 <floor+0xd8>
 8018048:	3401      	adds	r4, #1
 801804a:	ea25 0507 	bic.w	r5, r5, r7
 801804e:	e7b7      	b.n	8017fc0 <floor+0x48>
 8018050:	2301      	movs	r3, #1
 8018052:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018056:	fa03 f606 	lsl.w	r6, r3, r6
 801805a:	4435      	add	r5, r6
 801805c:	4545      	cmp	r5, r8
 801805e:	bf38      	it	cc
 8018060:	18e4      	addcc	r4, r4, r3
 8018062:	e7f2      	b.n	801804a <floor+0xd2>
 8018064:	2500      	movs	r5, #0
 8018066:	462c      	mov	r4, r5
 8018068:	e7aa      	b.n	8017fc0 <floor+0x48>
 801806a:	bf00      	nop
 801806c:	f3af 8000 	nop.w
 8018070:	8800759c 	.word	0x8800759c
 8018074:	7e37e43c 	.word	0x7e37e43c
 8018078:	bff00000 	.word	0xbff00000
 801807c:	000fffff 	.word	0x000fffff

08018080 <scalbn>:
 8018080:	b570      	push	{r4, r5, r6, lr}
 8018082:	ec55 4b10 	vmov	r4, r5, d0
 8018086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801808a:	4606      	mov	r6, r0
 801808c:	462b      	mov	r3, r5
 801808e:	b9aa      	cbnz	r2, 80180bc <scalbn+0x3c>
 8018090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018094:	4323      	orrs	r3, r4
 8018096:	d03b      	beq.n	8018110 <scalbn+0x90>
 8018098:	4b31      	ldr	r3, [pc, #196]	; (8018160 <scalbn+0xe0>)
 801809a:	4629      	mov	r1, r5
 801809c:	2200      	movs	r2, #0
 801809e:	ee10 0a10 	vmov	r0, s0
 80180a2:	f7e8 fac1 	bl	8000628 <__aeabi_dmul>
 80180a6:	4b2f      	ldr	r3, [pc, #188]	; (8018164 <scalbn+0xe4>)
 80180a8:	429e      	cmp	r6, r3
 80180aa:	4604      	mov	r4, r0
 80180ac:	460d      	mov	r5, r1
 80180ae:	da12      	bge.n	80180d6 <scalbn+0x56>
 80180b0:	a327      	add	r3, pc, #156	; (adr r3, 8018150 <scalbn+0xd0>)
 80180b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b6:	f7e8 fab7 	bl	8000628 <__aeabi_dmul>
 80180ba:	e009      	b.n	80180d0 <scalbn+0x50>
 80180bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80180c0:	428a      	cmp	r2, r1
 80180c2:	d10c      	bne.n	80180de <scalbn+0x5e>
 80180c4:	ee10 2a10 	vmov	r2, s0
 80180c8:	4620      	mov	r0, r4
 80180ca:	4629      	mov	r1, r5
 80180cc:	f7e8 f8f6 	bl	80002bc <__adddf3>
 80180d0:	4604      	mov	r4, r0
 80180d2:	460d      	mov	r5, r1
 80180d4:	e01c      	b.n	8018110 <scalbn+0x90>
 80180d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80180da:	460b      	mov	r3, r1
 80180dc:	3a36      	subs	r2, #54	; 0x36
 80180de:	4432      	add	r2, r6
 80180e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80180e4:	428a      	cmp	r2, r1
 80180e6:	dd0b      	ble.n	8018100 <scalbn+0x80>
 80180e8:	ec45 4b11 	vmov	d1, r4, r5
 80180ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018158 <scalbn+0xd8>
 80180f0:	f000 f83c 	bl	801816c <copysign>
 80180f4:	a318      	add	r3, pc, #96	; (adr r3, 8018158 <scalbn+0xd8>)
 80180f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fa:	ec51 0b10 	vmov	r0, r1, d0
 80180fe:	e7da      	b.n	80180b6 <scalbn+0x36>
 8018100:	2a00      	cmp	r2, #0
 8018102:	dd08      	ble.n	8018116 <scalbn+0x96>
 8018104:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801810c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018110:	ec45 4b10 	vmov	d0, r4, r5
 8018114:	bd70      	pop	{r4, r5, r6, pc}
 8018116:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801811a:	da0d      	bge.n	8018138 <scalbn+0xb8>
 801811c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018120:	429e      	cmp	r6, r3
 8018122:	ec45 4b11 	vmov	d1, r4, r5
 8018126:	dce1      	bgt.n	80180ec <scalbn+0x6c>
 8018128:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8018150 <scalbn+0xd0>
 801812c:	f000 f81e 	bl	801816c <copysign>
 8018130:	a307      	add	r3, pc, #28	; (adr r3, 8018150 <scalbn+0xd0>)
 8018132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018136:	e7e0      	b.n	80180fa <scalbn+0x7a>
 8018138:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801813c:	3236      	adds	r2, #54	; 0x36
 801813e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018146:	4620      	mov	r0, r4
 8018148:	4629      	mov	r1, r5
 801814a:	2200      	movs	r2, #0
 801814c:	4b06      	ldr	r3, [pc, #24]	; (8018168 <scalbn+0xe8>)
 801814e:	e7b2      	b.n	80180b6 <scalbn+0x36>
 8018150:	c2f8f359 	.word	0xc2f8f359
 8018154:	01a56e1f 	.word	0x01a56e1f
 8018158:	8800759c 	.word	0x8800759c
 801815c:	7e37e43c 	.word	0x7e37e43c
 8018160:	43500000 	.word	0x43500000
 8018164:	ffff3cb0 	.word	0xffff3cb0
 8018168:	3c900000 	.word	0x3c900000

0801816c <copysign>:
 801816c:	ec51 0b10 	vmov	r0, r1, d0
 8018170:	ee11 0a90 	vmov	r0, s3
 8018174:	ee10 2a10 	vmov	r2, s0
 8018178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801817c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8018180:	ea41 0300 	orr.w	r3, r1, r0
 8018184:	ec43 2b10 	vmov	d0, r2, r3
 8018188:	4770      	bx	lr
	...

0801818c <_sbrk>:
 801818c:	4b04      	ldr	r3, [pc, #16]	; (80181a0 <_sbrk+0x14>)
 801818e:	6819      	ldr	r1, [r3, #0]
 8018190:	4602      	mov	r2, r0
 8018192:	b909      	cbnz	r1, 8018198 <_sbrk+0xc>
 8018194:	4903      	ldr	r1, [pc, #12]	; (80181a4 <_sbrk+0x18>)
 8018196:	6019      	str	r1, [r3, #0]
 8018198:	6818      	ldr	r0, [r3, #0]
 801819a:	4402      	add	r2, r0
 801819c:	601a      	str	r2, [r3, #0]
 801819e:	4770      	bx	lr
 80181a0:	20000c18 	.word	0x20000c18
 80181a4:	20001070 	.word	0x20001070

080181a8 <_init>:
 80181a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181aa:	bf00      	nop
 80181ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ae:	bc08      	pop	{r3}
 80181b0:	469e      	mov	lr, r3
 80181b2:	4770      	bx	lr

080181b4 <_fini>:
 80181b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181b6:	bf00      	nop
 80181b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ba:	bc08      	pop	{r3}
 80181bc:	469e      	mov	lr, r3
 80181be:	4770      	bx	lr
